[
  {
    "objectID": "gis_in_r.html",
    "href": "gis_in_r.html",
    "title": "R で GIS",
    "section": "",
    "text": "R で GIS を使う方法についてまとめています。\n\n\n\n\n   \n     \n     \n       並び替え\n       デフォルト\n         \n          公開日 - 日付（昇順）\n        \n         \n          公開日 - 日付（降順）\n        \n         \n          トピック\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nトピック\n\n\n公開日\n\n\n\n\n\n\n導入 + ハンドリング\n\n\n2024/05/16\n\n\n\n\n\n一致なし"
  },
  {
    "objectID": "tips/tips.html",
    "href": "tips/tips.html",
    "title": "Tips",
    "section": "",
    "text": "おすすめ記事\n\n\n\n\n\n\n\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\n\n\n\n\n【PDF】Quarto で論文を書く\n\n\n\n\n\nPrevoius\n\n\n\nNext\n\n\n\n\n\n\n\n\n\n\n開発環境\n\n\n\n最終更新日：2024年07月08日\n\nUbuntu 22.04\nRStudio 2024.04.2+764 (Chocolate Cosmos) for Ubuntu Jammy\nR version 4.4.1 (2024-06-14)\nPython 3.10.12\njulia version 1.10.4\nQuarto 1.5.53\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【PDF】Quarto で論文を書く\n\n\n\nQuarto\n\n\nR\n\n\nLaTeX\n\n\n\nQuarto を使って論文を書く方法（マークダウン、表、図）をまとめました。\n\n\n\n\n\n\n2024/06/29\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n国勢調査データのクレンジング\n\n\n\nR\n\n\n\n人口データのファイルを一括で読み込んで、分析で使いやすくするためのクレンジングコードです。\n\n\n\n\n\n\n2024/06/22\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython のための開発コンテナ\n\n\n\nPython\n\n\nVSCode\n\n\nDocker\n\n\nUbuntu\n\n\n\nPython のための開発コンテナを作成する手順を紹介します。\n\n\n\n\n\n\n2024/06/21\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n環境構築における備忘録\n\n\n\n備忘録\n\n\n\n環境構築において直面したエラー等を随時まとめていきます。\n\n\n\n\n\n\n2024/06/19\n\n\n\n\n\n\n\n\n\n\n\n\n【WSL】割り当てるメモリを増やす方法\n\n\n\nWSL\n\n\nWindows\n\n\n備忘録\n\n\n\nWSL はデフォルトで PC の半分のメモリが割り当てられています。\n\n\n\n\n\n\n2024/05/31\n\n\n\n\n\n\n\n\n\n\n\n\n【ワークフロー】VSCode で GitHub を使う\n\n\n\nVSCode\n\n\nGitHub\n\n\n\nVSCode で GitHub を使った作業の流れを紹介します。\n\n\n\n\n\n\n2024/05/25\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeX Live を使わずに LaTeX 環境を作る！\n\n\n\nWindows\n\n\nMac\n\n\nUbuntu\n\n\nLaTeX\n\n\n\nTinyTeX を使って R 環境以外でも \\(\\LaTeX\\) を使えるようにしよう！\n\n\n\n\n\n\n2024/05/20\n\n\n\n\n\n\n\n\n\n\n\n\n【R】アーカイブされたパッケージを使う\n\n\n\nR\n\n\n\nパッケージがインストールできない？\n\n\n\n\n\n\n2024/05/16\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【R】プロジェクトを使う\n\n\n\nR\n\n\n\nR プロジェクトを使って作業環境を整えよう！\n\n\n\n\n\n\n2024/05/15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【日本語版】クリーンなスライドを Quarto で作る！\n\n\n\nQuarto\n\n\nR\n\n\n\n日本語でも使えるスライドをご紹介！\n\n\n\n\n\n\n2024/05/14\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい\n\n\n\nQuarto\n\n\nReveal.js\n\n\nR\n\n\n\nQuarto 経由で Beamer 風のスライドを作ろう！\n\n\n\n\n\n\n2024/05/12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【Quarto】使い方解説！Reveal.js でスライドを作ろう\n\n\n\nQuarto\n\n\nReveal.js\n\n\nR\n\n\n\nスライドも Quarto で作れる！\n\n\n\n\n\n\n2024/05/12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【Quarto】チャンクオプションまとめてみた【R Markdown】\n\n\n\nR\n\n\nQuarto\n\n\nR Markdown\n\n\n備忘録\n\n\n\nチャンクオプションは忘れやすい！\n\n\n\n\n\n\n2024/05/09\n\n\n\n\n\n\n\n\n\n\n\n\n【R Markdown】相互参照を使いこなす【Quarto】\n\n\n\nR Markdown\n\n\nQuarto\n\n\nR\n\n\n\n図や表に自動で番号を振りたい！\n\n\n\n\n\n\n2024/05/09\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto で Python を使ってみよう！\n\n\n\nQuarto\n\n\nPython\n\n\nUbuntu\n\n\nVSCode\n\n\nR\n\n\n\nR ユーザーはこれでよくない？\n\n\n\n\n\n\n2024/05/08\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【R パッケージ】インストールも読み込みも一撃で？【pacman】\n\n\n\nR\n\n\n\ninstall.packages() はもう不要！\n\n\n\n\n\n\n2024/05/07\n\n\n\n\n\n\n\n\n\n\n\n\nR でGIS を動かす【ハンドリング】\n\n\n\nR\n\n\nGIS\n\n\n\nR で GIS を動かそう！\n\n\n\n\n\n\n2024/05/06\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\nR\n\n\nDocker\n\n\nWindows\n\n\nMac\n\n\nUbuntu\n\n\nVSCode\n\n\nGitHub\n\n\n\nローカル環境から卒業！\n\n\n\n\n\n\n2024/05/04\n\n\n\n\n\n\n\n\n\n\n\n\n政令指定都市・中核市の整理\n\n\n\nR\n\n\n備忘録\n\n\n\nRで市区町村データを整理するための政令指定都市・中核市をまとめたコードです。\n\n\n\n\n\n\n2024/04/14\n\n\n\n\n\n\n\n\n\n\n\n\nR MarkdownでPDF出力【LaTeX】\n\n\n\nR\n\n\nR Markdown\n\n\nQuarto\n\n\n\nレポートでR Markdown、使ってますか？\n\n\n\n\n\n\n2024/03/29\n\n\n\n\n\n\n\n\n一致なし"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html",
    "href": "tips/240329_rmarkdown_pdf/index.html",
    "title": "R MarkdownでPDF出力【LaTeX】",
    "section": "",
    "text": "こんにちは。\n大学生、大学院生の方で、Rを使う授業のレポートを作ったりする方はR Markdown使うことが多いかもしれません。\nしかし、私の周りではPDF出力で結構困っている人がいたのでここでまとめます。\n環境構築、\\(\\LaTeX\\) については詳しく書かないので、そこは他のサイトなどを参照してください。\n目標はとりあえずPDFで出力することです。\nターゲット"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#事前準備",
    "href": "tips/240329_rmarkdown_pdf/index.html#事前準備",
    "title": "R MarkdownでPDF出力【LaTeX】",
    "section": "事前準備",
    "text": "事前準備\n以下をRのコンソールで実行してください。\n\n\nR\n\n# TinyTeXパッケージをインストール\n# インストール済みの方は省略\ninstall.packages('tinytex')\n\n\n\nR\n\n# TinyTeXのインストール\ntinytex::install_tinytex()\ntinytex::tlmgr_install('ipaex')\n\nフォントであるipaexの部分はharanoajiなど他の選択肢もあります。\n\n\nR\n\n# bookdownパッケージのインストール（任意）\n# インストール済みの方は省略。\ninstall.packages('bookdown')"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#yamlヘッダの設定",
    "href": "tips/240329_rmarkdown_pdf/index.html#yamlヘッダの設定",
    "title": "R MarkdownでPDF出力【LaTeX】",
    "section": "YAMLヘッダの設定",
    "text": "YAMLヘッダの設定\nヘッダの部分を以下のように変更してください。\n---\ntitle: \"タイトル\"\nauthor: \"筆者\"\ndate: 2024-06-23\noutput: \n  bookdown::pdf_document2:\n    latex_engine: xelatex\n    toc: false\n    number_section: true\n    keep_tex: true\nheader-includes: \n  - \\usepackage{bookmark} \n  - \\usepackage{xltxtra} \n  - \\usepackage{zxjatype} \n  - \\usepackage[ipaex]{zxjafont}\n---\nbookdown::pdf_document2の部分はpdf_documentでもいけます（後述）。 以上を設定出来たら、knitしてください。 無事PDFファイルが出力されるはずです！"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#事前準備-1",
    "href": "tips/240329_rmarkdown_pdf/index.html#事前準備-1",
    "title": "R MarkdownでPDF出力【LaTeX】",
    "section": "事前準備",
    "text": "事前準備\nR Markdownと同じです。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#yamlヘッダ",
    "href": "tips/240329_rmarkdown_pdf/index.html#yamlヘッダ",
    "title": "R MarkdownでPDF出力【LaTeX】",
    "section": "YAMLヘッダ",
    "text": "YAMLヘッダ\n---\ntitle: \"タイトル\"\nauthor: \"筆者\"\ndate: 2024-06-23\nformat: \n  pdf: \n    documentclass: article\n    keep-tex: true\n    include-in-header: \n      - text: | \n          \\usepackage{bookmark} \n          \\usepackage{xltxtra} \n          \\usepackage{zxjatype} \n          \\usepackage[ipaex]{zxjafont} \nnumber-sections: true\n---\nやっていることはほとんどR Markdownの場合と同じですが、書き方は異なります。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#global-options",
    "href": "tips/240329_rmarkdown_pdf/index.html#global-options",
    "title": "R MarkdownでPDF出力【LaTeX】",
    "section": "Global Options",
    "text": "Global Options\n後々困らないよう設定を行います。\n\n上部にあるToolsからGlobal Options...→Sweaveと進む\nTypeset LaTeX into PDF usingをXeLaTeXに変更\nUse tinytex when compiling .tex filesにチェック\n\nこれで前述の設定と整合的になります。また、プロジェクトオプションの方も変更を求められるかもしれません。それにも従って、ここでの設定と整合的になるよう変更してください。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#sec-bookdown",
    "href": "tips/240329_rmarkdown_pdf/index.html#sec-bookdown",
    "title": "R MarkdownでPDF出力【LaTeX】",
    "section": "bookdown::pdf_document2",
    "text": "bookdown::pdf_document2\nR Markdownのヘッダにおいて、pdf_documentではなくbookdown::pdf_document2を使用するのには理由があります。\nそれは相互参照を使うためです。\n例えば、\n\nplot(cars)\n\n\n\n\n\n\n\n図 1: データのプロット\n\n\n\n\n\nこのプロットを、文中で引用したいとします。\n「図1：データのプロット」などと書き、「図1から～」と引用していたとすると、その前に別の図を入れる必要が出てきた場合に、全て1つずつ変更していくのは手間がかかります。\nそこで相互参照を用いれば、自動で番号を振って、自由に引用できるようになるわけです。\n以下はR Markdown クックブックから引用したサンプルコードです。\n図 \\@ref(fig:cars-plot) を見よ.\n\n```{r cars-plot, fig.cap=\"自動車のデータ\", echo=FALSE}\npar(mar = c(4, 4, .2, .1))\nplot(cars)  # a scatterplot\n```\n\n次に数式\\@ref(eq:mean) を見よ.\n\n\\begin{equation}\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n} (\\#eq:mean)\n\\end{equation}\n\nさらに表 \\@ref(tab:mtcars) を見よ.\n\n```{r mtcars, echo=FALSE}\nknitr::kable(mtcars[1:5, 1:5], caption = \"mtcars データ\")\n```\n{r cars-plot, fig.cap=\"自動車のデータ\", echo=FALSE}のcars-plotの部分がチャンク名です1。 同様にmtcarsもチャンク名なわけですが、\\@ref()を用いれば該当する図や表、数式を引用できます。\n先ほどのプロットを\\@ref()を使って引用してみると、図 1 となるわけです2。\n注意点は、\\@ref()の中で図ならfig:、表ならtab:、数式ならeq:と始めないと引用できない点です。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#パッケージが見つからないエラー",
    "href": "tips/240329_rmarkdown_pdf/index.html#パッケージが見つからないエラー",
    "title": "R MarkdownでPDF出力【LaTeX】",
    "section": "パッケージが見つからないエラー",
    "text": "パッケージが見つからないエラー\n多分これがエラーの中で一番多いと思います。私自身も何回も遭遇しました。\n例えば以下のようなエラーです。\nfinding package for bookmark.sty\nERROR: \ncompilation failed- no matching packages\nLaTeX Error: File `bookmark.sty' not found.\nnot found です。あるはずなんですけどね…。\n&lt;対処法&gt;\n\ntinytex::tlmgr_install('パッケージ名') で見つからないパッケージのみ別でインストール\n\n上の例で言えば、bookmark.sty のみをインストールするということです。\nこの際注意点として、.sty は抜いてください。tinytex::tlmgr_install('bookmark') とする、ということです。\n\ntinytex::tlmgr_update() を実行\n\n既存のパッケージをアップデートする方法です。\n\nTinyTeX の再インストール\n\n現状最有力の方法です。\ntinytex::tlmgr_update() を実行した際、コンソールに tinytex::reinstall_tinytex(repository=\"illinois\")3 を試してみろと出る場合があります。これに従って、TinyTeX を再インストールしてください。\n時間は少しかかりますが、最新のバージョンにアップデート可能です。\nTinyTeX を初インストールした直後でも効果があった例があるので、1と2でできなかった場合はぜひ再インストールしてみてください。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#footnotes",
    "href": "tips/240329_rmarkdown_pdf/index.html#footnotes",
    "title": "R MarkdownでPDF出力【LaTeX】",
    "section": "注",
    "text": "注\n\n\n他の部分はチャンクオプションと呼ばれるものですが、今回は触れません。↩︎\nちなみにQuartoでは、チャンク名をfig-hogehogeやtbl-hogehogeなどにすれば、@fig-hogehogeや@tbl-hogehogeだけで簡単に引用できます↩︎\nillinois の部分は異なるかもしれません。↩︎"
  },
  {
    "objectID": "tips/240512_revealjs/index.html",
    "href": "tips/240512_revealjs/index.html",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "",
    "text": "皆さん、スライドを作るときに何を使っていますか？PowerPoint ですか？\\(\\LaTeX\\) の Beamer ですか？\nこちらの記事で Reveal.js を使ったスライドをご紹介しましたが、今回はスライドを作る上での tips をご紹介します。\n今回は Quarto の使い方と併せて、スライドの作り方を書いていこうと思います。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#ドキュメントを開く",
    "href": "tips/240512_revealjs/index.html#ドキュメントを開く",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "ドキュメントを開く",
    "text": "ドキュメントを開く\nRStudio を開き、任意のディレクトリをワーキングディレクトリとして設定します。\nRStudio 左上の  より、「Quarto Document」を選択してください。\nさらに「Presentation」を選び、タイトル、著者名を必要に応じて付け、Reveal JS を選びます。エンジンは Knitr1、Use visual markdown editor はオフにしておいてください。\n最後に Create を押します。\nすると、次のようなヘッダーだけがある文書が出てくると思います。\n\n\nQuarto\n\n---\ntitle: \"[任意のタイトル]\"\nformat: revealjs\n---\n\nこれでドキュメントは無事開けました。そしたら  を押して、任意のフォルダに保存してください。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#テーマ",
    "href": "tips/240512_revealjs/index.html#テーマ",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "テーマ",
    "text": "テーマ\nこのままでもスライドは作れますが、味気ないスライドになってしまいますので、テーマを設定します。\nテーマは、先ほどのヘッダーを次のように書き加えることで使うことができます。\n\n\nQuarto\n\n---\ntitle: \"[任意のタイトル]\"\nformat: \n  revealjs: \n    theme: night  # この部分を変える\n---\n\nもとのヘッダーと変えた時のヘッダーでそれぞれ  Render してみてください。\nちなみに、Quarto 公式では、以下のようなテーマが紹介されています。\n\n\n\nbeige\nblood\ndark\ndefault\nleague\nmoon\n\n\n\nnight\nserif\nsimple\nsky\nsolarized\n\n\n\nそれぞれ特徴があるので、いろいろ試してみてください。\n今回は、私が作成した Reveal.js のテンプレートを使っていきます。現状英語にしか対応していないのが難点ですが、いずれ日本語に対応したものも作る予定です。\nGitHub リポジトリにアクセスし、クローンするか、&lt;&gt; Code より ZIP ファイルをダウンロードしてください2。使うのは modern_theme.scss です。このファイルを準備し、先ほどのドキュメントを保存したフォルダと同じフォルダに移しておいてください。\nそしたらヘッダーを次のように修正してください。\n\n\nQuarto\n\n---\ntitle: \"[任意のタイトル]\"\nformat: \n  revealjs: \n    theme: \n      - default\n      - modern_theme.scss\n    slide-number: true  # スライド番号を付ける\n    date-format: long   # 日付のフォーマットを整える\n---\n\nこれでテーマの設定もできました。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#表紙",
    "href": "tips/240512_revealjs/index.html#表紙",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "表紙",
    "text": "表紙\n表紙はヘッダーに書いた要素で構成されます。title の他には、author（著者）や date（日付）、 institute（所属組織） を追加することを想定しています3。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#本スライド",
    "href": "tips/240512_revealjs/index.html#本スライド",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "本スライド",
    "text": "本スライド\nスライドでは、## を使ってページを区切っていきます4。\n例えば次のように書きます。\n\n\nQuarto\n\n---\ntitle: \"Title\"\nsubtitle: \nformat: \n  revealjs: \n    theme: \n      - default\n      - modern_theme.scss\n    slide-number: true  # スライド番号を付ける\n    date-format: long   # 日付のフォーマットを整える\n---\n\n## First page\n\n\"First page\" is the headline text. Note that a half-width space is required before the heading.\n\n## Second page\n\nYou can break a line by leaving one line blank.\n\nLike this.\n\n\"First page\" is ~ と You can break ~ が本文です。\n通常の Markdown と基本的な使い方は一緒ですが、改行するには空行を入れる必要があります。1回改行しただけでは、スライド上では改行されません。見出し部分にも適用されますので、1行空けてから ## 見出し と書くようにしてください。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#色遣い",
    "href": "tips/240512_revealjs/index.html#色遣い",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "色遣い",
    "text": "色遣い\nこのテーマは基本的に派手なデザインではありませんが、2色を文字に使えます。alert と、accent です。\nこれらの色にしたい文字や文を [] で囲んだ後、{.alert} および {.accent} と入力します。[alert]{.alert} といった感じです。\n基本的には alert があれば概ね大丈夫な気がしますが、accent も入れておきました。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#callout",
    "href": "tips/240512_revealjs/index.html#callout",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "callout",
    "text": "callout\ncallout ブロックを紹介します。\n\n\n\n\n\n\nNote\n\n\n\nこれは Note\n\n\n\n\n\n\n\n\nTip\n\n\n\nこれは Tip\n\n\n\n\n\n\n\n\nWarning\n\n\n\nこれは Warning\n\n\n\n\n\n\n\n\nImportant\n\n\n\nこれは Important\n\n\n\n\n\n\n\n\nCaution\n\n\n\nこれは Caution\n\n\nこれらのことです。\n要点をまとめたいときや、断り事を書きたいときなどに重宝します。\n書き方は、\n\n\nQuarto\n\n::: {.callout-note}\nこれは Note\n:::\n\n::: {.callout-tip}\nこれは Tip\n:::\n\n::: {.callout-warning}\nこれは Warning\n:::\n\n::: {.callout-important}\nこれは Important\n:::\n\n::: {.callout-caution}\nこれは Caution\n:::\n\nこうです。\nちなみに、ブロックのタイトルを変えたいときや、長いので折りたたみたいときは、\n\n\nQuarto\n\n::: {.callout-note title=\"ここがタイトル\" collapse=true}\nこれは折りたためる Note\n:::\n\nと書くことで、\n\n\n\n\n\n\nここがタイトル\n\n\n\n\n\nこれは折りたためる Note\n\n\n\nとできます。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#リスト",
    "href": "tips/240512_revealjs/index.html#リスト",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "リスト",
    "text": "リスト\n箇条書きなどのリスト形式が使えます。書き方はシンプルで、\n\n\nMarkdon\n\n箇条書きリスト\n\n- Item 1\n\n    - Item 1-1\n    \n- Item2\n\n順序付きリスト\n\n1. Item 1\n\n2. Item 2\n\n箇条書きリストでは2段階を、順序付きリストでは1段階の利用を想定しています。\nアイテムの前には半角スペースを忘れないでください。また、2段階目を使うときには4つ分のスペースが必要です。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#列を分ける",
    "href": "tips/240512_revealjs/index.html#列を分ける",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "列を分ける",
    "text": "列を分ける\n箇条書きを10個も書くと、2列にしたいことがありますよね。そんなときは次のようにしてください。\n\n\nQuarto\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n- Item 1\n\n- Item 2\n:::\n\n:::{.column width=\"50%\"}\n- Item 3\n\n- Item 4\n:::\n::::\n\nこのように書くと、\n\n\n\nこのように\nなります。\n\n\n\nwidth を変えれば\n列の幅を調節できます。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#コード",
    "href": "tips/240512_revealjs/index.html#コード",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "コード",
    "text": "コード\nR や Python のコードも書けます。\n特筆すべきは、コードをハイライトできることです。\n例えば、次のコードをご覧ください。\n\n\n\n上のコードでは select() と filter() の行がハイライトされています。\nまた、スライド上で右に進んでみてください。順にハイライトされています。\nこれらのコードは、次のように書いています。\n\n\nQuarto\n\n```{.r code-line-numbers=\"5-6\"}\nlibrary(tidyverse)\nlibrary(gt)\n\ndf &lt;- mtcars |&gt; \n  select(1:5) |&gt; \n  filter(disp &gt;= 400)\n\ngt(df)\n```\n\n```{.r code-line-numbers=\"|5|6\"}\nlibrary(tidyverse)\nlibrary(gt)\n\ndf &lt;- mtcars |&gt; \n  select(1:5) |&gt; \n  filter(disp &gt;= 400)\n\ngt(df)\n```\n\nこのように code-line-numbers で指定することができます。|5|6 は5行目と6行目が順にハイライトされるということですね。\n他にも細やかな設定ができるので、Quarto の公式ガイドをご覧ください。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#図や表",
    "href": "tips/240512_revealjs/index.html#図や表",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "図や表",
    "text": "図や表\n図や表がどのように表示されるのか見てみましょう。\nデフォルトでは図のキャプションが左寄りになっていますが、中央になるように修正しています。\nまた、ここでは例としてコードを載せていますが、デフォルトではコード表示はオフです。表示したい場合はチャンク内で echo: true を設定してください5。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#footnotes",
    "href": "tips/240512_revealjs/index.html#footnotes",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "注",
    "text": "注\n\n\nPython の場合は Jupyter↩︎\nクローンするほどでもないので、ダウンロードでいいと思います。リポジトリ整えてなくてすみません^^;↩︎\n私のテーマの場合↩︎\n# も使えるのですが、今回のテーマでの使用は想定していません。↩︎\nチャンクオプションについて、詳しくはこちら↩︎"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html",
    "href": "tips/240509_cross_reference/index.html",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "",
    "text": "R Markdown や Quarto で文書を書いているとき、相互参照をどうしようと思ったことはありませんか？僕はありました。\n手書きで「図1：Hogehoge」と書くとなんだかスマートさに欠けるし、前に図を挿入したくなった時に数字を書き換えなければならず不便ですよね。\n今回は R Markdown ＆ Quarto における相互参照の使い方をご紹介します。\nR Markdown と Quarto で設定が異なりますので、それぞれ見ていきましょう。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#yaml-ヘッダー",
    "href": "tips/240509_cross_reference/index.html#yaml-ヘッダー",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "YAML ヘッダー",
    "text": "YAML ヘッダー\nまず、新しいファイルを開くと出てくる --- で囲まれた部分を、YAML ヘッダーと呼びます。\n\n\n\nR Markdown ファイルを開くとこれが出てきますよね\n\n\nR Markdown はデフォルトでは相互参照が使えません（私調べ）（そんな馬鹿な）。そのため、パッケージを使って設定します。\nデフォルトの設定はこのような感じになっています。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nauthor: \"Yosuke Abe\"\ndate: \"2024-05-22\"\noutput: html_document\n---\n\nこれを bookdown パッケージを用いて変更します。\nまずはインストール。\n\n\nR\n\ninstall.packages(\"bookdown\")\n\n次にヘッダーを次のように変更。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nauthor: \"Yosuke Abe\"\ndate: \"2024-05-22\"\noutput:\n  bookdown::html_document2: default\n---\n\nこれで準備が整いました。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#相互参照",
    "href": "tips/240509_cross_reference/index.html#相互参照",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "相互参照",
    "text": "相互参照\nでは何かプロットして、それを参照してみましょう。例えば次の図をプロットしたいとします。\n\n\n\n\n\n\n\n\n\nこれを参照するために R Markdown 内で入力すると次のようになります。\n\n\nR Markdown\n\n```{r pressure, fig.cap=\"図のキャプションです。\"}\nplot(pressure)\n```\n\nここでのポイントは、{r pressure} の部分です。デフォルトでは {r} だけだと思いますが、スペースを空けることでチャンク1に名前を付けることができ、このチャンク名を使って参照します。また、カンマで区切った後の fig.cap は図のキャプションです。\n文中で参照したいときは、次のように書きます。\n\n\nR Markdown\n\n表 \\@ref(fig:pressure) を参照する。\n\nすると…\n\nこのように、文中での参照ができます。前に新たに図が入っても、自動で番号を振り直してくれます。\n\n\n\n\n\n\n図以外の場合\n\n\n\n\n\nもちろん、表や数式の場合にも使えます。\n\n表の場合\n\n様々な表の関数がありますが、R Markdown では基本的に関数内でキャプションを付けます。\n図の場合とは違い、参照の際には tab:を使います。\n\n\n\n\nQuarto\n\n```{r mtcars}\nknitr::kable(mtcars[1:5, 1:5], caption = \"mtcars データ\")\n```\n\n表 \\@ref(tab:mtcars) を参照する。\n\n\n数式の場合\n\n\\(\\LaTeX\\) 形式で書きます。HTML 出力でも、この書き方が可能です。\n$ で挟む方法もありますが、これだと参照ができません2。\n参照の際には、eq: を使います。\n\n\n\n\nQuarto\n\n\\begin{equation}\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n} (\\#eq:mean)\n\\end{equation}\n\n式 \\@ref(eq:mean) を参照する。\n\n以上のやり方で表や数式の参照にも対応しています。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#yaml-ヘッダー-1",
    "href": "tips/240509_cross_reference/index.html#yaml-ヘッダー-1",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "YAML ヘッダー",
    "text": "YAML ヘッダー\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nformat: html\n---\n\nデフォルトでは著者も日付もないのでめちゃくちゃシンプルですね3。\nQuarto では、相互参照のためにこれをいじる必要はありません（素晴らしい！）。\nその代わり、チャンクの方をいろいろいじっていきます。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#チャンクオプション",
    "href": "tips/240509_cross_reference/index.html#チャンクオプション",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "チャンクオプション",
    "text": "チャンクオプション\n改めてになりますが、``` で囲まれたコード部分をチャンクと言います。\nR Markdown では、{r}の中にチャンク名を書きましたが、Quarto ではチャンクの中に書いていきます4。\n\n\nR Markdown\n\n```{r}\n#| label: fig-pressure\n#| fig-cap: \"図のキャプションです。\"\n\nplot(pressure)\n```\n\nポイントは以下の2つです。\n\n#| の後ろにオプションを指定して書くことができます。\nlabel は fig- で始めないと参照できません。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#相互参照-1",
    "href": "tips/240509_cross_reference/index.html#相互参照-1",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "相互参照",
    "text": "相互参照\n文中では以下のように書いていきます。\n\n\nQuarto\n\n@fig-pressure を参照する。\n\n@ だけだなんて、なんてシンプルなのでしょう。以下のように出力されます。\n\nとても簡単に引用できました。よく見ると、図 @fig-pressure とは書かずとも Figure 1 となっています。図～とは書かなくてよいということですね。英語になっているのが気になる方は、後のセクションで解説しているのでご覧ください。\n\n\n\n\n\n\n図以外の場合\n\n\n\n\n\nもちろん、表や数式の場合にも使えます。\n\n表の場合\n\nQuarto では、表もチャンクオプションを使ってキャプションがつけられます。\nR Markdown では、参照の際に tab: を使っていたのに対し、Quarto では tbl- となります。ややこしい！\n\n\n\n\nQuarto\n\n```{r}\n#| label: tbl-mtcars\n#| tbl-cap: \"mtcars データ\"\n\nknitr::kable(mtcars[1:5, 1:5])\n```\n\n@tbl-mtcars を参照する。\n\n\n数式の場合\n\n\\(\\LaTeX\\) 形式でも書けますが、$$ で囲む方法が便利です。\n数式自体は \\(\\LaTeX\\) 表記です。\n自分で打ってみるとわかりますが、プレビューできるのもいい点です。\n\n\n\n\nQuarto\n\n$$\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n}\n$$ {#eq-mean}\n\n@eq-mean を参照する。\n\n以上のやり方で表や数式も参照できます。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#footnotes",
    "href": "tips/240509_cross_reference/index.html#footnotes",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "注",
    "text": "注\n\n\n``` で囲まれているコード部分↩︎\nする方法をご存じの方がいらっしゃいましたら、是非コメントください。↩︎\nもちろん author: \"著者\" や date: 2024-05-09 などで入力できますよ。↩︎\nR Markdown と同様の書き方もできるのですが、私は今回紹介している方法の方がすっきりしていて好みです。↩︎"
  },
  {
    "objectID": "tips/240531_wsl_memory/index.html",
    "href": "tips/240531_wsl_memory/index.html",
    "title": "【WSL】割り当てるメモリを増やす方法",
    "section": "",
    "text": "はじめに\nWSL & Docker を使用していて、使えるメモリを増やしたい、そんな時にどうすればよいのか解説します。\n上にも書いてあるように、デフォルトでは PC の半分のメモリが WSL には割り当てられています。\nすなわちメモリが 8GB の PC であれば 4GB が、16GB の PC であれば 8GB が割り当てられています。\nプロジェクトによってはより多くのメモリを使いたいこともあると思うので、以下の方法を実行してみて下さい。\nちなみに Mac では Docker Desktop の設定から Resources で変更できます。\n\n\n手順\n\nエクスプローラーを開く\nc: → ユーザー → 自分のユーザー と進む\n\n僕の場合だったら C:\\Users\\yo5uk\n\n左上の「新規作成」から「テキストドキュメント」を選び、ファイル名を .wslconfig とする\n\n拡張子も全て消して名前を付けてください。.wslconfig.txt ではだめです。\nもし拡張子がデフォルトで表示されない設定の場合は、表示されるよう設定を変更してから行って下さい。\nエクスプローラー右上の「表示」→「表示」→「ファイル名拡張子」をオンにします。\n\nメモ帳など任意のテキストエディタで開く\n中身を以下のように記述\n\nGB の部分は好きに置き換えてください。\n8GB のPC を使っている場合には、もちろん 12GB は割り当てられません。\n\n\n[wsl2]\nmemory=12GB\nswap=8GB\n\n保存して閉じる\n\n以上です。これで WSL に割り当てられるメモリが増えました。\nちなみに memory は読んで字のごとくメモリを表しますが、ここでの swap は、WSL2 が使用するスワップファイルのサイズを設定することを意味します。スワップファイルを適切に設定することで、物理メモリが不足した場合でもシステムの安定性を維持することができます。\n\n\nおわりに\nWSL に割り当てるメモリを増やす方法をご紹介しました。\nプロジェクトによっては必要になることもあると思うので、ご参考まで。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html",
    "href": "tips/240509_chunk_option/index.html",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "",
    "text": "どうも Quarto ユーザーです。普段チャンクオプションをよく忘れるので、備忘録も兼ねてまとめます。おそらく R Markdown も同じです。\n直感的な分かりやすさ重視です。\n私が普段使うものに偏っているかもしれませんが、ご了承ください。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#r-markdown-の書き方",
    "href": "tips/240509_chunk_option/index.html#r-markdown-の書き方",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "R Markdown の書き方",
    "text": "R Markdown の書き方\n\n\nR Markdown\n\n```{r cars, echo=TRUE}\nplot(cars)\n```\n\ncars の部分がチャンクのラベル（名前）、echo=TRUE の部分がチャンクオプションです。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#quarto-の書き方",
    "href": "tips/240509_chunk_option/index.html#quarto-の書き方",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "Quarto の書き方",
    "text": "Quarto の書き方\n\n\nQuarto\n\n```{r}\n#| label: fig-cars\n#| echo: true\n\nplot(cars)\n```\n\nチャンク内で #| の後に書きます。ちなみに、こちらは TRUE や FALSE が小文字で大丈夫です。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#共通",
    "href": "tips/240509_chunk_option/index.html#共通",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "共通",
    "text": "共通\nR Markdown と Quarto で共通のオプションをざっくり表にしました。 これを使えば普段は問題なさそうというものをピックアップしています。\n\nチャンクオプションまとめ\n\n\nオプション\nデフォルト\n効果\n\n\n\n\necho\nTRUE\n\nコードを出力に含めるか否か\nFALSE にすると、実行結果のみが表示される\n\n\n\ninclude\nTRUE\n\nコード、結果を出力に含めるか否か\nFALSE にすると、何も表示されない\nパッケージの読み込みなど重要じゃない箇所で重宝\n\n\n\nwarning\nTRUE\n\n警告を出力に表示するか否か\n基本 FALSE が多い\nグローバルに指定することが多い（後述）\n\n\n\nmessage\nTRUE\n\nメッセージを出力に表示するか否か\n結果に付随してくる文を消すために FALSE が多い\nグローバルに指定することが多い（後述）\n\n\n\ncache\nFALSE\n\n実行結果をキャッシュするか否か\nTRUE にすると、結果が保存され2回目以降の出力が高速化\n重い作業でコンパイルに時間がかかるときに使っている\n\n\n\neval\nTRUE\n\nコードを実際に評価するか否か\nコードを見せたいだけのときに FALSE にすると便利"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#違うやつ",
    "href": "tips/240509_chunk_option/index.html#違うやつ",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "違うやつ",
    "text": "違うやつ\nよく使うものの中でもR Markdown と Quarto で異なるものをピックアップします。\n\nfig 系\n\nR Markdown では fig.cap\nQuarto では fig-cap\nこれ以外にも R Markdown はピリオドで、Quarto ではハイフンのものは多々あります。\n\nチャンクラベル1\n\nR Markdown は {r hogehoge}2\nQuarto はコード内で #| label: fig-hogehoge\n\nご覧の通り、Quarto の方は fig- を前に付ける必要があります3。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#r-markdown",
    "href": "tips/240509_chunk_option/index.html#r-markdown",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "R Markdown",
    "text": "R Markdown\nRStudio であれば新しい R Markdown ファイルを開くと既に出ていますが、以下の関数を使用します。\n\n\nR\n\nknitr::opts_chunk$set(echo = TRUE)\n\n括弧内に、カンマで区切りながらオプションを TRUE, FALSE などで指定していきます。echo はデフォルトで TRUE なので、これだけなら無くても大丈夫です。笑\n例えば、全てのコードについてコードは出力せず結果だけ出力し、警告やメッセージは非表示にするためには次のようにします。\n\n\nR\n\nknitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#quarto",
    "href": "tips/240509_chunk_option/index.html#quarto",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "Quarto",
    "text": "Quarto\nQuarto では YAML ヘッダーで設定が可能です。YAML ヘッダーは Markdown ファイルを開いたときの最上部に出てくる --- で囲まれた部分です。\n次のように設定します。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nformat: html\nexecute: \n  echo: false\n  warning: false\n  message: false\n---\n\nexecute: で指定することができます。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#おわりに",
    "href": "tips/240509_chunk_option/index.html#おわりに",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "おわりに",
    "text": "おわりに\n今回は私がよく使うチャンクオプションを中心にご紹介しました。\n今後いろいろ使いながらアップデートしていきたいと思います。\nご参考になれば幸いです。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#footnotes",
    "href": "tips/240509_chunk_option/index.html#footnotes",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "注",
    "text": "注\n\n\n相互参照のために使うので、必ずつけなければならないものではありません。相互参照についてはこちら↩︎\nスペースを空けてチャンクラベルを入力します。↩︎\n表なら tbl-hogehoge とします。↩︎"
  },
  {
    "objectID": "tips/240508_jupyter/index.html",
    "href": "tips/240508_jupyter/index.html",
    "title": "Quarto で Python を使ってみよう！",
    "section": "",
    "text": "注意\n\n\n\nこの記事は Windows ユーザー向けです。ただ、事前準備が異なるだけで、それ以降は Mac ユーザーの方でも参考になると思います。\n\n\nPython の環境構築って初心者にはなんだかめんどくさいですよね。私も Python はあまり使わないので、環境構築には苦労しています。\n今回はR Markdown に似ているでおなじみ（？）の Quarto を用いた、Python の環境構築の方法をご紹介します。\nAnaconda をインストールして Jupiter Notebook を使っている方も多いと思いますが、今回は Anaconda ではなく Quarto で Python を使ってみましょう。"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#前提",
    "href": "tips/240508_jupyter/index.html#前提",
    "title": "Quarto で Python を使ってみよう！",
    "section": "前提",
    "text": "前提\n\nVSCode をインストールしていること\nWSL2, Ubuntu をインストールしていること\n\nUbuntu はデフォルトで Python がインストールされています。\n\n\nここまではそれほど難しくありませんので、まだの方はこちらの記事をご覧ください。"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#wsl2-に接続",
    "href": "tips/240508_jupyter/index.html#wsl2-に接続",
    "title": "Quarto で Python を使ってみよう！",
    "section": "WSL2 に接続",
    "text": "WSL2 に接続\nVSCode を起動して、画面左下の &gt;&lt; マークをクリックして、「WSL への接続」を選択します。\n\n\n\nWSL2 に接続"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#quarto-のインストール",
    "href": "tips/240508_jupyter/index.html#quarto-のインストール",
    "title": "Quarto で Python を使ってみよう！",
    "section": "Quarto のインストール",
    "text": "Quarto のインストール\n\n画面上部「ターミナル」から「新しいターミナル」を選択2し、ターミナルを開く\n以下のコマンドを入力して実行\n\nURL の部分は最新のものに変えてください。\nQuarto ホームページからプラットフォームが Ubuntu 18+/Debian 10+ であるダウンロードリンクを使用してください。\n\n\n\n\nbash\n\n# Quartoパッケージをダウンロード（URL は適宜更新）\nwget https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.554/quarto-1.4.554-linux-amd64.deb\n\n# パッケージをインストール（バージョン部分は適宜変更）\nsudo dpkg -i quarto-1.4.554-linux-amd64.deb\n\n\n\n\n\n\n\nDocker を使う場合\n\n\n\n\n\nDocker を使っている場合は、Dockerfile に以下のコマンドを追加してください。\n\n\nDockerfile\n\nRUN wget -O quarto.deb \"https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.553/quarto-1.4.553-linux-amd64.deb\" && \\\n    dpkg -i quarto.deb && \\\n    rm quarto.deb\n\nちなみに、私の記事で紹介しているテンプレートを使用される場合は、既にこのコマンドが追加されているので、追加する必要はありません。\n\n\n\nこれで Quarto のインストールは完了です。"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#拡張機能の準備",
    "href": "tips/240508_jupyter/index.html#拡張機能の準備",
    "title": "Quarto で Python を使ってみよう！",
    "section": "拡張機能の準備",
    "text": "拡張機能の準備\n拡張機能の検索窓から、次の拡張機能をインストールしてください。\n\nquarto.quarto（Quarto）\nms-python.python（Python）\nms-toolsai.jupyter（Jupyter）"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#新しい-quarto-ファイルを作成",
    "href": "tips/240508_jupyter/index.html#新しい-quarto-ファイルを作成",
    "title": "Quarto で Python を使ってみよう！",
    "section": "新しい Quarto ファイルを作成",
    "text": "新しい Quarto ファイルを作成\n\n画面左上の「ファイル」から「新しいファイル」を選択、「Quarto Document」を選んで新規ファイルを作成します。\n\nCtrl + S でファイルを保存できます。保存する際に任意のフォルダに test.qmd などの名前で保存してください。\n\nyaml ヘッダーを次のように編集します。\n\n\n\nYAML ヘッダー\n\n---\ntitle: \"タイトル\"\nauthor: \"著者\"\nformat: html\njupyter: python3\n---\n\n\n以下のようにコードを書いてみましょう。\n\n\n\nQuarto\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n\nパッケージのインストール\n\n今回、numpy と matplotlib を使っているので、はじめにこれらをインストールしないとエラーが出ます。\nまた、実行する際に ModuleNotFoundError: が出たら、そのモジュールもインストールする必要があります3。\nターミナルから以下のコマンドを実行してください。\n\n\n\n\nbash\n\npip install numpy matplotlib nbformat nbclient\n\n\n実行\n\n画面右上のボタンの中から「Preview」を選択して、ファイルをレンダリングします。\n\n\n\n\n\n実行結果\n\n\nR を使うときと同様に、Python のコードを書いて実行することができました。"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#footnotes",
    "href": "tips/240508_jupyter/index.html#footnotes",
    "title": "Quarto で Python を使ってみよう！",
    "section": "注",
    "text": "注\n\n\n今回は Python がメインなので RStudio は使いませんが、普段 R を使う方はぜひ RStudio でも使ってみてください。↩︎\nショートカット：Ctrl + Shift + @↩︎\n今回は nbformat と nbclient が出ると思います。↩︎\nR では Knitr を使って Python では Jupyter を使うためです。↩︎"
  },
  {
    "objectID": "tips/240515_rproj/index.html",
    "href": "tips/240515_rproj/index.html",
    "title": "【R】プロジェクトを使う",
    "section": "",
    "text": "R プロジェクトは、RStudio で作成できるプロジェクトです。プロジェクトを作成すると、プロジェクトのためのディレクトリが作成され、そのディレクトリ内で作業することになります。\nプロジェクトを作成すると、プロジェクトのための .Rproj ファイルが作成され、RStudio でそのファイルを開くことで、プロジェクトが開かれます。"
  },
  {
    "objectID": "tips/240515_rproj/index.html#強み",
    "href": "tips/240515_rproj/index.html#強み",
    "title": "【R】プロジェクトを使う",
    "section": "強み",
    "text": "強み\nプロジェクトの強みとして、そのディレクトリ内で作業が完結することが挙げられます。\nデータやソースコードは、プロジェクトのディレクトリ内に保存しておきましょう。その上で強みを発揮するのが、here パッケージを使った相対パスの指定です。\n例えば、次のようなディレクトリであるとします。\nproject-root/\n├── proj.Rproj\n├── code/\n│   ├── script1.R\n│   ├── script2.R\n│   └── utils/\n│       ├── helper1.R\n│       └── helper2.R\n└── data/\n    ├── raw/\n    │   ├── dataset1.csv\n    │   └── dataset2.csv\n    └── processed/\n        ├── processed1.csv\n        └── processed2.csv\nこのもとで話を進めます。"
  },
  {
    "objectID": "tips/240515_rproj/index.html#here-パッケージ",
    "href": "tips/240515_rproj/index.html#here-パッケージ",
    "title": "【R】プロジェクトを使う",
    "section": "here パッケージ",
    "text": "here パッケージ\nhere パッケージを使うと、.Rproj ファイルがあるディレクトリを基準として、相対パスを指定することができます。\nまずはインストールしましょう。\n\n\nR\n\ninstall.packages(\"here\")\n\n次に読み込みます。\n\n\nR\n\nlibrary(here)\n\n例えばここで、processed1.csv を使いたいとします。\nC: から始まるパスを指定していたのでは長いですし、setwd() でワーキングディレクトリを設定していたとしても、その都度設定するのも非効率です1。\nパッケージの主要関数である here() は、.Rproj があるディレクトリ起点とした相対パスを使用可能です。\n百聞は一見に如かずということで、次のコードをご覧ください。\n\n\nR\n\ndf &lt;- readr::read_csv(here(\"data/processed/processed1.csv\"))\n\n&lt;ポイント&gt;\n\n引数がデータのところで here() を使う\n.Rproj があるディレクトリからのパスを書く\nhere() 内ではダブルクォーテーションでパスを囲む\n\nこのようにすれば、フォルダの位置が PC 内で変わるなどの環境の変化に対応しながらコーディングができます。"
  },
  {
    "objectID": "tips/240515_rproj/index.html#footnotes",
    "href": "tips/240515_rproj/index.html#footnotes",
    "title": "【R】プロジェクトを使う",
    "section": "注",
    "text": "注\n\n\n共同研究を行うなら PC ごとに環境が異なりますから、なおさら非効率的です。↩︎"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html",
    "href": "tips/240619_trouble_shooting/index.html",
    "title": "環境構築における備忘録",
    "section": "",
    "text": "環境構築に関する記事をいくつかまとめてきましたが、頻繁にエラーに直面するので、その場合の対処法をまとめていきます。\n本記事は随時更新します。\n関連するエラーや不明点については一番下のコメントに書いていただけると幸いです。"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html#footnotes",
    "href": "tips/240619_trouble_shooting/index.html#footnotes",
    "title": "環境構築における備忘録",
    "section": "注",
    "text": "注\n\n\nこの記事で紹介した開発コンテナを使用。↩︎\n\\\\wsl.localhost\\Ubuntu\\home\\user 下にファイルがあると仮定している。フォルダのパスが異なる場合は、cd [your_path] でディレクトリを変更したうえで実行する。もしくは [フォルダ名] にパス含めて入力する↩︎\nこの記事で紹介した TinyTeX ボリュームを使用。↩︎\ntinytex::reinstall_tinytex() でもいけるのかもしれないけど、途中でエラーが出たので手順を踏むことにしました。↩︎"
  },
  {
    "objectID": "tips/240520_latex/index.html",
    "href": "tips/240520_latex/index.html",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "",
    "text": "こんにちは、Windows ユーザーです。\nTeX Live はインストールするのが面倒だし、使い方もよくわからないので1、別の方法で\\(\\LaTeX\\) を使えるようにしました。\nまた、Mac での方法も併せてご紹介します。\nこれまで TeX Live に苦労していた方や Overleaf を使っていた方は、ぜひ試してみてください。"
  },
  {
    "objectID": "tips/240520_latex/index.html#wsl-ubuntu-と-homebrew-の準備",
    "href": "tips/240520_latex/index.html#wsl-ubuntu-と-homebrew-の準備",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "0. WSL, Ubuntu と Homebrew の準備",
    "text": "0. WSL, Ubuntu と Homebrew の準備\nWindows のローカルでもできるとは思うのですが、Ubuntu でやる方が楽なので、WSL2 を使って Ubuntu でやります。何言ってるかわからない方は、気にしないでください。僕もよくわかりません。\n事前準備は少し面倒だけど、一度やってしまえば楽、みたいなイメージで使っています。とりあえず使えればよいと思っている一大学院生なので、そのあたりは許してください。\nMac の方は、Homebrew を使って TinyTeX をインストールしていきます。\n既にこれらの準備が出来ている方は、飛ばしてください。\n\n0-1. WSL と Ubuntu のインストール（Windows）\nまずは Windows Subsystem for Linux（WSL）をインストールします3。\nPowerShell を管理者権限で起動4し、以下のコマンドを実行します。\nwsl --install\nもし再起動を求められたら、再起動してください。インストールはこれだけです。\nインストールができたらユーザー名とパスワードの設定が求められるので、設定します。\nこれは何でも構いません。sudo コマンドを使う際にパスワードが必要になりますが、本当に簡単なもので大丈夫です5。\nまた、パスワード入力の際に、入力しても画面上には表示されませんが、きちんと入力されていますので慌てず続けてください。\n\n\n0-2. Homebrew のインストール（Mac）\nMac ユーザーは Homebrew を使って諸々インストールしていくので、まだの方はここでインストールしてください。\n\nターミナルを開く\n\nアプリ一覧から「ターミナル」を探してください。\n\n以下のコマンドを入力して実行\n\nパスワードを求められるので、入力してください。\n\n\n\n\nTerminal\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
  },
  {
    "objectID": "tips/240520_latex/index.html#tinytex-のインストール",
    "href": "tips/240520_latex/index.html#tinytex-のインストール",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "1. TinyTeX のインストール",
    "text": "1. TinyTeX のインストール\nTeX Live はインストールが面倒なので、TinyTeX という軽量な \\(\\LaTeX\\) ディストリビューションを使います。R Markdown でもよく使われているので、馴染みがある方も多いかもしれません。\nしかし今回は、R は使いません。目標とするのは TeX Live の代替として、簡潔に \\(\\LaTeX\\) を使えるようにすることです。\n\n1-1. Windows でのインストール\nWindows では、Ubuntu を開いて以下のコマンドを実行します。\nwget -qO- \"https://yihui.org/tinytex/install-bin-unix.sh\" | sh\nこれで TinyTeX のインストールは完了です。簡単ですね。\n\n\n1-2. Mac でのインストール\nMac の方は、ターミナルを開いて以下のコマンドを実行してください。\ncurl -sL \"https://yihui.org/tinytex/install-bin-unix.sh\" | sh"
  },
  {
    "objectID": "tips/240520_latex/index.html#vscode-での設定",
    "href": "tips/240520_latex/index.html#vscode-での設定",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "2. VSCode での設定",
    "text": "2. VSCode での設定\n\n2-1. 拡張機能のインストール\nVSCode で LaTeX を使うためには、拡張機能をインストールする必要があります。\n画面左の拡張機能アイコン  をクリックし、検索バーに「LaTeX」と入力します。すると、LaTeX および LaTeX Workshop という拡張機能が表示されるので、2つをインストールします6。\n\n\n2-2. 設定の変更\n拡張機能をインストールしたら、設定を変更します。\n画面左下の管理ボタンから「設定」で設定画面を開き7、右上にある  をクリックして settings.json を開きます。\n以下の {} の中身を設定に追加します。もし既に何か設定がある場合は、最後をカンマで区切り、改行して追加してください。\n{\n    \"latex-workshop.latex.tools\": [\n        {\n          \"name\": \"latexmk\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-synctex=1\",\n            \"-interaction=nonstopmode\",\n            \"-file-line-error\",\n            \"-xelatex\",\n            \"%DOC%\"\n          ]\n        }\n    ],\n    \"latex-workshop.latex.recipes\": [\n        {\n          \"name\": \"latexmk (xelatex)\",\n          \"tools\": [\n            \"latexmk\"\n          ]\n        }\n    ],\n    \"latex-workshop.view.pdf.viewer\": \"tab\",\n    \"latex-workshop.latex.clean.fileTypes\": [\n        \"*.aux\", \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \n        \"*.acr\", \"*.alg\", \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\", \"*.synctex.gz\",\n        // for Beamer files\n        \"_minted*\", \"*.nav\", \"*.snm\", \"*.vrb\",\n    ],\n    \"latex-workshop.latex.autoBuild.run\": \"onBuilt\",\n}\n\nこれで設定は完了です。"
  },
  {
    "objectID": "tips/240520_latex/index.html#動作確認",
    "href": "tips/240520_latex/index.html#動作確認",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "3. 動作確認",
    "text": "3. 動作確認\nここからは Windows も Mac も共通です。\nはじめに今回使うフォントをインストールしましょう。VSCode のターミナルで以下のコマンドを実行してください。\ntlmgr install ipaex\n次に、VSCode で新しいファイルを作成し、GitHub Copilot が作ってくれた以下のコードを回してみます8。\n\\documentclass{article}\n\\usepackage{bookmark} \n\\usepackage{fontspec} \n\\usepackage{zxjatype} \n\\usepackage[ipaex]{zxjafont}\n\n\\title{サンプルドキュメント}\n\\author{あなたの名前}\n\\date{今日の日付}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{導入}\n\nこれはサンプルのセクションです。\n\n\\subsection{サブセクション}\n\nこれはサンプルのサブセクションです。\n\n\\end{document}\nこれを保存し、右上の緑の三角ボタン  をクリックすると、PDF ファイルが生成されます。\nしかし、おそらくここでエラーに直面するでしょう。次のセクションでエラーの解決法について説明します。"
  },
  {
    "objectID": "tips/240520_latex/index.html#エラーの解決",
    "href": "tips/240520_latex/index.html#エラーの解決",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "4. エラーの解決",
    "text": "4. エラーの解決\nこの段階のエラーのほとんどは、パッケージがインストールされていないことが原因です。\nコンパイルすると右下にエラーの表記とともに「Open compiler log」と出ると思うので、それをクリックしてエラーログを開きます。\n\n\n\nこれを押します。\n\n\nエラーログを少し遡ってみると、どのパッケージがインストールされていないかがわかります。例えば、「! LaTeX Error: File ‘xltxtra.sty’ not found.」と出た場合、xltxtra パッケージがインストールされていないことがわかります。\nその場合、ターミナルに戻り以下のコマンドを実行してください。\ntlmgr install xltxtra\nこれでインストールできますが、使い始めのうちは何度か似たようなエラーが出るかもしれません。エラーが出たらエラーログを見て、同様の方法で必要なパッケージをインストールしてください。\n\n\n\n\n\n\nエラーのトラップ\n\n\n\n先ほどのサンプルコードを実行しようとすると、\n! LaTeX Error: File `xeCJK.sty’ not found.\nというエラーが途中で出てきます。しかし、tlmgr install xeCJK としてもインストールできません。これは、xeCJK というパッケージが存在しないためです。\n代わりに、ctex パッケージをインストールすることで解決できます。ctex パッケージが xeCJK を含んでいるためです。\nややこしいですが、これで試してみてください。"
  },
  {
    "objectID": "tips/240520_latex/index.html#再び動作確認",
    "href": "tips/240520_latex/index.html#再び動作確認",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "5. 再び動作確認",
    "text": "5. 再び動作確認\nエラーを解消するうちに、足りないパッケージがインストールでき、最終的には問題なくコンパイルできるようになるはずです。\n日本語で使う場合、フォントをインストールしていないミスが多いので、気を付けてください。\n最終的に次のように出力できました。"
  },
  {
    "objectID": "tips/240520_latex/index.html#footnotes",
    "href": "tips/240520_latex/index.html#footnotes",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "注",
    "text": "注\n\n\n実際には少し使っていたので、並程度には使えます（笑）↩︎\n日本語設定などもしておくと便利かもしれません↩︎\nWindows における WSL のインストールについてはこちらでも触れています。↩︎\nアプリ一覧から右クリックすれば「詳細」→「管理者として実行」で使えます。↩︎\nこちらの動画の 4:42~ あたりを見てみてください。パスワードは「a」です。a。↩︎\n怪しかったら、mathematic.vscode-latex と James-Yu.latex-workshop をそれぞれ入力すれば確実です。↩︎\nWindowsなら Ctrl ＋ , で、Mac ならcommand ＋ , でもいけます。↩︎\n少し日本語フォントなどの設定を加えています。↩︎\nその割によく手動でインストールさせられる気がしますが…↩︎"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html",
    "href": "tips/240516_archived_pkg/index.html",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "",
    "text": "因果推論を勉強している人にはおなじみの Mixtape ですが、昨年勉強中にこの中の合成コントロール法の章でパッケージがインストールできない問題に直面しました。\nよく調べてみると、当時1 SCtools パッケージはアーカイブされてしまっており、install.packages('SCtools') ではインストールができないことが判明しました。\n現在2では復活してインストールできるようになっていますが、そんなときに備えて対処法をまとめます。"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html#アーカイブされたパッケージを探す",
    "href": "tips/240516_archived_pkg/index.html#アーカイブされたパッケージを探す",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "アーカイブされたパッケージを探す",
    "text": "アーカイブされたパッケージを探す\nCRAN のアーカイブにアクセスして、アーカイブされたパッケージを探します。\n例えば当時アーカイブされていた SCtools を探すと、次のようになります。\n\nこの中で最新のものを右クリックし、リンクをコピーしてください。"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html#rstudio-を開く",
    "href": "tips/240516_archived_pkg/index.html#rstudio-を開く",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "RStudio を開く",
    "text": "RStudio を開く\n続いて RStudio を開き、スクリプトに次のコードを入力してください。\n\n\nR\n\nurl &lt;- \"https://cran.r-project.org/src/contrib/Archive/SCtools/SCtools_0.3.2.tar.gz\"\npkgFile &lt;- \"SCtools_0.3.2.tar.gz\"\ndownload.file(url = url, destfile = pkgFile)\n\nここで URL はコピーしたものに変え、pkgFile は URL の最後の .tar.gz 部分をコピペしてください。\n実行するとエラーが出るかもしれませんが、それは依存しているパッケージがインストールされていないということです。エラーを読んでみて、足りなそうなパッケージを以下のコードの c() にまとめて入れて実行し、 改めて download.file() を実行してみてください。\n\n\nR\n\ninstall.packages(c(\"xxx\", \"yyy\", \"zzz\"))\n\nそしてパッケージをインストールします。次のコードを実行してください。\n\n\nR\n\ninstall.packages(pkgs=pkgFile, type=\"source\", repos=NULL)\n\n最後に以下を実行して下さい。\n\n\nR\n\nunlink(pkgFile)\n\n以上です。インストール出来たのではないでしょうか。"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html#footnotes",
    "href": "tips/240516_archived_pkg/index.html#footnotes",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "注",
    "text": "注\n\n\n2023年秋↩︎\n2024年5月16日↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yosuke Abe",
    "section": "",
    "text": "こんにちは！ 経済学系の大学院生です。\n学んだTipsなどをまとめていきます。"
  },
  {
    "objectID": "tips/240507_pacman/index.html",
    "href": "tips/240507_pacman/index.html",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "",
    "text": "何か新しいプロジェクトを始める際に、新しいパッケージをいちいちインストールして読み込むのは面倒ですよね。\nそんな時に便利な pacman パッケージのご紹介です。"
  },
  {
    "objectID": "tips/240507_pacman/index.html#library",
    "href": "tips/240507_pacman/index.html#library",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "library()",
    "text": "library()\nまず、インストールします。\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"sf\")\ninstall.packages(\"here\")\n\n次に、読み込みます。\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sf)\n\nLinking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE\n\nlibrary(here)\n\nhere() starts at /home/rstudio/work\n\n\nこれで使えるようになりました。"
  },
  {
    "objectID": "tips/240507_pacman/index.html#p_load",
    "href": "tips/240507_pacman/index.html#p_load",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "p_load()",
    "text": "p_load()\npacman::p_load() はこれで一発です。\n\npacman::p_load(tidyverse, sf, here)\n\nこの場合、上に出てきたような読み込みに付随するメッセージは出てきません。"
  },
  {
    "objectID": "tips/240507_pacman/index.html#footnotes",
    "href": "tips/240507_pacman/index.html#footnotes",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "注",
    "text": "注\n\n\nこの書き方では、library() を使わずともパッケージ内の関数が使えます。一度だけ使いたい！というときに便利です。また、どのパッケージに属しているかが明確になるというメリットもあります。↩︎\nこちらを参照↩︎"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html",
    "href": "tips/240514_clean_slide/index.html",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "",
    "text": "別記事で、Beamer 風の Reveal.js スライドをご紹介しましたが、英語にしか対応していませんでした。というのも、あのフォントと釣り合う日本語のフォントが思いつかなかったからです。\n今回は、別のデザインで日本語にも対応したスライドのテンプレートをご紹介します。デザインに困っている方はぜひ使ってみてください！"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html#とりあえず見てみよう",
    "href": "tips/240514_clean_slide/index.html#とりあえず見てみよう",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "とりあえず見てみよう",
    "text": "とりあえず見てみよう\nこのスライドは、結構嬉しいポイントとして、移動ボタンが準備されているということがあります。\nこれはどういうことか、こちらをご覧ください。\n\n\n\n結構すごくないですか？PDF だと図や表に飛べたりしますが、自分でスライドを作っていて戻るのめんどいな、と思うことがあったので、結構重宝しています。"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html#使い方",
    "href": "tips/240514_clean_slide/index.html#使い方",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "使い方",
    "text": "使い方\n使い方はデモスライドに書いた通り、[[図へ]{.button}](#sec-cars) です。これをする上で必要な準備があるので、それをまとめます。\n\nスライドにラベルを付ける\nこの機能、個人的には便利だなと思うのですが、図には直接飛べないのが玉に瑕です。要は図に飛ぶのではなく、図があるスライドに飛ぶ必要があるということです1。\nラベルを付けるには、次のようにします。\n\n\nQuarto\n\n## ヘッダー\n\n### サブヘッダー {#sec-hogehoge}\n\nhogehoge の部分は適宜変更してください。波括弧で囲み、#sec- で始めることでラベルを付けることができます。セクションの場合は必ず #sec- で始める必要があるので注意してください。\n\n\nボタンを作る\n先述の通り、ボタンを作るには、任意の場所で次のように書きます。\n\n\nQuarto\n\n[[図へ]{.button}](#sec-hogehoge)\n\n中の [] は表示したいテキストで、() の中はラベル名です。ラベル名はセクションのラベル名を指定してください。\n\n\n帰れないと意味がない\n図（があるセクション）へ飛ぶボタンを作ったら、図から戻るボタンも作りましょう。せっかく何ページも飛んでいったのに、戻るのに1スライドずつ戻っていたのでは意味がありません。\n例えば、次のようにします。\n\n\nQuarto\n\n[[戻る]{.button}](#sec-hogehoge)\n\nこれで、図から戻るボタンが作れます。1つの図を複数の箇所から参照する場合、「○○へ戻る」2として、複数のボタンを作るとよいでしょう。\n横に並べたいときは Quarto の機能を活かして、\n\n\nQuarto\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n[[セクション1へ戻る]{.button}](#sec-hogehoge)\n:::\n\n::: {.column width=\"50%\"}\n[[セクション2へ戻る]{.button}](#sec-fugafuga)\n:::\n::::\n\nとすれば、横に並べてボタンを配置できます3。\n\n\nscss ファイルをゲット\nこのスライドを使うには、こちらをクローンするか、ZIP ファイルダウンロードするかして、clean-slide.scss を入手してください4。\nこれを Quarto ファイルと同じディレクトリに置いてください。\n重ねてになりますが、詳しいスライドの作り方はこちらを参照してください。"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html#footnotes",
    "href": "tips/240514_clean_slide/index.html#footnotes",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "注",
    "text": "注\n\n\n図の参照自体はもちろんできます。Quarto での相互参照の仕方についてはこちら↩︎\n○○はセクションやサブセクションの名前など↩︎\nこの書き方の詳細や Quarto の機能についてはこちら↩︎\nもはや新しい scss ファイルを手動で作って、中身をコピーするでもいいですよ。↩︎\nスライド作成に自信がある方はすみません…↩︎"
  },
  {
    "objectID": "tips/240504_container/index.html",
    "href": "tips/240504_container/index.html",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "",
    "text": "Docker と VSCode を使って R の環境を構築する方法を説明します。\n基本的な内容は次のページを参考にしており、個人的に使いやすいように修正を加えています。\n\n\n\n\n\n\nVSCode + Dockerでよりミニマルでポータブルな研究環境を\n\n\n\n開発コンテナを使うメリットは、環境を簡単に共有でき、他の環境に影響を受けずに作業ができることです。\nまた、最初は設定の際に結構待ち時間が生じますので、ご了承ください。"
  },
  {
    "objectID": "tips/240504_container/index.html#wsl2windows-ユーザーのみ",
    "href": "tips/240504_container/index.html#wsl2windows-ユーザーのみ",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "WSL2（Windows ユーザーのみ）",
    "text": "WSL2（Windows ユーザーのみ）\n\nPowerShell または Windows コマンドプロンプトを管理者権限で開く\n\n右クリックで管理者権限を使えます。\n\n\n\n\n\n\n\n\n以下のコマンドを入力して実行\n\nこれでインストールはできるはずですが、詳しくはこちらのサイトを参照してください。\n\n\n\n\nPowerShell\n\nwsl --install\n\n\nユーザー名とパスワードを設定\n\nインストールが終わると、Linux ディストリビューションのユーザー名とパスワードの作成を求められます1。\nユーザー名は何でも大丈夫です。パスワードもめちゃくちゃ簡単で問題ありません。\nパスワードは画面上には表示されませんが、ちゃんと入力されています。慌てて何回も入力しないようにしてください。\n\n\nエクスプローラーから Linux に入り、\\Ubuntu\\home\\ユーザー名 がメインとなるディレクトリです。"
  },
  {
    "objectID": "tips/240504_container/index.html#homebrewmac-ユーザーのみ",
    "href": "tips/240504_container/index.html#homebrewmac-ユーザーのみ",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "Homebrew（Mac ユーザーのみ）",
    "text": "Homebrew（Mac ユーザーのみ）\nMac ユーザーは Homebrew を使って諸々インストールしていくので、まだの方はここでインストールしてください。\n\nターミナルを開く\n\nアプリ一覧から「ターミナル」を探してください。\n\n以下のコマンドを入力して実行\n\nパスワードを求められるので、入力してください。\n\n\n\n\nTerminal\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
  },
  {
    "objectID": "tips/240504_container/index.html#sec-vscode-setting",
    "href": "tips/240504_container/index.html#sec-vscode-setting",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "VSCode",
    "text": "VSCode\n\nVSCode のダウンロードサイトからダウンロード、インストール\n\nDownload for Windows2 をクリックしてダウンロードできます。\nインストールができたら、VSCode を開いてください。\n\n（任意）日本語の拡張機能をインストール\n\n画面左側に拡張機能のアイコン  があります。ここの検索ボックスに MS-CEINTL.vscode-language-pack-ja と入力し、1番上に出てきたものをインストールします3。\nインストール後、VSCode を再起動すれば日本語が反映されていると思います。\n\n\n\n\n拡張機能のインストール\n\n拡張機能の検索ボックスで、次の ID を入力し、インストールします。\nms-vscode-remote.remote-containers (Dev Containers)\nms-vscode-remote.remote-wsl (WSL, Windows ユーザーのみ)\n\nWSL に接続（Windows ユーザーのみ）\n\nVSCode から先ほどインストールした WSL に接続します。\n画面左下の &gt;&lt; アイコンをクリックして、「WSL への接続」をクリックします。"
  },
  {
    "objectID": "tips/240504_container/index.html#docker",
    "href": "tips/240504_container/index.html#docker",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "Docker",
    "text": "Docker\nDocker をインストールします。\n\nWindows の方はここから Docker Desktop for Windows を、Mac の方はこちらからダウンロード＆インストール\n設定の確認（Windows のみ）\n\nインストール出来たら、画面上部の設定ボタンから Resources、WSL integration と進み、チェックボックスにチェック、Ubuntu がオンになっていることを確認してください。\nたまに、何もしていないのにここがオフになっていて、トラブることがあります。\n詳しくはこちらをご覧ください。日本語で書いてあります。\n\n\n\n\n画面左側の Volumes に進み、Create からボリュームを作成\n\n次の3つを作成します（大文字小文字に注意！）。\nfonts, cache, TinyTeX\n\n\n\n\n\nMac での画面"
  },
  {
    "objectID": "tips/240504_container/index.html#git",
    "href": "tips/240504_container/index.html#git",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "Git",
    "text": "Git\n\nWindows\n\nUbuntu で git をインストール\n\nWindows のアプリ一覧から Ubuntu を探し、開いてください。開いたら、以下のコマンドを入力して実行します。\n\n\n\n\nUbuntu\n\nsudo apt-get install git\n\n\n\n\nUbuntu\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\n\n\n\n\nUbuntu\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\nMac\n\nHomebrew で git をインストール\n\nターミナルを開いて、以下のコマンドを入力して実行します。\n\n\n\n\nTerminal\n\nbrew install git\n\n\n\n\nこの Mac では2回目なので git is already installed と表示されてます…。\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\nここに限らずですが、[] ごと置き換えてくださいね。\n\n\n\n\nTerminal\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]"
  },
  {
    "objectID": "tips/240504_container/index.html#github-アカウントの作成",
    "href": "tips/240504_container/index.html#github-アカウントの作成",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "GitHub アカウントの作成",
    "text": "GitHub アカウントの作成\nファイルは基本的に GitHub で管理するので、ここからアカウントを作成してください。\n\nポイント\nGitHub アカウントを作成したら、VSCode にログインしておきましょう。\n\nVSCode を開く\n画面左下のアイコンをクリック\n\nGitHub でサインインを行う\n\n\nGitHub にログインすることで、その後の作業がスムーズに進みます。\n事前準備は以上です！"
  },
  {
    "objectID": "tips/240504_container/index.html#ホスト側の設定",
    "href": "tips/240504_container/index.html#ホスト側の設定",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "ホスト側の設定",
    "text": "ホスト側の設定\n\nGitHub リポジトリを作成\n\nテンプレートの GitHub リポジトリ にアクセス\n画面右の「Use this template」から「Create a new repository」を選択\nRepository name を記入\nPrivate を選択\n\n通常のプロジェクトなら Private で OK\n\n「Create repository」をクリック\n\n\n\nリポジトリをクローン\n\n\nVSCode を開く\n画面左側のアイコンから「ソース管理」4を開く\n「リポジトリの複製」を選択し、さらに「GitHub から複製」を選ぶ\nリポジトリを選択し、クローン\n\nリポジトリは、「ユーザー名/リポジトリ名」の形式で表示されます。\n基本的に表示されると思いますが、表示されない場合は手入力してください。\nクローンしたリポジトリを開くか問われるので、開いてください。\n\n画面右下に「コンテナーで再度開く」と出たらクリック\n\n出ない場合、画面左下「WSL: Ubuntu」5をクリックし、「コンテナーで再度開く」を選択してください。\n初めて環境を構築する場合、ここでかなり時間がかかるので辛抱強く待ちましょう。\n\n\n\n\n\n「コンテナーで再度開く」をクリック\n\n\nエクスプローラーを開き、\\\\wsl.localhost\\Ubuntu\\home\\ユーザー名 を確認してみてください。リポジトリ名と同じフォルダができていると思います。\nMac の場合は、ユーザー名の下にできているはずです。\n\n\n\n\n\n\nMac でファイルが見当たらない？\n\n\n\n\n\nクローンしたフォルダを見てみると、リポジトリにはあるはずのファイルやフォルダが見当たらないかもしれません。\n\n\n\nファイルが見当たらない…？\n\n\nこのようなときは、Finder の隠しファイルを表示する設定を変更する必要があります。\n以下をターミナルで実行してください。\n\n\nTerminal\n\ndefaults write com.apple.finder AppleShowAllFiles TRUE\nkillall Finder\n\nこれで、隠しファイルも表示されるようになります。\n正直なところ、この設定は隠しファイルが邪魔であればしなくてもよいと思います6。VSCode 上ではきちんと表示されますので。\n\n\n\n\n\nRStudio で開く\nここで、ブラウザを用いて RStudio を開きます。\n\n任意のブラウザで、アドレスバーに localhost:8787 と入力して開く\n右上の  をクリックし、「New Project…」を選択\n「Existing Directory」を選択\n「Browse…」より「work」を選択して「Choose」をクリック\n\n「Create project」をクリックするとプロジェクトが作成されます。\n\nコンソールに以下を入力して実行\n\nrenv はパッケージを管理するためのパッケージです。\nDockerfile でインストールすることを指示しているので、コンソールでインストールせずとも既に使用可能です7。\n\n\n\n\nR\n\nrenv::init()\n\n\n\nPython の設定\nPython を使う場合、以下のパッケージをインストールしておきます。使わない場合はスキップしてください。\n使い方としては、Quarto 上で Python のコードを書くことを想定しています。そのために必要なパッケージですが、その他のパッケージを使用する場合も同様の方法でインストールしてください。\n\nVSCode に戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n以下のコマンドを入力して実行\n\n\n\nTerminal\n\npip install ipykernel jupyter\n\nパッケージは cache にキャッシュがあるので、1回インストールすれば、2回目以降の環境構築では不要です。\n\n\nDVC の設定\nDVC はデータを管理するためのツールです。\n事前準備として、自分の Google ドライブの任意の場所で、データを入れる用のフォルダを作成しておいてください。\nまた、共同プロジェクトの場合は、フォルダの共有も設定してください。\n\nVSCode に戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n\n既に画面下部にターミナルが表示されている場合はスキップして大丈夫です。\n\n以下のコマンドを入力して実行\n\n初めて環境構築するときに1回実行しておけば、2回目以降の環境構築では不要です。\n\n\n\n\nTerminal\n\npip install dvc dvc-gdrive\n\n\nGoogle ドライブで作成したフォルダの ID をコピー\n\nID は、ドライブでフォルダを開いたときの URL で、最後のスラッシュ（~/folders/）より右側の部分です。\n\n次のコマンドを入力して実行\n\n最後の部分（四角括弧ごと）をコピーした ID に変更してください。\n\n\n\n\nTerminal\n\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\n\n\nLaTeX の設定\nR Markdown などで \\(\\LaTeX\\) を使用するために、TinyTeX をインストールします。\nRStudio のコンソールに以下のコマンドを入力して実行してください。\nまた、TinyTeX もキャッシュされるので、1回インストールすれば、2回目以降の環境構築では実行不要です。\n\n\nR\n\ntinytex::install_tinytex(dir = \"/home/rstudio/.TinyTeX\", force = TRUE)\n\nTinyTeX は、\\(\\LaTeX\\) コードをコンパイルする際に必要なパッケージを自動でダウンロードしてくれるので、ローカルに面倒な設定をしなくて良いのが魅力です。\nR Markdown や Quarto での PDF 出力の仕方については、こちらの記事もご覧ください。\n\n\nJulia の設定\n参考記事の設定に基づき、Julia が使えるようになっているため、その始め方についても書いておきます。特に使う予定がなければ、スキップしてください。\n\nVSCode に戻り、ワーキングディレクトリに Project.toml というファイルを作成\n\n\n\n\n\n\n\nVSCode上でのファイル等の作成\n\n\n\n\n\nVSCode 上でファイルやフォルダを作成するためには、左側のアイコン一番上の「エクスプローラー」をクリックし、その中の上部にあるアイコンの「新しいファイル…」や「新しいファイル…」を選択することでできます。\nここで注意点ですが、状況によっては意図せずフォルダの中に作ってしまうことがあります。\nワーキングディレクトリにファイルを作成したい場合は、まずエクスプローラーの空き部分をクリックします。すると、枠全体が青い線で囲まれると思います。\nこの状態であれば、親フォルダにファイルやフォルダが新規作成されます。下の画像の左側に注目してください。\n\n\n\nエクスプローラーの空いている部分をクリックすると、全体が青枠で囲まれます。\n\n\n一方、特定のフォルダの中に作成したい場合は、そのフォルダをクリックしてから新規作成を行ってください。\n\n\n\n特定のフォルダをクリックすると、そのフォルダが青枠で囲まれます。\n\n\n\n\n\n\nキーボードで Ctrl + Shift + P を入力8\n「Julia: Start REPL」を選択\n\n少し下の方にあると思います。検索をかけると楽かもしれません。1度使ったものは上に表示される仕組みなので、2回目以降は探しやすいと思います。\n少し時間がかかります。\n\nターミナルで、以下のコマンドを入力して実行\n\n\n\nJulia\n\nusing Pkg\nPkg.activate()\n\n以上で Julia の事前準備ができました。\n\n\n共同プロジェクトの場合\n共同プロジェクトの場合は、GitHub で共有するため、以下の手順を踏んでおいてください。\n\nGitHub リポジトリでコラボレーターを追加\n\nリポジトリの Settings から Collaborators に進み、コラボレーターを追加してください。\nAdd people から招待できます。\n\n\nまた、ホスト側の環境構築もここで一区切りです！"
  },
  {
    "objectID": "tips/240504_container/index.html#共同作業者の設定",
    "href": "tips/240504_container/index.html#共同作業者の設定",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "共同作業者の設定",
    "text": "共同作業者の設定\n共同作業者も事前準備は終わらせておいてください。\n\nGitHub で招待を受ける\n\nメールが届いているはずですので、そこから GitHub にログインしてください。\nリポジトリにアクセスできるようになります。\n\nリポジトリをクローン\n\nホスト側が作成したリポジトリをクローンします。\nホスト側の設定と同様にしてクローンし、開いてください。\n\n\n一旦ここまでで、共同作業者の設定は終わりです。"
  },
  {
    "objectID": "tips/240504_container/index.html#作業開始時",
    "href": "tips/240504_container/index.html#作業開始時",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "作業開始時",
    "text": "作業開始時\n作業を開始する際は、以下の手順で作業を開始してください。\n\nVSCode で開く\n\nホスト側、共同作業者ともに、VSCode の開発コンテナで開いてください。\n\n作業ブランチを作成\n\n画面左下、main と書かれているところをクリックし、「＋新しいブランチの作成…」を選択してください。\nブランチ名は、作業内容がわかるようにしてください。\n例えば、feature/作業内容 など。\n\n作業ブランチに切り替え\n\n再び main と書かれているところをクリックし、作成したブランチを選択してください。\n\n作業を開始"
  },
  {
    "objectID": "tips/240504_container/index.html#作業終了時",
    "href": "tips/240504_container/index.html#作業終了時",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "作業終了時",
    "text": "作業終了時\n先に作業終了時について説明します。ここで想定しているのは共同作業を行っている場合です。\n単独での業務の場合は、ブランチを作成する必要はないと思います。コミットとプッシュを繰り返す流れで十分です。\n\n作業内容をコミット\n\n画面左側の「ソース管理」をクリックします。\nファイルにカーソルを当てると、右側に「+」が表示されます。これをクリックしてステージングします9。\n画面上部の「メッセージを入力」にコミットメッセージ10を入力し、「✓コミット」をクリックしてください。\n\nプッシュ\n\n「ソース管理」の右側にある「…」をクリックし、「プッシュ」を選択してください。\nこれで、作業内容が GitHub にアップロードされます。\nブランチを公開しますか？と聞かれたら「OK」を選択してください。\n\n\n\n\n\n\n\nところで、現在は作業中のブランチが先ほど作成したブランチになっていると思います。\nこれを main にマージするために、プルリクエストを作成します。要は、自分が作成したブランチをホスト側に main へ取り込んでもらうための手続きです。\nこのステップを挟む理由は、例えば正常に作動しないコードが main に勝手にマージされることを防ぐためです。\n\nプルリクエスト（GitHub）\n\nGitHub にアクセスし、作業中のリポジトリを開いてください。\n画面上部の「Pull requests」をクリックし、「New pull request」をクリックしてください。\n作業中のブランチと main を比較して、プルリクエストを作成します。\n作業内容を説明し、ホスト側にマージしてもらうようにリクエストします。\n承認されれば、無事 main にマージされます。\n\nプル（VSCode）\n\nホスト側で、プルリクエストが承認されたら、main にマージされた内容を取り込むためにプルします11。\n画面下部のブランチ名をクリックし、main を選択してください。これで再び main に切り替わります。\n再び画面左からの「ソース管理」から、「ソース管理」の右側にある「…」をクリックし、「プル」を選択してください。\nこれで、ローカルの main が最新の状態になります。\n\n\nこの流れを繰り返すことで作業のサイクルを回していきます。\n繰り返しになりますが、GitHub についてはこちらの記事も参考にしてください。"
  },
  {
    "objectID": "tips/240504_container/index.html#r-のパッケージ",
    "href": "tips/240504_container/index.html#r-のパッケージ",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "R のパッケージ",
    "text": "R のパッケージ\n\n\n\n\n\n\nImportant\n\n\n\nここからの作業で重要なことですが、これから説明する renv 等で記録したら、コミット、プッシュ、プルを通じてファイルを共有することを忘れないでください。\n\n\n作業中新たにパッケージを使用した場合、それを renv.lock ファイルに記録することで、必要なパッケージを共同作業者と共有することができます。\nバージョンごと記録できるので、全く同じ環境を再現することが可能です。\n\nR のコンソールで以下を実行\n\n新しいパッケージをインストールし、コード内で使用したら、以下のコードを実行してください12。\nrenv がアクティベートされていない場合、アクティベートする必要がありますが、おそらく実行した際に「renv をアクティベートして lock ファイルに記録する」というような選択肢が提示されますので、それを選んでください。\n以下のコードでアクティベートすることも可能です。\n\n\n\n\nR\n\nrenv::snapshot()\n\n\n\nR\n\nrenv::activate()\n\n\n（共同作業者）パッケージをインストール\n\n使用したパッケージは renv.lock に記録されているため、そこから（バージョンもホスト側に揃えて）インストールが可能です。\n作業者は lock ファイルをアップデートしたら、コミットとプッシュを行ってください。\n共同作業者はその lock ファイルをプルしておいてください。\nバージョンの違いにより実行できないようなことを防げます。\n以下のコードを実行してください。\n\n\n\n\nR\n\nrenv::restore()\n\nこれで R の開発環境を揃えることができます。\nまた、新しいパッケージを使ったら、その作業が終わるごとに renv::snapshot() 記録し、共同作業者は renv::restore() でインストールしてください。"
  },
  {
    "objectID": "tips/240504_container/index.html#python-のパッケージ",
    "href": "tips/240504_container/index.html#python-のパッケージ",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "Python のパッケージ",
    "text": "Python のパッケージ\n設定では Python の設定も加えていますので、必要に応じて Python も使用できます。\nまた、そもそも DVC が Python のパッケージなので、それも renv と同様に記録して共有します。\n\nPython のパッケージを追加\n\n先ほどと同様に、新しいターミナルを開いて、以下のコードでパッケージをインストールします。\nDVC 以外特に使うものがなければ、ここはスキップしてください。\n\n\n\n\nTerminal\n\npip install [パッケージ名]\n\n\nパッケージを記録\n\nR と同様に、作業が終わったら以下のコードでパッケージを記録します。\n特に何もインストールしていなくても、DVC を使っていますので、これは実行してください。\n\n\n\n\nTerminal\n\npip freeze &gt; requirements.txt\n\n\n（共同作業者）パッケージをインストール\n\nここでも事前に .txt ファイルを共有しておいてください。\n共同作業者は、次のコードで Python パッケージをインストールします。\n\n\n\n\nTerminal\n\npip install -r requirements.txt"
  },
  {
    "objectID": "tips/240504_container/index.html#データの管理",
    "href": "tips/240504_container/index.html#データの管理",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "データの管理",
    "text": "データの管理\nデータは DVC で管理します。データは Google Drive 上で保管されます。\n\nワーキングディレクトリに、data というフォルダを作成\nデータが入ったら、以下のコードを実行\n\ndata フォルダごとドライブに追加します。\ndata フォルダは .gitignore に記載されているため、GitHub にはアップロードされません。\n\n\n\n\nTerminal\n\ndvc add data/\n\n\n\n\n\n\n\nデータの入れ方\n\n\n\nデータは、Windows のエクスプローラーや Mac の Finder から直接フォルダに入れて大丈夫です（通常の Windows や Mac での作業のように）。\nデータをプッシュした後に Google Drive を見てもらえれば分かりますが、よくわからない形で保存されています。DVC の仕組みがそうなっているからなので、決してファイルが破損しているわけではありません。\nちなみに Windows ユーザーの方で、一回ローカルに落としてから Linux にデータ等を入れたら Zone.Identifier というファイルができることがありますが、これは無視して大丈夫です。邪魔であればまとめて消してください。\n\n\n\nデータをアップロード\n\n以下のコードでデータをプッシュします。\n\n\n\n\nTerminal\n\ndvc push\n\n最初は add と push をする過程でアカウントの認証が必要になりますが、表示に従って認証を進めてください13。\n\n（共同作業者）データのダウンロード\n\n以下のコードでデータをダウンロードします。\n\n\n\n\nTerminal\n\ndvc pull"
  },
  {
    "objectID": "tips/240504_container/index.html#julia-のパッケージ",
    "href": "tips/240504_container/index.html#julia-のパッケージ",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "Julia のパッケージ",
    "text": "Julia のパッケージ\nJulia はパッケージが自動で Project.toml に保存されるため、共同作業者がインストールするだけで大丈夫です。\n\n先ほどと同じ手順で環境をアクティベートする\n以下のコードでパッケージをインストール\n\n\n\nJulia\n\nPkg.instantiate()"
  },
  {
    "objectID": "tips/240504_container/index.html#まとめ",
    "href": "tips/240504_container/index.html#まとめ",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "まとめ",
    "text": "まとめ\nこれらの作業を通じて、共同作業者もホスト側と同じ環境を揃えることができます。\n環境を揃えるためには、コミット、プッシュ、プルを行い、記録したファイルを共有することが重要です。\n単独での場合は、ブランチを作成する必要はないですが、コミット、プッシュで管理を行いましょう。\n以上がワークフローです。お疲れ様でした！"
  },
  {
    "objectID": "tips/240504_container/index.html#ホスト",
    "href": "tips/240504_container/index.html#ホスト",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "ホスト",
    "text": "ホスト\n\n必要なソフト等をインストールし、事前準備を行う。\n\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub\n\nGitHub でリポジトリをインポート、クローン\nRStudio Server でプロジェクトを作成\n\nrenv::init() で renv を開始\nrenv::snapshot() で適宜パッケージを記録\n\ndata フォルダを作成し、DVC で管理\n\nデータは data 内に追加\ndvc add data/ とdvc push を使用\n\nVSCode 上でコミット、プッシュ"
  },
  {
    "objectID": "tips/240504_container/index.html#共同作業者",
    "href": "tips/240504_container/index.html#共同作業者",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "共同作業者",
    "text": "共同作業者\n\n必要なソフト等をインストールし、事前準備を行う。\n\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub\n\nGitHub でリポジトリをクローン\nRStudio Server でプロジェクトを開く\n\nrenv::restore() でパッケージをインストール\n\ndvc pull でデータをダウンロード\nVSCode 上でコミット、プッシュ"
  },
  {
    "objectID": "tips/240504_container/index.html#作業中",
    "href": "tips/240504_container/index.html#作業中",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "作業中",
    "text": "作業中\n\nGitHub にコミット、プッシュ、プルを繰り返す。\nデータも新たに追加した場合、DVC で add, push, pull を行う。"
  },
  {
    "objectID": "tips/240504_container/index.html#footnotes",
    "href": "tips/240504_container/index.html#footnotes",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "注",
    "text": "注\n\n\n求められない場合は、続けて wsl とだけ入力してください。↩︎\nもしくは Mac↩︎\n単に Japanese でも出てきます。笑↩︎\n上から3番目↩︎\nMac なら &gt;&lt;↩︎\nTRUE のところを FALSE にして再度実行すれば消せます。↩︎\n余談ですが、renv::init() のように パッケージ名::関数 のような書き方をすれば、library(パッケージ名) をせずとも関数を使えます。1度だけ使いたいようなときに便利です。↩︎\nCtrl は Mac だと command↩︎\nステージしていないとコミットできません。↩︎\nどのような作業をしたのか↩︎\n現段階ではまだローカルには main が反映されていません。↩︎\nインストールしただけでコード内で使用していない場合は記録できません。↩︎\n私の場合認証の読み込みが終わらない問題によく直面するので、その際にはターミナルを消し、再度新しいターミナルで実行するようにしています。↩︎"
  },
  {
    "objectID": "tips/240621_python_container/index.html",
    "href": "tips/240621_python_container/index.html",
    "title": "Python のための開発コンテナ",
    "section": "",
    "text": "以前の記事で、Docker & VSCode を用いた R 環境の構築方法をご紹介しました。\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\n今回は同じく Docker & VSCode で使える Python の環境テンプレートを作成しましたので、そちらをご紹介します。\n以前の R 環境でも Python は使えましたが、特に R や Julia 等が不要である方は、ぜひ参考にしてみてください。\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub を使用されたことがあり、上の記事を読んでいただいた方は開発環境の構築まで飛んでいただいて大丈夫だと思います。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#wsl2windows-ユーザーのみ",
    "href": "tips/240621_python_container/index.html#wsl2windows-ユーザーのみ",
    "title": "Python のための開発コンテナ",
    "section": "WSL2（Windows ユーザーのみ）",
    "text": "WSL2（Windows ユーザーのみ）\n\nアプリ一覧から PowerShell または Windows コマンドプロンプトを管理者権限で開く\n\n右クリックで管理者権限を使えます。\n\n\n\n\n\n\n\n\n以下のコマンドを入力して実行\n\nこれでインストールはできるはずですが、詳しくはこちらのサイトを参照してください。\n\n\n\n\nPowerShell\n\nwsl --install\n\n\nユーザー名とパスワードを設定\n\nインストールが終わると、Linux ディストリビューションのユーザー名とパスワードの作成を求められます1。\nユーザー名は何でも大丈夫です。パスワードもめちゃくちゃ簡単で問題ありません。\nパスワードは画面上には表示されませんが、ちゃんと入力されています。慌てて何回も入力しないようにしてください。\n\n\nエクスプローラーから Linux に入り、\\Ubuntu\\home\\ユーザー名 がメインとなるディレクトリです。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#homebrewmac-ユーザーのみ",
    "href": "tips/240621_python_container/index.html#homebrewmac-ユーザーのみ",
    "title": "Python のための開発コンテナ",
    "section": "Homebrew（Mac ユーザーのみ）",
    "text": "Homebrew（Mac ユーザーのみ）\nMac ユーザーは Homebrew を使って諸々インストールしていくので、まだの方はここでインストールしてください。\n\nターミナルを開く\n\nアプリ一覧から「ターミナル」を探してください。\n\n以下のコマンドを入力して実行\n\nパスワードを求められるので、入力してください。\n\n\n\n\nTerminal\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
  },
  {
    "objectID": "tips/240621_python_container/index.html#sec-vscode-setting",
    "href": "tips/240621_python_container/index.html#sec-vscode-setting",
    "title": "Python のための開発コンテナ",
    "section": "VSCode",
    "text": "VSCode\n\nVSCode のダウンロードサイトからダウンロード、インストール\n\nDownload for Windows2 をクリックしてダウンロードできます。\nインストールができたら、VSCode を開いてください。\n\n（任意）日本語の拡張機能をインストール\n\n画面左側に拡張機能のアイコン  があります。ここの検索ボックスに japanese と入力し、1番上に出てきたものをインストールします。\nインストール後、VSCode を再起動すれば日本語が反映されていると思います。\n\n\n\n\n拡張機能のインストール\n\n拡張機能の検索ボックスで、次の ID を入力し、インストールします。\nms-vscode-remote.remote-containers (Dev Containers)\nms-vscode-remote.remote-wsl (WSL, Windows ユーザーのみ)\n\nWSL に接続（Windows ユーザーのみ）\n\nVSCode から先ほどインストールした WSL に接続します。\n画面左下の &gt;&lt; アイコンをクリックして、「WSL への接続」をクリックします。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#docker",
    "href": "tips/240621_python_container/index.html#docker",
    "title": "Python のための開発コンテナ",
    "section": "Docker",
    "text": "Docker\nDocker をインストールします。\n\nWindows の方はここから Docker Desktop for Windows を、Mac の方はこちらからダウンロード＆インストール\n設定の確認（Windows のみ）\n\nインストール出来たら、画面上部の設定ボタンから Resources、WSL integration と進み、チェックボックスにチェック、Ubuntu がオンになっていることを確認してください。\nたまに、何もしていないのにここがオフになっていて、トラブることがあります。\n詳しくはこちらをご覧ください。日本語で書いてあります。\n\n\n\n\n画面左側の Volumes に進み、Create からボリュームを作成\n\npip という名前で作成します。\nR の開発コンテナを作成したことがある方で、もし pip を作成 & 使用している場合、名前を変える必要があります。\n以前紹介した R 環境の中にある Python とはバージョンが異なるので、同じボリュームを使うとエラーが出る可能性があります。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#git",
    "href": "tips/240621_python_container/index.html#git",
    "title": "Python のための開発コンテナ",
    "section": "Git",
    "text": "Git\n\nWindows\n\nUbuntu で git をインストール\n\nWindows のアプリ一覧から Ubuntu を探し、開いてください。開いたら、以下のコマンドを入力して実行します。\n\n\n\n\nUbuntu\n\nsudo apt-get install git\n\n\n\n\nUbuntu\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\n\n\n\n\nUbuntu\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\nMac\n\nHomebrew で git をインストール\n\nターミナルを開いて、以下のコマンドを入力して実行します。\n\n\n\n\nTerminal\n\nbrew install git\n\n\n\n\nこの Mac では2回目なので git is already installed と表示されてます…。\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\nここに限らずですが、[] ごと置き換えてくださいね。\n\n\n\n\nTerminal\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]"
  },
  {
    "objectID": "tips/240621_python_container/index.html#github-アカウントの作成",
    "href": "tips/240621_python_container/index.html#github-アカウントの作成",
    "title": "Python のための開発コンテナ",
    "section": "GitHub アカウントの作成",
    "text": "GitHub アカウントの作成\nファイルは基本的に GitHub で管理するので、ここからアカウントを作成してください。\n\nポイント\nGitHub アカウントを作成したら、VSCode にログインしておきましょう。\n\nVSCode を開く\n画面左下のアイコンをクリック\n\nGitHub でサインインを行う\n\n\nGitHub にログインすることで、その後の作業がスムーズに進みます。\n事前準備は以上です！"
  },
  {
    "objectID": "tips/240621_python_container/index.html#github-リポジトリを作成",
    "href": "tips/240621_python_container/index.html#github-リポジトリを作成",
    "title": "Python のための開発コンテナ",
    "section": "GitHub リポジトリを作成",
    "text": "GitHub リポジトリを作成\n\nテンプレートの GitHub リポジトリ にアクセス\n画面右の「Use this template」から「Create a new repository」を選択\nRepository name を記入\nPrivate を選択\n\n通常のプロジェクトなら Private で OK\n\n「Create repository」をクリック"
  },
  {
    "objectID": "tips/240621_python_container/index.html#リポジトリをクローン",
    "href": "tips/240621_python_container/index.html#リポジトリをクローン",
    "title": "Python のための開発コンテナ",
    "section": "リポジトリをクローン",
    "text": "リポジトリをクローン\n\nVSCode を開く\n画面左側のアイコンから「ソース管理」3を開く\n「リポジトリの複製」を選択し、さらに「GitHub から複製」を選ぶ\nリポジトリを選択し、クローン\n\nリポジトリは、「ユーザー名/リポジトリ名」の形式で表示されます。\nクローンしたリポジトリを開くか問われるので、開いてください。\n\n画面右下に「コンテナーで再度開く」と出たらクリック\n\n出ない場合、画面左下「WSL: Ubuntu」4をクリックし、「コンテナーで再度開く」を選択してください。\n初めて環境を構築する場合、ここでかなり時間がかかるので辛抱強く待ちましょう。\n\n\n\n\n\n「コンテナーで再度開く」をクリック\n\n\nエクスプローラーを開き、\\\\wsl.localhost\\Ubuntu\\home\\ユーザー名 を確認してみてください。リポジトリ名と同じフォルダができていると思います。\nMac の場合は、ユーザー名の下にできているはずです。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#python-の設定",
    "href": "tips/240621_python_container/index.html#python-の設定",
    "title": "Python のための開発コンテナ",
    "section": "Python の設定",
    "text": "Python の設定\nこの環境では、pip を使用してパッケージをインストールし、requirements.txt でパッケージを管理します。\n\nDVC のインストール\nまず初めに、データを管理するための dvc をインストールしてみます。\nGoogle ドライブを使用してデータを管理するので、ドライブ上の任意の場所にデータを保存するためのフォルダを作っておいてください。\n\nVSCode を開く\n画面上「ターミナル」から「新しいターミナル」を開く\n以下のコマンドを入力して実行\n\n\n\nTerminal\n\npip install dvc dvc-gdrive\n\n\n次のコマンドを入力しておく\n\n最後の四角括弧で囲まれた部分を置き換えるので、まだ実行しないでください！\n\n\n\n\nTerminal\n\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\n\nGoogle ドライブで作成したフォルダの ID をコピー\n\nID は、ドライブでフォルダを開いたときの URL で、最後のスラッシュ（~/folders/）より右側の部分です。\n\n[Google DriveのフォルダID]を置き換えて実行\n\n以上で DVC の設定ができました。\n次に、今使った DVC パッケージを記録しておきましょう5。\n以下のコマンドを実行してください。\n\n\nTerminal\n\npip freeze &gt; requirements.txt\n\nこれで requirements.txt というファイルが生成され、その中にインストールしたパッケージの情報が保存されます。\n新たなパッケージをインストールしたら、適宜実行して保存していってください。\n\n\n\n\n\n\nちなみに\n\n\n\nパッケージは Docker にキャッシュされるので、1度インストールしてしまえば、別のプロジェクトではインストールしなくても使えます。\nこれはこのテンプレートの設定を使っていればの話なので、ローカルの Python であれば話は変わりますが…。\n\n\n違う PC など、環境を作成した環境とは異なる環境で作業に移るときは、リポジトリをクローンした後、以下のコマンドで必要なパッケージをインストールできます。\n\n\nTerminal\n\npip install -r requirements.txt\n\n作業の流れについては後ほど詳述します。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#データの管理",
    "href": "tips/240621_python_container/index.html#データの管理",
    "title": "Python のための開発コンテナ",
    "section": "データの管理",
    "text": "データの管理\nデータは今インストールした DVC で管理します。データは Google ドライブ上で保管されます。\n\nワーキングディレクトリに、data というフォルダを作成\nデータが入ったら、以下のコードを実行\n\ndata フォルダごとドライブに追加します。\ndata フォルダは .gitignore に記載されているため、GitHub にはアップロードされません。\n\n\n\n\nTerminal\n\ndvc add data/\n\n\n\n\n\n\n\nデータの入れ方\n\n\n\nデータは、Windows のエクスプローラーや Mac の Finder から直接フォルダに入れて大丈夫です（通常の Windows や Mac での作業のように）。\nデータをプッシュした後に Google ドライブを見てもらえれば分かりますが、よくわからない形で保存されています。DVC の仕組みがそのような保存形式になっているからなので、決してファイルが破損しているわけではありません。\nちなみに Windows ユーザーの方で、一回ローカルに落としてから Linux にデータ等を入れたら Zone.Identifier というファイルができることがありますが、これは無視して大丈夫です。邪魔であればまとめて消してください。\n\n\n\nデータをアップロード\n\n以下のコードでデータをプッシュします。\n\n\n\n\nTerminal\n\ndvc push\n\n最初は add と push をする過程でアカウントの認証が必要になりますが、表示に従って認証を進めてください6。\n\nデータのダウンロード\n\nパッケージと同様、別環境でデータをダウンロードするためには以下のコードを実行して下さい。\n\n\n\n\nTerminal\n\ndvc pull\n\nこれでデータが管理できます。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#作業終了時",
    "href": "tips/240621_python_container/index.html#作業終了時",
    "title": "Python のための開発コンテナ",
    "section": "作業終了時",
    "text": "作業終了時\n一連の作業を終えたら、GitHub にコミット、プッシュしましょう。\n\n作業内容をコミット\n\n画面左側の「ソース管理」をクリックします。\nファイルにカーソルを当てると、右側に「+」が表示されます。これをクリックしてステージングします7。\n画面上部の「メッセージを入力」にコミットメッセージ8を入力し、「✓コミット」をクリックしてください。\n\nプッシュ\n\n「ソース管理」の右側にある「…」をクリックし、「プッシュ」を選択してください。\nこれで、作業内容が GitHub にアップロードされます。\n\n\nプッシュをするのは最後で良いと思います。例えば作業を3つのファイルで行ったとしたら、それぞれのファイルでコミットメッセージを書いてコミットし、最後にプッシュすれば OK です。\n毎度毎度プッシュを行うより効率的ですね。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#作業手順",
    "href": "tips/240621_python_container/index.html#作業手順",
    "title": "Python のための開発コンテナ",
    "section": "作業手順",
    "text": "作業手順\n\n事前準備を行う\nリポジトリのクローン\n\nVSCode 内で行います。\nクローン出来たら、「コンテナーで再度開く」をクリックし開発コンテナに移動します。\n\nDVC の設定をする（データを使わない場合は5にスキップ）\n\npip install dvc dvc-gdrive\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\nデータの保存\n\nワーキングディレクトリに data フォルダを作成します。\ndata 内にデータを追加していきます。\n一通りデータを追加したら、dvc add data/ を実行します。\n\n作業をする\nパッケージを記録\n\npip freeze &gt; requirements.txt\nパッケージを追加したら適宜実行して下さい。\nパッケージごとに逐一実行する必要はありません。最後にまとめて、で大丈夫です。\n\ngit にコミット＆プッシュ\n\nVSCode 上でデータをコミット、プッシュします。\n\nデータをプッシュする\n\ndvc push\nこれを実行することでドライブにデータが送られます。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#別の環境で再現する",
    "href": "tips/240621_python_container/index.html#別の環境で再現する",
    "title": "Python のための開発コンテナ",
    "section": "別の環境で再現する",
    "text": "別の環境で再現する\n環境を変えた場合は、次の流れで環境を再現します。\n\n事前準備\nリポジトリのクローン\n\n開発コンテナに入ります。\n\nターミナルで以下を実行\n\nPython のパッケージがインストールされ、データもダウンロードされます。\n\n\n\n\nTerminal\n\npip install -r requirements.txt\ndvc pull\n\nあとは上の流れと同じです。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#footnotes",
    "href": "tips/240621_python_container/index.html#footnotes",
    "title": "Python のための開発コンテナ",
    "section": "注",
    "text": "注\n\n\n求められない場合は、続けて wsl とだけ入力して実行してください。↩︎\nもしくは Mac↩︎\n上から3番目↩︎\nMac なら &gt;&lt;↩︎\n記録しておくことで、違う PC に変えたり共同研究をしたりするなど違う環境で実行するときに、必要なパッケージを指定したバージョンで簡単にインストールすることができます。↩︎\n私の場合認証の読み込みが終わらない問題によく直面するので、その際にはターミナルを消し、再度新しいターミナルで実行するようにしています。↩︎\nステージしていないとコミットできません。↩︎\nどのような作業をしたのか↩︎"
  },
  {
    "objectID": "tips/240512_beamer/index.html",
    "href": "tips/240512_beamer/index.html",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "",
    "text": "\\(\\LaTeX\\) の Beamer で使える Metropolis テーマがおしゃれだと思ったので使ってみたい！というモチベーションです。\n普段は Reveal.js を使っているので、Metropolis テーマを Reveal.js で再現したいと思い、できる限り頑張ってみました。\n\n\n\nMetropolis テーマはこんな感じです（GitHub リポジトリより）"
  },
  {
    "objectID": "tips/240512_beamer/index.html#footnotes",
    "href": "tips/240512_beamer/index.html#footnotes",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "注",
    "text": "注\n\n\n塗りつぶしがうまくいかなかっただけです。↩︎"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html",
    "href": "tips/240506_gis_on_r/index.html",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "",
    "text": "R 上で GIS を操作する方法を簡単に紹介します。\nGIS を R 上で実行するメリットは、再現性が担保できることです。同じ作業を繰り返しするような場合、力を発揮すると思います。また、ggplot2 で可視化できる点も便利です。\n主に、使用するパッケージ、データの読み込み、簡単なデータハンドリング、そして交差する地物の抽出を少しご紹介します。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#鉄道データ",
    "href": "tips/240506_gis_on_r/index.html#鉄道データ",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "鉄道データ",
    "text": "鉄道データ\n今回は日本の鉄道（駅）データを使用してみます。\n\n国土数値情報ダウンロードサイトより「鉄道（ライン）」をクリック、2022年のデータをダウンロード\n\n\n\n\n一番上の2022年データを今回は使用"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#行政区域データ",
    "href": "tips/240506_gis_on_r/index.html#行政区域データ",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "行政区域データ",
    "text": "行政区域データ\n後ほど鉄道データと重ねて使うために使用します。\n同様に国土数値情報ダウンロードサイトから、「行政区域」に進み、今回は福島県の2024年データをダウンロードします。\n鉄道データと同じフォルダに入れておいてください。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#ggplot2",
    "href": "tips/240506_gis_on_r/index.html#ggplot2",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "ggplot2",
    "text": "ggplot2\nおなじみ ggplot2 パッケージを使ってこれらの路線を可視化します1。\n\nstation |&gt; \n  ggplot() + \n  geom_sf() + # GIS 用\n  theme_void() # 背景や罫線を除去\n\n\n\n\n\n\n\n図 1: 日本の駅\n\n\n\n\n\nなんとなく日本が形作られましたね。東京と大阪に特に駅が多いことも一目瞭然です。\n同様に路線もプロットします。\n\nrail |&gt; \n  ggplot() + \n  geom_sf() + \n  theme_void()\n\n\n\n\n\n\n\n図 2: 日本の鉄道路線\n\n\n\n\n\nこうして見るとなんか面白いですよね。北海道の北東部は線路がないみたいです。\nここまでシンプルに可視化する方法をご紹介しました。次のセクションでもう少し地域にフォーカスして見ていきます。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#データの抽出",
    "href": "tips/240506_gis_on_r/index.html#データの抽出",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "データの抽出",
    "text": "データの抽出\n例えば、新幹線の駅だけデータとして使いたいとします。\n先ほどのダウンロードサイトの属性情報の部分をご覧ください。そこから事業者種別コード（変数名：N02-002）を確認してみると、1が新幹線に該当することが分かります。\nここで、tidyverse パッケージを使用しながら、東北新幹線の駅だけを抽出してみましょう。また、列名を変更しながら必要な変数のみ抽出します。\n\nsta_tohoku &lt;- station |&gt; \n  filter(N02_002 == 1, N02_003 == \"東北新幹線\") |&gt; \n  select(\"路線名\" = N02_003, \"駅名\" = N02_005, geometry)\n\n\n\n\n\n表 1: 東北新幹線の駅情報（上から6行を表示）\n\n\n\n\n\n\n\n\n\n路線名\n駅名\ngeometry\n\n\n\n\n東北新幹線\n二戸\nc(141.28627, 141.28491, 40.26107, 40.25848)\n\n\n東北新幹線\nいわて沼宮内\nc(141.21742, 141.21742, 39.96114, 39.96009)\n\n\n東北新幹線\n八戸\nc(141.42981, 141.43206, 40.50822, 40.51043)\n\n\n東北新幹線\n盛岡\nc(141.13807, 141.13499, 39.70015, 39.70295)\n\n\n東北新幹線\n北上\nc(141.12356, 141.12285, 141.12234, 141.12168, 39.28386, 39.28272, 39.28188, 39.28054)\n\n\n東北新幹線\n水沢江刺\nc(141.18919, 141.18822, 39.14381, 39.14651)\n\n\n\n\n\n\n\n\n\n\n表 1 をご覧いただくと分かる通り、東北新幹線の駅のみを抽出できています。また、geometry 変数が地理情報を示しています。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#ラインデータをポイントデータ化する",
    "href": "tips/240506_gis_on_r/index.html#ラインデータをポイントデータ化する",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "ラインデータをポイントデータ化する",
    "text": "ラインデータをポイントデータ化する\n駅はラインデータになっています。駅は幅を持っているためです。そこで、これをポイントデータ化し、駅の位置を1点で特定します。\nまず、ラインデータがどうなっているか確認しましょう。地図を拡大して見てみると、線状になっていることが分かります。\n\n\n\n\n\n\n\nこれをポイント化するために使用するのが、sf::st_centroid() です。地物の重心を求めてくれます。\nコードは以下です。\n\nsta_tohoku_c &lt;- sta_tohoku |&gt; \n  st_centroid(geometry)\n\n改めて見てみると、ポイントになっていることが分かります。\n\n\n\n\n\n\n\nポイントデータ化するメリットとしては、距離の算出に使えることなどがあります。ある地点から駅までの距離を算出したい場合、駅が幅を持っていると距離算出の基準が曖昧になってしまうので、そこでポイント化すればその基準を明確化できるというわけです。\n以上、sf::st_centroid() を用いてポイントデータ化する方法をご紹介しました。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#行政区域データ-1",
    "href": "tips/240506_gis_on_r/index.html#行政区域データ-1",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "行政区域データ",
    "text": "行政区域データ\nまず、福島県の行政区域データを読み込み、可視化しましょう。\n\nfukushima &lt;- read_sf(here(\"data/N03-20240101_07_GML/N03-20240101_07.shp\"))\n\n\nfukushima |&gt; \n  ggplot() + \n  geom_sf() + \n  theme_void()\n\n\n\n\n\n\n\n図 3: 福島県"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#抽出",
    "href": "tips/240506_gis_on_r/index.html#抽出",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "抽出",
    "text": "抽出\n次に、sta_tohoku_c を用いて、福島県と交差する（含まれる）駅を抽出します。\n交差する地物を抽出するためには、sf::st_intersects() もしくは sf::st_intersection() を用います。\n正直後者の方がシンプルなのですが、両者には次のような違いがあります。\n\nst_intersects(): 2つのジオメトリが交差するかどうかの論理判定（TRUE/FALSEやインデックスのリスト）を返す\nst_intersection(): 交差部分のジオメトリそのものを新しいオブジェクトとして返します。\n\n何やら難しいので、わかんなくて困ったら後者を使っておけばよいのではないでしょうか3。\nコードは以下のようになります。\n\nsta_07_a &lt;- sta_tohoku_c |&gt; \n  filter(\n    row_number() %in% \n      st_intersects(fukushima, sta_tohoku_c) |&gt; \n      unlist()\n  )\n\n\nsta_07_b &lt;- st_intersection(fukushima, sta_tohoku_c)\n\n\n\n\n\n\n\n1つ目の方法について\n\n\n\n\n\n1つ目は大変複雑ですね。プロセスを紐解くと次のようになります。\n\nsta_tohoku_c から抽出するので、sta_tohoku_c からスタート\n抽出するので dplyr::filter() を使用\nsf::st_intersects() で、fukushima と重なる sta_tohoku_cを抽出\nsf::st_intersects() はリスト形式で結果を返すので、unlist() を用いてリスト形式を解除\nsta_tohoku_c の行番号と照らし合わせ、返ってきた結果と同じもののみ抽出\n\n\n\n\n結果は次のようになります。\n\n\n\n\n表 2: st_intersects() を用いた場合\n\n\n\n\n\n\n\n\n\n路線名\n駅名\ngeometry\n\n\n\n\n東北新幹線\n福島\nc(140.458612067603, 37.7540599673619)\n\n\n東北新幹線\n郡山\nc(140.388619989856, 37.3986200007428)\n\n\n東北新幹線\n新白河\nc(140.188827537169, 37.1233084742238)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n表 3: st_intersection() を用いた場合\n\n\n\n\n\n\n\n\n\nN03_001\nN03_002\nN03_003\nN03_004\nN03_005\nN03_007\n路線名\n駅名\ngeometry\n\n\n\n\n福島県\nNA\nNA\n福島市\nNA\n07201\n東北新幹線\n福島\nc(140.458612067603, 37.7540599673619)\n\n\n福島県\nNA\nNA\n郡山市\nNA\n07203\n東北新幹線\n郡山\nc(140.388619989856, 37.3986200007428)\n\n\n福島県\nNA\n西白河郡\n西郷村\nNA\n07461\n東北新幹線\n新白河\nc(140.188827537169, 37.1233084742238)\n\n\n\n\n\n\n\n\n\n\n2つ目のやり方の方が少しごちゃっとしたデータとして返ってきました。\nめんどくさいけどクリーンな方か、簡単だけど煩雑な方か、お好みで使ってみてください。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#footnotes",
    "href": "tips/240506_gis_on_r/index.html#footnotes",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "注",
    "text": "注\n\n\nあまりなじみのない方に向けて言っておくと、tidyverse パッケージの中に ggplot2 も含まれています。↩︎\n正直この程度であればこんなことするまでもないですが、例ということで悪しからず。いろいろ応用は利きますよ！↩︎\nしかし後者の方が時間はかかりますし、2つのデータをもとに新しいデータを作るので、できたデータは2つのデータフレームの情報を含みます。つまり、ちょっと煩雑なデータが出来上がります。↩︎"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html",
    "href": "tips/240629_write_thesis/index.html",
    "title": "【PDF】Quarto で論文を書く",
    "section": "",
    "text": "これまでの記事で R Markdown や Quarto を使って \\(\\LaTeX\\) 経由で PDF 出力する方法や、それらで使えるチャンクオプションについてご紹介してきました。\n\n\n\n\n\n\nR MarkdownでPDF出力【LaTeX】\n\n\n\n\n\n\n\n\n\n【Quarto】チャンクオプションまとめてみた【R Markdown】\n\n\n\n今回は、Quarto を使って論文を書く方法について包括的にまとめてみました。\nぜひ参考にしてみてください。\nまた、環境として RStudio を使用していると仮定します。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#プロジェクトの作成",
    "href": "tips/240629_write_thesis/index.html#プロジェクトの作成",
    "title": "【PDF】Quarto で論文を書く",
    "section": "プロジェクトの作成",
    "text": "プロジェクトの作成\n必須ではありませんが推奨します。プロジェクトを作成することで、ファイルの管理がしやすくなります。\nプロジェクトの作成については以下の記事で紹介しています。\\(\\LaTeX\\) との差別化点として、分析結果をそのまま埋め込めることがあげられ、プロジェクトを作成することで、その恩恵を最大限受けられると考えています。\n\n\n\n\n\n\n【R】プロジェクトを使う"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#ファイルの作成",
    "href": "tips/240629_write_thesis/index.html#ファイルの作成",
    "title": "【PDF】Quarto で論文を書く",
    "section": "ファイルの作成",
    "text": "ファイルの作成\nQuarto で論文を書くには、拡張子が .qmd のファイルを作成します。これは Quarto Markdown の略です。\nRStudio 画面左上の  をクリックし、「Quarto Document…」を選択します。\n以下のようにタイトルと著者名、PDF を選択し、Create をクリックします。“Use visual markdown editor” はオフにしてください2。\n\n作成出来たら、 でファイルを任意の場所に保存します3。\nもし Quarto や R Markdown を使うのが初めての場合、上部に “Package rmarkdown required but not installed. Install Don’t show again” というメッセージが表示されるかもしれません。その場合、“Install” をクリックしてインストールしてください。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#global-options-の設定",
    "href": "tips/240629_write_thesis/index.html#global-options-の設定",
    "title": "【PDF】Quarto で論文を書く",
    "section": "Global Options の設定",
    "text": "Global Options の設定\nRStudio 上部のメニューから “Tools” &gt; “Global Options…” を選択します。\nその中の “Sweave” を選択し、“Typeset LaTeX into PDF using:” で “XeLaTeX” を選択します。また、その下にある “Use tinytex when compiling .tex files” にチェックを入れます。\n最後に OK を押して閉じてください。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#ヘッダーの記述",
    "href": "tips/240629_write_thesis/index.html#ヘッダーの記述",
    "title": "【PDF】Quarto で論文を書く",
    "section": "ヘッダーの記述",
    "text": "ヘッダーの記述\nファイルを作成すると、ドキュメントの上部に---で囲まれた部分があります。これを YAML ヘッダーと呼び、ここで文書の設定を行います。\n以下は、基本的なYAMLヘッダーの設定です。\n---\ntitle: \"【PDF】Quarto で論文を書く\"\nauthor: \"阿部洋輔\"\ndate: 2024-07-08  # todayで今日の日付にできます\ndate-format: \"YYYY年M月D日\" \nformat: \n  pdf: \n    documentclass: article\n    number-sections: true\n    include-in-header: \n      - text: |\n          \\usepackage{zxjatype}\n          \\usepackage[ipaex]{zxjafont} \n          # これらは日本語フォントの設定のために記述しています\nexecute: \n  echo: false  # コードを表示しない\n  warning: false # 警告とメッセージを表示しない\nlanguage: \n  crossref-fig-title: \"図\"\n  crossref-tbl-title: \"表\"\n  crossref-eq-prefix: \"式\"\n---\n分析コードや実行の際に表示されるメッセージ・警告は出力しなくてよいので false にしてあります。\nまた、デフォルトだと英語設定でキャプションが Table 1 や Figure 1 と表示されてしまうので、それを日本語に直すために language を追加しています。他にも自動で英語出力されてしまって困る際はこちらから該当するものを探し、下に追加していってください4。\nもちろん英語論文を執筆する際に日本語設定は不要です。\ndate-format についてはこちらを参考にしてください。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#footnotes",
    "href": "tips/240629_write_thesis/index.html#footnotes",
    "title": "【PDF】Quarto で論文を書く",
    "section": "注",
    "text": "注\n\n\n\\(\\LaTeX\\) コードを埋め込むこともできます。↩︎\n僕は使い方が分かりません。↩︎\n僕は基本的に code フォルダを作ってそこに保存しています。↩︎\n本当は lang: ja を設定するだけで万事解決のはずなのですが、パッケージのインストールでトラブるので、このような場当たり的な対処になっています。↩︎\n結果も隠したいときは result: false をチャンクオプションとして指定します。チャンクオプションについてはこちら↩︎\ngm もそうですが、名前は何でもよいです。↩︎\n“nobs”, “r.squared” の2つの項目を表示し、その表記を “観測数”, “\\(R^2\\)” とし、小数点以下は観測数がなし、\\(R^2\\) は第2位までにしています。↩︎\nmsummary でも modelsummary でも使用できます。↩︎\nggplot(iris, aes(~)) の形でも図は作れますが、変数名は予測変換で出てきません。↩︎\nhere についてはこちら↩︎\nデフォルトでは300です。↩︎"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html",
    "href": "tips/240414_benri_seirei/index.html",
    "title": "政令指定都市・中核市の整理",
    "section": "",
    "text": "これを作ったきっかけは、政令指定都市ダミーや中核市ダミーをサクサクッと作りたかったからです。\nまた、データによっては\n\n\n\n\n\n\n\n\n都道府県\n市区町村\nID\n\n\n\n\n北海道\n札幌市中央区\n01101\n\n\n北海道\n札幌市北区\n01102\n\n\n北海道\n札幌市東区\n01103\n\n\n\n\n\n\n\nと、政令指定都市が市単位ではなく区単位でしかなかったりします。要は、「札幌市」だけのような行が欲しいということです。\nデータによってはもう少しいじらなければならないものの、dplyr::bind_rows()を使って市のデータを追加できたりします。"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html#footnotes",
    "href": "tips/240414_benri_seirei/index.html#footnotes",
    "title": "政令指定都市・中核市の整理",
    "section": "注",
    "text": "注\n\n\n2024年4月現在↩︎"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html",
    "href": "tips/240622_census_cleansing/index.html",
    "title": "国勢調査データのクレンジング",
    "section": "",
    "text": "国勢調査のデータを使う際、そのままでは R 等で使えない場合が多いので、分析用にデータをクレンジングするコードをご紹介します。\n応用が利くと思うので、ぜひ。"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html#パッケージ",
    "href": "tips/240622_census_cleansing/index.html#パッケージ",
    "title": "国勢調査データのクレンジング",
    "section": "パッケージ",
    "text": "パッケージ\n\nlibrary(tidyverse)  # データハンドリングのため\nlibrary(here)  # 相対パスを使うため"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html#読み込み",
    "href": "tips/240622_census_cleansing/index.html#読み込み",
    "title": "国勢調査データのクレンジング",
    "section": "読み込み",
    "text": "読み込み\n前提：\n\nワーキングディレクトリを指定してあること1。\nワーキングディレクトリ内の data/census_2020 にテキストファイルが入っていること。\n\n\n確認\nまずはじめに、ファイルの中身がどのようになっているのか、一つのファイルを読み込んで確かめてみます。\nちなみにファイルは Shift_JIS なので、ロケールも設定します。\n\ntest &lt;- read_csv(here(\"data/census_2020/tblT001141H3622.txt\"), \n                 locale = locale(encoding = \"Shift_JIS\"))\n\n\nhead(test)\n\n\n\n\n\n表 1: 生データ\n\n\n\n\n\n\n\n\n\nKEY_CODE\nHTKSYORI\nHTKSAKI\nGASSAN\nT001141001\nT001141002\nT001141003\nT001141004\nT001141005\nT001141006\nT001141007\nT001141008\nT001141009\nT001141010\nT001141011\nT001141012\nT001141013\nT001141014\nT001141015\nT001141016\nT001141017\nT001141018\nT001141019\nT001141020\nT001141021\nT001141022\nT001141023\nT001141024\nT001141025\nT001141026\nT001141027\nT001141028\nT001141029\nT001141030\nT001141031\nT001141032\nT001141033\nT001141034\nT001141035\nT001141036\nT001141037\nT001141038\nT001141039\nT001141040\nT001141041\nT001141042\nT001141043\nT001141044\nT001141045\nT001141046\nT001141047\nT001141048\nT001141049\nT001141050\n\n\n\n\nNA\nNA\nNA\nNA\n　人口（総数）\n　人口（総数）　男\n　人口（総数）　女\n　０〜１４歳人口　総数\n　０〜１４歳人口　男\n　０〜１４歳人口　女\n　１５歳以上人口　総数\n　１５歳以上人口　男\n　１５歳以上人口　女\n　１５〜６４歳人口　総数\n　１５〜６４歳人口　男\n　１５〜６４歳人口　女\n　１８歳以上人口　総数\n　１８歳以上人口　男\n　１８歳以上人口　女\n　２０歳以上人口　総数\n　２０歳以上人口　男\n　２０歳以上人口　女\n　６５歳以上人口　総数\n　６５歳以上人口　男\n　６５歳以上人口　女\n　７５歳以上人口　総数\n　７５歳以上人口　男\n　７５歳以上人口　女\n　８５歳以上人口　総数\n　８５歳以上人口　男\n　８５歳以上人口　女\n　９５歳以上人口　総数\n　９５歳以上人口　男\n　９５歳以上人口　女\n　外国人人口　総数\n　外国人人口　男\n　外国人人口　女\n　世帯総数\n　一般世帯数\n　１人世帯数　一般世帯数\n　２人世帯数　一般世帯数\n　３人世帯数　一般世帯数\n　４人世帯数　一般世帯数\n　５人世帯数　一般世帯数\n　６人世帯数　一般世帯数\n　７人以上世帯数　一般世帯数\n　親族のみの世帯数　一般世帯数\n　核家族世帯数　一般世帯数\n　核家族以外の世帯数　一般世帯数\n　６歳未満世帯員のいる世帯数　一般世帯数\n　６５歳以上世帯員のいる世帯数　一般世帯数\n　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\n　高齢単身世帯数　一般世帯数\n　高齢夫婦世帯数　一般世帯数\n\n\n362257353\n0\nNA\nNA\n29\n15\n14\n5\n2\n3\n24\n13\n11\n19\n11\n8\n23\n12\n11\n23\n12\n11\n5\n2\n3\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n16\n16\n10\n1\n4\n0\n1\n0\n0\n6\n4\n2\n1\n4\n1\n1\n0\n\n\n362257354\n0\nNA\nNA\n96\n91\n5\n0\n0\n0\n96\n91\n5\n96\n91\n5\n96\n91\n5\n96\n91\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n362257381\n0\nNA\nNA\n101\n46\n55\n24\n9\n15\n77\n37\n40\n54\n27\n27\n76\n36\n40\n76\n36\n40\n23\n10\n13\n5\n1\n4\n4\n1\n3\n1\n0\n1\n0\n0\n0\n39\n39\n11\n8\n8\n10\n2\n0\n0\n28\n24\n4\n8\n16\n1\n4\n3\n\n\n362257382\n0\nNA\nNA\n28\n16\n12\n1\n0\n1\n27\n16\n11\n19\n13\n6\n27\n16\n11\n27\n16\n11\n8\n3\n5\n6\n3\n3\n0\n0\n0\n0\n0\n0\n2\n1\n1\n18\n18\n11\n4\n3\n0\n0\n0\n0\n7\n6\n1\n0\n5\n1\n1\n2\n\n\n362257451\n0\nNA\nNA\n117\n59\n58\n20\n13\n7\n97\n46\n51\n70\n34\n36\n96\n46\n50\n96\n46\n50\n27\n12\n15\n14\n4\n10\n5\n0\n5\n0\n0\n0\n0\n0\n0\n58\n58\n25\n18\n10\n1\n2\n2\n0\n32\n25\n7\n3\n22\n0\n7\n4\n\n\n\n\n\n\n\n\n\n\nこれを見てみると、1行目には特に意味がなく、2行目が列名になっていることが分かります。\nそこで、1行目をスキップして読み込むために、read_csv() 内で skip を指定します。\n\ntest_skip1 &lt;- read_csv(here(\"data/census_2020/tblT001141H3622.txt\"), skip = 1, \n                       locale = locale(encoding = \"Shift_JIS\"))\n\n\nhead(test_skip1)\n\n\n\n\n\n表 2: 1行目をスキップ\n\n\n\n\n\n\n\n\n\n...1\n...2\n...3\n...4\n　人口（総数）\n　人口（総数）　男\n　人口（総数）　女\n　０〜１４歳人口　総数\n　０〜１４歳人口　男\n　０〜１４歳人口　女\n　１５歳以上人口　総数\n　１５歳以上人口　男\n　１５歳以上人口　女\n　１５〜６４歳人口　総数\n　１５〜６４歳人口　男\n　１５〜６４歳人口　女\n　１８歳以上人口　総数\n　１８歳以上人口　男\n　１８歳以上人口　女\n　２０歳以上人口　総数\n　２０歳以上人口　男\n　２０歳以上人口　女\n　６５歳以上人口　総数\n　６５歳以上人口　男\n　６５歳以上人口　女\n　７５歳以上人口　総数\n　７５歳以上人口　男\n　７５歳以上人口　女\n　８５歳以上人口　総数\n　８５歳以上人口　男\n　８５歳以上人口　女\n　９５歳以上人口　総数\n　９５歳以上人口　男\n　９５歳以上人口　女\n　外国人人口　総数\n　外国人人口　男\n　外国人人口　女\n　世帯総数\n　一般世帯数\n　１人世帯数　一般世帯数\n　２人世帯数　一般世帯数\n　３人世帯数　一般世帯数\n　４人世帯数　一般世帯数\n　５人世帯数　一般世帯数\n　６人世帯数　一般世帯数\n　７人以上世帯数　一般世帯数\n　親族のみの世帯数　一般世帯数\n　核家族世帯数　一般世帯数\n　核家族以外の世帯数　一般世帯数\n　６歳未満世帯員のいる世帯数　一般世帯数\n　６５歳以上世帯員のいる世帯数　一般世帯数\n　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\n　高齢単身世帯数　一般世帯数\n　高齢夫婦世帯数　一般世帯数\n\n\n\n\n362257353\n0\nNA\nNA\n29\n15\n14\n5\n2\n3\n24\n13\n11\n19\n11\n8\n23\n12\n11\n23\n12\n11\n5\n2\n3\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n16\n16\n10\n1\n4\n0\n1\n0\n0\n6\n4\n2\n1\n4\n1\n1\n0\n\n\n362257354\n0\nNA\nNA\n96\n91\n5\n0\n0\n0\n96\n91\n5\n96\n91\n5\n96\n91\n5\n96\n91\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n362257381\n0\nNA\nNA\n101\n46\n55\n24\n9\n15\n77\n37\n40\n54\n27\n27\n76\n36\n40\n76\n36\n40\n23\n10\n13\n5\n1\n4\n4\n1\n3\n1\n0\n1\n0\n0\n0\n39\n39\n11\n8\n8\n10\n2\n0\n0\n28\n24\n4\n8\n16\n1\n4\n3\n\n\n362257382\n0\nNA\nNA\n28\n16\n12\n1\n0\n1\n27\n16\n11\n19\n13\n6\n27\n16\n11\n27\n16\n11\n8\n3\n5\n6\n3\n3\n0\n0\n0\n0\n0\n0\n2\n1\n1\n18\n18\n11\n4\n3\n0\n0\n0\n0\n7\n6\n1\n0\n5\n1\n1\n2\n\n\n362257451\n0\nNA\nNA\n117\n59\n58\n20\n13\n7\n97\n46\n51\n70\n34\n36\n96\n46\n50\n96\n46\n50\n27\n12\n15\n14\n4\n10\n5\n0\n5\n0\n0\n0\n0\n0\n0\n58\n58\n25\n18\n10\n1\n2\n2\n0\n32\n25\n7\n3\n22\n0\n7\n4\n\n\n362257452\n1\nNA\n362257454\n348\n182\n166\n85\n41\n44\n273\n149\n124\n214\n118\n96\n271\n148\n123\n269\n148\n121\n59\n31\n28\n23\n10\n13\n11\n3\n8\n0\n0\n0\n0\n0\n0\n162\n162\n86\n34\n19\n15\n10\n5\n1\n80\n72\n8\n26\n43\n12\n18\n9\n\n\n\n\n\n\n\n\n\n\nこの後必要な列をセレクトして名前を付け直すので、ここで一旦列名を確認してみましょう。\n\ncolnames(test_skip1)\n\n [1] \"...1\"                                                \n [2] \"...2\"                                                \n [3] \"...3\"                                                \n [4] \"...4\"                                                \n [5] \"　人口（総数）\"                                      \n [6] \"　人口（総数）　男\"                                  \n [7] \"　人口（総数）　女\"                                  \n [8] \"　０〜１４歳人口　総数\"                              \n [9] \"　０〜１４歳人口　男\"                                \n[10] \"　０〜１４歳人口　女\"                                \n[11] \"　１５歳以上人口　総数\"                              \n[12] \"　１５歳以上人口　男\"                                \n[13] \"　１５歳以上人口　女\"                                \n[14] \"　１５〜６４歳人口　総数\"                            \n[15] \"　１５〜６４歳人口　男\"                              \n[16] \"　１５〜６４歳人口　女\"                              \n[17] \"　１８歳以上人口　総数\"                              \n[18] \"　１８歳以上人口　男\"                                \n[19] \"　１８歳以上人口　女\"                                \n[20] \"　２０歳以上人口　総数\"                              \n[21] \"　２０歳以上人口　男\"                                \n[22] \"　２０歳以上人口　女\"                                \n[23] \"　６５歳以上人口　総数\"                              \n[24] \"　６５歳以上人口　男\"                                \n[25] \"　６５歳以上人口　女\"                                \n[26] \"　７５歳以上人口　総数\"                              \n[27] \"　７５歳以上人口　男\"                                \n[28] \"　７５歳以上人口　女\"                                \n[29] \"　８５歳以上人口　総数\"                              \n[30] \"　８５歳以上人口　男\"                                \n[31] \"　８５歳以上人口　女\"                                \n[32] \"　９５歳以上人口　総数\"                              \n[33] \"　９５歳以上人口　男\"                                \n[34] \"　９５歳以上人口　女\"                                \n[35] \"　外国人人口　総数\"                                  \n[36] \"　外国人人口　男\"                                    \n[37] \"　外国人人口　女\"                                    \n[38] \"　世帯総数\"                                          \n[39] \"　一般世帯数\"                                        \n[40] \"　１人世帯数　一般世帯数\"                            \n[41] \"　２人世帯数　一般世帯数\"                            \n[42] \"　３人世帯数　一般世帯数\"                            \n[43] \"　４人世帯数　一般世帯数\"                            \n[44] \"　５人世帯数　一般世帯数\"                            \n[45] \"　６人世帯数　一般世帯数\"                            \n[46] \"　７人以上世帯数　一般世帯数\"                        \n[47] \"　親族のみの世帯数　一般世帯数\"                      \n[48] \"　核家族世帯数　一般世帯数\"                          \n[49] \"　核家族以外の世帯数　一般世帯数\"                    \n[50] \"　６歳未満世帯員のいる世帯数　一般世帯数\"            \n[51] \"　６５歳以上世帯員のいる世帯数　一般世帯数\"          \n[52] \"　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\"\n[53] \"　高齢単身世帯数　一般世帯数\"                        \n[54] \"　高齢夫婦世帯数　一般世帯数\"                        \n\n\nこれはトラップで、よく見ると変数名の前に全角スペースが空いています。列名を変更するときはここに注意しないと、謎のエラーに苛まれます。"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html#まとめて読み込む",
    "href": "tips/240622_census_cleansing/index.html#まとめて読み込む",
    "title": "国勢調査データのクレンジング",
    "section": "まとめて読み込む",
    "text": "まとめて読み込む\nではファイルの中身を確認できたところで、ファイルをまとめて読み込みます。\n結論から言うと、コードは以下です。\n\n# 指定されたディレクトリ内のファイル名の文字ベクトルを生成\ncensus_files &lt;- list.files(here(\"data/census_2020\"),  # ファイルが入っているフォルダのパス\n                           pattern = \"\\\\.txt$\", full.names = TRUE)\n\n# lapplyで、ファイル一覧に対して読み込む関数を適用\ncensus_objects &lt;- lapply(\n  census_files, \n  function(file) {\n    census_obj &lt;- read_csv(file, locale = locale(encoding = \"Shift_JIS\"), skip = 1) |&gt; \n      # 使いたい列をセレクトする\n      select(1:4, \"　人口（総数）\", \"　０〜１４歳人口　総数\", \n             \"　１５〜６４歳人口　総数\", \"　６５歳以上人口　総数\") |&gt; \n      # 2列目が0であれば秘匿対象外\n      filter(...2 == 0) |&gt; \n      # 2, 3, 4列目はもう使わないので除く\n      select(-c(...2, ...3, ...4)) |&gt; \n      # 変数名は任意\n      rename(\n        KEY_CODE = ...1, \n        pop_total = \"　人口（総数）\", \n        pop_young = \"　０〜１４歳人口　総数\", \n        pop_working = \"　１５〜６４歳人口　総数\", \n        pop_old = \"　６５歳以上人口　総数\"\n      ) |&gt; \n      # 変数のクラスを指定\n      mutate(\n        KEY_CODE = as.character(KEY_CODE), \n        pop_total = as.numeric(pop_total), \n        pop_young = as.numeric(pop_young), \n        pop_working = as.numeric(pop_working), \n        pop_old = as.numeric(pop_old)\n      )\n  }\n) |&gt; \n  # 読み込んだデータをバインドする\n  bind_rows()\n\nポイントをいくつか挙げます。\nポイント\n\nlist.files()\n\n指定したフォルダ内の .txt で終わるファイルを取得しています。\n\nlapply()\n\n第1引数（1で取得したファイル）に対し、第2引数（function）を適用します。\nfunction では、ファイルの読み込みや変数名の変更など、いくつかの作業をして結果を返すよう指示しています。\n\nfilter(...2 == 0)\n\n...2 はもともと HTKSYORI（秘匿処理） という列名でした。これが0であると秘匿対象外であり、データが存在します2。\n逆に秘匿対象だと 表 3 のようになります。\nフィルターをかけてデータがあるところを抽出します。\n\n\n\n\n\n\n表 3: データがアスタリスクで置き換えられています。\n\n\n\n\n\n\n\n\n\n...1\n...2\n...3\n...4\n　人口（総数）\n　人口（総数）　男\n　人口（総数）　女\n　０〜１４歳人口　総数\n　０〜１４歳人口　男\n　０〜１４歳人口　女\n　１５歳以上人口　総数\n　１５歳以上人口　男\n　１５歳以上人口　女\n　１５〜６４歳人口　総数\n　１５〜６４歳人口　男\n　１５〜６４歳人口　女\n　１８歳以上人口　総数\n　１８歳以上人口　男\n　１８歳以上人口　女\n　２０歳以上人口　総数\n　２０歳以上人口　男\n　２０歳以上人口　女\n　６５歳以上人口　総数\n　６５歳以上人口　男\n　６５歳以上人口　女\n　７５歳以上人口　総数\n　７５歳以上人口　男\n　７５歳以上人口　女\n　８５歳以上人口　総数\n　８５歳以上人口　男\n　８５歳以上人口　女\n　９５歳以上人口　総数\n　９５歳以上人口　男\n　９５歳以上人口　女\n　外国人人口　総数\n　外国人人口　男\n　外国人人口　女\n　世帯総数\n　一般世帯数\n　１人世帯数　一般世帯数\n　２人世帯数　一般世帯数\n　３人世帯数　一般世帯数\n　４人世帯数　一般世帯数\n　５人世帯数　一般世帯数\n　６人世帯数　一般世帯数\n　７人以上世帯数　一般世帯数\n　親族のみの世帯数　一般世帯数\n　核家族世帯数　一般世帯数\n　核家族以外の世帯数　一般世帯数\n　６歳未満世帯員のいる世帯数　一般世帯数\n　６５歳以上世帯員のいる世帯数　一般世帯数\n　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\n　高齢単身世帯数　一般世帯数\n　高齢夫婦世帯数　一般世帯数\n\n\n\n\n372501594\n2\n372501694\nNA\n5\n1\n4\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n3\n3\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n\n\n372502503\n2\n372502603\nNA\n5\n3\n2\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n2\n2\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n\n\n372502701\n2\n372502603\nNA\n9\n6\n3\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n5\n5\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n\n\n372502723\n2\n372502722\nNA\n4\n1\n3\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n2\n2\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n\n\n372502724\n2\n372502722\nNA\n6\n2\n4\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n3\n3\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n\n\n372502732\n2\n372502731\nNA\n3\n0\n3\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n2\n2\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n\n\n\n\n\n\n\n\n\n\n\nrename()\n\n変数名を変更するときは、colnames() などで変数名を確認し、おかしなところはないか確認してから変えることをおすすめします（特に日本語列名の場合）。\n\nmutate()\n\nKEY_CODE は文字列にしたくて、その他は数値にしたいので、as.character() と as.numeric() で変換します。\nデータによっては、この手順を踏まなくても問題ないかもしれません。\n\nbind_rows()\n\nlapply() でそれぞれのファイルを読み込んだので、最後にすべてのデータを結合します。\n列名もそろえてあるので、問題なく結合できます。\n\n\nデータは次のようになります。\n\nhead(census_objects)\n\n\n\n\n\n表 4: クレンジング後\n\n\n\n\n\n\n\n\n\nKEY_CODE\npop_total\npop_young\npop_working\npop_old\n\n\n\n\n362257353\n29\n5\n19\n5\n\n\n362257354\n96\n0\n96\n0\n\n\n362257381\n101\n24\n54\n23\n\n\n362257382\n28\n1\n19\n8\n\n\n362257451\n117\n20\n70\n27\n\n\n362306721\n269\n45\n152\n72"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html#footnotes",
    "href": "tips/240622_census_cleansing/index.html#footnotes",
    "title": "国勢調査データのクレンジング",
    "section": "注",
    "text": "注\n\n\nR プロジェクトを使用している場合は問題ありません。R プロジェクトについてはこちらをご参照ください。↩︎\n1だと合算先地域メッシュ、2だと秘匿対象地域メッシュです。詳しくは e-Stat の定義書から確認してください。↩︎"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html",
    "href": "tips/240525_vscode_github/index.html",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "",
    "text": "以前 VSCode を用いた R 環境の構築方法についてご紹介しました。\nその中で GitHub についても触れましたが、今回は VSCode で GitHub を使った作業の流れを詳しく紹介します。\n基本的に共同研究を想定していますが、個人で使う場合も同様の流れで作業を進めることができます。\n具体的な違いとして、個人作業の場合はブランチを作成したりしなくてもよいと思いますが、共同研究の場合はブランチを作成して作業を進めることが一般的です。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#リポジトリをクローンする",
    "href": "tips/240525_vscode_github/index.html#リポジトリをクローンする",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "1. リポジトリをクローンする",
    "text": "1. リポジトリをクローンする\n\nVSCode を開き、WSL に接続\n画面左のアイコンで上から3つ目の「ソース管理」を選択\n「リポジトリを複製」、「GitHub から複製」を順に選択\nクローンしたいリポジトリを選択しOK をクリック1\n\nリポジトリが表示されない場合は「ユーザー名/リポジトリ名」の書き方でクローンできます。\n\nクローンするディレクトリを選択\n\n特に理由がなければそのまま OK をクリックして下さい。\n\nクローンされる\n\n自動でクローンしたリポジトリが開かれます。\n開発コンテナを使用する場合は「開発コンテナで再度開く」と出るので、選択してください。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#ブランチを作成する",
    "href": "tips/240525_vscode_github/index.html#ブランチを作成する",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "2. ブランチを作成する",
    "text": "2. ブランチを作成する\n作業ブランチを作成します。デフォルトでは main ブランチになっているので、作業ブランチを作成して作業を進めます。\nブランチは、イメージで言うと「自分の作業用のコピー」です。そっくりそのままファイル等をコピーして作業を行い、完成したら main にくっつけてあげるという感じです。\nmain ブランチは基本的に完成品を置いておくイメージなので、各自でブランチを作成して作業を進めてください。\n\n画面左下の「main」をクリック\n「新しいブランチを作成」を選択\nブランチ名を入力し、Enter キーを押す\n\nブランチ名は、作業内容がわかるように命名するとよいと思います。\nしかし何でも大丈夫です。\n\nブランチが作成される\n\n画面左下に作成したブランチ名が表示されます。\n\n\nこれでブランチが作成されました。作業を進めていきましょう。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#ファイルを編集する",
    "href": "tips/240525_vscode_github/index.html#ファイルを編集する",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "3. ファイルを編集する",
    "text": "3. ファイルを編集する\n作業を進めます。コードを書いたりデータを追加したり、何らかの作業が行われたとします。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#変更をコミットする",
    "href": "tips/240525_vscode_github/index.html#変更をコミットする",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "4. 変更をコミットする",
    "text": "4. 変更をコミットする\n作業が終わったら、変更をコミットします。\n\n画面左のアイコンで上から3つ目の「ソース管理」を選択\nコミットするファイルを選択\n\nカーソルをファイルに当てると「+」が表示されるので、クリックしてステージングします。\nすべてのファイルをステージングする場合は「変更」の右側にある「+」をクリックすれば OK です。\n\nコミットメッセージを入力\n\nコミットメッセージは、変更内容がわかるように簡潔に書くとよいと思います。\n例: Add new data\n\n「✓コミット」をクリック\n\nコミットが完了します。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#プッシュする",
    "href": "tips/240525_vscode_github/index.html#プッシュする",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "5. プッシュする",
    "text": "5. プッシュする\nコミットした内容をリモートリポジトリに反映させます。\n\n「ソース管理」の右にある「…」をクリック\n\nカーソルを当てると出てきます。\n\n「プッシュ」を選択\n\nブランチを公開するか聞かれたら、OK をクリックしてください。\nプッシュが完了します。\n\n\n\n\n\n\n\nこれでリモートリポジトリに変更が反映されました。\nコミットしてすぐプッシュしたい場合は、コミットメッセージを入力した後に「✓コミット」の右側にある下矢印から「コミットしてプッシュ」を選択することで一括で行えます。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#プルリクエストを作成する",
    "href": "tips/240525_vscode_github/index.html#プルリクエストを作成する",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "6. プルリクエストを作成する",
    "text": "6. プルリクエストを作成する\n作業が終わったら、プルリクエストを作成します。\n現段階では、自分のブランチに反映させただけなので、これを main ブランチに反映させる必要があります。\n\n\n\n\n\n\nこの手続きを踏む理由\n\n\n\nプルリクエストを作成する理由は、他の人に自分の作業内容を確認してもらうためです。\nプルリクエストを作成することで、他の人が自分の作業内容を確認し、問題がなければ main ブランチに反映させることができます。\nもし全員が main ブランチに直接コミットしてしまうと、他の人の作業とコンフリクトする場合があったり、誤って動かないコードで上書きされてしまったりなど、問題が発生する可能性があります。\nそのため、プルリクエストを作成して他の人に確認してもらいながら、問題がなければ main ブランチに反映させるという手順を踏むことが一般的です。\n\n\n\nGitHub にアクセスし、リポジトリを開く\n「Compare & pull request」を選択\n\n以下のようなバナーが表示されるので、クリックしてください。\n\n\n\n\n\n\n\n\nプルリクエストの内容を入力\n\n「Add a title」にはコミットメッセージが入力されていると思います。\n「Add a description」には、必要に応じて作業内容や変更点などを詳しく書くとよいと思います。\n\n「Create pull request」をクリック\n\nプルリクエストが作成されます。\n\n\nこれでプルリクエストが作成されました。他の人に確認してもらいましょう。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#プルリクエストをマージする",
    "href": "tips/240525_vscode_github/index.html#プルリクエストをマージする",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "7. プルリクエストをマージする",
    "text": "7. プルリクエストをマージする\nプルリクエストを作成したら、他の人に確認してもらい、問題がなければマージします。\n\nリポジトリのページにアクセスし、「Pull requests」を開く\nリクエストを選択して開く\n問題がなければ「Merge pull request」をクリック\n\n問題ない場合「This branch has no conflicts with the base branch」と表示されます。\n\n\n\n\n「Confirm merge」をクリック\n\nマージが完了します。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#ブランチを削除する",
    "href": "tips/240525_vscode_github/index.html#ブランチを削除する",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "8. ブランチを削除する",
    "text": "8. ブランチを削除する\nプルリクエストがマージされたら、作業ブランチを削除します。ちなみにブランチは作業ごとに新しいものを作り、プルリクエストがマージされたら削除するという流れが推奨されるようです。\n\nVSCode でリポジトリを開く\n画面左側のアイコンから「ソース管理」を選択\n「ソース管理」の右にある「…」をクリック\n「ブランチ」から「ブランチを削除」を選択\n削除するブランチを選択\n\n削除するブランチを選択して OK をクリック\n\nブランチが削除される\n\n画面左下のブランチ名が main になっていることを確認してください。\n\n\nこれで作業ブランチが削除されました。次回別の作業を行うときは、新しいブランチを作成して作業を進めてください。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#ローカルリポジトリを更新する",
    "href": "tips/240525_vscode_github/index.html#ローカルリポジトリを更新する",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "9. ローカルリポジトリを更新する",
    "text": "9. ローカルリポジトリを更新する\nリモートリポジトリに変更が反映されたので、他の人はローカルリポジトリを更新します。\n\nVSCode でリポジトリを開く\n画面左下のブランチが main であれば自分の作業ブランチに切り替える\n\n画面左下のブランチ名をクリックして、切り替えてください。\n\n画面左のアイコンから「ソース管理」を選択\n「変更の同期」と出ていたらそれを、出ていなければ「…」をクリックして「プル」を選択\n\nプルすることでリモートリポジトリの変更をローカルリポジトリに反映させます。\nプルが完了します。ファイルを見てみてください。\n\n\nこれで他の人の変更が反映されたローカルリポジトリが得られました。\nここからは再び作業を進め、作業をサイクルさせていきます。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#footnotes",
    "href": "tips/240525_vscode_github/index.html#footnotes",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "注",
    "text": "注\n\n\nEnter キーでも OK です。↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "福島県立福島高等学校\n\n2016年4月 - 2019年3月\n\n千葉大学 法政経学部 法政経学科\n\n2019年4月 - 2023年3月\n\n大阪大学大学院 国際公共政策研究科\n\n2023年4月 - （在学中）"
  },
  {
    "objectID": "about.html#学歴",
    "href": "about.html#学歴",
    "title": "About",
    "section": "",
    "text": "福島県立福島高等学校\n\n2016年4月 - 2019年3月\n\n千葉大学 法政経学部 法政経学科\n\n2019年4月 - 2023年3月\n\n大阪大学大学院 国際公共政策研究科\n\n2023年4月 - （在学中）"
  },
  {
    "objectID": "gis_in_r/1_intro/index.html",
    "href": "gis_in_r/1_intro/index.html",
    "title": "導入 + ハンドリング",
    "section": "",
    "text": "このページでは、R で GIS を使う上での基本について説明します。\nR 言語では主に sf パッケージを使って GIS を扱います。また、tidyverse パッケージ群を使うことで、データの前処理や可視化を行うことができます。\nまた、R Project を使っていることを前提とします1。"
  },
  {
    "objectID": "gis_in_r/1_intro/index.html#データの抽出",
    "href": "gis_in_r/1_intro/index.html#データの抽出",
    "title": "導入 + ハンドリング",
    "section": "データの抽出",
    "text": "データの抽出\n\nデータの読み込み\nsf パッケージの read_sf() 関数を用います。\nShift_JIS で書かれたような変なデータがたまにあるので、そのようなときはオプションで指定しましょう。options = \"ENCODING=Shift_JIS\" を追加してください。\n\n\n\n\n\n\n読み込みに使う関数について\n\n\n\n\n\nread_sf() は、st_read() の細かい設定を省いてくれた関数、というイメージです。\n具体的には、\nread_sf(dsn)\n\nst_read(dsn, quiet = TRUE, stringsAsFactors = FALSE, as_tibble = TRUE)\nこの2つが同じです2。詳しくは ?st_read() をコンソールに打ち込みドキュメントを読んでみてください。\n基本的には read_sf() で十分だと思います。\n\n\n\nまた、公園のデータは CRS が設定されていないようです。その設定も行います。CRS については後の回で説明します。\n\nfukushima &lt;- read_sf(here(\"data/N03-20240101_07_GML/N03-20240101_07.shp\"))\n\npark &lt;- read_sf(here(\"data/P13-11_07_GML/P13-11_07.shp\"), \n                options = \"ENCODING=Shift_JIS\") |&gt; \n    st_set_crs(st_crs(4612)) |&gt;  # JGD2000/(B, L) データ本来のCRS\n    st_transform(st_crs(6668))  # JGD2011/(B, L) 変換したいCRS\n\n\n\nデータを見てみる\n公園のデータを見てみます。\n\n\n\n\n\n\n\n\n図 1: 公園のポイントデータ\n\n\n\n\n\n\n\n\n表 1: 公園データの中身（一部）\n\n\n\n\n\n\n\n\n\nP13_001\nP13_002\nP13_003\nP13_004\nP13_005\nP13_006\nP13_007\nP13_008\nP13_009\nP13_010\ngeometry\n\n\n\n\n福島県\nNA\n福島空港公園\n6\n福島県\n須賀川市\n1993\n520900\n1\nNA\nc(140.42020783, 37.24667066)\n\n\n福島県\nNA\nあづま総合運動公園\n6\n福島県\n福島市\n1980\n982000\n1\nNA\nc(140.3619751, 37.7220006)\n\n\n福島県\nNA\n逢瀬公園\n4\n福島県\n郡山市\n1979\n346000\n1\nNA\nc(140.27387039, 37.41233912)\n\n\n福島県\nNA\n会津レクリエーション公園\n6\n福島県\n会津若松市\n1998\n426000\n1\nNA\nc(140.01659489, 37.51642757)\n\n\n福島県\nNA\n東ヶ丘公園\n6\n福島県\n南相馬市\n1995\n212000\n1\nNA\nc(140.96713139, 37.63259542)\n\n\n福島県\nNA\nいわき公園\n6\n福島県\nいわき市\n1987\n713000\n1\nNA\nc(140.92164642, 37.01329096)\n\n\n\n\n\n\n\n\n\n\n国土数値情報ダウンロードサイトの説明を見てみると、各列は以下のようになっています。\n\n\n\nP13_001：管理都道府県・整備局\nP13_002：管理市区町村\nP13_003：公園名\nP13_004：公園種別\nP13_005：所在地都道府県名\n\n\n\nP13_006：所在地市区町村名\nP13_007：供用開始年\nP13_008：供用済面積\nP13_009：都市計画決定\nP13_010：備考\n\n\n\n\n\n抽出\n今回は公園名、所在地都道府県、所在地市区町村、そしてポイントを表す geometry の列だけが必要だとします。\ndplyr::select() 関数を使って列を抽出し、同時に名前も変更します。\nselect() 内で変換後と変換前をイコールで結ぶことにより、列名を変更できます。\n\npark_s &lt;- park |&gt; \n    select(\n        name_park = P13_003, \n        name_pref = P13_005, \n        name_muni = P13_006, \n        geometry\n    )\n\n\n\n\n\n表 2: 列抽出済みのデータ\n\n\n\n\n\n\n\n\n\nname_park\nname_pref\nname_muni\ngeometry\n\n\n\n\n福島空港公園\n福島県\n須賀川市\nc(140.42020783, 37.24667066)\n\n\nあづま総合運動公園\n福島県\n福島市\nc(140.3619751, 37.7220006)\n\n\n逢瀬公園\n福島県\n郡山市\nc(140.27387039, 37.41233912)\n\n\n会津レクリエーション公園\n福島県\n会津若松市\nc(140.01659489, 37.51642757)\n\n\n東ヶ丘公園\n福島県\n南相馬市\nc(140.96713139, 37.63259542)\n\n\nいわき公園\n福島県\nいわき市\nc(140.92164642, 37.01329096)\n\n\n\n\n\n\n\n\n\n\nこのように tidyverse の強みを活かしてデータハンドリングを行えます3。"
  },
  {
    "objectID": "gis_in_r/1_intro/index.html#可視化",
    "href": "gis_in_r/1_intro/index.html#可視化",
    "title": "導入 + ハンドリング",
    "section": "可視化",
    "text": "可視化\ntidyverse に含まれる ggplot2 を使って、ここまでのデータをプロットしていきます。\n基本的な書き方は以下の通りです。データフレームから ggplot() を繋いで記述していきます。\n\npark_s |&gt; \n    ggplot() + \n    geom_sf()  # GIS用のコマンド\n\n\n\n\n\n\n\n図 2: シンプルなプロット\n\n\n\n\n\nこれだとやや分かりにくいので、背景を消しましょう。theme_void() や theme_bw()、theme_classic() などがよいと思います。\n\npark_s |&gt; \n    ggplot() + \n    geom_sf() + \n    theme_void()\n\n\n\n\n\n\n\n図 3: 背景を削除\n\n\n\n\n\nこれだけだとどこなのかわからないので、先ほどダウンロードした福島県の行政区域を重ねてプロットします。\n\n\n\n\n\n\nプロットするとき\n\n\n\nggplot を使うときは、記述した順に上に重なっていくので、場合によっては順番を意識しないとポイントなどが見えなくなることがあります。\n今回は行政区域をベースとするので、先にこちらをプロットします。\n\n\n\n\n\n\n\n\ngeom_sf() の注意点\n\n\n\ngeom_sf() でデータを指定する引数は data であり、これは第2引数なので、シンプルに geom_sf(fukushima) と書くとプロットがうまくいきません4。geom_sf(data = fukushima) と書く必要がある点にご注意ください。\n\n\n\nggplot() + \n    geom_sf(data = fukushima) + \n    geom_sf(data = park_s, color = \"orange\") +  # 点の色も指定\n    theme_void()\n\n\n\n\n\n\n\n図 4: 行政区域と公園ポイントのプロット\n\n\n\n\n\nここまでがプロットの方法です。\n今後も可視化の際に ggplot2 を使いますので、その都度紹介します。"
  },
  {
    "objectID": "gis_in_r/1_intro/index.html#ファイルの出力",
    "href": "gis_in_r/1_intro/index.html#ファイルの出力",
    "title": "導入 + ハンドリング",
    "section": "ファイルの出力",
    "text": "ファイルの出力\n先ほど作成した park_s を Shapefile として出力します。\nGIS データは重いものが多いので、いちいち生データを読み込んで処理をすると時間がかかります。\n# フォルダがない場合に作成する\nif (!dir.exists(here(\"data/output/1_intro\"))) {\n  dir.create(here(\"data/output/1_intro\"), recursive = TRUE)\n}\n\nwrite_sf(park_s, here(\"data/output/1_intro/Park_selected.shp\"), \n         layer_options = \"ENCODING=UTF-8\")\n次回以降は Park_selected.shp を読み込めばここから作業を開始できます。"
  },
  {
    "objectID": "gis_in_r/1_intro/index.html#footnotes",
    "href": "gis_in_r/1_intro/index.html#footnotes",
    "title": "導入 + ハンドリング",
    "section": "注",
    "text": "注\n\n\nR Project と後述の here についてはこちらを参照して下さい。↩︎\ndsn のところがデータです。↩︎\nデータハンドリングの基礎的な知識を身に付けるには、私たちのRがおすすめです。↩︎\n「○○ =」を省略できるのは、第1引数であるとき、もしくは引数順に書いている場合のみです。↩︎"
  }
]