[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yosuke Abe",
    "section": "",
    "text": "こんにちは！ 経済学系の大学院生です。\n学んだTipsなどをまとめていきます。",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "tips.html",
    "href": "tips.html",
    "title": "Tips",
    "section": "",
    "text": "開発環境\n\n\n\n最終更新日：2024年05月05日\n\nUbuntu 22.04\nR version 4.3.2 (2023-10-31)\nRStudio 2023.12.0+369 (Ocean Storm) for Ubuntu Jammy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【Windows】開発コンテナを使って R 環境を構築！\n\n\n\n\n\n\nR\n\n\nDocker\n\n\nUbuntu\n\n\nVSCode\n\n\n\n\n\n\n\n\n\n2024/05/05\n\n\n\n\n\n\n\n\n\n\n\n\n政令指定都市・中核市の整理\n\n\n\n\n\n\nR\n\n\n便利\n\n\n\n\n\n\n\n\n\n2024/04/14\n\n\n\n\n\n\n\n\n\n\n\n\nR MarkdownでPDF出力\n\n\n\n\n\n\nR\n\n\nR Markdown\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n2024/03/29\n\n\n\n\n\n\n一致なし\n\n トップに戻る",
    "crumbs": [
      "Tips"
    ]
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html",
    "href": "tips/240329_rmarkdown_pdf/index.html",
    "title": "R MarkdownでPDF出力",
    "section": "",
    "text": "「レポートでR Markdown、使ってますか？」\nこんにちは。\n大学生、大学院生の方で、Rを使う授業のレポートを作ったりする方はR Markdown使うことが多いかもしれません。\nしかし、私の周りではPDF出力で結構困っている人がいたのでここでまとめます。\n環境構築、\\(\\LaTeX\\) については詳しく書かないので、そこは他のサイトなどを参照してください。\n目標はとりあえずPDFで出力することです。\nターゲット"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#事前準備",
    "href": "tips/240329_rmarkdown_pdf/index.html#事前準備",
    "title": "R MarkdownでPDF出力",
    "section": "事前準備",
    "text": "事前準備\n以下をRのコンソールで実行してください。\n\n# TinyTeXパッケージをインストール\n# インストール済みの方は省略\ninstall.packages('tinytex')\n\n\n# TinyTeXのインストール\ntinytex::install_tinytex()\ntinytex::tlmgr_install('ipaex')\n\nフォントであるipaexの部分はharanoajiなど他の選択肢もあります。\n\n# bookdownパッケージのインストール（任意）\n# インストール済みの方は省略。\ninstall.packages('bookdown')"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#yamlヘッダの設定",
    "href": "tips/240329_rmarkdown_pdf/index.html#yamlヘッダの設定",
    "title": "R MarkdownでPDF出力",
    "section": "YAMLヘッダの設定",
    "text": "YAMLヘッダの設定\nヘッダの部分を以下のように変更してください。\n---\ntitle: \"タイトル\"\nauthor: \"筆者\"\ndate: 2024-04-10\noutput: \n  bookdown::pdf_document2:\n    latex_engine: xelatex\n    toc: false\n    number_section: true\n    keep_tex: true\nheader-includes: \n  - \\usepackage{bookmark} \n  - \\usepackage{xltxtra} \n  - \\usepackage{zxjatype} \n  - \\usepackage[ipaex]{zxjafont}\n---\nbookdown::pdf_document2の部分はpdf_documentでもいけます（後述）。 以上を設定出来たら、knitしてください。 無事PDFファイルが出力されるはずです！"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#事前準備-1",
    "href": "tips/240329_rmarkdown_pdf/index.html#事前準備-1",
    "title": "R MarkdownでPDF出力",
    "section": "事前準備",
    "text": "事前準備\nR Markdownと同じです。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#yamlヘッダ",
    "href": "tips/240329_rmarkdown_pdf/index.html#yamlヘッダ",
    "title": "R MarkdownでPDF出力",
    "section": "YAMLヘッダ",
    "text": "YAMLヘッダ\n---\ntitle: \"タイトル\"\nauthor: \"筆者\"\ndate: 2024-04-10\nformat: \n  pdf: \n    documentclass: article\n    keep-tex: true\n    include-in-header: \n      - text: | \n          \\usepackage{bookmark} \n          \\usepackage{xltxtra} \n          \\usepackage{zxjatype} \n          \\usepackage[ipaex]{zxjafont} \nnumber-sections: true\n---\nやっていることはほとんどR Markdownの場合と同じですが、書き方は異なります。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#global-options",
    "href": "tips/240329_rmarkdown_pdf/index.html#global-options",
    "title": "R MarkdownでPDF出力",
    "section": "Global Options",
    "text": "Global Options\n後々困らないよう設定を行います。\n\n上部にあるToolsからGlobal Options...→Sweaveと進む\nTypeset LaTeX into PDF usingをXeLaTeXに変更\nUse tinytex when compiling .tex filesにチェック\n\nこれで前述の設定と整合的になります。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#sec-bookdown",
    "href": "tips/240329_rmarkdown_pdf/index.html#sec-bookdown",
    "title": "R MarkdownでPDF出力",
    "section": "bookdown::pdf_document2",
    "text": "bookdown::pdf_document2\nR Markdownのヘッダにおいて、pdf_documentではなくbookdown::pdf_document2を使用するのには理由があります。\nそれは相互参照を使うためです。\n例えば、\n\nplot(cars)\n\n\n\n\n\n\n\n図 1: データのプロット\n\n\n\n\n\nこのプロットを、文中で引用したいとします。\n「図1：データのプロット」などと書き、「図1から～」と引用していたとすると、その前に別の図を入れる必要が出てきた場合に、全て1つずつ変更していくのは手間がかかります。\nそこで相互参照を用いれば、自動で番号を振って、自由に引用できるようになるわけです。\n以下はR Markdown クックブックから引用したサンプルコードです。\n\n図 \\@ref(fig:cars-plot) を見よ.\n\n```{r cars-plot, fig.cap=\"自動車のデータ\", echo=FALSE}\npar(mar = c(4, 4, .2, .1))\nplot(cars)  # a scatterplot\n```\n\n次に数式\\@ref(eq:mean) を見よ.\n\n\\begin{equation}\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n} (\\#eq:mean)\n\\end{equation}\n\nさらに表 \\@ref(tab:mtcars) を見よ.\n\n```{r mtcars, echo=FALSE}\nknitr::kable(mtcars[1:5, 1:5], caption = \"mtcars データ\")\n```\n\n{r cars-plot, fig.cap=\"自動車のデータ\", echo=FALSE}のcars-plotの部分がチャンク名です1。 同様にmtcarsもチャンク名なわけですが、\\@ref()を用いれば該当する図や表、数式を引用できます。\n先ほどのプロットを\\@ref()を使って引用してみると、図 1 となるわけです2。\n注意点は、\\@ref()の中で図ならfig:、表ならtab:、数式ならeq:と始めないと引用できない点です。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#footnotes",
    "href": "tips/240329_rmarkdown_pdf/index.html#footnotes",
    "title": "R MarkdownでPDF出力",
    "section": "脚注",
    "text": "脚注\n\n\n他の部分はチャンクオプションと呼ばれるものですが、今回は触れません。↩︎\nちなみにQuartoでは、チャンク名をfig-hogehogeやtbl-hogehogeなどにすれば、@fig-hogehogeや@tbl-hogehogeだけで簡単に引用できます↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "福島県立福島高等学校\n\n2016年4月 - 2019年3月\n\n千葉大学 法政経学部 法政経学科\n\n2019年4月 - 2023年3月\n\n大阪大学大学院 国際公共政策研究科\n\n2023年4月 - （在学中）"
  },
  {
    "objectID": "about.html#学歴",
    "href": "about.html#学歴",
    "title": "About",
    "section": "",
    "text": "福島県立福島高等学校\n\n2016年4月 - 2019年3月\n\n千葉大学 法政経学部 法政経学科\n\n2019年4月 - 2023年3月\n\n大阪大学大学院 国際公共政策研究科\n\n2023年4月 - （在学中）"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html",
    "href": "tips/240414_benri_seirei/index.html",
    "title": "政令指定都市・中核市の整理",
    "section": "",
    "text": "Rで市区町村データを整理するための政令指定都市・中核市をまとめたコードです。"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html#footnotes",
    "href": "tips/240414_benri_seirei/index.html#footnotes",
    "title": "政令指定都市・中核市の整理",
    "section": "脚注",
    "text": "脚注\n\n\n2024年4月現在↩︎"
  },
  {
    "objectID": "tips/240504_container/index.html",
    "href": "tips/240504_container/index.html",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "",
    "text": "ローカル環境から卒業！"
  },
  {
    "objectID": "tips/240504_container/index.html#wsl2",
    "href": "tips/240504_container/index.html#wsl2",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "WSL2",
    "text": "WSL2\n\nPowerShell または Windows コマンドプロンプトを管理者権限で開きます。\n\n右クリックで管理者権限を使えます。\n\n\n\n\n以下のコマンドを入力して実行する。\n\n\n\nbash\n\nwsl --install\n\nこれでインストールはできているはずですが、詳しくはこちらのサイトを参照してください。"
  },
  {
    "objectID": "tips/240504_container/index.html#ubuntu",
    "href": "tips/240504_container/index.html#ubuntu",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "Ubuntu",
    "text": "Ubuntu\n\nMicrosoft Store を開く。\n「Ubuntu」と検索する。\nインストールする。\n\n\nエクスプローラーから Linux に入り、\\Ubuntu\\home\\ユーザー名 がメインとなるディレクトリです。"
  },
  {
    "objectID": "tips/240504_container/index.html#vscode",
    "href": "tips/240504_container/index.html#vscode",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "VSCode",
    "text": "VSCode\n\nVSCode のダウンロードサイトからダウンロードする。\n\nDownload for Windows をクリックしてダウンロードできます。\n\n（任意）日本語の拡張機能をインストールする。\n\n画面左側に拡張機能のアイコンがあります（デフォルトでは上から5番目）。ここの検索ボックスに MS-CEINTL.vscode-language-pack-ja と入力し、1番上に出てきたものをインストールします（単に Japanese でも出てきます）。\nインストール後、VSCode を再起動すれば日本語が反映されていると思います。\n\n\n\n\n拡張機能のインストール\n\n拡張機能の検索ボックスで、次の ID を入力し、インストールします。\nms-vscode-remote.remote-containers (Dev Containers)\nms-vscode-remote.remote-wsl (WSL)\n\nWSL に接続する。\n\nVSCode から先ほどインストールした WSL に接続します。\n画面左下の &gt;&lt; アイコンをクリックして、「WSL への接続」をクリックします。"
  },
  {
    "objectID": "tips/240504_container/index.html#github-アカウントの作成",
    "href": "tips/240504_container/index.html#github-アカウントの作成",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "GitHub アカウントの作成",
    "text": "GitHub アカウントの作成\nファイルは基本的に GitHub で管理するので、ここからアカウントを作成してください。\n事前準備は以上です！"
  },
  {
    "objectID": "tips/240504_container/index.html#テンプレートをクローン",
    "href": "tips/240504_container/index.html#テンプレートをクローン",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "テンプレートをクローン",
    "text": "テンプレートをクローン\n\nGitHub 画面右上の自分のアイコンをクリックし、Your repositories を選択\n一覧から、上で作ったレポジトリを選択\n画面中央右にある &lt;&gt; Code から、.gitで終わる URL をコピー\nUbuntu を開き、以下のコマンドを入力して実行\n\n\n\nUbuntu\n\ngit clone [コピーした URL]\n\nエクスプローラーを開き、\\\\wsl.localhost\\Ubuntu\\home\\ユーザー名 を確認してみてください。レポジトリ名と同じフォルダができていると思います。"
  },
  {
    "objectID": "tips/240504_container/index.html#git",
    "href": "tips/240504_container/index.html#git",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "Git",
    "text": "Git\n\ngitのインストール\n\nWindows のアプリ一覧から Ubuntu を探し、開いてください。開いたら、以下のコマンドを入力して実行します。\n\n\n\n\nUbuntu\n\nsudo apt-get install git\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\n\n\n\n\nUbuntu\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]"
  },
  {
    "objectID": "tips/240504_container/index.html#docker",
    "href": "tips/240504_container/index.html#docker",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "Docker",
    "text": "Docker\nDocker をインストールします。\n\nここから Docker Desktop for Windows をクリックしてダウンロード＆インストール\n設定の確認\n\nインストール出来たら、画面上部の設定ボタンから Resources、WSL integration と進み、チェックボックスにチェック、Ubuntu がオンになっていることを確認してください。\nたまに、何もしていないのにここがオフになっていて、トラブることがあります。\n\n\n\n詳しくはこちらをご覧ください。日本語で書いてあります。\n\n画面左側の Volumes に進み、Create からボリュームを作成\n\n次の5つを作成します（大文字小文字に注意！）。\nfonts, julia, pip, renv, TinyTeX"
  },
  {
    "objectID": "tips/240504_container/index.html#sec-vscode-setting",
    "href": "tips/240504_container/index.html#sec-vscode-setting",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "VSCode",
    "text": "VSCode\n\nVSCode のダウンロードサイトからダウンロードする。\n\nDownload for Windows をクリックしてダウンロードできます。\n\n（任意）日本語の拡張機能をインストールする。\n\n画面左側に拡張機能のアイコンがあります（デフォルトでは上から5番目）。ここの検索ボックスに MS-CEINTL.vscode-language-pack-ja と入力し、1番上に出てきたものをインストールします（単に Japanese でも出てきます）。\nインストール後、VSCode を再起動すれば日本語が反映されていると思います。\n\n\n\n\n拡張機能のインストール\n\n拡張機能の検索ボックスで、次の ID を入力し、インストールします。\nms-vscode-remote.remote-containers (Dev Containers)\nms-vscode-remote.remote-wsl (WSL)\n\nWSL に接続する。\n\nVSCode から先ほどインストールした WSL に接続します。\n画面左下の &gt;&lt; アイコンをクリックして、「WSL への接続」をクリックします。"
  },
  {
    "objectID": "tips/240504_container/index.html#github-レポジトリを作成",
    "href": "tips/240504_container/index.html#github-レポジトリを作成",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "GitHub レポジトリを作成",
    "text": "GitHub レポジトリを作成\n\nGitHub を開き、右上の + ボタンから Import repository を選択\nThe URL for your source repository に、https://github.com/yo5uke/template-R.git と入力\nRepository name に任意のプロジェクト名を記入\nPublic を Private に変更\nBegin import をクリック"
  },
  {
    "objectID": "tips/240504_container/index.html#vscode-で開く",
    "href": "tips/240504_container/index.html#vscode-で開く",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "VSCode で開く",
    "text": "VSCode で開く\n\nVSCode を開く\n上と同様にして「WSL への接続」を選択\n画面左上の「ファイル」から「フォルダーを開く」をクリックし、作ったフォルダを選択\n画面右下に「コンテナーで再度開く」と出たらクリック\n\n出ない場合、画面左下「WSL: Ubuntu」をクリックし、「コンテナーで再度開く」を選択してください。\n初めて環境を構築する場合、ここでかなり時間がかかるので辛抱強く待ちましょう。"
  },
  {
    "objectID": "tips/240504_container/index.html#rstudio-で開く",
    "href": "tips/240504_container/index.html#rstudio-で開く",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "RStudio で開く",
    "text": "RStudio で開く\nここで、ブラウザを用いて RStudio を開きます。\n\n任意のブラウザで、アドレスバーに localhost:8787 と入力して開く\n右上のをクリックし、「New Project…」を選択\n「Existing Directory」を選択\n「Browse…」より work を選択して Choose をクリック\n\nここでプロジェクトが作成されます。\n\nコンソールに以下を入力して実行\n\nrenv はパッケージを管理するためのパッケージです。\nDockerfile でインストールすることを指示しているので、コンソールでインストールせずとも既に使用可能です1。\n\n\n\n\nR\n\nrenv::init()"
  },
  {
    "objectID": "tips/240504_container/index.html#footnotes",
    "href": "tips/240504_container/index.html#footnotes",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "脚注",
    "text": "脚注\n\n\n余談ですが、renv::init() のように パッケージ名::関数 のような書き方をすれば、library(パッケージ名) をせずとも関数を使えます。1度だけ使いたいようなときに便利です。↩︎\nデータは Google Drive に上げているので GitHub レポジトリにはありません。↩︎"
  },
  {
    "objectID": "tips/240504_container/index.html#dvc-の設定",
    "href": "tips/240504_container/index.html#dvc-の設定",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "DVC の設定",
    "text": "DVC の設定\nDVC はデータを管理するためのツールです。\n事前準備として、自分の Google ドライブの任意の場所で、データを入れる用のフォルダを作成しておいてください。\nまた、共同プロジェクトの場合は、フォルダの共有も設定してください。\n\nVSCode に戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n\n既に画面下部にターミナルが表示されている場合はスキップして大丈夫です。\n\n以下のコマンドを入力して実行\n\n初めに1回実行しておけば、それ以降は不要です。\n\n\n\n\nbash\n\npip install dvc dvc-gdrive\n\n\nGoogle ドライブで作成したフォルダの ID をコピー\n\nID は、ドライブでフォルダを開いたときの URL で、最後のスラッシュ（~/folders/）より右側の部分です。\n\n次のコマンドを入力して実行\n\n\n\nbash\n\ndvc init && dvc remote add -d myremote gdrive://&lt;Google DriveのフォルダID&gt;"
  },
  {
    "objectID": "tips/240504_container/index.html#latex-の設定",
    "href": "tips/240504_container/index.html#latex-の設定",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "LaTeX の設定",
    "text": "LaTeX の設定\nR Markdown などで \\(\\LaTeX\\) を使用するために、TinyTeXをインストールします。\nRStudio のコンソールに以下のコマンドを入力して実行してください。\n\n\nR\n\ntinytex::install_tinytex(dir = \"/home/rstudio/.TinyTeX\", force = TRUE)\n\nTinyTeX は、\\(\\LaTeX\\) コードをコンパイルする際に必要なパッケージを自動でダウンロードしてくれるので、ローカルに面倒な設定をしなくて良いのが魅力です。\nR Markdown や Quarto での PDF 出力の仕方については、こちらの記事もご覧ください。"
  },
  {
    "objectID": "tips/240504_container/index.html#julia-の設定",
    "href": "tips/240504_container/index.html#julia-の設定",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "Julia の設定",
    "text": "Julia の設定\n参考記事の設定に基づき、Julia が使えるようになっているため、その始め方についても書いておきます。特に使う予定がなければ、スキップしてください。\n\nVSCode に戻り、ワーキングディレクトリに Project.toml というファイルを作成\nキーボードで Ctrl + Shift + P を入力\n「Julia: Start REPL」を選択\nターミナルで、以下のコマンドを入力して実行\n\n\n\nJulia\n\nusing Pkg\nPkg.activate()\n\n以上で Julia の事前準備ができました。\nまた、環境構築もここで一区切りです！"
  },
  {
    "objectID": "tips/240504_container/index.html#r-のパッケージ",
    "href": "tips/240504_container/index.html#r-のパッケージ",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "R のパッケージ",
    "text": "R のパッケージ\n作業中新たにパッケージを使用した場合、それを renv.lock ファイルに記録することで、必要なパッケージを共同作業者と共有することができます。\nバージョンごと記録できるので、全く同じ環境を再現することが可能です。\n\nR のコンソールで以下を実行\n\nrenv がアクティベートされていない場合、アクティベートする必要がありますが、おそらく実行した際に「renv をアクティベートして lock ファイルに記録する」というような選択肢が提示されますので、それを選んでください。\n以下のコードでアクティベートすることも可能です。\n\n\n\n\nR\n\nrenv::snapshot()\n\n\n\nR\n\nrenv::activate()\n\n\n（共同作業者）パッケージをインストール\n\n使用したパッケージは renv.lock に記録されているため、そこから（バージョンも統一して）インストールが可能です。\n以下のコードを実行してください。\n\n\n\n\nR\n\nrenv::restore()\n\nこれで R の開発環境をそろえることができます。\nまた、新しいパッケージを使ったら、その作業が終わるごとに記録し、共同作業者は renv::restore() でインストールしてください。"
  },
  {
    "objectID": "tips/240504_container/index.html#sec-dvc-setting",
    "href": "tips/240504_container/index.html#sec-dvc-setting",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "DVC の設定",
    "text": "DVC の設定\nDVC はデータを管理するためのツールです。\n事前準備として、自分の Google ドライブの任意の場所で、データを入れる用のフォルダを作成しておいてください。\nまた、共同プロジェクトの場合は、フォルダの共有も設定してください。\n\nVSCode に戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n\n既に画面下部にターミナルが表示されている場合はスキップして大丈夫です。\n\n以下のコマンドを入力して実行\n\n初めに1回実行しておけば、それ以降は不要です。\n\n\n\n\nbash\n\npip install dvc dvc-gdrive\n\n\nGoogle ドライブで作成したフォルダの ID をコピー\n\nID は、ドライブでフォルダを開いたときの URL で、最後のスラッシュ（~/folders/）より右側の部分です。\n\n次のコマンドを入力して実行\n\n最後の部分をコピーした ID に変更してください。\n\n\n\n\nbash\n\ndvc init && dvc remote add -d myremote gdrive://&lt;Google DriveのフォルダID&gt;"
  },
  {
    "objectID": "tips/240504_container/index.html#sec-julia-setting",
    "href": "tips/240504_container/index.html#sec-julia-setting",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "Julia の設定",
    "text": "Julia の設定\n参考記事の設定に基づき、Julia が使えるようになっているため、その始め方についても書いておきます。特に使う予定がなければ、スキップしてください。\n\nVSCode に戻り、ワーキングディレクトリに Project.toml というファイルを作成\nキーボードで Ctrl + Shift + P を入力\n「Julia: Start REPL」を選択\nターミナルで、以下のコマンドを入力して実行\n\n\n\nJulia\n\nusing Pkg\nPkg.activate()\n\n以上で Julia の事前準備ができました。\nまた、環境構築もここで一区切りです！"
  },
  {
    "objectID": "tips/240504_container/index.html#python-のパッケージ",
    "href": "tips/240504_container/index.html#python-のパッケージ",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "Python のパッケージ",
    "text": "Python のパッケージ\n設定では Python の設定も加えていますので、必要に応じて Python も使用できます。\nまた、そもそも DVC が Python のパッケージなので、それもここで記録します。\n\nPython のパッケージを追加\n\n先ほどと同様に、新しいターミナルを開いて、以下のコードでパッケージをインストールします。\nDVC 以外特に使うものがなければ、ここはスキップしてください。\n\n\n\n\nbash\n\npip install [パッケージ名]\n\n\nパッケージを記録\n\nR と同様に、作業が終わったら以下のコードでパッケージを記録します。\n特に何もインストールしていなくても、DVC を使っていますので、これは実行してください。\n\n\n\n\nbash\n\npip freeze &gt; requirements.txt\n\n\n（共同作業者）パッケージをインストール\n\n共同作業者は、次のコードで Python パッケージをインストールします。\n\n\n\n\nbash\n\npip install -r requirements.txt"
  },
  {
    "objectID": "tips/240504_container/index.html#データの管理",
    "href": "tips/240504_container/index.html#データの管理",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "データの管理",
    "text": "データの管理\nデータは DVC で管理します。データは Google Drive 上で保管されます。\n\nワーキングディレクトリに、data というフォルダを作成\nデータが入ったら、以下のコードを実行\n\ndata フォルダごとドライブに追加します。\n\n\n\n\nbash\n\ndvc add data/\n\n\nデータをアップロード\n\n以下のコードでデータをプッシュします。\n\n\n\n\nbash\n\ndvc push\n\n\n（共同作業者）データのダウンロード\n\n以下のコードでデータをダウンロードします。\n\n\n\n\nbash\n\ndvc pull"
  },
  {
    "objectID": "tips/240504_container/index.html#julia-のパッケージ",
    "href": "tips/240504_container/index.html#julia-のパッケージ",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "Julia のパッケージ",
    "text": "Julia のパッケージ\nJulia はパッケージが自動で Project.toml に保存されるため、共同作業者がインストールするだけで大丈夫です。\n\n先ほどと同じ手順で環境をアクティベートする\n以下のコードでパッケージをインストール\n\n\n\nJulia\n\nPkg.instantiate()"
  },
  {
    "objectID": "tips/240504_container/index.html#github-にコミットプッシュ",
    "href": "tips/240504_container/index.html#github-にコミットプッシュ",
    "title": "【Windows】開発コンテナを使って R 環境を構築！",
    "section": "GitHub にコミット、プッシュ",
    "text": "GitHub にコミット、プッシュ\nここまでできたら、GitHub レポジトリにコミット、プッシュします。\nVSCode では簡単です。\n\nVSCode の画面左、（デフォルトでは）上から3番目のアイコンをクリック\n「変更」の中からファイルを選択\nメッセージを記入\n「✓ コミット」をクリック\n分割してコミットする場合は、同様の作業を繰り返す\n「ソース管理」の右にある「…」から「プッシュ」を選択\n\n以上の作業で GitHub レポジトリにコミット、プッシュができました。\nブラウザからレポジトリを確認してみてください。ファイルがアップロードされているはずです2。\n以上がワークフローです。お疲れ様でした！"
  }
]