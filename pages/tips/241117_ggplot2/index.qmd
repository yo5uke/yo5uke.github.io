---
title: "【4.0.0対応！】[ggplot2]{.fira-code}使い方ガイド"
description: |
  ggplotを使うのに役立つコマンドを紹介します！
date: 2024-11-17
date-modified: today
categories:
  - R
image: figure/fig-ggrepel.png
editor: visual
---

## はじめに

皆さん、ggplot、使ってますか？多分お使いですよね。

僕は数か月前ggplotのガイドブックを買いまして、いろいろと勉強しているところでございます。

こんなこともできるのか！という発見が多々あり、Rユーザーの皆様にはぜひ買っていただきたい代物なのですが、いかんせんお値段が張りますので、いくつかピックアップしてご紹介します。

書籍のリンクは以下です。

::: {.callout-tip appearance="minimal" icon="false"}
[Rグラフィックスクックブック 第2版 ―ggplot2によるグラフ作成のレシピ集](https://www.amazon.co.jp/R%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%B9%E3%82%AF%E3%83%83%E3%82%AF%E3%83%96%E3%83%83%E3%82%AF-%E7%AC%AC2%E7%89%88-%E2%80%95ggplot2%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B0%E3%83%A9%E3%83%95%E4%BD%9C%E6%88%90%E3%81%AE%E3%83%AC%E3%82%B7%E3%83%94%E9%9B%86-Winston-Chang/dp/4873118921)
:::

さらに、2025年9月、ggplot2がバージョン4.0.0にアップデートされました！それを記念し、4.0.0の要素も取り入れたページにアップデートしました！🎉

ぜひご参考になさってください！

## `ggplot2`の基本

::: callout-note
使ったことがある方はこの辺はスキップしてください。

今回使うデータは、デフォルトで用意されている`iris`と`Orange`です。
:::

ひとまず主要なパッケージである`ggplot2`を読み込みます。

```{r}
# install.packages("ggplot2")
library(ggplot2)
```

基本的な使い方としては、`ggplot()`と`aes()`、そして図に応じて`geom_line()`（折れ線）や`geom_point()`（散布図）などを使っていきます。

今回は例として、アイリスのがく片の長さ、幅をそれぞれ軸としてプロットします。

### 散布図

まずは基本的な散布図を描いてみます。散布図は`geom_point()`を使うことで描画できます。

```{r}
#| label: fig-iris
#| fig-cap: "irisデータフレームを使った散布図"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point()

```

1.  `ggplot(data, aes())`という形で使用するデータを指定
2.  `aes()`内ではX軸とY軸をそれぞれ指定する。
    -   例：`aes(x = Sepal.Length, y = Sepal.Width)`
    -   第1引数がX、第2引数がYと決まっているので、`x =`や`y =`は書かなくてもよいです。
3.  ggplotのコマンドは`+`で繋ぐ
4.  散布図を作るために`geom_point()`を繋げる

これが土台です。`ggplot()`だけではプロットは表示されませんので、`geom_point()`など何かしら繋ぐ形にしてください。

**回帰線を引きたい場合：**

早速応用ではありますが、散布図を描いたら回帰線を引きたいことがありますよね。そのためには、`geom_smooth()`を使います。

```{r}
#| label: fig-iris-lm
#| fig-cap: "回帰直線を引いた散布図"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  geom_smooth(method = lm, formula = y ~ x)

```

### 折れ線グラフ

## 軸

### 軸ラベル

まずはX軸、Y軸のラベルを変更します。次のコマンドを追加することで変更できます。

```{r}
#| label: fig-axis-label
#| fig-cap: "軸ラベルを変更"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  labs(x = "Length of Sepal", y = "Width of Sepal")

```

また、以下のコードは同じ結果を示します。

``` r
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  xlab("Length of Sepal") + 
  ylab("Width of Sepal")
```

すなわち、`labs()`はそれ一つでX軸もY軸もラベルを変更することができますが、`xlab()`、`ylab()`を使えば片方ずつ変更できるということです。

次に、軸ラベルの体裁を変更したい場合、以下のようにします。

```{r}
#| label: fig-axis-font
#| fig-cap: "文字の体裁が変わっています"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  labs(x = "Length of Sepal", y = "Width of Sepal") + 
  theme(
    axis.title = element_text(family = "times", face = "italic", 
                              color = "red", size = 20)
  )

```

1.  `theme()`内の`axis.title`で変更する
    -   X軸Y軸のどちらかだけにしたければ、`axis.title.x`のようにします。
2.  `element_text()`内で具体的にフォントの体裁を指定
    -   今回はわかりやすく派手にしましたが、これらの要素を変更すれば調整できます。

    -   例えば、`face = "bold"`にすれば太字にできます。

    -   他にもありますが、おおむね使うのはこのあたりでしょう。

### 軸の目盛り

```{r}
#| label: fig-axis-scale
#| fig-cap: "目盛りの間隔が変わっています"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  scale_x_continuous(breaks = seq(4.5, 8, .5)) + 
  scale_y_continuous(breaks = seq(2, 4, 1))

```

目盛りがX軸は0.5刻み、Y軸は1刻みになるよう変更しました。このように、X（Y）が連続値である場合、`scale_x_continuous()`（`scale_y_continuous()`）で変更できます。`seq()`は数列を作る関数で、`seq(from, to, by)`の順に指定します[^1]。

[^1]: 離散値の場合は`scale_x_discrete()`などで変更できますが、今回その説明は省きます。

目盛りも同様にフォントのスタイルを変更できます。

```{r}
#| label: fig-scale-font
#| fig-cap: "数字のフォントが変わっています"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme(
    axis.text = element_text(family = "times", face = "bold", 
                             color = "red", size = 20)
  )

```

もはや訳が分からない図ですが、このように体裁は変更可能です。要素は大体上と同じで、`axis.text.x`のようにどちらかだけ変更することも可能です。

また、`axis.ticks`で目盛りを消去することも可能です。

```{r}
#| label: fig-delete-memori
#| fig-cap: "目盛りが消えています"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme(
    axis.text = element_text(family = "times", face = "bold", 
                             color = "red", size = 20), 
    axis.ticks = element_blank()
  )

```

お判りいただけますか？軸の数字は残っていますが、目盛り線は消えています。@fig-scale-font と見比べてみてください。

### 軸の範囲

X軸とY軸の範囲を設定する方法です。これまでの図ではだいたい4から8あたりがXの範囲、2.0から4.5がYの範囲でした。`xlim(a, b)`と`ylim(a, b)`で設定できます。

```{r}
#| label: fig-change-range
#| fig-cap: "範囲を変えました"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  xlim(5, 7) + 
  ylim(3, 4) + 
  theme(
    axis.text = element_text(family = "times", face = "bold", 
                             color = "red", size = 20), 
    axis.ticks = element_blank()
  )

```

## 注釈

### 文字

表の中に文字を入れることができます。

`annotate()`内で`"text"`か`"segment"`を指定することで挿入可能です。

```{r}
#| label: fig-annotate
#| fig-cap: "表内に文字を入れられました"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  annotate("text", label = "ggplot is\nwonderful!", x = 6.5, y = 4, 
           family = "times", color = "#CC6666", size = 10)

```

1.  `annotate("text", label = "hogehoge")`で文字を入れることができる

2.  `x`と`y`を指定しないと反映されない

3.  改行したい場合、`\n`を入れる

4.  フォント、色、サイズも指定できる

関数一つで意外と簡単にできます。

### セグメント

棒線や矢印を付けることも可能です。

```{r}
#| label: fig-segment-1
#| fig-cap: "斜めに棒線が入りました。"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  annotate("segment", x = 5, xend = 7, y = 4, yend = 2.5, 
           linewidth = 2, color = "#CC6666")

```

```{r}
#| label: fig-segment-2
#| fig-cap: "矢印になりました。"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  annotate("segment", x = 5, xend = 7, y = 4, yend = 2.5, 
           linewidth = 2, color = "#CC6666", 
           arrow = arrow(length = unit(2, units = "cm")))

```

1.  `"segment"`で棒線ができる
2.  `x`と`xend`、`y`と`yend`を指定する必要がある
    -   $(x, y)$から$(xend, yend)$までの2点を結ぶようにできます。
3.  `linewidth`で線の太さを指定可
    -   他の要素も文字と同様に指定できますが、`size`が`linewidth`に置き換わっています。
4.  `arrow = arrow(length = unit(x, units = "cm"))`で矢じりが付く
    -   `x`で矢じりのサイズ、`units`は単位で、他にmmやinchesなどがあります。

以上のように、文字だけでなく線や矢印を追加することができます。

## 複数のプロットと凡例

### 複数のカテゴリのプロット

ここでは`Orange`データセットを使って複数のカテゴリのプロットと、凡例について説明します。

複数のカテゴリのプロットとは、以下のデータを見ていただけると早いと思います。

```{r}
#| echo: false
#| label: tbl-orange
#| tbl-cap: "`Orange`の一部"

Orange |> 
  head(10) |> 
  tinytable::tt(width = 8)

```

`Tree`は木の識別子で、1～5まであります。`age`は日齢、`circumference`は幹の周囲です。

ここでやりたいことは、木の種類ごとに、日齢と幹の周囲を軸にとってプロットすることです。これをただプロットしてしまうと、

```{r}
#| label: fig-orange-pool
#| fig-cap: "すべてのデータを放り込みました"

ggplot(Orange, aes(x = age, y = circumference)) + 
  geom_point()

```

これでは各点がどの木のものなのか判別できない状態です。これを識別するには次のようにします。

```{r}
#| label: fig-orange-color
#| fig-cap: "色が分かれました"

ggplot(Orange, aes(x = age, y = circumference, color = Tree)) + 
  geom_point()

```

これでとりあえずはどの点がどの木のものかわかるようになりました。`color = Tree`で、木の種類ごとに色を使うことを指定しています。

今は散布図なので色を分けるだけで済みますが、折れ線グラフのような場合は、色だけでなく線の種類を変えたいかもしれません。そんな時は次のようにします。

```{r}
#| label: fig-orange-linetype
#| fig-cap: "折れ線の種類も分かれました"

ggplot(Orange, aes(x = age, y = circumference, color = Tree, linetype = Tree)) + 
  geom_point() + 
  geom_line()

```

`linetype = Tree`を追加することで線の種類も木の種類ごとに変更することができました。

このように`aes()`内で要素を追加することで種類ごとに分けることができます。

まだ色遣いなどは不格好ですが、いったんこのまま進めます。

### 凡例の位置

次にしたいのは、凡例の設定です。凡例は現在右側に表示されていますが、まずはこれを下に表示したいとします。これは、次のコードでできます。

```{r}
#| label: fig-orange-legend-position
#| fig-cap: "凡例が下に来ました"

ggplot(Orange, aes(x = age, y = circumference, color = Tree)) + 
  geom_point() + 
  theme(legend.position = "bottom")

```

`theme(legend.position = "bottom")`を設定することで、凡例の位置が下になりました。もちろんbottom以外にもtop, left, right（デフォルト）などを指定することができます。

さらに凡例を消したい場合は次のようにします。

```{r}
#| label: fig-orange-legend-delete
#| fig-cap: "凡例を消しました"

ggplot(Orange, aes(x = age, y = circumference, color = Tree)) + 
  geom_point() + 
  theme(legend.position = "none")

```

`theme(legend.position = "none")`で凡例を消すことができました。

### 凡例の調整

例えば、凡例のタイトルは消したい場合が結構あると思います。@fig-orange-color の例でいえば、Treeという文字は消したいということです。

そんな場合は、以下のようにします。

```{r}
#| label: fig-orange-legend-delte-title
#| fig-cap: "凡例のタイトルを削除"

ggplot(Orange, aes(x = age, y = circumference, color = Tree)) + 
  geom_point() + 
  guides(color = guide_legend(title = NULL))

```

Treeというタイトルが消えました。

ここでは`guides(color = guide_legend(title = NULL))`としていますが、`aes()`内で例えば`linetype`を使っている場合は、`guides()`内も`linetype =`にする必要があります。

## テーマ

ggplotではテーマを選ぶことができます。デフォルトではこれまでの図のように背景がグレーになっていますが、ほとんどの場合で背景は白にしたいですよね。

背景だけでなく、罫線等もテーマで変更することができます。

### プリセットのテーマ

いくつかのテーマが準備されています。代表的なものをいくつかご紹介します。

::: panel-tabset
## minimal

```{r}
#| label: fig-theme-minimal
#| fig-cap: "`theme_minimal()`"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme_minimal()

```

## bw

```{r}
#| label: fig-theme-bw
#| fig-cap: "`theme_bw()`"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme_bw()

```

`theme_minimal()`と比べて外枠が付いています。

## classic

```{r}
#| label: fig-theme-classic
#| fig-cap: "`theme_classic()`"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme_classic()

```

## linedraw

```{r}
#| label: fig-theme-linedraw
#| fig-cap: "`theme_linedraw()`"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme_linedraw()

```

## light

```{r}
#| label: fig-theme-light
#| fig-cap: "`theme_light()`"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme_light()

```

## void

```{r}
#| label: fig-theme-void
#| fig-cap: "`theme_void()`"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme_void()

```

さすがにやりすぎでは…と思うかもしれませんが、GISで地図を可視化するようなときに重宝します。
:::

### `theme()`関数

ここまでご紹介したものの中で`theme()`を使ったものがいくつかありました。

ここで`theme()`**は**`theme_xxx()`**の後に使う**ということに注意してください。

これは、`theme_xxx()`が`theme()`を上書きしてしまうためです。

```{r}
#| label: fig-theme-miss
#| fig-cap: "失敗例"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme(axis.title = element_text(color = "red")) + 
  theme_minimal()
```

`theme(axis.title = element_text(color = "red"))`で軸ラベルを赤色に設定していますが、出力されたものは黒いラベルになっています。

順番を逆にすれば、

```{r}
#| label: fig-theme-success
#| fig-cap: "正しい例"

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point() + 
  theme_minimal() + 
  theme(axis.title = element_text(color = "red"))
```

このようにしっかり反映されます。

## 発展1：`ggrepel`

ここからは、`ggrepel`というパッケージを用いて折れ線グラフを発展させた例をご紹介します。

```{r}
# インストール
# pak::pak("ggrepel")
library(ggrepel)
```

まず、以下のようなデータがあるとします。`firm_id`は30まであります。

```{r}
#| label: tbl-data-prep
#| tbl-cap: "データの一部"
#| echo: false

library(tidyverse)
set.seed(57)

n_firms <- 30   # Reduce the number of firms
n_states <- 50
T <- 36

firm_id <- 1:n_firms
state_id <- sample(n_states, size = n_firms, replace = TRUE)
year <- 1980:2015

fe_firm <- rnorm(n_firms, mean = 0, sd = .5)
fe_year <- rnorm(T, mean = 0, sd = .5)
error <- rnorm(n_firms * T, mean = 0, sd = .5)

treated_1998 <- sample(c(1, 0), size = n_firms, 
                       replace = TRUE, prob = c(1/5, 4/5))

treated_year <- sample(c(1989, 1998, 2007), size = n_firms, 
                       replace = TRUE, prob = c(17/50, 17/50, 16/50))

df <- tibble(
  firm_id = rep(firm_id, each = T), 
  state_id = rep(state_id, each = T), 
  year = rep(year, times = n_firms), 
  fe_firm = rep(fe_firm, each = T), 
  fe_year = rep(fe_year, times = n_firms), 
  error = error, 
  treated_1998 = rep(treated_1998, each = T), 
  is_treated = if_else(treated_1998 == 1 & year >= 1998, 1, 0), 
  y = case_when(
    is_treated == 1 ~ 
      rnorm(n_firms * T, mean = 2, sd = .2) + fe_firm + fe_year + error, 
    .default = fe_firm + fe_year + error
  )
)

df |> 
  select(firm_id:year, treated_1998:y) |> 
  head() |> 
  tinytable::tt()

```

これを使って横軸に`Year`、縦軸に`y`をとってグラフにします。

詳細を書くと長くなるので、適宜メモを入れました。ご参考まで。

```{r}
#| label: fig-ggrepel
#| fig-cap: "ggrepelを使ったプロット"
#| fig-align: center

df <- df |> 
  mutate(
    # ハイライトする群とそれ以外に分ける
    group = if_else(treated_1998 == 1, as.factor(firm_id), "other"), 
    # 最後の年にだけラベルを付ける
    group_lab = if_else(treated_1998 == 1 & year == 2015, 
                        paste0("Firm ", firm_id), NA_character_)
  )

ggplot(
  # まずハイライトする群だけプロット
  df |> filter(treated_1998 == 1), 
  aes(x = year, y = y, group = firm_id)
) + 
  theme_minimal() + 
  theme(
    # 罫線を削除
    panel.grid = element_blank(), 
    # 凡例を削除
    legend.position = "none", 
    # 軸のタイトルと文字のフォントとサイズを調整
    axis.title = element_text(family = "Times", size = 18), 
    axis.text = element_text(family = "Times", size = 14)
  ) + 
  geom_vline(
    # 垂直線を描写
    xintercept = seq(1980, 2015, by = 5), 
    color = "gray91", 
    linewidth = .6
  ) + 
  geom_segment(
    # 水平線を描写
    # 描写のためにデータを準備
    data = tibble(y = seq(-2.5, 5.0, by = 2.5), x1 = 1980, x2 = 2015), 
    aes(x = x1, xend = x2, y = y, yend = y), 
    inherit.aes = FALSE, 
    color = "gray91", 
    linewidth = .6
  ) + 
  geom_segment(
    # 薄い水平線を描写
    data = tibble(y = seq(-2.0, 4.5, by = .5), x1 = 1980, x2 = 2015), 
    aes(x = x1, xend = x2, y = y, yend = y), 
    inherit.aes = FALSE, 
    color = "gray97", 
    linewidth = .3
  ) + 
  geom_segment(
    # 縦軸が0のところに水平線を描写
    data = tibble(y = 0, x1 = 1980, x2 = 2015), 
    aes(x = x1, xend = x2, y = y), 
    inherit.aes = FALSE, 
    linetype = "dashed", 
    color = "gray40"
  ) + 
  geom_vline(
    # 処置年に垂直線を描写
    xintercept = 1998, 
    linetype = "dashed", 
    color = "gray40"
  ) + 
  geom_line(
    # ハイライトしない群をプロット
    data = df |> filter(group == "other"), 
    color = "gray75", 
    alpha = .5
  ) + 
  geom_line(
    # ハイライトする群をプロット
    aes(color = group)
  ) + 
  geom_text_repel(
    # ハイライトした線にラベルを追加
    aes(color = group, label = group_lab), 
    family = "Times", 
    hjust = 0, 
    # 2017年の位置にラベルを書く
    xlim = c(2017, NA), 
    size = 4, 
    segment.linetype = "dotted"
  ) + 
  xlab("Year") + 
  ylab("Value") + 
  scale_x_continuous(
    expand = c(0, 0), 
    # ラベルが見えるように図の端の2015年より広くとる
    limits = c(1980, 2021), 
    breaks = seq(1980, 2015, by = 5)
  ) + 
  scale_y_continuous(
    expand = c(0, 0), 
    limits = c(-2.5, 5.0), 
    breaks = c(-2.5, 0, 2.5, 5.0)
  )
```

## おわりに

ひとまず僕がよく使うggplotの設定をまとめてみました。ggplotを駆使して、スタイリッシュなプロットを作成していきましょう！

適宜追記する予定ですので、ご参考になれば幸いです。