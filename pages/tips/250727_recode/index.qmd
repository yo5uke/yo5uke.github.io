---
title: "[recode]{.fira-code}関数でデータフレームの中身を置き換える"
description: |
  表を作るときに重宝するかも…？
date: 2025-07-27
date-modified: 2025-10-23
categories:
  - R
  - データ処理
---

## はじめに

今回は{dplyr}パッケージの`recode()`関数を紹介します。

例えばデータフレーム内の変数がカテゴリ変数で、便宜的に数値で表されているような場合、そのまま表に出すことはできないかもしれません。

そんなときに中身を置き換える手段として使えるのが`recode()`関数で、イメージとしては`case_when()`と似ているかもしれません^[ただし、`case_when()`だと「○○以上○○以下」みたいな条件分岐に対応できるという強みがありますが、今回は想定しません。あくまでもデータフレーム内の値をある別の表記に値 = 値で置き換えるということを想定します。]。

1度きりの変換であれば`case_when`でもあまり労力は変わらないかもしれませんが、何回も繰り返し置き換えたいときは、シンプルで強みを発揮します。

## 使い方

### パッケージ

{dplyr}に入っているので、{tidyverse}を読み込んでいれば使えます。

```{r}
library(tidyverse)
# あるいは
# library(dplyr)
```

### データフレーム

今回は以下のようなデータフレームを想定します。

```{r}
df <- tibble(
  id = 1:4,
  sex = rep(1:2, times = 2)
)
```

```{r}
#| echo: false
#| label: tbl-example
#| tbl-cap: "テーブルの例"

tinytable::tt(df)

```

超絶簡単なデータフレームです。4人のIDと性別が1, 2の表記で含まれているだけです。ここで1を男性、2を女性とします。

### 対応表を作る

これを表に起こしたいとき、たとえばそのまま`tinytable::tt()`で表示したとしたら、 @tbl-example がそのまま出てきてしまい、数字が誰を、何を表しているのかがわかりませんよね。

そこで、あらかじめ対応表を作って置きます。

```{r}
id_map <- c(
  "1" = "Michael",
  "2" = "Emily",
  "3" = "John",
  "4" = "Jessica"
)

sex_map <- c(
  "1" = "Male",
  "2" = "Female"
)
```

`c()`の中に、`=`の左にデータフレーム内の表記を、右に表示したい表記を書いていきます。

今回はIDと性別を両方書き換えたいので、2種類の対応関係を示したベクトルを作成しています。

### `recode()`を使う

この対応表をもとに、`recode()`関数を使っていきます。使う際は、`mutate()`と組み合わせます。

```{r}
df_recode <- df |>
  mutate(
    id = recode(id, !!!id_map),
    sex = recode(sex, !!!sex_map)
  )
```

```{r}
#| echo: false
#| label: tbl-recode
#| tbl-cap: "`recode()`を使用した表"

tinytable::tt(df_recode)

```

しっかり置き換えられていますね。

`!!!`という表記は見慣れないと思いますが、`id_map`や`sex_map`で作成したベクトルをバラバラにして渡すということです^[ややこしいですが、`id_map`自体はベクトルなので、ベクトルを渡すのではなく、中身を展開して渡したいということです。]。`recode(sex, "1" = "Male", "2" = "Female")`と同じ働きをします。

あらかじめ対応関係を表すベクトルを作って置くことで、使いまわすことができ、特に何回も表を作る際に効率化が図れます。

## おまけ

表にするなら、列名も変えたいですよね。そんなときは{purrr}パッケージの`set_names()`関数を使います。これも{tidyverse}に入っていますので、特に追加でライブラリを読み込む必要はありません。

```{r}
col_names <- c("名前", "性別")

df_set_names <- df_recode |>
  set_names(col_names)
```

```{r}
#| echo: false
#| label: tbl-set-names
#| tbl-cap: "列名を変更"

tinytable::tt(df_set_names)

```

あらかじめ`col_names`を作成しておきましたが、ここは任意です。`set_names()`の中に直接書くのも可能です。

## おわりに

今回は表を整えるための`recode()`関数とおまけの`set_names()`関数をまとめました。

以前[Quartoで論文を書くという記事](../240629_write_thesis/index.qmd)を書きましたが、論文はLaTeXで書きたい！という方には表だけLaTeXコードにして出力するという方法もありますので、それもまたまとめようかと思います。