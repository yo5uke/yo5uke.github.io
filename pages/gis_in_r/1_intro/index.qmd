---
title: "導入 + ハンドリング"
date: 2024-05-16
date-modified: last-modified
editor: visual
---

# はじめに

このページでは、RでGISを使う上での基本について説明します。

R 言語では主に`sf`パッケージを使ってGISを扱います。また、`tidyverse`パッケージ群を使うことで、データの前処理や可視化を行うことができます。

また、R Projectを使っていることを前提とします[^1]。

[^1]: R Projectと後述の`here`については[こちら](https://yo5uke.github.io/tips/240515_rproj/index.html)を参照して下さい。

# パッケージ

`sf`, `tidyverse`と`here`の3つを使用します。

``` r
# インストール
pak::pak(c("sf", "tidyverse", "here"))
```

```{r}
library(sf)
library(tidyverse)
library(here)
```

# 使用するデータ

1.  福島県の行政区域データ（2024年、ポリゴン）

    -   [国土数値情報ダウンロードサイト](https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-2024.html)

2.  福島県の公園データ（2011年、ポイント）

    -   [国土数値情報ダウンロードサイト](https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-P13.html)

これらのデータを、ワーキングディレクトリに`data`フォルダを作って入れておいてください。

# 作業

このセクションでやることは、データの抽出と可視化です。

## データの抽出

### データの読み込み

`sf`パッケージの`read_sf()`関数を用います。

Shift_JISで書かれたような~~変な~~データがたまにあるので、そのようなときはオプションで指定しましょう。`options = "ENCODING=Shift_JIS"`を追加してください。

::: {.callout-note collapse="true"}
## 読み込みに使う関数について

`read_sf()`は、`st_read()`の細かい設定を省いてくれた関数、というイメージです。

具体的には、

``` r
read_sf(dsn)

st_read(dsn, quiet = TRUE, stringsAsFactors = FALSE, as_tibble = TRUE)
```

この2つが同じです[^2]。詳しくは`?st_read()`をコンソールに打ち込みドキュメントを読んでみてください。

基本的には`read_sf()`で十分だと思います。
:::

[^2]: `dsn`のところがデータです。

また、公園のデータはCRSが設定されていないようです。その設定も行います。CRSについては後の回で説明します。

```{r}
fukushima <- read_sf(here("data/N03-20240101_07_GML/N03-20240101_07.shp"))

park <- read_sf(here("data/P13-11_07_GML/P13-11_07.shp"), 
                options = "ENCODING=Shift_JIS") |> 
  st_set_crs(st_crs(4612)) |>  # JGD2000/(B, L) データ本来のCRS
  st_transform(st_crs(6668))   # JGD2011/(B, L) 変換したいCRS
```

### データを見てみる

公園のデータを見てみます。

```{r}
#| echo: false
#| label: fig-park
#| fig-cap: "公園のポイントデータ"

mapview::mapviewOptions(fgb = FALSE)
mapview::mapview(x = park)
```

```{r}
#| echo: false
#| label: tbl-head-park
#| tbl-cap: "公園データの中身（一部）"

tinytable::tt(head(park))
```

国土数値情報ダウンロードサイトの説明を見てみると、各列は以下のようになっています。

::::: columns
::: column
-   `P13_001`：管理都道府県・整備局

-   `P13_002`：管理市区町村

-   `P13_003`：公園名

-   `P13_004`：公園種別

-   `P13_005`：所在地都道府県名
:::

::: column
-   `P13_006`：所在地市区町村名

-   `P13_007`：供用開始年

-   `P13_008`：供用済面積

-   `P13_009`：都市計画決定

-   `P13_010`：備考
:::
:::::

### 抽出

今回は公園名、所在地都道府県、所在地市区町村、そしてポイントを表す`geometry`の列だけが必要だとします。

`dplyr::select()`関数を使って列を抽出し、同時に名前も変更します。

::: callout-note
`select()`内で変換後と変換前をイコールで結ぶことにより、列名を変更できます。
:::

```{r}
park_s <- park |> 
  select(
    name_park = P13_003,  # 公園名
    name_pref = P13_005,  # 都道府県名
    name_muni = P13_006,  # 市区町村名
    geometry
  )
```

```{r}
#| echo: false
#| label: tbl-park-selected
#| tbl-cap: "列抽出済みのデータ"

tinytable::tt(head(park_s))
```

このように`tidyverse`の強みを活かしてデータハンドリングを行えます[^3]。

[^3]: データハンドリングの基礎的な知識を身に付けるには、[私たちのR](https://www.jaysong.net/RBook/)がおすすめです。

## 可視化

`tidyverse`に含まれる`ggplot2`を使って、ここまでのデータをプロットしていきます。

基本的な書き方は以下の通りです。データフレームから`ggplot()`を繋いで記述していきます。

```{r}
#| label: fig-simple-plot
#| fig-cap: "シンプルなプロット"

park_s |> 
  ggplot() + 
  geom_sf()   # 地図をプロットするためのコマンド
```

これだとやや分かりにくいので、背景を消しましょう。`theme_void()`や`theme_bw()`、`theme_classic()`などがよいと思います。

```{r}
#| label: fig-delete-back
#| fig-cap: "背景を削除"

park_s |> 
  ggplot() + 
  geom_sf() + 
  theme_void()
```

これだけだとどこなのかわからないので、先ほどダウンロードした福島県の行政区域を重ねてプロットします。

::: callout-note
## プロットするとき

`ggplot` を使うときは、記述した順に上に重なっていくので、場合によっては順番を意識しないとポイントなどが見えなくなることがあります。

今回は行政区域をベースとし、その上に公園をプロットするので、先に行政区域をプロットします。
:::

::: callout-important
## geom_sf() の注意点

`geom_sf()` でデータを指定する引数は `data` であり、これは第2引数なので、シンプルに `geom_sf(fukushima)` と書くとプロットがうまくいきません[^4]。`geom_sf(data = fukushima)` と書く必要がある点にご注意ください。
:::

[^4]: 「○○ =」を省略できるのは、第1引数であるとき、もしくは引数順に書いている場合のみです。

```{r}
#| label: fig-plot-all
#| fig-cap: "行政区域と公園ポイントのプロット"

ggplot() + 
  geom_sf(data = fukushima) + 
  geom_sf(data = park_s, color = "orange") +  # 点の色も指定
  theme_void()
```

ここまでがプロットの方法です。

今後も可視化の際に `ggplot2` を使いますので、その都度紹介します。

## ファイルの出力

先ほど作成した`park_s`をShapefileとして出力します。

GISデータは重いものが多いので、いちいち生データを読み込んで処理をすると時間がかかります。

``` r
# フォルダがない場合に作成する
if (!dir.exists(here("data/output/1_intro"))) {
  dir.create(here("data/output/1_intro"), recursive = TRUE)
}

write_sf(park_s, here("data/output/1_intro/Park_selected.shp"), 
         layer_options = "ENCODING=UTF-8")
```

次回以降は`Park_selected.shp`を読み込めばここから作業を開始できます。

# おわりに

今回はここまでです。

RでGISデータを読み込み、データを抽出してプロット、最後にシェープファイルに出力しました。

データのハンドリングについてはRでできることが多いので、強みが活かせると思います。プロジェクトに合わせて応用させてみてください。
