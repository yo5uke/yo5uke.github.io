[
  {
    "objectID": "pages/gis_in_r/1_intro/index.html#データの抽出",
    "href": "pages/gis_in_r/1_intro/index.html#データの抽出",
    "title": "導入 + ハンドリング",
    "section": "データの抽出",
    "text": "データの抽出\n\nデータの読み込み\nsfパッケージのread_sf()関数を用います。\nShift_JISで書かれたような変なデータがたまにあるので、そのようなときはオプションで指定しましょう。options = \"ENCODING=Shift_JIS\"を追加してください。\n\n\n\n\n\n\n読み込みに使う関数について\n\n\n\n\n\nread_sf()は、st_read()の細かい設定を省いてくれた関数、というイメージです。\n具体的には、\nread_sf(dsn)\n\nst_read(dsn, quiet = TRUE, stringsAsFactors = FALSE, as_tibble = TRUE)\nこの2つが同じです2。詳しくは?st_read()をコンソールに打ち込みドキュメントを読んでみてください。\n基本的にはread_sf()で十分だと思います。\n\n\n\nまた、公園のデータはCRSが設定されていないようです。その設定も行います。CRSについては後の回で説明します。\n\nfukushima &lt;- read_sf(here(\"data/N03-20240101_07_GML/N03-20240101_07.shp\"))\n\npark &lt;- read_sf(here(\"data/P13-11_07_GML/P13-11_07.shp\"), \n                options = \"ENCODING=Shift_JIS\") |&gt; \n  st_set_crs(st_crs(4612)) |&gt;  # JGD2000/(B, L) データ本来のCRS\n  st_transform(st_crs(6668))   # JGD2011/(B, L) 変換したいCRS\n\n\n\nデータを見てみる\n公園のデータを見てみます。\n\n\n\n\n\n\n\n\n図 1: 公園のポイントデータ\n\n\n\n\n\n\n\n\n表 1: 公園データの中身（一部）\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                P13_001\n                P13_002\n                P13_003\n                P13_004\n                P13_005\n                P13_006\n                P13_007\n                P13_008\n                P13_009\n                P13_010\n                geometry\n              \n        \n        \n        \n                \n                  福島県\n                  NA\n                  福島空港公園            \n                  6\n                  福島県\n                  須賀川市  \n                  1993\n                  520900\n                  1\n                  NA\n                  POINT (140.4202 37.24667)\n                \n                \n                  福島県\n                  NA\n                  あづま総合運動公園      \n                  6\n                  福島県\n                  福島市    \n                  1980\n                  982000\n                  1\n                  NA\n                  POINT (140.362 37.722)\n                \n                \n                  福島県\n                  NA\n                  逢瀬公園                \n                  4\n                  福島県\n                  郡山市    \n                  1979\n                  346000\n                  1\n                  NA\n                  POINT (140.2739 37.41234)\n                \n                \n                  福島県\n                  NA\n                  会津レクリエーション公園\n                  6\n                  福島県\n                  会津若松市\n                  1998\n                  426000\n                  1\n                  NA\n                  POINT (140.0166 37.51643)\n                \n                \n                  福島県\n                  NA\n                  東ヶ丘公園              \n                  6\n                  福島県\n                  南相馬市  \n                  1995\n                  212000\n                  1\n                  NA\n                  POINT (140.9671 37.6326)\n                \n                \n                  福島県\n                  NA\n                  いわき公園              \n                  6\n                  福島県\n                  いわき市  \n                  1987\n                  713000\n                  1\n                  NA\n                  POINT (140.9216 37.01329)\n                \n        \n      \n    \n\n\n\n\n\n\n国土数値情報ダウンロードサイトの説明を見てみると、各列は以下のようになっています。\n\n\n\nP13_001：管理都道府県・整備局\nP13_002：管理市区町村\nP13_003：公園名\nP13_004：公園種別\nP13_005：所在地都道府県名\n\n\n\nP13_006：所在地市区町村名\nP13_007：供用開始年\nP13_008：供用済面積\nP13_009：都市計画決定\nP13_010：備考\n\n\n\n\n\n抽出\n今回は公園名、所在地都道府県、所在地市区町村、そしてポイントを表すgeometryの列だけが必要だとします。\ndplyr::select()関数を使って列を抽出し、同時に名前も変更します。\n\n\n\n\n\n\nNote\n\n\n\nselect()内で変換後と変換前をイコールで結ぶことにより、列名を変更できます。\n\n\n\npark_s &lt;- park |&gt; \n  select(\n    name_park = P13_003,  # 公園名\n    name_pref = P13_005,  # 都道府県名\n    name_muni = P13_006,  # 市区町村名\n    geometry              # プロットに必要\n  )\n\n\n\n\n\n表 2: 列抽出済みのデータ\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                name_park\n                name_pref\n                name_muni\n                geometry\n              \n        \n        \n        \n                \n                  福島空港公園            \n                  福島県\n                  須賀川市  \n                  POINT (140.4202 37.24667)\n                \n                \n                  あづま総合運動公園      \n                  福島県\n                  福島市    \n                  POINT (140.362 37.722)\n                \n                \n                  逢瀬公園                \n                  福島県\n                  郡山市    \n                  POINT (140.2739 37.41234)\n                \n                \n                  会津レクリエーション公園\n                  福島県\n                  会津若松市\n                  POINT (140.0166 37.51643)\n                \n                \n                  東ヶ丘公園              \n                  福島県\n                  南相馬市  \n                  POINT (140.9671 37.6326)\n                \n                \n                  いわき公園              \n                  福島県\n                  いわき市  \n                  POINT (140.9216 37.01329)\n                \n        \n      \n    \n\n\n\n\n\n\nこのようにtidyverseの強みを活かしてデータハンドリングを行えます3。"
  },
  {
    "objectID": "pages/gis_in_r/1_intro/index.html#可視化",
    "href": "pages/gis_in_r/1_intro/index.html#可視化",
    "title": "導入 + ハンドリング",
    "section": "可視化",
    "text": "可視化\ntidyverseに含まれるggplot2を使って、ここまでのデータをプロットしていきます。\n基本的な書き方は以下の通りです。データフレームからggplot()を繋いで記述していきます。\n\npark_s |&gt; \n  ggplot() + \n  geom_sf()   # 地図をプロットするためのコマンド\n\n\n\n\n\n\n\n図 2: シンプルなプロット\n\n\n\n\n\nこれだとやや分かりにくいので、背景を消しましょう。theme_void()やtheme_bw()、theme_classic()などがよいと思います。\n\npark_s |&gt; \n  ggplot() + \n  geom_sf() + \n  theme_void()\n\n\n\n\n\n\n\n図 3: 背景を削除\n\n\n\n\n\nこれだけだとどこなのかわからないので、先ほどダウンロードした福島県の行政区域を重ねてプロットします。\n\n\n\n\n\n\nプロットするとき\n\n\n\nggplot を使うときは、記述した順に上に重なっていくので、場合によっては順番を意識しないとポイントなどが見えなくなることがあります。\n今回は行政区域をベースとし、その上に公園をプロットするので、先に行政区域をプロットします。\n\n\n\n\n\n\n\n\ngeom_sf() の注意点\n\n\n\ngeom_sf() でデータを指定する引数は data であり、これは第2引数なので、シンプルに geom_sf(fukushima) と書くとプロットがうまくいきません4。geom_sf(data = fukushima) と書く必要がある点にご注意ください。\n\n\n\nggplot() + \n  geom_sf(data = fukushima) + \n  geom_sf(data = park_s, color = \"orange\") +  # 点の色も指定\n  theme_void()\n\n\n\n\n\n\n\n図 4: 行政区域と公園ポイントのプロット\n\n\n\n\n\nここまでがプロットの方法です。\n今後も可視化の際に ggplot2 を使いますので、その都度紹介します。"
  },
  {
    "objectID": "pages/gis_in_r/1_intro/index.html#ファイルの出力",
    "href": "pages/gis_in_r/1_intro/index.html#ファイルの出力",
    "title": "導入 + ハンドリング",
    "section": "ファイルの出力",
    "text": "ファイルの出力\n先ほど作成したpark_sをShapefileとして出力します。\nGISデータは重いものが多いので、いちいち生データを読み込んで処理をすると時間がかかります。\n# フォルダがない場合に作成する\nif (!dir.exists(here(\"data/output/1_intro\"))) {\n  dir.create(here(\"data/output/1_intro\"), recursive = TRUE)\n}\n\nwrite_sf(park_s, here(\"data/output/1_intro/Park_selected.shp\"), \n         layer_options = \"ENCODING=UTF-8\")\n次回以降はPark_selected.shpを読み込めばここから作業を開始できます。"
  },
  {
    "objectID": "pages/gis_in_r/1_intro/index.html#footnotes",
    "href": "pages/gis_in_r/1_intro/index.html#footnotes",
    "title": "導入 + ハンドリング",
    "section": "注",
    "text": "注\n\n\nR Projectと後述のhereについてはこちらを参照して下さい。↩︎\ndsnのところがデータです。↩︎\nデータハンドリングの基礎的な知識を身に付けるには、私たちのRがおすすめです。↩︎\n「○○ =」を省略できるのは、第1引数であるとき、もしくは引数順に書いている場合のみです。↩︎"
  },
  {
    "objectID": "pages/gis_in_r/2_summarise/index.html#はじめに",
    "href": "pages/gis_in_r/2_summarise/index.html#はじめに",
    "title": "地理データを集約",
    "section": "はじめに",
    "text": "はじめに\n今回は地理データを集約する方法について説明します。\n集約とは、例えば市町村単位のデータを県単位のデータにまとめるというイメージです。市町村単位のデータしかもっていないものの都道府県単位でプロットしたいといった場合に、今回説明する方法を使えば対応することができます。"
  },
  {
    "objectID": "pages/gis_in_r/2_summarise/index.html#使用するパッケージデータ",
    "href": "pages/gis_in_r/2_summarise/index.html#使用するパッケージデータ",
    "title": "地理データを集約",
    "section": "使用するパッケージ・データ",
    "text": "使用するパッケージ・データ\n今回は使用するデータを軽量化するために、イントロで使用した福島県のデータを使います1。日本の全市町村のような場合でも同様の流れで進めることができます。\n\nlibrary(tidyverse)  # データハンドリング\nlibrary(here)       # 相対パスを使用\nlibrary(sf)         # 地理データを使用\n\n# 福島県のデータの読み込み\nfukushima &lt;- read_sf(here(\"data/N03-20240101_07_GML/N03-20240101_07.shp\"))"
  },
  {
    "objectID": "pages/gis_in_r/2_summarise/index.html#データの確認",
    "href": "pages/gis_in_r/2_summarise/index.html#データの確認",
    "title": "地理データを集約",
    "section": "データの確認",
    "text": "データの確認\nデータのCRS（座標参照系）はデータを読み込んだら確認しておくようにしましょう。これがデータごとに異なるとデータ間で整合性が失われたり、同じデータでも思ったプロットにならなかったりします。\n\nst_crs(fukushima)\n\nCoordinate Reference System:\n  User input: JGD2011 \n  wkt:\nGEOGCRS[\"JGD2011\",\n    DATUM[\"Japanese Geodetic Datum 2011\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"Japan - onshore and offshore.\"],\n        BBOX[17.09,122.38,46.05,157.65]],\n    ID[\"EPSG\",6668]]\n\n\n2行目にJGD2011、1番下にID[\"EPSG\",6668]]と書かれています。6668はJGD2011に対応する数字であり、他の数字であっても1対１の関係で数字が割り振られています。JGD2011は日本測地系2011を表しているのですが、CRSの詳細は次回に回します。\nひとまずここでは問題ないので、データの中身を確認したいと思います。\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                N03_001\n                N03_002\n                N03_003\n                N03_004\n                N03_005\n                N03_007\n                geometry\n              \n        \n        \n        \n                \n                  福島県\n                  NA\n                  NA\n                  福島市\n                  NA\n                  07201\n                  POLYGON ((140.3745 37.65095...\n                \n                \n                  福島県\n                  NA\n                  NA\n                  会津若松市\n                  NA\n                  07202\n                  POLYGON ((139.949 37.33309,...\n                \n                \n                  福島県\n                  NA\n                  NA\n                  郡山市\n                  NA\n                  07203\n                  POLYGON ((140.1249 37.33085...\n                \n                \n                  福島県\n                  NA\n                  NA\n                  いわき市\n                  NA\n                  07204\n                  POLYGON ((140.8494 36.9161,...\n                \n                \n                  福島県\n                  NA\n                  NA\n                  いわき市\n                  NA\n                  07204\n                  POLYGON ((140.889 36.91886,...\n                \n                \n                  福島県\n                  NA\n                  NA\n                  いわき市\n                  NA\n                  07204\n                  POLYGON ((140.8873 36.91099...\n                \n        \n      \n    \n\n\n\n1列目に県名、4列目に市町村名、6列目に市町村コード、7列目に座標データが入っているのが確認できます。\n次にプロットして確認します。\n\nggplot() + \n  geom_sf(data = fukushima) + \n  theme_void()\n\n\n\n\n\n\n\n\nこのように市町村の境界が示されています。\n今回の目標はこれを県でまとめることなので、最終的に県境だけが残ることになります。"
  },
  {
    "objectID": "pages/gis_in_r/2_summarise/index.html#データの集約",
    "href": "pages/gis_in_r/2_summarise/index.html#データの集約",
    "title": "地理データを集約",
    "section": "データの集約",
    "text": "データの集約\nそれでは本題のデータの集約に入ります。\nこれまでTidyverseを使ったことがある方であれば、dplyr::summarise()が思い浮かぶ方がいらっしゃるのではないでしょうか。特定のグループごとに平均や合計を集計する際に便利な関数ですが、基本的な概念はそれと同じです。\n平均を算出する場合であればmean()を使いますが、地理データをまとめる際にはsfパッケージのst_union()を用います。\n早速使い方を見てみると、\n\nfukushima_summarise &lt;- fukushima |&gt; \n  summarise(geometry = st_union(geometry), \n            .by = N03_001)\n\n# 先にgroup_by()をしても同じ\n# fukushima_summarise &lt;- fukushima |&gt; \n#   group_by(N03_001) |&gt; \n#   summarise(geometry = st_union(geometry))\n\nこのように、県を表す変数でグルーピングした上でgeometryを上書きするような形になります。県番号のような、グループを識別できる変数があればそれを用いてもよいのですが、今回は県名しかないので、それを利用しています。\nコードにもコメントアウトして書いているように、group_by()は先に実行しても問題ありません。summarise()内の.byは、group_by()を指定しているのと同様です。"
  },
  {
    "objectID": "pages/gis_in_r/2_summarise/index.html#集約したデータの確認",
    "href": "pages/gis_in_r/2_summarise/index.html#集約したデータの確認",
    "title": "地理データを集約",
    "section": "集約したデータの確認",
    "text": "集約したデータの確認\nfukushima_summariseを確認してみると、1つの行にまとまっていることがわかります。\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                N03_001\n                geometry\n              \n        \n        \n        \n                \n                  福島県\n                  MULTIPOLYGON (((141.0231 37...\n                \n        \n      \n    \n\n\n\nさらにこれをプロットしてみると、\n\nggplot() + \n  geom_sf(data = fukushima_summarise) + \n  theme_void()\n\n\n\n\n\n\n\n\nこのように、市境がなくなり、県境のみが残っています。\n今は1つの県のみを用いていますが、全国のデータを用いた場合でも、都道府県ごとにgroup_by()されますので、都道府県単位のプロットに集約することが可能です。"
  },
  {
    "objectID": "pages/gis_in_r/2_summarise/index.html#おわりに",
    "href": "pages/gis_in_r/2_summarise/index.html#おわりに",
    "title": "地理データを集約",
    "section": "おわりに",
    "text": "おわりに\n今回はsummarise()とst_union()を用いて地理データを集約する方法を説明しました。\n市町村を都道府県単位にする以外にも、政令指定都市が区単位になっているので市単位にしたい、と言った場合にも応用することができます。\nそういった場合にはTipsページでご紹介したデータフレームを用い、政令指定都市の区コードを市町村コードに書き換えた後で今回と同じ工程を踏めば、まとめることができます。\nぜひご活用ください。"
  },
  {
    "objectID": "pages/gis_in_r/2_summarise/index.html#footnotes",
    "href": "pages/gis_in_r/2_summarise/index.html#footnotes",
    "title": "地理データを集約",
    "section": "注",
    "text": "注\n\n\n導入 + ハンドリングに出典も示しています。↩︎"
  },
  {
    "objectID": "pages/gis_in_r/index.html",
    "href": "pages/gis_in_r/index.html",
    "title": "GIS in R",
    "section": "",
    "text": "R で GIS を使う方法についてまとめています。\n\n\n\n\n   \n    \n    \n      並び替え\n      デフォルト\n      \n        公開日 - 日付（昇順）\n      \n      \n        公開日 - 日付（降順）\n      \n      \n        トピック\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\nトピック\n\n\n公開日\n\n\n\n\n\n\n導入 + ハンドリング\n\n\n2024/05/16\n\n\n\n\nプロットの応用\n\n\n2024/12/16\n\n\n\n\n地理データを集約\n\n\n2025/02/21\n\n\n\n\n地図の調整\n\n\n2025/04/06\n\n\n\n\n夜間光を可視化する\n\n\n2025/05/07\n\n\n\n\n一致なし"
  },
  {
    "objectID": "pages/tips/240509_chunk_option/index.html#はじめに",
    "href": "pages/tips/240509_chunk_option/index.html#はじめに",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "はじめに",
    "text": "はじめに\nどうも Quarto ユーザーです。普段チャンクオプションをよく忘れるので、備忘録も兼ねてまとめます。おそらく R Markdown も同じです。\n直感的な分かりやすさ重視です。\n私が普段使うものに偏っているかもしれませんが、ご了承ください。"
  },
  {
    "objectID": "pages/tips/240509_chunk_option/index.html#前提",
    "href": "pages/tips/240509_chunk_option/index.html#前提",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "前提",
    "text": "前提\nQuarto でも R Markdown と同じようなチャンクオプションの書き方ができるのですが、ここでは Quarto 独自の書き方で進めます。\n理由は単純に私が好んで使っているからです。\n\nR Markdown の書き方\n\n\nR Markdown\n\n```{r cars, echo=TRUE}\nplot(cars)\n```\n\ncars の部分がチャンクのラベル（名前）、echo=TRUE の部分がチャンクオプションです。\n\n\nQuarto の書き方\n\n\nQuarto\n\n```{r}\n#| label: fig-cars\n#| echo: true\n\nplot(cars)\n```\n\nチャンク内で #| の後に書きます。ちなみに、こちらは TRUE や FALSE が小文字で大丈夫です。"
  },
  {
    "objectID": "pages/tips/240509_chunk_option/index.html#チャンクオプション",
    "href": "pages/tips/240509_chunk_option/index.html#チャンクオプション",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "チャンクオプション",
    "text": "チャンクオプション\n\n共通\nR Markdown と Quarto で共通のオプションをざっくり表にしました。 これを使えば普段は問題なさそうというものをピックアップしています。\n\nチャンクオプションまとめ\n\n\nオプション\nデフォルト\n効果\n\n\n\n\necho\nTRUE\n\nコードを出力に含めるか否か\nFALSE にすると、実行結果のみが表示される\n\n\n\ninclude\nTRUE\n\nコード、結果を出力に含めるか否か\nFALSE にすると、何も表示されない\nパッケージの読み込みなど重要じゃない箇所で重宝\n\n\n\nwarning\nTRUE\n\n警告を出力に表示するか否か\n基本 FALSE が多い\nグローバルに指定することが多い（後述）\n\n\n\nmessage\nTRUE\n\nメッセージを出力に表示するか否か\n結果に付随してくる文を消すために FALSE が多い\nグローバルに指定することが多い（後述）\n\n\n\ncache\nFALSE\n\n実行結果をキャッシュするか否か\nTRUE にすると、結果が保存され2回目以降の出力が高速化\n重い作業でコンパイルに時間がかかるときに使っている\n\n\n\neval\nTRUE\n\nコードを実際に評価するか否か\nコードを見せたいだけのときに FALSE にすると便利\n\n\n\n\n\n\n違うやつ\nよく使うものの中でもR Markdown と Quarto で異なるものをピックアップします。\n\nfig 系\n\nR Markdown では fig.cap\nQuarto では fig-cap\nこれ以外にも R Markdown はピリオドで、Quarto ではハイフンのものは多々あります。\n\nチャンクラベル1\n\nR Markdown は {r hogehoge}2\nQuarto はコード内で #| label: fig-hogehoge\n\nご覧の通り、Quarto の方は fig- を前に付ける必要があります3。"
  },
  {
    "objectID": "pages/tips/240509_chunk_option/index.html#sec-global",
    "href": "pages/tips/240509_chunk_option/index.html#sec-global",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "グローバルオプション",
    "text": "グローバルオプション\n全部の警告やメッセージを消したい、なんてこともよくあると思います。\nR Markdown と Quarto でそれぞれやり方がありますのでご紹介します。\n\nR Markdown\nRStudio であれば新しい R Markdown ファイルを開くと既に出ていますが、以下の関数を使用します。\n\n\nR\n\nknitr::opts_chunk$set(echo = TRUE)\n\n括弧内に、カンマで区切りながらオプションを TRUE, FALSE などで指定していきます。echo はデフォルトで TRUE なので、これだけなら無くても大丈夫です。笑\n例えば、全てのコードについてコードは出力せず結果だけ出力し、警告やメッセージは非表示にするためには次のようにします。\n\n\nR\n\nknitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)\n\n\n\nQuarto\nQuarto では YAML ヘッダーで設定が可能です。YAML ヘッダーは Markdown ファイルを開いたときの最上部に出てくる --- で囲まれた部分です。\n次のように設定します。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nformat: html\nexecute: \n  echo: false\n  warning: false\n  message: false\n---\n\nexecute: で指定することができます。\n\n\nおわりに\n今回は私がよく使うチャンクオプションを中心にご紹介しました。\n今後いろいろ使いながらアップデートしていきたいと思います。\nご参考になれば幸いです。"
  },
  {
    "objectID": "pages/tips/240509_chunk_option/index.html#footnotes",
    "href": "pages/tips/240509_chunk_option/index.html#footnotes",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "注",
    "text": "注\n\n\n相互参照のために使うので、必ずつけなければならないものではありません。相互参照についてはこちら↩︎\nスペースを空けてチャンクラベルを入力します。↩︎\n表なら tbl-hogehoge とします。↩︎"
  },
  {
    "objectID": "pages/tips/250205_website_tools/index.html#はじめに",
    "href": "pages/tips/250205_website_tools/index.html#はじめに",
    "title": "【ウェブサイト】設定を追加する",
    "section": "はじめに",
    "text": "はじめに\n2月に入りましたが、本年初の更新となります。今年は就職の年ですが、時間があるときに学びを備忘録がてら更新していきたいと思いますのでよろしくお願いします。\n今回は以前ご紹介したウェブサイトの作り方について、さらに設定を追加していこうと思います。\n追加する設定は、\n\nGoogleアナリティクス\nSNSアカウント\nフッター\n\nです。前提として、以下のページ等をもとにQuartoのウェブページが作成されているとします。\n\n\n\n\n\n\n【Quarto & RStudio】ウェブサイトを作る！\n\n\n\n順を追ってみていきましょう。"
  },
  {
    "objectID": "pages/tips/250205_website_tools/index.html#googleアナリティクス",
    "href": "pages/tips/250205_website_tools/index.html#googleアナリティクス",
    "title": "【ウェブサイト】設定を追加する",
    "section": "Googleアナリティクス",
    "text": "Googleアナリティクス\nそもそもですが、Googleアナリティクスでは、ウェブサイトやアプリの訪問者の動向を分析することができます。例えば、昨日は何人がページを訪れて、どのページを見ていったか、といったことが把握できるようになります。\n\nアナリティクスページ\nまずは、Googleアナリティクスのページでの設定を行います。\n\n\n\nGoogleアナリティクスの画面\n\n\n\nhttps://analytics.google.com/へ移動し、使用するGoogleアカウントでログインする\n「測定を開始」をクリック\n任意のアカウント名を入力、データ共有設定で必要な項目にチェックを入れ、次へ\n\nアカウント名は何でも大丈夫です。\nチェックはそのままでも大丈夫です。\n\n任意のプロパティ名を入力し、次へ\n\nこれはウェブページ名にした方がわかりやすいと思います。\n例：「hogehoge.github.io」\n\nビジネスの説明を入力し、次へ\n\nここは適当で大丈夫だと思います。\n\nビジネス目標を選択し、「作成」を選択\n\n「ウェブ/アプリのトラフィックの分析」や「ユーザーエンゲージメントとユーザーの維持率の把握」あたりが該当すると思います。\n\n「ウェブ」を選択\nURLとストリーム名を入力し、「作成して続行」をクリック\n\nURLはGitHubページであれば「(ユーザー名).github.io」です。不安であればホームページからコピーしてきてください。\nストリーム名はプロパティ名と同じでいいと思います。\n\n\n「Googleタグの設定」という画面が出てくると思いますが、ここは×で閉じて大丈夫です。すると、「ウェブ ストリームの詳細」の画面が出てくるので、そこの測定 ID（Gで始まる）をコピーして下さい。\n画面を閉じてしまっても、表示されている画面で該当するページ部分をクリックすれば再度開くことができます。\n\n\nQuartoの設定\nエディターに戻り、_quarto.ymlを開きます。\n以下のように、google-analyticsにコピーしたIDを追記してください。\nproject:\n  type: website\n  \nwebsite:\n  title: \"ホームページ\"\n  google-analytics: \"G-xxxxxxxxxx\"\n  navbar:\n    right:\n      - about.qmd\nこれで保存して再度パブリッシュ1し、しばらくすると追跡結果がみられるようになります。すぐは見れませんが、しばらくした後再度Googleアナリティクスを訪れてみてください。"
  },
  {
    "objectID": "pages/tips/250205_website_tools/index.html#snsアカウントを追加",
    "href": "pages/tips/250205_website_tools/index.html#snsアカウントを追加",
    "title": "【ウェブサイト】設定を追加する",
    "section": "SNSアカウントを追加",
    "text": "SNSアカウントを追加\nウェブサイトからXやFacebookなど他のページへ飛んでほしいこともあるかと思います。こうしたSNSアカウントやGitHubなどのアイコンの表示方法をご紹介します。\n\nナビゲーションバー\nまずは画面上部のナビゲーションバーに表示する方法です（本ページも右上にGitHubアイコンがあります）。\n_quarto.ymlを開きます。以下のようにtoolsを追記して下さい。\nproject:\n  type: website\n  \nwebsite:\n  title: \"ホームページ\"\n  google-analytics: \"G-xxxxxxxxxx\"\n  navbar:\n    right:\n      - about.qmd\n    tools:\n      - icon: twitter-x\n        href: https://twitter.com/hogehoge\n        text: Twitter\n      - icon: github\n        href: https://github.com/hogehoge\n        text: GitHub\nicon、href、textの3つがあります。Xはtwitter-xとなっていることに注意してください。Twitterアイコンがよければシンプルにtwitterで表示できます。\nこれで保存しページをレンダリングすると、アイコンが表示されていると思います。\n\n\nページ内で表示\n僕のAboutページにあるように、プロフィールとセットで表示したい場合は、次のように設定します。\n表示したいページの.qmdファイルで、YAMLヘッダーを以下のように変更します。\n---\ntitle: Hogehoge\nabout:\n  template: trestles\n  links: \n    - icon: twitter-x\n      text: X (Twitter)\n      url: https://x.com/5uke_y\n    - text: \" Bluesky\"\n      url: https://bsky.app/profile/5uke.bsky.social\n    - icon: github\n      text: GitHub\n      url: https://github.com/hogehoge\n---\naboutのtemplateはtrestles以外にもいろいろあります。こちらを参照して下さい。\n肝心なのはlinksです。書き方はナビゲーションバーと同じです。about下に書くことで、以下のように表示できます。\n\n\n\n名前の下に3つのアカウントが表示されています\n\n\nちなみにBlueskyの部分の書き方が少々ややこしいですが、これはまだBlueskyのアイコンが提供されていないため、Iconifyのアイコンを使って代用しています。アイコンの挿入についてはこちらを参照してください。\n以上がSNSアイコンの説明になります。概ねこの2か所に表示することが多いかと思いますので、ご参考になれば幸いです。"
  },
  {
    "objectID": "pages/tips/250205_website_tools/index.html#フッターの設定",
    "href": "pages/tips/250205_website_tools/index.html#フッターの設定",
    "title": "【ウェブサイト】設定を追加する",
    "section": "フッターの設定",
    "text": "フッターの設定\n大体のウェブページにはフッターが付いていますよね。「©2025 Hogehoge」みたいなものです。\nこれもナビゲーションバーと同様に左、真ん中、右でそれぞれ設定できます。\n再び_quarto.ymlを開いて、以下のように設定します。\nproject:\n  type: website\n  \nwebsite:\n  title: \"ホームページ\"\n  navbar:\n    right:\n      - about.qmd\n  page-footer:\n    background: light\n    center: |\n      &#169; 2025 Hogehoge\nbackgroundはフッター部分の背景に少し色が付きます。もちろんdarkもあります。\ncenter部分はleftとrightもあります。また、|で改行することで次の行に書くことができます。center: \"&#169; 2025 Hogehoge\"みたいに1行で書くこともできるのですが、ダブルクォーテーションを忘れないで下さい。\n&#169;はHTMLエンティティといって、これを出力すると「©」となります。別に直接「©」を入れても大丈夫です。\nちなみにフッター内で改行したい場合は、HTMLと同じで&lt;br&gt;を入れれば可能です。&#169; 2025 Hogehoge &lt;br&gt; This website is created with Quartoのように書けます。"
  },
  {
    "objectID": "pages/tips/250205_website_tools/index.html#おわりに",
    "href": "pages/tips/250205_website_tools/index.html#おわりに",
    "title": "【ウェブサイト】設定を追加する",
    "section": "おわりに",
    "text": "おわりに\n今回はGoogleアナリティクス、SNSアカウント、フッターについての設定をご紹介しました。\nこれらはQuarto公式ガイドを読んだり、人の_quarto.ymlを真似するのがおすすめです。\n最後に僕がこれまで参考にした方々のコードと、僭越ながら自分のコードのリンクも並べておきます。\n\n\n\n\n\n\nSimon P. Couch氏（Posit）\n\n\n\n\n\n\n\n\n\nGarrick Aden-Buie氏（Posit）\n\n\n\n\n\n\n\n\n\n柳本和春さん（CEMFI）\n\n\n\n\n\n\n\n\n\n阿部洋輔"
  },
  {
    "objectID": "pages/tips/250205_website_tools/index.html#footnotes",
    "href": "pages/tips/250205_website_tools/index.html#footnotes",
    "title": "【ウェブサイト】設定を追加する",
    "section": "注",
    "text": "注\n\n\nquarto publish gh-pagesなど。詳しくは「【Quarto & RStudio】ウェブサイトを作る！」を参照してください。↩︎"
  },
  {
    "objectID": "pages/tips/240622_census_cleansing/index.html#はじめに",
    "href": "pages/tips/240622_census_cleansing/index.html#はじめに",
    "title": "国勢調査データのクレンジング",
    "section": "はじめに",
    "text": "はじめに\n国勢調査のデータを使う際、そのままではR等で使えない場合が多いので、分析用にデータをクレンジングするコードをご紹介します。\n応用が利くと思うので、ぜひ。"
  },
  {
    "objectID": "pages/tips/240622_census_cleansing/index.html#使用するデータ",
    "href": "pages/tips/240622_census_cleansing/index.html#使用するデータ",
    "title": "国勢調査データのクレンジング",
    "section": "使用するデータ",
    "text": "使用するデータ\n\n2020年国勢調査\n\n4次メッシュ（500m四方メッシュ）データ\n人口及び世帯（JGD2011）\nデータ：Googleドライブ\n出典：e-Stat"
  },
  {
    "objectID": "pages/tips/240622_census_cleansing/index.html#データの読み込み",
    "href": "pages/tips/240622_census_cleansing/index.html#データの読み込み",
    "title": "国勢調査データのクレンジング",
    "section": "データの読み込み",
    "text": "データの読み込み\nデータを読み込みます。ダウンロードした時点では大量のテキストファイルがある状態なので、それを一括で読み込んで処理していきます。\n\nパッケージ\n\nlibrary(tidyverse)  # データハンドリングのため\nlibrary(here)  # 相対パスを使うため\n\n\n\n読み込み\n前提：\n\nワーキングディレクトリを指定してあること1。\nワーキングディレクトリ内のdata/census_2020にテキストファイルが入っていること。\n\n\n確認\nまずはじめに、ファイルの中身がどのようになっているのか、一つのファイルを読み込んで確かめてみます。\nちなみにファイルはShift_JISなので、ロケールも設定します。\n\ntest &lt;- read_csv(here(\"data/census_2020/tblT001141H3622.txt\"), \n                 locale = locale(encoding = \"Shift_JIS\"))\n\n\nhead(test)\n\n\n\n\n\n表 1: 生データ\n\n\n\n\n\n\n\n\n\nKEY_CODE\nHTKSYORI\nHTKSAKI\nGASSAN\nT001141001\nT001141002\nT001141003\nT001141004\nT001141005\nT001141006\nT001141007\nT001141008\nT001141009\nT001141010\nT001141011\nT001141012\nT001141013\nT001141014\nT001141015\nT001141016\nT001141017\nT001141018\nT001141019\nT001141020\nT001141021\nT001141022\nT001141023\nT001141024\nT001141025\nT001141026\nT001141027\nT001141028\nT001141029\nT001141030\nT001141031\nT001141032\nT001141033\nT001141034\nT001141035\nT001141036\nT001141037\nT001141038\nT001141039\nT001141040\nT001141041\nT001141042\nT001141043\nT001141044\nT001141045\nT001141046\nT001141047\nT001141048\nT001141049\nT001141050\n\n\n\n\nNA\nNA\nNA\nNA\n　人口（総数）\n　人口（総数）　男\n　人口（総数）　女\n　０〜１４歳人口　総数\n　０〜１４歳人口　男\n　０〜１４歳人口　女\n　１５歳以上人口　総数\n　１５歳以上人口　男\n　１５歳以上人口　女\n　１５〜６４歳人口　総数\n　１５〜６４歳人口　男\n　１５〜６４歳人口　女\n　１８歳以上人口　総数\n　１８歳以上人口　男\n　１８歳以上人口　女\n　２０歳以上人口　総数\n　２０歳以上人口　男\n　２０歳以上人口　女\n　６５歳以上人口　総数\n　６５歳以上人口　男\n　６５歳以上人口　女\n　７５歳以上人口　総数\n　７５歳以上人口　男\n　７５歳以上人口　女\n　８５歳以上人口　総数\n　８５歳以上人口　男\n　８５歳以上人口　女\n　９５歳以上人口　総数\n　９５歳以上人口　男\n　９５歳以上人口　女\n　外国人人口　総数\n　外国人人口　男\n　外国人人口　女\n　世帯総数\n　一般世帯数\n　１人世帯数　一般世帯数\n　２人世帯数　一般世帯数\n　３人世帯数　一般世帯数\n　４人世帯数　一般世帯数\n　５人世帯数　一般世帯数\n　６人世帯数　一般世帯数\n　７人以上世帯数　一般世帯数\n　親族のみの世帯数　一般世帯数\n　核家族世帯数　一般世帯数\n　核家族以外の世帯数　一般世帯数\n　６歳未満世帯員のいる世帯数　一般世帯数\n　６５歳以上世帯員のいる世帯数　一般世帯数\n　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\n　高齢単身世帯数　一般世帯数\n　高齢夫婦世帯数　一般世帯数\n\n\n362257353\n0\nNA\nNA\n29\n15\n14\n5\n2\n3\n24\n13\n11\n19\n11\n8\n23\n12\n11\n23\n12\n11\n5\n2\n3\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n16\n16\n10\n1\n4\n0\n1\n0\n0\n6\n4\n2\n1\n4\n1\n1\n0\n\n\n362257354\n0\nNA\nNA\n96\n91\n5\n0\n0\n0\n96\n91\n5\n96\n91\n5\n96\n91\n5\n96\n91\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n362257381\n0\nNA\nNA\n101\n46\n55\n24\n9\n15\n77\n37\n40\n54\n27\n27\n76\n36\n40\n76\n36\n40\n23\n10\n13\n5\n1\n4\n4\n1\n3\n1\n0\n1\n0\n0\n0\n39\n39\n11\n8\n8\n10\n2\n0\n0\n28\n24\n4\n8\n16\n1\n4\n3\n\n\n362257382\n0\nNA\nNA\n28\n16\n12\n1\n0\n1\n27\n16\n11\n19\n13\n6\n27\n16\n11\n27\n16\n11\n8\n3\n5\n6\n3\n3\n0\n0\n0\n0\n0\n0\n2\n1\n1\n18\n18\n11\n4\n3\n0\n0\n0\n0\n7\n6\n1\n0\n5\n1\n1\n2\n\n\n362257451\n0\nNA\nNA\n117\n59\n58\n20\n13\n7\n97\n46\n51\n70\n34\n36\n96\n46\n50\n96\n46\n50\n27\n12\n15\n14\n4\n10\n5\n0\n5\n0\n0\n0\n0\n0\n0\n58\n58\n25\n18\n10\n1\n2\n2\n0\n32\n25\n7\n3\n22\n0\n7\n4\n\n\n\n\n\n\n\n\n\n\nこれを見てみると、1行目には特に意味がなく、2行目が列名になっていることが分かります。\nそこで、1行目をスキップして読み込むために、read_csv()内でskipを指定します。\n\ntest_skip1 &lt;- read_csv(here(\"data/census_2020/tblT001141H3622.txt\"), skip = 1, \n                       locale = locale(encoding = \"Shift_JIS\"))\n\n\nhead(test_skip1)\n\n\n\n\n\n表 2: 1行目をスキップ\n\n\n\n\n\n\n\n\n\n...1\n...2\n...3\n...4\n　人口（総数）\n　人口（総数）　男\n　人口（総数）　女\n　０〜１４歳人口　総数\n　０〜１４歳人口　男\n　０〜１４歳人口　女\n　１５歳以上人口　総数\n　１５歳以上人口　男\n　１５歳以上人口　女\n　１５〜６４歳人口　総数\n　１５〜６４歳人口　男\n　１５〜６４歳人口　女\n　１８歳以上人口　総数\n　１８歳以上人口　男\n　１８歳以上人口　女\n　２０歳以上人口　総数\n　２０歳以上人口　男\n　２０歳以上人口　女\n　６５歳以上人口　総数\n　６５歳以上人口　男\n　６５歳以上人口　女\n　７５歳以上人口　総数\n　７５歳以上人口　男\n　７５歳以上人口　女\n　８５歳以上人口　総数\n　８５歳以上人口　男\n　８５歳以上人口　女\n　９５歳以上人口　総数\n　９５歳以上人口　男\n　９５歳以上人口　女\n　外国人人口　総数\n　外国人人口　男\n　外国人人口　女\n　世帯総数\n　一般世帯数\n　１人世帯数　一般世帯数\n　２人世帯数　一般世帯数\n　３人世帯数　一般世帯数\n　４人世帯数　一般世帯数\n　５人世帯数　一般世帯数\n　６人世帯数　一般世帯数\n　７人以上世帯数　一般世帯数\n　親族のみの世帯数　一般世帯数\n　核家族世帯数　一般世帯数\n　核家族以外の世帯数　一般世帯数\n　６歳未満世帯員のいる世帯数　一般世帯数\n　６５歳以上世帯員のいる世帯数　一般世帯数\n　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\n　高齢単身世帯数　一般世帯数\n　高齢夫婦世帯数　一般世帯数\n\n\n\n\n362257353\n0\nNA\nNA\n29\n15\n14\n5\n2\n3\n24\n13\n11\n19\n11\n8\n23\n12\n11\n23\n12\n11\n5\n2\n3\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n16\n16\n10\n1\n4\n0\n1\n0\n0\n6\n4\n2\n1\n4\n1\n1\n0\n\n\n362257354\n0\nNA\nNA\n96\n91\n5\n0\n0\n0\n96\n91\n5\n96\n91\n5\n96\n91\n5\n96\n91\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n362257381\n0\nNA\nNA\n101\n46\n55\n24\n9\n15\n77\n37\n40\n54\n27\n27\n76\n36\n40\n76\n36\n40\n23\n10\n13\n5\n1\n4\n4\n1\n3\n1\n0\n1\n0\n0\n0\n39\n39\n11\n8\n8\n10\n2\n0\n0\n28\n24\n4\n8\n16\n1\n4\n3\n\n\n362257382\n0\nNA\nNA\n28\n16\n12\n1\n0\n1\n27\n16\n11\n19\n13\n6\n27\n16\n11\n27\n16\n11\n8\n3\n5\n6\n3\n3\n0\n0\n0\n0\n0\n0\n2\n1\n1\n18\n18\n11\n4\n3\n0\n0\n0\n0\n7\n6\n1\n0\n5\n1\n1\n2\n\n\n362257451\n0\nNA\nNA\n117\n59\n58\n20\n13\n7\n97\n46\n51\n70\n34\n36\n96\n46\n50\n96\n46\n50\n27\n12\n15\n14\n4\n10\n5\n0\n5\n0\n0\n0\n0\n0\n0\n58\n58\n25\n18\n10\n1\n2\n2\n0\n32\n25\n7\n3\n22\n0\n7\n4\n\n\n362257452\n1\nNA\n362257454\n348\n182\n166\n85\n41\n44\n273\n149\n124\n214\n118\n96\n271\n148\n123\n269\n148\n121\n59\n31\n28\n23\n10\n13\n11\n3\n8\n0\n0\n0\n0\n0\n0\n162\n162\n86\n34\n19\n15\n10\n5\n1\n80\n72\n8\n26\n43\n12\n18\n9\n\n\n\n\n\n\n\n\n\n\nこの後必要な列をセレクトして名前を付け直すので、ここで一旦列名を確認してみましょう。\n\ncolnames(test_skip1)\n\n [1] \"...1\"                                                \n [2] \"...2\"                                                \n [3] \"...3\"                                                \n [4] \"...4\"                                                \n [5] \"　人口（総数）\"                                      \n [6] \"　人口（総数）　男\"                                  \n [7] \"　人口（総数）　女\"                                  \n [8] \"　０〜１４歳人口　総数\"                              \n [9] \"　０〜１４歳人口　男\"                                \n[10] \"　０〜１４歳人口　女\"                                \n[11] \"　１５歳以上人口　総数\"                              \n[12] \"　１５歳以上人口　男\"                                \n[13] \"　１５歳以上人口　女\"                                \n[14] \"　１５〜６４歳人口　総数\"                            \n[15] \"　１５〜６４歳人口　男\"                              \n[16] \"　１５〜６４歳人口　女\"                              \n[17] \"　１８歳以上人口　総数\"                              \n[18] \"　１８歳以上人口　男\"                                \n[19] \"　１８歳以上人口　女\"                                \n[20] \"　２０歳以上人口　総数\"                              \n[21] \"　２０歳以上人口　男\"                                \n[22] \"　２０歳以上人口　女\"                                \n[23] \"　６５歳以上人口　総数\"                              \n[24] \"　６５歳以上人口　男\"                                \n[25] \"　６５歳以上人口　女\"                                \n[26] \"　７５歳以上人口　総数\"                              \n[27] \"　７５歳以上人口　男\"                                \n[28] \"　７５歳以上人口　女\"                                \n[29] \"　８５歳以上人口　総数\"                              \n[30] \"　８５歳以上人口　男\"                                \n[31] \"　８５歳以上人口　女\"                                \n[32] \"　９５歳以上人口　総数\"                              \n[33] \"　９５歳以上人口　男\"                                \n[34] \"　９５歳以上人口　女\"                                \n[35] \"　外国人人口　総数\"                                  \n[36] \"　外国人人口　男\"                                    \n[37] \"　外国人人口　女\"                                    \n[38] \"　世帯総数\"                                          \n[39] \"　一般世帯数\"                                        \n[40] \"　１人世帯数　一般世帯数\"                            \n[41] \"　２人世帯数　一般世帯数\"                            \n[42] \"　３人世帯数　一般世帯数\"                            \n[43] \"　４人世帯数　一般世帯数\"                            \n[44] \"　５人世帯数　一般世帯数\"                            \n[45] \"　６人世帯数　一般世帯数\"                            \n[46] \"　７人以上世帯数　一般世帯数\"                        \n[47] \"　親族のみの世帯数　一般世帯数\"                      \n[48] \"　核家族世帯数　一般世帯数\"                          \n[49] \"　核家族以外の世帯数　一般世帯数\"                    \n[50] \"　６歳未満世帯員のいる世帯数　一般世帯数\"            \n[51] \"　６５歳以上世帯員のいる世帯数　一般世帯数\"          \n[52] \"　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\"\n[53] \"　高齢単身世帯数　一般世帯数\"                        \n[54] \"　高齢夫婦世帯数　一般世帯数\"                        \n\n\nこれはトラップで、よく見ると変数名の前に全角スペースが空いています。列名を変更するときはここに注意しないと、謎のエラーに苛まれます。\n\n\n\nまとめて読み込む\nではファイルの中身を確認できたところで、ファイルをまとめて読み込みます。\n結論から言うと、コードは以下です。\n\n# 指定されたディレクトリ内のファイル名の文字ベクトルを生成\ncensus_files &lt;- list.files(here(\"data/census_2020\"),  # ファイルが入っているフォルダのパス\n                           pattern = \"\\\\.txt$\", full.names = TRUE)\n\n# lapplyで、ファイル一覧に対して読み込む関数を適用\ncensus_objects &lt;- lapply(\n  census_files, \n  function(file) {\n    census_obj &lt;- read_csv(file, locale = locale(encoding = \"Shift_JIS\"), skip = 1) |&gt; \n      # 使いたい列をセレクトする\n      select(1:4, \"　人口（総数）\", \"　０〜１４歳人口　総数\", \n             \"　１５〜６４歳人口　総数\", \"　６５歳以上人口　総数\") |&gt; \n      # 2列目が0であればデータがあり、1であれば他メッシュにデータを合算\n      filter(...2 == 0 | ...2 == 1) |&gt; \n      # 2, 3, 4列目はもう使わないので除く\n      select(-c(...2, ...3, ...4)) |&gt; \n      # 変数名は任意\n      rename(\n        KEY_CODE = ...1, \n        pop_total = \"　人口（総数）\", \n        pop_young = \"　０〜１４歳人口　総数\", \n        pop_working = \"　１５〜６４歳人口　総数\", \n        pop_old = \"　６５歳以上人口　総数\"\n      ) |&gt; \n      # 変数のクラスを指定\n      mutate(\n        KEY_CODE = as.character(KEY_CODE), \n        pop_total = as.numeric(pop_total), \n        pop_young = as.numeric(pop_young), \n        pop_working = as.numeric(pop_working), \n        pop_old = as.numeric(pop_old)\n      )\n  }\n) |&gt; \n  # 読み込んだデータをバインドする\n  bind_rows()\n\nポイントをいくつか挙げます。\nポイント\n\nlist.files()\n\n指定したフォルダ内の.txtで終わるファイルを取得しています。\n\nlapply()\n\n第1引数（1で取得したファイル）に対し、第2引数（function）を適用します。\nfunctionでは、ファイルの読み込みや変数名の変更など、いくつかの作業をして結果を返すよう指示しています。\n\nfilter(...2 == 0 | ...2 == 1)\n\n...2はもともとHTKSYORI（秘匿処理）という列名でした。これが0であると秘匿対象外（秘匿になっていない）であり、データが存在します。1だと合算先地域メッシュで、そのメッシュにはデータがないものの、ルールに基づいていずれかのメッシュにデータが合算されており、これを抜くと総数が減る場合があります。2。\n逆に秘匿対象だと 表 3 のようになります。\nフィルターをかけてデータがあるところを抽出します。\n\n\n\n\n\n\n表 3: データがアスタリスクで置き換えられています。\n\n\n\n\n\n\n\n\n\n...1\n...2\n...3\n...4\n　人口（総数）\n　人口（総数）　男\n　人口（総数）　女\n　０〜１４歳人口　総数\n　０〜１４歳人口　男\n　０〜１４歳人口　女\n　１５歳以上人口　総数\n　１５歳以上人口　男\n　１５歳以上人口　女\n　１５〜６４歳人口　総数\n　１５〜６４歳人口　男\n　１５〜６４歳人口　女\n　１８歳以上人口　総数\n　１８歳以上人口　男\n　１８歳以上人口　女\n　２０歳以上人口　総数\n　２０歳以上人口　男\n　２０歳以上人口　女\n　６５歳以上人口　総数\n　６５歳以上人口　男\n　６５歳以上人口　女\n　７５歳以上人口　総数\n　７５歳以上人口　男\n　７５歳以上人口　女\n　８５歳以上人口　総数\n　８５歳以上人口　男\n　８５歳以上人口　女\n　９５歳以上人口　総数\n　９５歳以上人口　男\n　９５歳以上人口　女\n　外国人人口　総数\n　外国人人口　男\n　外国人人口　女\n　世帯総数\n　一般世帯数\n　１人世帯数　一般世帯数\n　２人世帯数　一般世帯数\n　３人世帯数　一般世帯数\n　４人世帯数　一般世帯数\n　５人世帯数　一般世帯数\n　６人世帯数　一般世帯数\n　７人以上世帯数　一般世帯数\n　親族のみの世帯数　一般世帯数\n　核家族世帯数　一般世帯数\n　核家族以外の世帯数　一般世帯数\n　６歳未満世帯員のいる世帯数　一般世帯数\n　６５歳以上世帯員のいる世帯数　一般世帯数\n　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\n　高齢単身世帯数　一般世帯数\n　高齢夫婦世帯数　一般世帯数\n\n\n\n\n372501694\n1\nNA\n372501594\n6\n3\n3\n0\n0\n0\n11\n4\n7\n4\n1\n3\n11\n4\n7\n11\n4\n7\n7\n3\n4\n7\n3\n4\n5\n2\n3\n1\n0\n1\n0\n0\n0\n3\n3\n1\n5\n0\n0\n0\n0\n0\n5\n5\n0\n0\n4\n0\n0\n3\n\n\n372502544\n0\nNA\nNA\n14\n7\n7\n2\n1\n1\n12\n6\n6\n2\n1\n1\n12\n6\n6\n12\n6\n6\n10\n5\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n6\n0\n5\n0\n1\n0\n0\n0\n6\n6\n0\n1\n5\n0\n0\n5\n\n\n372502553\n0\nNA\nNA\n14\n5\n9\n1\n0\n1\n13\n5\n8\n7\n3\n4\n12\n5\n7\n12\n5\n7\n6\n2\n4\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n6\n2\n1\n2\n1\n0\n0\n0\n4\n2\n2\n1\n4\n0\n1\n1\n\n\n372502603\n1\nNA\n372502503;372502701\n114\n50\n64\n9\n3\n6\n118\n56\n62\n53\n25\n28\n117\n56\n61\n117\n56\n61\n65\n31\n34\n42\n17\n25\n16\n3\n13\n5\n0\n5\n7\n1\n6\n62\n61\n33\n24\n8\n1\n2\n0\n0\n34\n31\n3\n2\n41\n1\n18\n11\n\n\n372502641\n0\nNA\nNA\n12\n8\n4\n0\n0\n0\n12\n8\n4\n4\n3\n1\n12\n8\n4\n12\n8\n4\n8\n5\n3\n2\n2\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n7\n7\n3\n3\n1\n0\n0\n0\n0\n4\n2\n2\n0\n4\n0\n1\n1\n\n\n372502643\n0\nNA\nNA\n93\n48\n45\n2\n0\n2\n91\n48\n43\n55\n30\n25\n88\n45\n43\n88\n45\n43\n36\n18\n18\n18\n8\n10\n7\n4\n3\n0\n0\n0\n1\n0\n1\n42\n42\n12\n18\n7\n1\n4\n0\n0\n30\n25\n5\n1\n25\n1\n6\n9\n\n\n\n\n\n\n\n\n\n\n\nrename()\n\n変数名を変更するときは、colnames()などで変数名を確認し、おかしなところはないか確認してから変えることをおすすめします（特に日本語列名の場合）。\n\nmutate()\n\nKEY_CODEは文字列にしたくて、その他は数値にしたいので、as.character()とas.numeric()で変換します。\nデータによっては、この手順を踏まなくても問題ないかもしれません。\n\nbind_rows()\n\nlapply()でそれぞれのファイルを読み込んだので、最後にすべてのデータを結合します。\n列名もそろえてあるので、問題なく結合できます。\n\n\nデータは次のようになります。\n\nhead(census_objects)\n\n\n\n\n\n表 4: クレンジング後\n\n\n\n\n\n\n\n\n\nKEY_CODE\npop_total\npop_young\npop_working\npop_old\n\n\n\n\n362257353\n29\n5\n19\n5\n\n\n362257354\n96\n0\n96\n0\n\n\n362257381\n101\n24\n54\n23\n\n\n362257382\n28\n1\n19\n8\n\n\n362257451\n117\n20\n70\n27\n\n\n362257452\n348\n85\n214\n59"
  },
  {
    "objectID": "pages/tips/240622_census_cleansing/index.html#まとめ",
    "href": "pages/tips/240622_census_cleansing/index.html#まとめ",
    "title": "国勢調査データのクレンジング",
    "section": "まとめ",
    "text": "まとめ\n今回は国勢調査のメッシュデータを使って、Rでデータクレンジングを行う方法をご紹介しました。\n複数年分のデータをまとめなければならないときなど、繰り返し作業をするときには特に重宝します。\n様々な場合で使えると思いますので、list.files()やlapply()をうまく使いながら効率的にデータをまとめていきましょう。"
  },
  {
    "objectID": "pages/tips/240622_census_cleansing/index.html#footnotes",
    "href": "pages/tips/240622_census_cleansing/index.html#footnotes",
    "title": "国勢調査データのクレンジング",
    "section": "注",
    "text": "注\n\n\nRプロジェクトを使用している場合は問題ありません。Rプロジェクトについてはこちらをご参照ください。↩︎\n2だと秘匿対象地域メッシュです。詳しくはe-Statの定義書から確認してください。↩︎"
  },
  {
    "objectID": "pages/tips/240504_container/index.html#はじめに",
    "href": "pages/tips/240504_container/index.html#はじめに",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "はじめに",
    "text": "はじめに\nDockerとVSCodeを使ってRの環境を構築する方法を説明します。\n基本的な内容は次のページを参考にしており、個人的に使いやすいように修正を加えています。\n\n\n\n\n\n\nVSCode + Dockerでよりミニマルでポータブルな研究環境を\n\n\n\n開発コンテナを使うメリットは、環境を簡単に共有でき、他の環境に影響を受けずに作業ができることです。\nまた、最初は設定の際に結構待ち時間が生じますので、ご了承ください。"
  },
  {
    "objectID": "pages/tips/240504_container/index.html#事前準備",
    "href": "pages/tips/240504_container/index.html#事前準備",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "事前準備",
    "text": "事前準備\nまず、WSL2, Ubuntu, Homebrew, VSCode, Docker, Git, そしてGitHubの準備をします。WindowsとMacでの設定が異なるため、それぞれについて説明します。\nホスト側、共同作業者ともに事前準備が必要です。\n\nWSL2（Windowsユーザーのみ）\n\nPowerShellまたはWindowsコマンドプロンプトを管理者権限で開く\n\n右クリックで管理者権限を使えます。\n\n\n\n\n\n\n\n\n以下のコマンドを入力して実行\n\nこれでインストールはできるはずですが、詳しくはこちらのサイトを参照してください。\n\n\n\n\nPowerShell\n\nwsl --install\n\n\nユーザー名とパスワードを設定\n\nインストールが終わると、Linuxディストリビューションのユーザー名とパスワードの作成を求められます1。\nユーザー名は何でも大丈夫です。パスワードもめちゃくちゃ簡単で問題ありません。\nパスワードは画面上には表示されませんが、ちゃんと入力されています。慌てて何回も入力しないようにしてください。\n\n\nエクスプローラーからLinuxに入り、\\Ubuntu\\home\\ユーザー名がメインとなるディレクトリです。\n\n\nHomebrew（Macユーザーのみ）\nMacユーザーはHomebrewを使って諸々インストールしていくので、まだの方はここでインストールしてください。\n\nターミナルを開く\n\nアプリ一覧から「ターミナル」を探してください。\n\n以下のコマンドを入力して実行\n\nパスワードを求められるので、入力してください。\n\n\n\n\nTerminal\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\n\nVSCode\n\nVSCodeのダウンロードサイトからダウンロード、インストール\n\nDownload for Windows2をクリックしてダウンロードできます。\nインストールができたら、VSCodeを開いてください。\n\n（任意）日本語の拡張機能をインストール\n\n画面左側に拡張機能のアイコン  があります。ここの検索ボックスにMS-CEINTL.vscode-language-pack-jaと入力し、1番上に出てきたものをインストールします3。\nインストール後、VSCodeを再起動すれば日本語が反映されていると思います。\n\n\n\n\n拡張機能のインストール\n\n拡張機能の検索ボックスで、次のIDを入力し、インストールします。\nms-vscode-remote.remote-containers (Dev Containers)\nms-vscode-remote.remote-wsl (WSL, Windowsユーザーのみ)\n\n\nWSLに接続（Windowsユーザーのみ）\n\nVSCodeから先ほどインストールしたWSLに接続します。\n画面左下の&gt;&lt;アイコンをクリックして、「WSLへの接続」をクリックします。\n\n\n\n\n\nDocker\nDockerをインストールします。\n\nWindowsの方はここからDocker Desktop for Windowsを、Macの方はこちらからダウンロード＆インストール\n設定の確認（Windowsのみ）\n\nインストール出来たら、画面上部の設定ボタンからResources、WSL integrationと進み、チェックボックスにチェック、Ubuntuがオンになっていることを確認してください。\nたまに、何もしていないのにここがオフになっていて、トラブることがあります。\n詳しくはこちらをご覧ください。日本語で書いてあります。\n\n\n\n\n画面左側のVolumesに進み、Createからボリュームを作成\n\n次の3つを作成します（大文字小文字に注意！）。\nfonts, cache, TinyTeX\n\n\n\n\n\nMacでの画面\n\n\n\n\nGit\n\nWindows\n\nUbuntuでGitをインストール\n\nWindowsのアプリ一覧からUbuntuを探し、開いてください。開いたら、以下のコマンドを入力して実行します。\n\n\n\n\nUbuntu\n\nsudo apt-get install git\n\n\n\n\nUbuntu\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\nここに限らずですが、[]ごと置き換えてくださいね。\n\n\n\n\nUbuntu\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\nMac\n\nHomebrewでGitをインストール\n\nターミナルを開いて、以下のコマンドを入力して実行します。\n\n\n\n\nTerminal\n\nbrew install git\n\n\n\n\nこのMacでは2回目なのでgit is already installedと表示されてます…。\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\n\n\n\n\nTerminal\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\n\nGitHubアカウントの作成\nファイルは基本的にGitHubで管理するので、ここからアカウントを作成してください。\n\nポイント\nGitHubアカウントを作成したら、VSCodeにログインしておきましょう。\n\nVSCodeを開く\n画面左下のアイコンをクリック\n\nGitHubでサインインを行う\n\n\nGitHubにログインすることで、その後の作業がスムーズに進みます。\n事前準備は以上です！"
  },
  {
    "objectID": "pages/tips/240504_container/index.html#開発環境の構築",
    "href": "pages/tips/240504_container/index.html#開発環境の構築",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "開発環境の構築",
    "text": "開発環境の構築\nDockerを用いて環境を構築するにあたり、柳本和春さんのテンプレートをベースに作成しています。詳しくは柳本さんの記事をご覧ください。\n主な変更点は以下の通りです。\n\nRStudioの設定を追加（パネルの配置など）\nそれに伴うDockerfileの加筆修正と、更なる設定の追加\n\nQuartoのインストールを追加\n個人的にエラーが生じた部分を修正\n日本語のロケール設定を追加\n\n\n\n\n\n\n\n\nRStudioで出てくる警告について\n\n\n\nRStudioでこの後作業することになりますが、コマンドを打つと以下の警告が出てくるかもしれません。\n警告メッセージ: Character set is not UTF-8; please change your locale\nしかし、警告は出るものの、実際の作業には特に問題ありません。これに対処しようと試みましたが、できませんでした…。\nもし詳しくて対処できた方は、コメントから教えていただけると幸いです。\n\n\nまずは基本設定4から説明します。\n\n基本設定\n\nGitHubリポジトリを作成\n\nテンプレートのGitHub リポジトリにアクセス\n画面右の「Use this template」から「Create a new repository」を選択\nRepository nameを記入\nPrivateを選択\n\n通常のプロジェクトならPrivateでOK\n\n「Create repository」をクリック\n\n\n\nリポジトリをクローン\n\nVSCodeを開く\n画面左側のアイコンから「ソース管理」5を開く\n「リポジトリの複製」を選択し、さらに「GitHubから複製」を選ぶ\nリポジトリを選択し、クローン\n\nリポジトリは、「ユーザー名/リポジトリ名」の形式で表示されます。\n基本的に表示されると思いますが、表示されない場合は手入力してください。\nクローンしたリポジトリを開くか問われるので、開いてください。\n\n画面右下に「コンテナーで再度開く」と出たらクリック\n\n出ない場合、画面左下「WSL: Ubuntu」6をクリックし、「コンテナーで再度開く」を選択してください。\n初めて環境を構築する場合、ここでかなり時間がかかるので辛抱強く待ちましょう。\n\n\n\n\n\n「コンテナーで再度開く」をクリック\n\n\nエクスプローラーを開き、\\\\wsl.localhost\\Ubuntu\\home\\ユーザー名を確認してみてください。リポジトリ名と同じフォルダができていると思います。\nMacの場合は、ユーザー名の下にできているはずです。\n\n\n\n\n\n\nMacでファイルが見当たらない？\n\n\n\n\n\nクローンしたフォルダを見てみると、リポジトリにはあるはずのファイルやフォルダが見当たらないかもしれません。\n\n\n\nファイルが見当たらない…？\n\n\nこのようなときは、Finderの隠しファイルを表示する設定を変更する必要があります。\n以下をターミナルで実行してください。\n\n\nTerminal\n\ndefaults write com.apple.finder AppleShowAllFiles TRUE\nkillall Finder\n\nこれで、隠しファイルも表示されるようになります。\n正直なところ、この設定は隠しファイルが邪魔であればしなくてもよいと思います7。VSCode上ではきちんと表示されますので。\n\n\n\n\n\nRStudioで開く\nここで、ブラウザを用いてRStudioを開きます。毎度この手順を踏む前に、VSCode上で開発コンテナに接続していることを確認してください。開いていないと、次のリンクは無効なものになってしまいます。\n\n任意のブラウザで、アドレスバーにlocalhost:8787と入力して開く\n右上の  をクリックし、「New Project…」を選択\n「Existing Directory」を選択\n「Browse…」より「work」を選択して「Choose」をクリック\n\n「Create project」をクリックするとプロジェクトが作成されます。\n\nコンソールに以下を入力して実行\n\nrenvはパッケージを管理するためのパッケージです。\nDockerfileでインストールすることを指示しているので、コンソールでインストールせずとも既に使用可能です8。\n\n\n\n\nR\n\nrenv::init()\n\n\n\nPythonの設定（任意）\nPythonを使う場合、以下のパッケージをインストールしておきます。\n使わない場合はスキップしてください。\n使い方としては、Quarto上でPythonのコードを書くことを想定しています。そのために必要なパッケージですが、その他のパッケージを使用する場合も同様の方法でインストールしてください。\n\nVSCodeに戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n以下のコマンドを入力して実行\n\n\n\nTerminal\n\npip install ipykernel jupyter\n\nパッケージはcacheにキャッシュがあるので、1回インストールすれば、2回目以降の環境構築では不要です。\n\n\nDVCの設定\nDVCはデータを管理するためのツールです。\n事前準備として、自分のGoogleドライブの任意の場所で、データを入れる用のフォルダを作成しておいてください。\nまた、共同プロジェクトの場合は、フォルダの共有も設定してください。\n\nVSCodeに戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n\n既に画面下部にターミナルが表示されている場合はスキップして大丈夫です。\n\n以下のコマンドを入力して実行\n\n初めて環境構築するときに1回実行しておけば、2回目以降の環境構築では不要です。\n\n\n\n\nTerminal\n\npip install dvc dvc-gdrive\n\n\nGoogleドライブで作成したフォルダのIDをコピー\n\nIDは、ドライブでフォルダを開いたときのURLで、最後のスラッシュ（~/folders/）より右側の部分です。\n\n次のコマンドを入力して実行\n\n最後の部分（四角括弧ごと）をコピーしたIDに変更してください。\n\n\n\n\nTerminal\n\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\n\n\nLaTeXの設定\nR Markdownなどで\\(\\LaTeX\\)を使用するために、TinyTeXをインストールします。\nRStudioのコンソールに以下のコマンドを入力して実行してください。\nまた、TinyTeXもキャッシュされるので、1回インストールすれば、2回目以降の環境構築では実行不要です。\n\n\nR\n\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex(dir = \"/home/rstudio/.TinyTeX\", force = TRUE)\n\nTinyTeXは、\\(\\LaTeX\\)コードをコンパイルする際に必要なパッケージを自動でダウンロードしてくれるので、ローカルに面倒な設定をしなくて良いのが魅力です。\nR MarkdownやQuartoでのPDF出力の仕方については、こちらの記事もご覧ください。\n\n\nJuliaの設定（任意）\n参考記事の設定に基づき、Juliaが使えるようになっているため、その始め方についても書いておきます。特に使う予定がなければ、スキップしてください。\n\nVSCodeに戻り、ワーキングディレクトリにProject.tomlというファイルを作成\n\n\n\n\n\n\n\nVSCode上でのファイル等の作成\n\n\n\n\n\nVSCode上でファイルやフォルダを作成するためには、左側のアイコン一番上の「エクスプローラー」をクリックし、その中の上部にあるアイコンの「新しいファイル…」や「新しいファイル…」を選択することでできます。\nここで注意点ですが、状況によっては意図せずフォルダの中に作ってしまうことがあります。\nワーキングディレクトリにファイルを作成したい場合は、まずエクスプローラーの空き部分をクリックします。すると、枠全体が青い線で囲まれると思います。\nこの状態であれば、親フォルダにファイルやフォルダが新規作成されます。下の画像の左側に注目してください。\n\n\n\nエクスプローラーの空いている部分をクリックすると、全体が青枠で囲まれます。\n\n\n一方、特定のフォルダの中に作成したい場合は、そのフォルダをクリックしてから新規作成を行ってください。\n\n\n\n特定のフォルダをクリックすると、そのフォルダが青枠で囲まれます。\n\n\n\n\n\n\nキーボードでCtrl + Shift + Pを入力9\n「Julia: Start REPL」を選択\n\n少し下の方にあると思います。検索をかけると楽かもしれません。1度使ったものは上に表示される仕組みなので、2回目以降は探しやすいと思います。\n少し時間がかかります。\n\nターミナルで、以下のコマンドを入力して実行\n\n\n\nJulia\n\nusing Pkg\nPkg.activate()\n\n以上でJuliaの事前準備ができました。\n\n\n共同プロジェクトの場合\n共同プロジェクトの場合は、GitHubで共有するため、以下の手順を踏んでおいてください。\n\nGitHubリポジトリでコラボレーターを追加\n\nリポジトリのSettingsからCollaboratorsに進み、コラボレーターを追加してください。\nAdd peopleから招待できます。\n\n\nホスト側の環境構築もここで一区切りです！\n\n\n\n共同作業者の設定\n共同作業者も事前準備は終わらせておいてください。\n\nGitHubで招待を受ける\n\nメールが届いているはずですので、そこからGitHubにログインしてください。\nリポジトリにアクセスできるようになります。\n\nリポジトリをクローン\n\nホスト側が作成したリポジトリをクローンします。\nホスト側の設定と同様にしてクローンし、開いてください。\n\n\n一旦ここまでで、共同作業者の設定は終わりです。"
  },
  {
    "objectID": "pages/tips/240504_container/index.html#作業",
    "href": "pages/tips/240504_container/index.html#作業",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "作業",
    "text": "作業\nワークフローについて説明します。\nGitHub関連10についてはこちらの記事で詳しめに解説しましたので、そちらも参考にしてください。\n\n\nRのパッケージ\n作業中新たにパッケージを使用した場合、それをrenv.lockファイルに記録することで、必要なパッケージを記録することができます。記録することで環境を移したときに必要なパッケージをすぐインストールできたり、共同研究者と必要なパッケージを共有することができます。\nバージョンごと記録できるので、全く同じ環境を再現することが可能です。\n新しいパッケージをインストールし、コード内で使用したら、以下のコードを実行し、lockファイルに記録してください11。\n\n\nR\n\nrenv::snapshot()\n\n異なる環境に移行した場合、以下のコードで記録したパッケージを一括インストールできます。\n\n\nR\n\nrenv::restore()\n\nこれでRの開発環境を揃えることができます。\nまた、新しいパッケージを使ったら、その作業が終わるごとにrenv::snapshot()で記録しましょう。\n\n\nPython のパッケージ\n設定ではPythonの設定も加えていますので、必要に応じてPythonも使用できます。\nまた、そもそもDVCがPythonのパッケージなので、それもrenvと同様に記録できます。\n\nPythonのパッケージを追加\n\n先ほどと同様に、新しいターミナルを開いて、以下のコードでパッケージをインストールします。\nDVC以外特に使うものがなければ、ここはスキップしてください。\n\n\n\n\nTerminal\n\npip install [パッケージ名]\n\n\nパッケージを記録\n\nRと同様に、作業が終わったら以下のコードでパッケージを記録します。\n\n\n\n\nTerminal\n\npip freeze &gt; requirements.txt\n\n\nパッケージをインストール（異なる環境に移行した場合）\n\n次のコードで、requirements.txtに記録したパッケージをインストールできます。\n\n\n\n\nTerminal\n\npip install -r requirements.txt\n\n\n\nデータの管理\n\n\n\n\n\n\nDVCの追加設定について\n\n\n\n冒頭にも書いたように、エラーの対処に関する記事を書きました。\n認証でブロックを食らった場合には、以下の記事を参照して下さい。\nDVCのためのGoogle Cloud Project\nまた、その他エラーいくつかエラーにも遭遇しましたので、以下の記事も参考にしてください。\n環境構築におけるトラブルシューティング\n\n\nデータはDVCで管理します。データはGoogle Drive上で保管されます。\n\nワーキングディレクトリに、dataというフォルダを作成\nデータが入ったら、以下のコードを実行\n\ndataフォルダごとドライブに追加します。\ndataフォルダは.gitignoreに記載されているため、GitHubにはアップロードされません。\n\n\n\n\nTerminal\n\ndvc add data/\n\n\n\n\n\n\n\nデータの入れ方\n\n\n\n\n\nデータは、WindowsのエクスプローラーやMacのFinderから直接フォルダに入れて大丈夫です（通常のWindowsやMacでの作業のように）。\nデータをプッシュした後にGoogle Driveを見てもらえれば分かりますが、よくわからない形で保存されています。DVCの仕組みがそうなっているからなので、決してファイルが破損しているわけではありません。\nちなみにWindowsユーザーの方で、一回ローカルに落としてからLinuxにデータ等を入れたらZone.Identifierというファイルができることがありますが、これは無視して大丈夫です。邪魔であればまとめて消してください。\n\n\n\n\nデータをアップロード\n\n以下のコードでデータをプッシュします。\n\n\n\n\nTerminal\n\ndvc push\n\n最初はaddとpushをする過程でアカウントの認証が必要になりますが、表示に従って認証を進めてください12。\n\n（共同作業者）データのダウンロード\n\n以下のコードでデータをダウンロードします。\n\n\n\n\nTerminal\n\ndvc pull\n\n\n\nJuliaのパッケージ\nJulia はパッケージが自動でProject.tomlに保存されるため、共同作業者がインストールするだけで大丈夫です。\n\n先ほどと同じ手順で環境をアクティベートする\n以下のコードでパッケージをインストール\n\n\n\nJulia\n\nPkg.instantiate()\n\n\n\nまとめ\nこれらの作業を通じて、共同作業者もホスト側と同じ環境を揃えることができます。\n環境を揃えるためには、コミット、プッシュ、プルを行い、記録したファイルを共有することが重要です。\n単独での場合は、ブランチを作成する必要はないですが、コミット、プッシュで管理を行いましょう。\n以上がワークフローです。お疲れ様でした！"
  },
  {
    "objectID": "pages/tips/240504_container/index.html#環境構築まとめ",
    "href": "pages/tips/240504_container/index.html#環境構築まとめ",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "環境構築まとめ",
    "text": "環境構築まとめ\n作業フローは、超適当にまとめると次のようになります。\n\nホスト\n\n必要なソフト等をインストールし、事前準備を行う。\n\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub\n\nGitHubでリポジトリをインポート、クローン\nRStudio Serverでプロジェクトを作成\n\nrenv::init() でrenvを開始\nrenv::snapshot()で適宜パッケージを記録\n\ndataフォルダを作成し、DVCで管理\n\nデータはdata内に追加\ndvc add data/とdvc pushを使用\n\nVSCode上でコミット、プッシュ\n\n\n\n共同作業者\n\n必要なソフト等をインストールし、事前準備を行う。\n\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub\n\nGitHubでリポジトリをクローン\nRStudio Serverでプロジェクトを開く\n\nrenv::restore() でパッケージをインストール\n\nVSCode上でpip install -r requirements.txtを実行\n\nPythonパッケージをインストール\n\ndvc pullでデータをダウンロード\nVSCode上でコミット、プッシュ\n\n\n\n作業中\n\nGitHubにコミット、プッシュ、プルを繰り返す。\nデータも新たに追加した場合、DVCでadd, push, pullを行う。"
  },
  {
    "objectID": "pages/tips/240504_container/index.html#おわりに",
    "href": "pages/tips/240504_container/index.html#おわりに",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "おわりに",
    "text": "おわりに\n今回はDocker & VSCodeを用いた開発環境を説明しました。\n個人的な経験として、環境構築はエラーとの戦いです。できるだけエラーに遭遇しないよう丁寧に書いたつもりですが、まだまだ把握していないエラーがたくさんあると思います。\n何かエラー等ありましたら、コメントしていただけると幸いです。"
  },
  {
    "objectID": "pages/tips/240504_container/index.html#参考文献",
    "href": "pages/tips/240504_container/index.html#参考文献",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "参考文献",
    "text": "参考文献\n\n\n\n\n\n\nVSCode + Dockerでよりミニマルでポータブルな研究環境を\n\n\n\n\n\n\n\n\n\nUbuntuにGitをインストールする\n\n\n\n\n\n\n\n\n\ngithubを使った共同作業の手順"
  },
  {
    "objectID": "pages/tips/240504_container/index.html#追記",
    "href": "pages/tips/240504_container/index.html#追記",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "追記",
    "text": "追記\n2024/5/11：リポジトリ作成の手順を変更\n2024/5/22：Mac への対応と、内容の刷新\n2024/5/25：リポジトリのクローン方法を変更\n2024/6/10：テンプレートのキャッシュに関する設定を変更\n2024/9/18：GitHubの説明を簡略化"
  },
  {
    "objectID": "pages/tips/240504_container/index.html#footnotes",
    "href": "pages/tips/240504_container/index.html#footnotes",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "注",
    "text": "注\n\n\n求められない場合は、続けてwslとだけ入力してください。↩︎\nもしくは Mac↩︎\n単にJapaneseでも出てきます。笑↩︎\n単独研究ならここのみでOK、共同研究ならホストが行う設定。↩︎\n上から3番目↩︎\nMac なら&gt;&lt;↩︎\nTRUE のところを FALSE にして再度実行すれば消せます。↩︎\n余談ですが、renv::init()のようにパッケージ名::関数のような書き方をすれば、library(パッケージ名)をせずとも関数を使えます。1度だけ使いたいようなときに便利です。↩︎\nCtrl は Mac だと command↩︎\nコミット、プッシュやブランチなど↩︎\nインストールしただけでコード内で使用していない場合は記録できません。↩︎\n私の場合認証の読み込みが終わらない問題によく直面するので、その際にはターミナルを消し、再度新しいターミナルで実行するようにしています。↩︎"
  },
  {
    "objectID": "pages/tips/240507_pacman/index.html#はじめに",
    "href": "pages/tips/240507_pacman/index.html#はじめに",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "はじめに",
    "text": "はじめに\n何か新しいプロジェクトを始める際に、新しいパッケージをいちいちインストールして読み込むのは面倒ですよね。\nそんな時に便利な pacman パッケージのご紹介です。"
  },
  {
    "objectID": "pages/tips/240507_pacman/index.html#pacman-とは",
    "href": "pages/tips/240507_pacman/index.html#pacman-とは",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "pacman とは",
    "text": "pacman とは\nざっくり言うと、パッケージのマネジメントツールです。このパッケージには p_ で始まる様々な関数が含まれています。\n特に便利なのが p_load() で、パッケージのインストールと読み込みを両方してくれます。もちろんインストール済みのパッケージは、読み込むだけです。\nさらに便利なのは、複数のパッケージをまとめて書けるということです。install.packages() は一度に複数のパッケージをインストールできるものの、library() はパッケージごとにしなくてはなりません。その点 pacman::p_load() は、括弧内にパッケージを並べて書くことで、複数のパッケージを一度にインストール、読み込みまでしてくれます（しかもダブルクォーテーションで囲まなくてよい！）。"
  },
  {
    "objectID": "pages/tips/240507_pacman/index.html#使ってみる",
    "href": "pages/tips/240507_pacman/index.html#使ってみる",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "使ってみる",
    "text": "使ってみる\n早速使ってみます。今回は、tidyverse, sf, here の3つを使いたいとして、まだインストールもしていないとします。\n\nlibrary()\nまず、インストールします。\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"sf\")\ninstall.packages(\"here\")\n\n次に、読み込みます。\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sf)\n\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE\n\nlibrary(here)\n\nhere() starts at /home/rstudio/work\n\n\nこれで使えるようになりました。\n\n\np_load()\npacman::p_load() はこれで一発です。\n\npacman::p_load(tidyverse, sf, here)\n\nこの場合、上に出てきたような読み込みに付随するメッセージは出てきません。"
  },
  {
    "objectID": "pages/tips/240507_pacman/index.html#使うにあたって",
    "href": "pages/tips/240507_pacman/index.html#使うにあたって",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "使うにあたって",
    "text": "使うにあたって\npacman がパッケージである以上、はじめに install.packages(\"pacman\") はしなければなりません。それ以降は install.packages() とはおさらばできます。\npackman:: の書き方を使って、library(pacman)も省略しましょう1。\nまた、Docker を用いて環境構築する場合、Dockerfile にインストールすることを指示しておけば、それすら要らなくなります2。\nDockerfile に以下を追加します。\n\n\nDockerfile\n\nRUN R -e \"install.packages('pacman')\"\n\nこれでビルドすれば、RStudio でインストールせずとも pacman が使えます。"
  },
  {
    "objectID": "pages/tips/240507_pacman/index.html#おまけ",
    "href": "pages/tips/240507_pacman/index.html#おまけ",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "おまけ",
    "text": "おまけ\nパッケージを全部アップデートしたい、なんてこともありますよね。RStudio から一括でやる方法もありますが、せっかくなので pacman を使ってやってみましょう。\n\npacman::p_update()\n\nこれでいけます。"
  },
  {
    "objectID": "pages/tips/240507_pacman/index.html#まとめ",
    "href": "pages/tips/240507_pacman/index.html#まとめ",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "まとめ",
    "text": "まとめ\npacman パッケージをご紹介しました。\nlibrary() とどちらを使うかはお好み次第だと思います。\n魅力を感じた方はぜひ使ってみてください！"
  },
  {
    "objectID": "pages/tips/240507_pacman/index.html#参考",
    "href": "pages/tips/240507_pacman/index.html#参考",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\n“install.packages()”するのはこれが最後！Rのパッケージ管理には「pacman」を使おう"
  },
  {
    "objectID": "pages/tips/240507_pacman/index.html#footnotes",
    "href": "pages/tips/240507_pacman/index.html#footnotes",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "注",
    "text": "注\n\n\nこの書き方では、library() を使わずともパッケージ内の関数が使えます。一度だけ使いたい！というときに便利です。また、どのパッケージに属しているかが明確になるというメリットもあります。↩︎\nこちらを参照↩︎"
  },
  {
    "objectID": "pages/tips/240329_rmarkdown_pdf/index.html#はじめに",
    "href": "pages/tips/240329_rmarkdown_pdf/index.html#はじめに",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "はじめに",
    "text": "はじめに\nこんにちは。\n大学生、大学院生の方で、R を使う授業のレポートを作ったりする方は R Markdown 使うことが多いかもしれません。\nしかし、私の周りでは PDF 出力で結構困っている人がいたのでここでまとめます。\n環境構築、\\(\\LaTeX\\) については詳しく書かないので、そこは他のサイトなどを参照してください。\n目標はとりあえず PDF で出力することです。\n\nターゲット\n\nRの経験が浅く R Markdown や Quarto に馴染みがない方\nR Markdown を使っているが、PDF 出力の仕方に困っている方"
  },
  {
    "objectID": "pages/tips/240329_rmarkdown_pdf/index.html#結論r-markdown",
    "href": "pages/tips/240329_rmarkdown_pdf/index.html#結論r-markdown",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "結論（R Markdown）",
    "text": "結論（R Markdown）\n\n事前準備\n以下を R のコンソールで実行してください。\n\n\nTinyTeXパッケージをインストール\n\n# インストール済みの方は省略\ninstall.packages(\"tinytex\")\n\n\n\nTinyTeXのインストール\n\ntinytex::install_tinytex()\n\n\n\nbookdownパッケージのインストール\n\n# インストール済みの方は省略\ninstall.packages(\"bookdown\")\n\n\n\nYAMLヘッダの設定\nヘッダの部分を以下のように変更してください。\n---\ntitle: \"タイトル\"\nauthor: \"筆者\"\ndate: 2024-12-24\noutput: \n  bookdown::pdf_document2:\n    latex_engine: xelatex\n    toc: false\n    number_section: true\n    keep_tex: true\nheader-includes: \n  - \\usepackage{bookmark} \n  - \\usepackage{xltxtra} \n  - \\usepackage{zxjatype} \n  - \\usepackage[ipaex]{zxjafont}\n---\nbookdown::pdf_document2 の部分は pdf_document でもいけます（後述）。 以上を設定出来たら、knit してください。 無事 PDF ファイルが出力されるはずです！"
  },
  {
    "objectID": "pages/tips/240329_rmarkdown_pdf/index.html#結論quarto",
    "href": "pages/tips/240329_rmarkdown_pdf/index.html#結論quarto",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "結論（Quarto）",
    "text": "結論（Quarto）\n\n事前準備\nR Markdown と同じです。\n\n\nYAML ヘッダ\n---\ntitle: \"タイトル\"\nauthor: \"著者\"\ndate: 2024-07-08\ndate-format: \"YYYY年M月D日\" \nformat: \n  pdf: \n    documentclass: article\n    number-sections: true\n    include-in-header: \n      - text: |\n          \\usepackage{zxjatype}\n          \\usepackage[ipaex]{zxjafont}\nexecute: \n  echo: false\n  warning: false\nlanguage: \n  crossref-fig-title: \"図\"\n  crossref-tbl-title: \"表\"\n  crossref-eq-prefix: \"式\"\n---\nやっていることはほとんど R Markdown の場合と同じですが、書き方は異なります。"
  },
  {
    "objectID": "pages/tips/240329_rmarkdown_pdf/index.html#詳細",
    "href": "pages/tips/240329_rmarkdown_pdf/index.html#詳細",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "詳細",
    "text": "詳細\n\nGlobal Options\n後々困らないよう設定を行います。\n\n上部にある Tools から Global Options... → Sweave と進む\nTypeset LaTeX into PDF using を XeLaTeX に変更\nUse tinytex when compiling .tex files にチェック\n\nこれで前述の設定と整合的になります。また、プロジェクトオプションの方も変更を求められるかもしれません。それにも従って、ここでの設定と整合的になるよう変更してください。\n\n\nbookdown::pdf_document2\nR Markdown のヘッダにおいて、pdf_document ではなく bookdown::pdf_document2 を使用するのには理由があります。\nそれは相互参照を使うためです。\n例えば、\n\nplot(cars)\n\n\n\n\n\n\n\n図 1: データのプロット\n\n\n\n\n\nこのプロットを、文中で引用したいとします。\n「図1：データのプロット」などと書き、「図1から～」と引用していたとすると、その前に別の図を入れる必要が出てきた場合に、全て1つずつ変更していくのは手間がかかります。\nそこで相互参照を用いれば、自動で番号を振って、自由に引用できるようになるわけです。\n以下はR Markdown クックブックから引用したサンプルコードです。\n図 \\@ref(fig:cars-plot) を見よ.\n\n```{r cars-plot, fig.cap=\"自動車のデータ\", echo=FALSE}\npar(mar = c(4, 4, .2, .1))\nplot(cars)  # a scatterplot\n```\n\n次に数式\\@ref(eq:mean) を見よ.\n\n\\begin{equation}\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n} (\\#eq:mean)\n\\end{equation}\n\nさらに表 \\@ref(tab:mtcars) を見よ.\n\n```{r mtcars, echo=FALSE}\nknitr::kable(mtcars[1:5, 1:5], caption = \"mtcars データ\")\n```\n{r cars-plot, fig.cap=\"自動車のデータ\", echo=FALSE} の cars-plot の部分がチャンク名です1。 同様に mtcars もチャンク名なわけですが、\\@ref() を用いれば該当する図や表、数式を引用できます。\n先ほどのプロットを \\@ref() を使って引用してみると、図 1 となるわけです2。\n注意点は、\\@ref()の中で図ならfig:、表ならtab:、数式ならeq:と始めないと引用できない点です。"
  },
  {
    "objectID": "pages/tips/240329_rmarkdown_pdf/index.html#よくあるエラーについて",
    "href": "pages/tips/240329_rmarkdown_pdf/index.html#よくあるエラーについて",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "よくあるエラーについて",
    "text": "よくあるエラーについて\nTinyTeX はコンパイルに必要なパッケージを自動でインストールしてくれるのが魅力ですが、よくエラーに直面します。\nここではよくあるエラーとして、「パッケージ見つからないエラー」を取り上げます。\n\nパッケージが見つからないエラー\n多分これがエラーの中で一番多いと思います。私自身も何回も遭遇しました。\n例えば以下のようなエラーです。\nfinding package for bookmark.sty\nERROR: \ncompilation failed- no matching packages\nLaTeX Error: File `bookmark.sty' not found.\nnot found です。あるはずなんですけどね…。\n&lt;対処法&gt;\n\ntinytex::tlmgr_install(\"パッケージ名\") で見つからないパッケージのみ別でインストール\n\n上の例で言えば、bookmark.sty のみをインストールするということです。\nこの際注意点として、.sty は抜いてください。tinytex::tlmgr_install(\"bookmark\") とする、ということです。\n\ntinytex::tlmgr_update() を実行\n\n既存のパッケージをアップデートする方法です。\n\nTinyTeX の再インストール\n\n現状最有力の方法です。\ntinytex::tlmgr_update() を実行した際、コンソールに tinytex::reinstall_tinytex(repository=\"illinois\")3 を試してみろと出る場合があります。これに従って、TinyTeX を再インストールしてください。\n時間は少しかかりますが、最新のバージョンにアップデート可能です。\nTinyTeX を初インストールした直後でも効果があった例があるので、1と2でできなかった場合はぜひ再インストールしてみてください。"
  },
  {
    "objectID": "pages/tips/240329_rmarkdown_pdf/index.html#おわりに",
    "href": "pages/tips/240329_rmarkdown_pdf/index.html#おわりに",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "おわりに",
    "text": "おわりに\nレポートでしたら相互参照はそこまで使用頻度が高くないかもしれませんが、卒論や修論では役に立つと思います。\nとりあえずPDF出力したい方、ご参考まで！\n間違いや新たなエラー等ありましたら、コメントもよろしくお願いいたします。"
  },
  {
    "objectID": "pages/tips/240329_rmarkdown_pdf/index.html#参考",
    "href": "pages/tips/240329_rmarkdown_pdf/index.html#参考",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nR Markdown クックブック\n\n\n\n\n\n\n\n\n\nQuarto 公式ガイド\n\n\n\n\n\n\n\n\n\n私たちのR"
  },
  {
    "objectID": "pages/tips/240329_rmarkdown_pdf/index.html#追記",
    "href": "pages/tips/240329_rmarkdown_pdf/index.html#追記",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "追記",
    "text": "追記\n2024/5/6：「よくあるエラーについて」を追加\n2024/7/8：Quarto における YAML ヘッダを更新"
  },
  {
    "objectID": "pages/tips/240329_rmarkdown_pdf/index.html#footnotes",
    "href": "pages/tips/240329_rmarkdown_pdf/index.html#footnotes",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "注",
    "text": "注\n\n\n他の部分はチャンクオプションと呼ばれるものですが、今回は触れません。チャンクオプションについてはこちらをご覧ください。↩︎\nちなみに Quarto では、チャンク名を fig-hogehoge や tbl-hogehoge などにすれば、@fig-hogehoge や @tbl-hogehoge だけで簡単に引用できます。Quarto での相互参照についてはこちらをご覧ください。↩︎\nillinois の部分は異なるかもしれません。↩︎"
  },
  {
    "objectID": "pages/tips/241219_container/index.html#はじめに",
    "href": "pages/tips/241219_container/index.html#はじめに",
    "title": "【改訂版】開発コンテナを使ってR環境を構築！",
    "section": "はじめに",
    "text": "はじめに\n\n\n\n\n\n\nDVCの設定について\n\n\n\nこちらの記事でより簡便なDVCの設定について解説しました。このページを書き直す時間がないためまだ修正できていませんが、もしDVCを採用するということであれば、ぜひ参考にしてみてください。\n\n\n\n\n\n\n\n\n本記事について\n\n\n\n本記事は以前投稿した同タイトルの記事をアップデートしたものです。\n変更点としては、\n\nDockerfileの見直し\nRのアップデートとそれに伴うPython仮想環境の追加\n全体的にコードを整理\n\nです。\n記事の構成もブラッシュアップしました。\n\n\nDockerとVSCodeを使ってRの環境を構築する方法を説明します。\n開発コンテナを使うメリットは、環境を簡単に共有でき、他の環境に影響を受けずに作業ができることです。\nあまり環境構築に詳しくなくても実装できるよう意識して書いていますので、最後まで自分のPCでも実装してみてください。"
  },
  {
    "objectID": "pages/tips/241219_container/index.html#sec-pre",
    "href": "pages/tips/241219_container/index.html#sec-pre",
    "title": "【改訂版】開発コンテナを使ってR環境を構築！",
    "section": "事前準備",
    "text": "事前準備\nまず、WSL2, Ubuntu, Homebrew, VSCode, Docker, Git, そしてGitHubの準備をします。WindowsとMacでの設定が異なるため、それぞれについて説明します。\n全体的に、導入済みの箇所は飛ばしてください。\n\nWSL2（Windowsユーザーのみ）\n\nPowerShellまたはWindowsコマンドプロンプトを管理者権限で開く\n\n右クリックで管理者権限を使えます。\n\n\n\n\n\n\n\n\n以下のコマンドを入力して実行\n\nこれでインストールはできるはずですが、詳しくはこちらのサイトを参照してください。\n\n\n\n\nPowerShell\n\nwsl --install\n\n\nユーザー名とパスワードを設定\n\nインストールが終わると、Linuxディストリビューションのユーザー名とパスワードの作成を求められます1。\nユーザー名は何でも大丈夫です。パスワードもめちゃくちゃ簡単で問題ありません。\nパスワードは画面上には表示されませんが、ちゃんと入力されています。慌てて何回も入力しないようにしてください。\n\n\nエクスプローラーからLinuxに入り2、Ubuntu→home→[ユーザー名]と入ったところがメインとなるディレクトリです。\n\n\nHomebrew（Macユーザーのみ）\nMacユーザーはHomebrewを使って諸々インストールしていくので、まだの方はここでインストールしてください。\n\nターミナルを開く\n\nアプリ一覧から「ターミナル」を探してください。\n\n以下のコマンドを入力して実行\n\nパスワードを求められるので、入力してください。\n\n\n\n\nTerminal\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\n\nVSCode\n\nVSCodeのダウンロードサイトからダウンロード、インストール\n\nDownload for Windows3をクリックしてダウンロードできます。\nインストールができたら、VSCodeを開いてください。\n\n（任意）日本語の拡張機能をインストール\n\n画面左側に拡張機能のアイコンがあります。ここの検索ボックスにMS-CEINTL.vscode-language-pack-jaと入力し、1番上に出てきたものをインストールします4。\nインストール後、VSCodeを再起動すれば日本語が反映されていると思います。\n\n\n\n\n拡張機能のインストール\n\n拡張機能の検索ボックスで、次のIDを入力し、インストールします。\nms-vscode-remote.remote-containers (Dev Containers)\nms-vscode-remote.remote-wsl (WSL, Windowsユーザーのみ)\n\n\nWSLに接続（Windowsユーザーのみ）\n\nVSCodeから先ほどインストールしたWSLに接続します。\n画面左下の青いをクリックして、「WSLへの接続」をクリックします。\n\n\n\n\n\nDocker\nDockerをインストールします。\n\nWindowsの方はここからDocker Desktop for Windowsを、Macの方はこちらからダウンロード＆インストール\n設定の確認（Windowsのみ）\n\nインストール出来たら、画面上部の設定ボタンからResources、WSL integrationと進み、チェックボックスにチェック、Ubuntuがオンになっていることを確認してください。\nたまに、何もしていないのにここがオフになっていて、トラブることがあります。\n詳しくはこちらをご覧ください。日本語で書いてあります。\n\n\n\n\n画面左側のVolumesに進み、Createからボリュームを作成\n\n次の4つを作成します（大文字小文字に注意！）。\nTinyTeX, cache, fonts, venv\n\n\n\n\n\nMacでの画面\n\n\n\n\nGit\n\nWindows\n\nUbuntuでGitをインストール\n\nWindowsのアプリ一覧からUbuntuを探し、開いてください。開いたら、以下のコマンドを入力して実行します。\nsudoを使うとパスワードを求められますが、最初に設定したものです。\n\n\n\n\nUbuntu\n\nsudo apt-get install git\n\n\n\n\nUbuntu\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\nここに限らずですが、特に注意がない限り[]ごと置き換えてください。\n\n\n\n\nUbuntu\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\nMac\n\nHomebrewでGitをインストール\n\nターミナルを開いて、以下のコマンドを入力して実行します。\n\n\n\n\nTerminal\n\nbrew install git\n\n\n\n\nこのMacでは2回目なのでgit is already installedと表示されてます…。\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\n\n\n\n\nTerminal\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\n\nGitHubアカウントの作成\nファイルは基本的にGitHubで管理するので、ここからアカウントを作成してください。\nポイント：\nGitHubアカウントを作成したら、VSCodeにログインしておきましょう。\n\nVSCodeを開く\n画面左下のアイコンをクリック\n\nGitHubでサインインを行う\n\n\nGitHubにログインすることで、その後の作業がスムーズに進みます。\n事前準備は以上です！"
  },
  {
    "objectID": "pages/tips/241219_container/index.html#開発環境の構築",
    "href": "pages/tips/241219_container/index.html#開発環境の構築",
    "title": "【改訂版】開発コンテナを使ってR環境を構築！",
    "section": "開発環境の構築",
    "text": "開発環境の構築\n\n\n\n\n\n\nRStudioで出てくる警告について\n\n\n\nRStudioでこの後作業することになりますが、コマンドを打つと以下の警告が出てくるかもしれません。\n警告メッセージ: Character set is not UTF-8; please change your locale\nしかし、警告は出るものの、実際の作業には特に問題ありません。これに対処しようと試みましたが、できませんでした…。\nもし詳しくて対処できた方は、コメントから教えていただけると幸いです。\n\n\nまずは基本設定5から説明します。\n\n基本設定\n\nGitHubリポジトリを作成\n\nテンプレートのGitHub リポジトリにアクセス\n画面右の「Use this template」から「Create a new repository」を選択\nRepository nameを記入\nPrivateを選択\n\n通常の研究プロジェクトならPrivateでOK\n\n「Create repository」をクリック\n\n\n\nリポジトリをクローン\n\nVSCodeを開く\n画面左側のを開く\n「リポジトリの複製」を選択し、さらに「GitHubから複製」を選ぶ\nリポジトリを選択し、クローン\n\nリポジトリは、「ユーザー名/リポジトリ名」の形式で表示されます。\n基本的に表示されると思いますが、表示されない場合は手入力してください。\nクローンしたリポジトリを開くか問われるので、開いてください。\n\n画面右下に「コンテナーで再度開く」と出たらクリック\n\n出ない場合、画面左下「 WSL: Ubuntu」6をクリックし、「コンテナーで再度開く」を選択してください。\n初めて環境を構築する場合、ここでかなり時間がかかるので辛抱強く待ちましょう。\n\n\n\n\n\n「コンテナーで再度開く」をクリック\n\n\nエクスプローラーを開き、\\Ubuntu\\home\\ユーザー名の中を確認してみてください。リポジトリ名と同じフォルダができていると思います。\nMacの場合は、ユーザー名の下にできているはずです。\n\n\n\n\n\n\nMacでファイルが見当たらない？\n\n\n\n\n\nクローンしたフォルダを見てみると、リポジトリにはあるはずのファイルやフォルダが見当たらないかもしれません。\n\n\n\nファイルが見当たらない…？\n\n\nこのようなときは、Finderの隠しファイルを表示する設定を変更する必要があります。\n以下をターミナルで実行してください。\n\n\nTerminal\n\ndefaults write com.apple.finder AppleShowAllFiles TRUE\nkillall Finder\n\nこれで、隠しファイルも表示されるようになります。\n正直なところ、この設定は隠しファイルが邪魔であればしなくてもよいと思います7。VSCode上ではきちんと表示されますので。\n\n\n\n\n\nRStudioで開く\nここで、ブラウザを用いてRStudioを開きます。毎度この手順を踏む前に、VSCode上で開発コンテナに接続していることを確認してください。開いていないと、次のリンクは無効なものになってしまいます。\n\n任意のブラウザで、アドレスバーにlocalhost:8787と入力して開く\n右上の  をクリックし、「New Project…」を選択\n「Existing Directory」を選択\n「Browse…」より「work」を選択して「Choose」をクリック\n\n「Create project」をクリックするとプロジェクトが作成されます。\n\nコンソールに以下を入力して実行\n\nrenvはパッケージを管理するためのパッケージです。\nDockerfileでインストールすることを指示しているので、コンソールでインストールせずとも既に使用可能です8。\n\n\n\n\nR\n\nrenv::init()\n\n\n\nPythonの設定（任意）\nPythonを使う場合、以下のパッケージをインストールしておきます。\n使わない場合はスキップしてください。\n使い方としては、Quarto上でPythonのコードを書く or .ipynbで書くことを想定しています。そのために必要なパッケージですが、その他のパッケージを使用する場合も同様の方法でインストールしてください。\n\nVSCodeに戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n以下のコマンドを入力して実行\n\n\n\nTerminal\n\npip install ipykernel jupyter\n\nパッケージはcacheにキャッシュがあるので、1回インストールすれば、2回目以降の環境構築では不要です。\n\n\nDVCの設定\nDVCはデータを管理するためのツールです。\n事前準備として、自分のGoogleドライブの任意の場所で、データを入れる用のフォルダを作成しておいてください。\nまた、共同プロジェクトの場合は、フォルダの共有も設定してください。\n\nVSCodeに戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n\n既に画面下部にターミナルが表示されている場合はスキップしてください。\n\n以下のコマンドを入力して実行\n\n初めて環境構築するときに1回実行しておけば、2回目以降の環境構築では不要です。\n\n\n\n\nTerminal\n\npip install dvc dvc-gdrive\n\n\nGoogleドライブで作成したフォルダのIDをコピー\n\nIDは、ドライブでフォルダを開いたときのURLで、最後のスラッシュ（~/folders/）より右側の部分です。\n\n次のコマンドを入力して実行\n\n最後の部分（四角括弧ごと）をコピーしたIDに変更してください。\n\n\n\n\nTerminal\n\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\n\n\nLaTeXの設定\nR Markdownなどで\\(\\LaTeX\\)を使用するために、TinyTeXをインストールします。\nRStudioのコンソールに以下のコマンドを入力して実行してください。\nまた、TinyTeXもキャッシュされるので、1回インストールすれば、2回目以降の環境構築では実行不要です。\n\n\nR\n\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex(force = TRUE, dir = \"/home/rstudio/.TinyTeX\")\n\nTinyTeXは、\\(\\LaTeX\\)コードをコンパイルする際に必要なパッケージを自動でダウンロードしてくれるので、ローカルに面倒な設定をしなくて良いのが魅力です。\nR MarkdownやQuartoでのPDF出力の仕方については、こちらの記事もご覧ください。\n\n\n\n\n\n\nVSCode上でのファイル等の作成\n\n\n\n\n\nVSCode上でファイルやフォルダを作成するためには、左側のアイコン一番上の「エクスプローラー」をクリックし、その中の上部にあるアイコンの「新しいファイル…」や「新しいファイル…」を選択することでできます。\nここで注意点ですが、状況によっては意図せずフォルダの中に作ってしまうことがあります。\nワーキングディレクトリにファイルを作成したい場合は、まずエクスプローラーの空き部分をクリックします。すると、枠全体が青い線で囲まれると思います。\nこの状態であれば、ワーキングディレクトリにファイルやフォルダが新規作成されます。下の画像の左側に注目してください。\n\n\n\nエクスプローラーの空いている部分をクリックすると、全体が青枠で囲まれます。\n\n\n一方、特定のフォルダの中に作成したい場合は、そのフォルダをクリックしてから新規作成を行ってください。\n\n\n\n特定のフォルダをクリックすると、そのフォルダが青枠で囲まれます。\n\n\n\n\n\n\n\n共同プロジェクトの場合\n共同プロジェクトの場合は、GitHubで共有するため、以下の手順を踏んでおいてください。\n\nGitHubリポジトリでコラボレーターを追加\n\nリポジトリのSettingsからCollaboratorsに進み、コラボレーターを追加してください。\nAdd peopleから招待できます。\n\n\nホスト側の環境構築はここで一区切りです！\n\n\n\n共同作業者の設定\n前提：事前準備を終わらせている\n\nGitHubで招待を受ける\n\nメールが届いているはずですので、そこからGitHubにログインしてください。\nリポジトリにアクセスできるようになります。\n\nリポジトリをクローン\n\nホスト側が作成したリポジトリをクローンします。\nホスト側の設定と同様にしてクローンし、開いてください。\n\n\n一旦ここまでで、共同作業者の設定は終わりです。"
  },
  {
    "objectID": "pages/tips/241219_container/index.html#研究作業ワークフロー",
    "href": "pages/tips/241219_container/index.html#研究作業ワークフロー",
    "title": "【改訂版】開発コンテナを使ってR環境を構築！",
    "section": "研究作業（ワークフロー）",
    "text": "研究作業（ワークフロー）\n研究における作業の流れについて説明します。\nGitHub関連9についてはこちらの記事で詳しめに解説しましたので、そちらも参考にしてください。\n\nRのパッケージ\n基本的にはブラウザ上のRStudio ServerでローカルのRStudioと同様に作業できます。ここではプロジェクトを管理する観点から説明します。\n作業中新たにパッケージを使用した場合、それをrenv.lockファイルに記録することで、必要なパッケージを記録することができます。記録することで環境を移したときに必要なパッケージをすぐインストールできたり、共同研究者と必要なパッケージを（バージョン込みで）共有することができます。\nバージョンごと記録できるので、全く同じ環境を再現することが可能です。\n新しいパッケージをインストールし、コード内で使用したら、以下のコードを実行し、lockファイルに記録してください10。\n\n\nR\n\nrenv::snapshot()\n\n異なる環境に移行した場合、ディレクトリにrenv.lockファイルがあれば、以下のコードで記録したパッケージを一括インストールできます。\n\n\nR\n\nrenv::restore()\n\nこれでRの開発環境を揃えることができます。PCを変えた場合などにも役立ちます。\nまた、新しいパッケージを使ったら、その作業が終わるごとにrenv::snapshot()で記録しましょう。\n\n\nPython のパッケージ\n設定ではPythonの設定も加えていますので、必要に応じてPythonも使用できます。\nまた、そもそもDVCがPythonのパッケージなので、それもrenvと同様に記録できます。Pythonの場合はvenvを用いてパッケージを管理します。\n\nPythonのパッケージを追加\n\n先ほどと同様に、新しいターミナルを開いて、以下のコードでパッケージをインストールします。\nDVC以外特に使うものがなければ、ここはスキップしてください。\n\n\n\n\nTerminal\n\npip install [パッケージ名]\n\n\nパッケージを記録\n\nRと同様に、作業が終わったら以下のコードでパッケージを記録します。\nrequirements.txtはrenv.lockと同じような役割です。\n\n\n\n\nTerminal\n\npip freeze &gt; requirements.txt\n\n\nパッケージをインストール（異なる環境に移行した場合）\n\n次のコードで、requirements.txtに記録したパッケージをインストールできます。\nつまりrenv::restore()と同じ役割です。\n\n\n\n\nTerminal\n\npip install -r requirements.txt\n\n\n\nデータの管理\nデータはDVCで管理、Google Drive上で保管します。\nDVCでデータを管理するメリットとしては、GitHub上のデータ容量の制限を受けずに管理できることが大きいと思います。GitHubは100MiBを超えるデータをブロックしますので、注意が必要です。\nまずはこの記事を見ていただき、Google Cloudでの設定をしてください。\n\nワーキングディレクトリに、dataというフォルダを作成\nデータが入ったら、以下のコードを実行\n\ndataフォルダごとドライブに追加します。\ndataフォルダは.gitignoreに記載されているため、GitHubにはアップロードされません。\n\n\n\n\nTerminal\n\ndvc add data/\n\n\n\n\n\n\n\nデータの入れ方\n\n\n\n\n\nデータは、WindowsのエクスプローラーやMacのFinderから直接フォルダに入れて大丈夫です（通常のWindowsやMacでの作業のように）。\nちなみにWindowsユーザーの方で、一回ローカルに落としてからLinuxにデータやコードを入れたらZone.Identifierというファイルができることがありますが、これは無視して大丈夫です。邪魔であればまとめて消してください。\n\n\n\n\n以下のコードを実行\n\n'client-id'と'client-secret'はこちらを参考に変更してください。\n\n\n\n\nTerminal\n\ndvc remote modify --local myremote gdrive_client_id 'client-id'\ndvc remote modify --local myremote gdrive_client_secret 'client-secret'\ndvc remote modify --local myremote gdrive_user_credentials_file ~/.cache/myremote-credentials.json\n\n\nデータをアップロード\n\n以下のコードでデータをプッシュします。\n最初はpushをする過程でアカウントの認証が必要になりますが、表示に従って認証を進めてください。\n\n\n\n\nTerminal\n\ndvc push\n\n\nデータのダウンロード\n\nプッシュしたデータをダウンロードしたい場合は、以下を実行します。\n\n\n\n\nTerminal\n\ndvc pull\n\n\n\nJuliaのパッケージ\nJulia はパッケージが自動でProject.tomlに保存されるため、共同作業者がインストールするだけで大丈夫です。\n\n先ほどと同じ手順で環境をアクティベートする\n以下のコードでパッケージをインストール\n\n\n\nJulia\n\nPkg.instantiate()\n\n\n\nまとめ\n以上の作業を通じて、再現可能な研究を行うことができます。\n環境を揃えるためには、コミット、プッシュ、プルを行い、記録したファイルを共有することが重要です。\n以上がワークフローです。お疲れ様でした！"
  },
  {
    "objectID": "pages/tips/241219_container/index.html#環境構築まとめ",
    "href": "pages/tips/241219_container/index.html#環境構築まとめ",
    "title": "【改訂版】開発コンテナを使ってR環境を構築！",
    "section": "環境構築まとめ",
    "text": "環境構築まとめ\n作業フローは、超適当にまとめると次のようになります。\n\nホスト\n\n必要なソフト等をインストールし、事前準備を行う。\n\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub\n\nGitHubでリポジトリをインポート、クローン\nRStudio Serverでプロジェクトを作成\n\nrenv::init() でrenvを開始\nrenv::snapshot()で適宜パッケージを記録\n\ndataフォルダを作成し、DVCで管理\n\nデータはdata内に追加\ndvc add data/とdvc pushを使用\n\nVSCode上でコミット、プッシュ\n\n\n\n共同作業者\n\n必要なソフト等をインストールし、事前準備を行う。\n\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub\n\nGitHubでリポジトリをクローン\nRStudio Serverでプロジェクトを開く\n\nrenv::restore() でパッケージをインストール\n\nVSCode上でpip install -r requirements.txtを実行\n\nPythonパッケージをインストール\n\ndvc pullでデータをダウンロード\nVSCode上でコミット、プッシュ"
  },
  {
    "objectID": "pages/tips/241219_container/index.html#おわりに",
    "href": "pages/tips/241219_container/index.html#おわりに",
    "title": "【改訂版】開発コンテナを使ってR環境を構築！",
    "section": "おわりに",
    "text": "おわりに\n今回はDocker & VSCodeを用いた開発環境を説明しました。\n個人的な経験として、環境構築はエラーとの戦いです。できるだけエラーに遭遇しないよう丁寧に書いたつもりですが、まだまだ把握していないエラーがたくさんあると思います。\n何かエラー等ありましたら、コメントしていただけると幸いです。"
  },
  {
    "objectID": "pages/tips/241219_container/index.html#参考文献",
    "href": "pages/tips/241219_container/index.html#参考文献",
    "title": "【改訂版】開発コンテナを使ってR環境を構築！",
    "section": "参考文献",
    "text": "参考文献\n\n\n\n\n\n\nVSCode + Dockerでよりミニマルでポータブルな研究環境を\n\n\n\n\n\n\n\n\n\nUbuntuにGitをインストールする\n\n\n\n\n\n\n\n\n\ngithubを使った共同作業の手順"
  },
  {
    "objectID": "pages/tips/241219_container/index.html#footnotes",
    "href": "pages/tips/241219_container/index.html#footnotes",
    "title": "【改訂版】開発コンテナを使ってR環境を構築！",
    "section": "注",
    "text": "注\n\n\n求められない場合は、続けてwslとだけ入力して実行してください。↩︎\n左のサイドバーの1番下です。↩︎\nもしくは Mac↩︎\n単にJapaneseでも出てきます。笑↩︎\n単独研究ならここのみでOK、共同研究ならホストが行う設定。↩︎\nMac なら↩︎\nTRUE のところを FALSE にして再度実行すれば消せます。↩︎\n余談ですが、renv::init()のようにパッケージ名::関数のような書き方をすれば、library(パッケージ名)をせずとも関数を使えます。1度だけ使いたいようなときに便利です。↩︎\nコミット、プッシュやブランチなど↩︎\nインストールしただけでコード内で使用していない場合は記録されません。↩︎"
  },
  {
    "objectID": "pages/tips/240520_latex/index.html#はじめに",
    "href": "pages/tips/240520_latex/index.html#はじめに",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "はじめに",
    "text": "はじめに\nこんにちは、Windows ユーザーです。\nTeX Live はインストールするのが面倒だし、使い方もよくわからないので1、別の方法で\\(\\LaTeX\\) を使えるようにしました。\nまた、Mac での方法も併せてご紹介します。\nこれまで TeX Live に苦労していた方や Overleaf を使っていた方は、ぜひ試してみてください。"
  },
  {
    "objectID": "pages/tips/240520_latex/index.html#作業手順",
    "href": "pages/tips/240520_latex/index.html#作業手順",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "作業手順",
    "text": "作業手順\n前提として、VSCodeはインストールされているとします。もしまだの方はこちらを参考にインストールしてください2。\n\n0. WSL, Ubuntu と Homebrew の準備\nWindows のローカルでもできるとは思うのですが、Ubuntu でやる方が楽なので、WSL2 を使って Ubuntu でやります。何言ってるかわからない方は、気にしないでください。僕もよくわかりません。\n事前準備は少し面倒だけど、一度やってしまえば楽、みたいなイメージで使っています。とりあえず使えればよいと思っている一大学院生なので、そのあたりは許してください。\nMac の方は、Homebrew を使って TinyTeX をインストールしていきます。\n既にこれらの準備が出来ている方は、飛ばしてください。\n\n0-1. WSL と Ubuntu のインストール（Windows）\nまずは Windows Subsystem for Linux（WSL）をインストールします3。\nPowerShell を管理者権限で起動4し、以下のコマンドを実行します。\nwsl --install\nもし再起動を求められたら、再起動してください。インストールはこれだけです。\nインストールができたらユーザー名とパスワードの設定が求められるので、設定します。\nこれは何でも構いません。sudo コマンドを使う際にパスワードが必要になりますが、本当に簡単なもので大丈夫です5。\nまた、パスワード入力の際に、入力しても画面上には表示されませんが、きちんと入力されていますので慌てず続けてください。\n\n\n0-2. Homebrew のインストール（Mac）\nMac ユーザーは Homebrew を使って諸々インストールしていくので、まだの方はここでインストールしてください。\n\nターミナルを開く\n\nアプリ一覧から「ターミナル」を探してください。\n\n以下のコマンドを入力して実行\n\nパスワードを求められるので、入力してください。\n\n\n\n\nTerminal\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\n\n\n1. TinyTeX のインストール\nTeX Live はインストールが面倒なので、TinyTeX という軽量な \\(\\LaTeX\\) ディストリビューションを使います。R Markdown でもよく使われているので、馴染みがある方も多いかもしれません。\nしかし今回は、R は使いません。目標とするのは TeX Live の代替として、簡潔に \\(\\LaTeX\\) を使えるようにすることです。\n\n1-1. Windows でのインストール\nWindows では、Ubuntu を開いて以下のコマンドを実行します。\nwget -qO- \"https://yihui.org/tinytex/install-bin-unix.sh\" | sh\nこれで TinyTeX のインストールは完了です。簡単ですね。\n\n\n1-2. Mac でのインストール\nMac の方は、ターミナルを開いて以下のコマンドを実行してください。\ncurl -sL \"https://yihui.org/tinytex/install-bin-unix.sh\" | sh\n\n\n\n2. VSCode での設定\n\n2-1. 拡張機能のインストール\nVSCode で LaTeX を使うためには、拡張機能をインストールする必要があります。\n画面左の拡張機能アイコン  をクリックし、検索バーに「LaTeX」と入力します。すると、LaTeX および LaTeX Workshop という拡張機能が表示されるので、2つをインストールします6。\n\n\n2-2. 設定の変更\n拡張機能をインストールしたら、設定を変更します。\n画面左下の管理ボタンから「設定」で設定画面を開き7、右上にある  をクリックして settings.json を開きます。\n以下の {} の中身を設定に追加します。もし既に何か設定がある場合は、最後をカンマで区切り、改行して追加してください。\n{\n    \"latex-workshop.latex.tools\": [\n        {\n          \"name\": \"latexmk\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-synctex=1\",\n            \"-interaction=nonstopmode\",\n            \"-file-line-error\",\n            \"-xelatex\",\n            \"%DOC%\"\n          ]\n        }\n    ],\n    \"latex-workshop.latex.recipes\": [\n        {\n          \"name\": \"latexmk (xelatex)\",\n          \"tools\": [\n            \"latexmk\"\n          ]\n        }\n    ],\n    \"latex-workshop.view.pdf.viewer\": \"tab\",\n    \"latex-workshop.latex.clean.fileTypes\": [\n        \"*.aux\", \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \n        \"*.acr\", \"*.alg\", \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\", \"*.synctex.gz\",\n        // for Beamer files\n        \"_minted*\", \"*.nav\", \"*.snm\", \"*.vrb\",\n    ],\n    \"latex-workshop.latex.autoBuild.run\": \"onBuilt\",\n}\n\nこれで設定は完了です。\n\n\n\n3. 動作確認\nここからは Windows も Mac も共通です。\nはじめに今回使うフォントをインストールしましょう。VSCode のターミナルで以下のコマンドを実行してください。\ntlmgr install ipaex\n次に、VSCode で新しいファイルを作成し、GitHub Copilot が作ってくれた以下のコードを回してみます8。\n\\documentclass{article}\n\\usepackage{bookmark} \n\\usepackage{fontspec} \n\\usepackage{zxjatype} \n\\usepackage[ipaex]{zxjafont}\n\n\\title{サンプルドキュメント}\n\\author{あなたの名前}\n\\date{今日の日付}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{導入}\n\nこれはサンプルのセクションです。\n\n\\subsection{サブセクション}\n\nこれはサンプルのサブセクションです。\n\n\\end{document}\nこれを保存し、右上の緑の三角ボタン  をクリックすると、PDF ファイルが生成されます。\nしかし、おそらくここでエラーに直面するでしょう。次のセクションでエラーの解決法について説明します。\n\n\n4. エラーの解決\nこの段階のエラーのほとんどは、パッケージがインストールされていないことが原因です。\nコンパイルすると右下にエラーの表記とともに「Open compiler log」と出ると思うので、それをクリックしてエラーログを開きます。\n\n\n\nこれを押します。\n\n\nエラーログを少し遡ってみると、どのパッケージがインストールされていないかがわかります。例えば、「! LaTeX Error: File ‘xltxtra.sty’ not found.」と出た場合、xltxtra パッケージがインストールされていないことがわかります。\nその場合、ターミナルに戻り以下のコマンドを実行してください。\ntlmgr install xltxtra\nこれでインストールできますが、使い始めのうちは何度か似たようなエラーが出るかもしれません。エラーが出たらエラーログを見て、同様の方法で必要なパッケージをインストールしてください。\n\n\n\n\n\n\nエラーのトラップ\n\n\n\n先ほどのサンプルコードを実行しようとすると、\n! LaTeX Error: File `xeCJK.sty’ not found.\nというエラーが途中で出てきます。しかし、tlmgr install xeCJK としてもインストールできません。これは、xeCJK というパッケージが存在しないためです。\n代わりに、ctex パッケージをインストールすることで解決できます。ctex パッケージが xeCJK を含んでいるためです。\nややこしいですが、これで試してみてください。\n\n\n\n\n5. 再び動作確認\nエラーを解消するうちに、足りないパッケージがインストールでき、最終的には問題なくコンパイルできるようになるはずです。\n日本語で使う場合、フォントをインストールしていないミスが多いので、気を付けてください。\n最終的に次のように出力できました。"
  },
  {
    "objectID": "pages/tips/240520_latex/index.html#おわりに",
    "href": "pages/tips/240520_latex/index.html#おわりに",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "おわりに",
    "text": "おわりに\n以上で、TeX Live を使わずに \\(\\LaTeX\\) 環境を作る方法を紹介しました。\nTinyTeX は、R 上だと必要なパッケージが自動でインストールされる9ので、それに比べるとやや不便ですが、簡潔に \\(\\LaTeX\\) を使えるようになるので、一度試してみる価値はあると思います。\nTeX Live や VSCode の設定に苦心している方は、ぜひ試してみてください。\nまた、何かエラー等ありましたらコメントでお知らせください。"
  },
  {
    "objectID": "pages/tips/240520_latex/index.html#参考",
    "href": "pages/tips/240520_latex/index.html#参考",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nTinyTeX\n\n\n\n\n\n\n\n\n\nTinyTeX 非公式日本語版ドキュメント"
  },
  {
    "objectID": "pages/tips/240520_latex/index.html#footnotes",
    "href": "pages/tips/240520_latex/index.html#footnotes",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "注",
    "text": "注\n\n\n実際には少し使っていたので、並程度には使えます（笑）↩︎\n日本語設定などもしておくと便利かもしれません↩︎\nWindows における WSL のインストールについてはこちらでも触れています。↩︎\nアプリ一覧から右クリックすれば「詳細」→「管理者として実行」で使えます。↩︎\nこちらの動画の 4:42~ あたりを見てみてください。パスワードは「a」です。a。↩︎\n怪しかったら、mathematic.vscode-latex と James-Yu.latex-workshop をそれぞれ入力すれば確実です。↩︎\nWindowsなら Ctrl ＋ , で、Mac ならcommand ＋ , でもいけます。↩︎\n少し日本語フォントなどの設定を加えています。↩︎\nその割によく手動でインストールさせられる気がしますが…↩︎"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#はじめに",
    "href": "pages/tips/241213_create_website/index.html#はじめに",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "はじめに",
    "text": "はじめに\n個人のホームページを作りたい！しかし何でどうやって作ろうか。\nここではRStudio上で完結する方法をご紹介します。\nHTMLなどに関する知識がなくても、多分作れます。僕もありませんので。\n早速順を追ってみていきましょう。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#手順1githubでレポジトリを作成",
    "href": "pages/tips/241213_create_website/index.html#手順1githubでレポジトリを作成",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "手順1：GitHubでレポジトリを作成",
    "text": "手順1：GitHubでレポジトリを作成\n前提：GitHubアカウントを所持していること（所持していない場合はhttps://github.com/より作成して下さい）\nまず、GitHubホームの右上にあるプラスボタンから、New repositoryをクリックします。\n\n\n\n\n\n次に出てきた画面で、リポジトリ名を、「ユーザー名.github.io」という風に設定します。例えば僕のユーザー名はyo5ukeなので、yo5uke.github.ioといった感じです。\n\n\n\n僕のはもう既に作ってあるので、警告が出ていますが…。\n\n\nそしてPublicにチェックが入っていることを確認したら、画面下まで行ってCreate repositoryをクリックします。\n一旦ここまでです。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#手順2rstudioでプロジェクトを作成",
    "href": "pages/tips/241213_create_website/index.html#手順2rstudioでプロジェクトを作成",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "手順2：RStudioでプロジェクトを作成",
    "text": "手順2：RStudioでプロジェクトを作成\nRStudioを開きます。そしたら画面右上のProject: (None)となっているところをクリックし、New Projectを選択します。\nさらにNew Directoryを選択したら、Quarto Websiteがありますので、これを選択して下さい。\nディレクトリ名は何でもよいのですが、GitHubのリポジトリ名と同じにしておけばよいと思います。\nその下にあるどこのサブディレクトリに置くかについては、どこでもよいと思いますのでお任せします。特にこだわりがなければC:/Users/ユーザーのところでいいと思います1。\nCreate a git repositoryにはチェックを入れてください。renvは知っている方でこだわりがあれば使えばよいと思いますが、なんだそれという方はチェックを外したままでよいと思います。\n1番下にあるvisual editorは便利だと思います。Quarto公式ガイド（英語ですが）に概要が書いてあるので、いちいちマークダウン記法を覚えるのがだるいなって人は使ってみてください。直感的なので、慣れるのにもそんなに時間はかからないと思います。\n必要な項目を選択し終えたらCreate Projectをクリックしてください。\nなにやらいろいろなファイルができているはずです。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#手順3githubとの連携",
    "href": "pages/tips/241213_create_website/index.html#手順3githubとの連携",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "手順3：GitHubとの連携",
    "text": "手順3：GitHubとの連携\n一度GitHubに戻ります。画面下部になにやらいろいろコードが書いてあると思います。2つブロックがあると思うのですが、そのうち下のブロックの以下のコードをコピーしてください。\ngit remote add origin https://github.com/user/user.github.io.git\ngit branch -M main\n下のブロックの上2行ということですね。これをコピーできたら、RStudioに戻ります。\nConsoleの右にTerminalがあると思うので、開きます。そしたら、そこに先ほどのコードをペーストしてください。\n（Macは知らないのですが、）WindowsだとCtrl + Shift + Vでないとペーストできません。Ctrl + Vだと^Vと表示されるだけなので気を付けてください。エンターで実行し、特に問題なくできたら次に移ります。\nRStudio上のEnvironmentの4つ右にGitというところがあります。ここを開くと、作られたファイルがずらーっと並んでいます。1番左の列にチェックボックスがあるので、一旦全部にチェックを入れ、その上にあるCommitを押してください。するともう1つウィンドウが出てくるので、その画面右上にあるCommit messageというところに作業内容についてコメントを付けます。別に適当で構いません。最初だったら「Initial commit」とかでいいと思います。\n書けたらCommitボタンを押して、コミットできたら×で画面を閉じ、先ほどコピーしてきたコードの下にあったgit push -u origin mainをコピーしてきて再びターミナルにペースト、実行します。\nこれでGitHub上にプッシュされました。GitHubに戻ってページを再度読み込むと、今プッシュしたファイルがアップされていることがわかります。\nちなみにコミットまでのやり方は毎度同じですが、2回目以降プッシュはコミットメッセージ欄の右上にあったPushボタンでできるようになります。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#小休憩",
    "href": "pages/tips/241213_create_website/index.html#小休憩",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "小休憩",
    "text": "小休憩\nここまでやればとりあえずウェブサイトを作る土台はできたことになります（公開のためにはまだ準備が必要ですが…）。\n試しにindex.qmdを開いてRenderをクリックしてみましょう。\nデフォルトの計算のコードが表示されると思いますが、一応ウェブサイトの形にはなっていると思います。\n\n\n\n\n\nこのようになればいい感じです。これをベースに形作っていくことになります。\nそれでは次の手順に進みます。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#手順4ファイルの中身を整理",
    "href": "pages/tips/241213_create_website/index.html#手順4ファイルの中身を整理",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "手順4：ファイルの中身を整理",
    "text": "手順4：ファイルの中身を整理\n\n.gitignore\n今試しにレンダリングしましたが、これを行うと_siteというフォルダが生成されます。これはGitで管理するとファイル数がとんでもないことになるので、.gitignoreファイルを編集し追跡から除外します。\n.gitignoreファイルを開き、1番下の行に/_site/と追記します。追記できたら保存して閉じてください2。\n\n\n_quarto.yml\n次に_quarto.ymlファイルを開きます。これはウェブサイトのデザインを設定する、重要なファイルです。\nわかりやすいところから設定していきましょう。例えば作成したページの左上に出てくる文字はtitleの部分で変更可能です。また、navbarは画面上部のナビゲーションバーですが、これをleftからrightにすれば、左寄せだったHomeやAboutが右寄せになります。\nwebsite:\n  title: \"俺のホームページ\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nちなみに先ほどレンダリングして表示されたブラウザのページを閉じていない場合、変更した_quarto.ymlを保存すれば、自動でそれが反映されます。再度レンダリングする必要はないということです。\nとりあえずポイントをまとめます。\n\ntitle：画面左上に表示されるタイトル\nleft：ナビゲーションバーの項目を左寄せに\n\nrightに変更可能。\n\nhref：作りたいページのファイルへのパス\n\nデフォルトではワーキングディレクトリにabout.qmdがあるためシンプルにabout.qmdと書かれているが、例えばpages/about.qmdのようにフォルダに入っている場合はpages/about.qmdと書く必要がある。\n\ntext：ナビゲーションバーに表示するテキスト\n\nまた、ページ上ではタイトルをクリックすれば自動的にindex.qmdに飛べるため、Homeを作らなくても問題ありません。\n僕の2024/12/13現在の設定（一部）は以下のようになっています。\nwebsite:\n  title: \"Yosuke Abe\"\n  navbar:\n    right: \n      - href: pages/about.qmd\n        text: About\n      - href: pages/tips/index.qmd\n        text: Tips\n      - href: pages/gis_in_r/index.qmd\n        text: GIS in {{&lt; fa brands r-project &gt;}}\n      - href: pages/blog/index.qmd\n        text: Blog\n      - href: pages/app/index.qmd\n        text: App\n{{&lt; fa brands r-project &gt;}}についてはこちらもご覧ください。\nナビゲーションバーを今設定したので、ここではフッターについても書くことにします。書き方は以下の通りです。\nwebsite:\n  title: \"俺のホームページ\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n  page-footer:\n    center: © 2024 Yosuke Abe\n    right: This website is created with Quarto\npage-footerでフッターを追加することができ、left, center, rightをそれぞれ設定可能です。\n_quarto.ymlは他にも設定できることはいろいろあるのですが、とりあえずここまでとします。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#手順5ページを作る",
    "href": "pages/tips/241213_create_website/index.html#手順5ページを作る",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "手順5：ページを作る",
    "text": "手順5：ページを作る\nいよいよページの作成に入ります。つまり、index.qmdを編集していきます。\nindex.qmdを開いて下さい。\n上部の---で囲まれている部分はYAMLヘッダーと言います。初期ではtitleのみが書かれていると思いますので、とりあえずここに好きなタイトルを入れてください。トップページなので名前が良いと思います。\n次にページのレイアウトを決めます。次のように書きます。\n---\ntitle: \"Yosuke Abe\"\nabout: \n  template: jolla\n  image: profile.png\n---\nここのtemplateの部分がデザインのテンプレートです。また、imageでは使う画像を指定できます。ディレクトリ内に保存しておいてください。\njollaを使うと以下のようなデザインになります。\n\n\n\n本文も適当なものに変えました。\n\n\n丸い画像が中心にあり、その下に中央揃えで文章がある形になります。\n他には以下のようなものがあります。\n\ntrestles\nsolana\nmarquee\nbroadside\n\nそれぞれどういうデザインかは、このページでご確認ください。\nAboutページも同様に編集することができ、すべてマークダウン記法で記述できます。\n実際どのように書いているのかは誰かのページを見るのが1番勉強になると僕は思っています。\n例えば僕のページはここから見れます。まだまだ拙い書き方ですが、参考になれば幸いです。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#手順6ページを追加する",
    "href": "pages/tips/241213_create_website/index.html#手順6ページを追加する",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "手順6：ページを追加する",
    "text": "手順6：ページを追加する\n初期段階ではindex.qmdとabout.qmdの2ファイルが用意されていますが、例えば研究者であればResearchページを作りたいと思います。\nこれは簡単で、RStudioの画面左上よりQuarto Documentを選択、タイトルだけ任意のものに変更してCreateをクリックします。\nそしたら先ほどと同様にページを編集し、research.qmdなどと名前を付けて保存しておきます。\n次に_quarto.ymlを再度開き、\nwebsite:\n  title: \"俺のホームページ\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n      - href: research.qmd\n        text: Research\n  page-footer:\n    center: © 2024 Yosuke Abe\n    right: This website is created with Quarto\nとして保存、最後にresearch.qmdをレンダリングすればOKです。\n必要なページが準備できたら、パブリッシュする準備に入ります。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#手順7新しいブランチを作成",
    "href": "pages/tips/241213_create_website/index.html#手順7新しいブランチを作成",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "手順7：新しいブランチを作成",
    "text": "手順7：新しいブランチを作成\nここからGitHubを利用してページを作成するのですが、そのためにgh-pagesというブランチを作成します。ブランチについての説明は省略しますが、必要な手順です。\nまず、RStudioのGit欄からすべての変更をコミットしておいてください。再度確認ですが、\n\nStagedのチェック欄にチェックを入れる\nその上のCommitをクリック\n右上のボックスにコミットメッセージを入れる（何でもよい）\nボックスの右下のCommitをクリック\nさらにウィンドウが出てくるのでCloseをクリック\nプッシュする\n\nコミットまででいいのですが、別にプッシュまでしてしまってよいと思います。\nコミットできたら、コンソール横のターミナルを開き、以下のコマンドを実行していきます。\ngit checkout --orphan gh-pages\ngit reset --hard\ngit commit --allow-empty -m \"Initialising gh-pages branch\"\ngit push origin gh-pages\n最後まで実行できたら、Git欄の右上にgh-pagesとあると思うので、そこをクリックしてmainに戻っておきます。\n\n\n\n右上の赤線の部分です"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#手順8github上でパブリッシュの準備",
    "href": "pages/tips/241213_create_website/index.html#手順8github上でパブリッシュの準備",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "手順8：GitHub上でパブリッシュの準備",
    "text": "手順8：GitHub上でパブリッシュの準備\n再度GitHubのリポジトリページを開きます。\n画面上部にSettingとあるので、クリックします。するとサイドバーの真ん中少し下あたりにPagesがあるので、そこをクリックします。\nBuild and Deploymentの部分で、以下の画像のように変更します。\n\n\n\ngh-pagesと/(root)に変更します\n\n\n変更したらSaveしておいてください。\n次はいよいよパブリッシュです。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#手順9コマンドでパブリッシュ",
    "href": "pages/tips/241213_create_website/index.html#手順9コマンドでパブリッシュ",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "手順9：コマンドでパブリッシュ",
    "text": "手順9：コマンドでパブリッシュ\nRStudioに戻ります。\n再度ターミナルを開き、以下のコマンドを入力、実行してください。\nquarto publish gh-pages\nY/nが問われますが、無論Yで進めてください。\n少し時間がかかりますが、最後まで回り切ったら、ページが公開され、全世界の人が見られるようになります。\nとはいっても、最初の方は検索してもヒットしないと思いますが…。\n定期的に調べられることが重要なのかもしれません(^^;)\nGoogle Analyticsを使ってアクセス状況を可視化することもできるのですが、これはまた別でまとめたいと思います。"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#無事公開完了",
    "href": "pages/tips/241213_create_website/index.html#無事公開完了",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "無事公開完了！！",
    "text": "無事公開完了！！\n以上、個人のホームページを作る手順をまとめました。\n特にGitのところが面倒かもしれませんが、ページを作成するコード自体はマークダウンで書くことができ、難易度もそう高くありません。\n普段QuartoやR Markdownを使っている方は馴染みやすいのではないでしょうか。\n今回はベーシックな部分に絞って解説しましたが、ゆくゆく応用もアップしたいと思いますので、そちらも参考にしていただければと思います。\nそれでは！"
  },
  {
    "objectID": "pages/tips/241213_create_website/index.html#footnotes",
    "href": "pages/tips/241213_create_website/index.html#footnotes",
    "title": "【Quarto & RStudio】ウェブサイトを作る！",
    "section": "注",
    "text": "注\n\n\nWindowsの場合ですが…。↩︎\nGitの一欄から_siteが消えたと思います。↩︎"
  },
  {
    "objectID": "pages/tips/241201_icon/index.html#はじめに",
    "href": "pages/tips/241201_icon/index.html#はじめに",
    "title": "Quartoでアイコンを挿入したい",
    "section": "はじめに",
    "text": "はじめに\nQuartoを使ってHTMLファイルを作成していると、時々アイコンを入れたい場合が出てきます。\n例えばソースコードを提示したいとき、「コード」としたいわけです。\nこれはQuartoの拡張機能を使うことでできるようになります。\n今回は導入方法と記述方法を簡潔にまとめます。"
  },
  {
    "objectID": "pages/tips/241201_icon/index.html#拡張機能",
    "href": "pages/tips/241201_icon/index.html#拡張機能",
    "title": "Quartoでアイコンを挿入したい",
    "section": "拡張機能",
    "text": "拡張機能\n\nインストール\n使用するのは主に2つ、Font AwsomeとIconifyです。Font Awsomeだけでもほとんど困ることはありませんが、Iconifyも使うとFont Awsomeの不足をだいぶ補完することができると思います。\n詳しくは以下のGitHubページを見てください。\n\n\n\n\n\n\nFont Awsome\n\n\n\n\n\n\n\n\n\nIconify\n\n\n\nまず、VSCodeなりRStudioなりでプロジェクトを作成して下さい12。\n次にVSCodeではCtrl + Jでターミナルを開き、RStudioではConsole横のTerminalパネルを開いて、以下を打ち込みます。\n# Font Awsome\nquarto add quarto-ext/fontawesome\n\n# Iconify\nquarto add mcanouil/quarto-iconify\n途中Yes/Noなど聞かれるかもしれませんが、全部Yesで大丈夫です。\n準備はこれだけです。\n\n\n 書く\n書き方は、以下です。本文に直接入れてください。\nFont Awsomeの場合\n{{&lt; fa pen-to-square &gt;}}\n\nIconifyの場合\n{{&lt; iconify lucide:square-pen &gt;}}\nやが出力されます。\n書き方の注意として、まず、{{&lt; fa &gt;}}や{{&lt; iconify &gt;}}の部分に任意性はありません。ここは必ず上の通り書いてください。また、スペースがあることにも注意してください。\nアイコンの種類は、以下のページから探し、アイコンの名前をコピペすればOKです。\n\n\n\n\n\n\nFont Awsome 一覧\n\n\n\n\n\n\n\n\n\nIconify 一覧\n\n\n\n僕は基本Font Awsomeで探し、なければIconifyも見てみる、という方針でいつも使っています。使いやすさはほぼ同じだと思うので、いろいろ見比べてみてください。\n\n\n注意点\n細かい点は上で出したGitHubページを見てほしいのですが、よく使うブランドアイコンについての注意点をここでは述べます。\n例えばGitHubやXなどブランドのアイコンを使う際には、アイコン名の前にbrandsと入れる必要があります。\n{{&lt; fa brands github &gt;}}を見てみてください。\nとすると、\nを見てみて下さい。\nと出力されます。\nTwitterはtwitter、Xはx-twitter、Rはr-projectです。いろいろ調べて試してみてください。"
  },
  {
    "objectID": "pages/tips/241201_icon/index.html#おわりに",
    "href": "pages/tips/241201_icon/index.html#おわりに",
    "title": "Quartoでアイコンを挿入したい",
    "section": "おわりに",
    "text": "おわりに\n今回はFont AwsomeとIconifyを使ったアイコンの挿入方法をご紹介しました。\nウェブサイトを作る際にも重宝します。上手に使ってデザイン性を高めていきましょう"
  },
  {
    "objectID": "pages/tips/241201_icon/index.html#footnotes",
    "href": "pages/tips/241201_icon/index.html#footnotes",
    "title": "Quartoでアイコンを挿入したい",
    "section": "注",
    "text": "注\n\n\nRのプロジェクトについてはこちらを参照してください。↩︎\nVSCodeでは画面上部「フォルダ」→「フォルダーを開く」で作業フォルダを開く、RStudioではワーキングディレクトリを設定するだけでもできるかもしれませんが、僕はやったことないのでご了承ください。↩︎"
  },
  {
    "objectID": "pages/tips/240525_vscode_github/index.html#はじめに",
    "href": "pages/tips/240525_vscode_github/index.html#はじめに",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "はじめに",
    "text": "はじめに\n以前 VSCode を用いた R 環境の構築方法についてご紹介しました。\nその中で GitHub についても触れましたが、今回は VSCode で GitHub を使った作業の流れを詳しく紹介します。\n基本的に共同研究を想定していますが、個人で使う場合も同様の流れで作業を進めることができます。\n具体的な違いとして、個人作業の場合はブランチを作成したりしなくてもよいと思いますが、共同研究の場合はブランチを作成して作業を進めることが一般的です。"
  },
  {
    "objectID": "pages/tips/240525_vscode_github/index.html#事前準備",
    "href": "pages/tips/240525_vscode_github/index.html#事前準備",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "事前準備",
    "text": "事前準備\nこちらの記事の手順は踏んでいるとします。\n\nGitHub アカウントを作成している\nVSCode で GitHub にログインする\nコラボレーターとして登録する\n\n招待の詳細については記事をご覧ください。"
  },
  {
    "objectID": "pages/tips/240525_vscode_github/index.html#ワークフロー",
    "href": "pages/tips/240525_vscode_github/index.html#ワークフロー",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "ワークフロー",
    "text": "ワークフロー\n\n1. リポジトリをクローンする\n\nVSCode を開き、WSL に接続\n画面左のアイコンで上から3つ目の「ソース管理」を選択\n「リポジトリを複製」、「GitHub から複製」を順に選択\nクローンしたいリポジトリを選択しOK をクリック1\n\nリポジトリが表示されない場合は「ユーザー名/リポジトリ名」の書き方でクローンできます。\n\nクローンするディレクトリを選択\n\n特に理由がなければそのまま OK をクリックして下さい。\n\nクローンされる\n\n自動でクローンしたリポジトリが開かれます。\n開発コンテナを使用する場合は「開発コンテナで再度開く」と出るので、選択してください。\n\n\n\n\n2. ブランチを作成する\n作業ブランチを作成します。デフォルトでは main ブランチになっているので、作業ブランチを作成して作業を進めます。\nブランチは、イメージで言うと「自分の作業用のコピー」です。そっくりそのままファイル等をコピーして作業を行い、完成したら main にくっつけてあげるという感じです。\nmain ブランチは基本的に完成品を置いておくイメージなので、各自でブランチを作成して作業を進めてください。\n\n画面左下の「main」をクリック\n「新しいブランチを作成」を選択\nブランチ名を入力し、Enter キーを押す\n\nブランチ名は、作業内容がわかるように命名するとよいと思います。\nしかし何でも大丈夫です。\n\nブランチが作成される\n\n画面左下に作成したブランチ名が表示されます。\n\n\nこれでブランチが作成されました。作業を進めていきましょう。\n\n\n3. ファイルを編集する\n作業を進めます。コードを書いたりデータを追加したり、何らかの作業が行われたとします。\n\n\n4. 変更をコミットする\n作業が終わったら、変更をコミットします。\n\n画面左のアイコンで上から3つ目の「ソース管理」を選択\nコミットするファイルを選択\n\nカーソルをファイルに当てると「+」が表示されるので、クリックしてステージングします。\nすべてのファイルをステージングする場合は「変更」の右側にある「+」をクリックすれば OK です。\n\nコミットメッセージを入力\n\nコミットメッセージは、変更内容がわかるように簡潔に書くとよいと思います。\n例: Add new data\n\n「✓コミット」をクリック\n\nコミットが完了します。\n\n\n\n\n5. プッシュする\nコミットした内容をリモートリポジトリに反映させます。\n\n「ソース管理」の右にある「…」をクリック\n\nカーソルを当てると出てきます。\n\n「プッシュ」を選択\n\nブランチを公開するか聞かれたら、OK をクリックしてください。\nプッシュが完了します。\n\n\n\n\n\n\n\nこれでリモートリポジトリに変更が反映されました。\nコミットしてすぐプッシュしたい場合は、コミットメッセージを入力した後に「✓コミット」の右側にある下矢印から「コミットしてプッシュ」を選択することで一括で行えます。\n\n\n6. プルリクエストを作成する\n作業が終わったら、プルリクエストを作成します。\n現段階では、自分のブランチに反映させただけなので、これを main ブランチに反映させる必要があります。\n\n\n\n\n\n\nこの手続きを踏む理由\n\n\n\nプルリクエストを作成する理由は、他の人に自分の作業内容を確認してもらうためです。\nプルリクエストを作成することで、他の人が自分の作業内容を確認し、問題がなければ main ブランチに反映させることができます。\nもし全員が main ブランチに直接コミットしてしまうと、他の人の作業とコンフリクトする場合があったり、誤って動かないコードで上書きされてしまったりなど、問題が発生する可能性があります。\nそのため、プルリクエストを作成して他の人に確認してもらいながら、問題がなければ main ブランチに反映させるという手順を踏むことが一般的です。\n\n\n\nGitHub にアクセスし、リポジトリを開く\n「Compare & pull request」を選択\n\n以下のようなバナーが表示されるので、クリックしてください。\n\n\n\n\n\n\n\n\nプルリクエストの内容を入力\n\n「Add a title」にはコミットメッセージが入力されていると思います。\n「Add a description」には、必要に応じて作業内容や変更点などを詳しく書くとよいと思います。\n\n「Create pull request」をクリック\n\nプルリクエストが作成されます。\n\n\nこれでプルリクエストが作成されました。他の人に確認してもらいましょう。\n\n\n7. プルリクエストをマージする\nプルリクエストを作成したら、他の人に確認してもらい、問題がなければマージします。\n\nリポジトリのページにアクセスし、「Pull requests」を開く\nリクエストを選択して開く\n問題がなければ「Merge pull request」をクリック\n\n問題ない場合「This branch has no conflicts with the base branch」と表示されます。\n\n\n\n\n「Confirm merge」をクリック\n\nマージが完了します。\n\n\n\n\n8. ブランチを削除する\nプルリクエストがマージされたら、作業ブランチを削除します。ちなみにブランチは作業ごとに新しいものを作り、プルリクエストがマージされたら削除するという流れが推奨されるようです。\n\nVSCode でリポジトリを開く\n画面左側のアイコンから「ソース管理」を選択\n「ソース管理」の右にある「…」をクリック\n「ブランチ」から「ブランチを削除」を選択\n削除するブランチを選択\n\n削除するブランチを選択して OK をクリック\n\nブランチが削除される\n\n画面左下のブランチ名が main になっていることを確認してください。\n\n\nこれで作業ブランチが削除されました。次回別の作業を行うときは、新しいブランチを作成して作業を進めてください。\n\n\n9. ローカルリポジトリを更新する\nリモートリポジトリに変更が反映されたので、他の人はローカルリポジトリを更新します。\n\nVSCode でリポジトリを開く\n画面左下のブランチが main であれば自分の作業ブランチに切り替える\n\n画面左下のブランチ名をクリックして、切り替えてください。\n\n画面左のアイコンから「ソース管理」を選択\n「変更の同期」と出ていたらそれを、出ていなければ「…」をクリックして「プル」を選択\n\nプルすることでリモートリポジトリの変更をローカルリポジトリに反映させます。\nプルが完了します。ファイルを見てみてください。\n\n\nこれで他の人の変更が反映されたローカルリポジトリが得られました。\nここからは再び作業を進め、作業をサイクルさせていきます。"
  },
  {
    "objectID": "pages/tips/240525_vscode_github/index.html#まとめ",
    "href": "pages/tips/240525_vscode_github/index.html#まとめ",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "まとめ",
    "text": "まとめ\nVSCode で GitHub を使った作業の流れを紹介しました。\n基本的には、リポジトリをクローンして作業ブランチを作成し、作業を進め、変更をコミットしてプッシュし、プルリクエストを作成してマージするという流れです。\n共同研究を行う場合は、このような流れで作業を進めることで、コンフリクトなどを回避しながら効率的に作業を進めることができます。\nぜひ参考にしてみてください。"
  },
  {
    "objectID": "pages/tips/240525_vscode_github/index.html#footnotes",
    "href": "pages/tips/240525_vscode_github/index.html#footnotes",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "注",
    "text": "注\n\n\nEnter キーでも OK です。↩︎"
  },
  {
    "objectID": "pages/tips/240531_wsl_memory/index.html#はじめに",
    "href": "pages/tips/240531_wsl_memory/index.html#はじめに",
    "title": "【WSL】割り当てるメモリを増やす方法",
    "section": "はじめに",
    "text": "はじめに\nWSL & Docker を使用していて、使えるメモリを増やしたい、そんな時にどうすればよいのか解説します。\n上にも書いてあるように、デフォルトでは PC の半分のメモリが WSL には割り当てられています。\nすなわちメモリが 8GB の PC であれば 4GB が、16GB の PC であれば 8GB が割り当てられています。\nプロジェクトによってはより多くのメモリを使いたいこともあると思うので、以下の方法を実行してみて下さい。\nちなみに Mac では Docker Desktop の設定から Resources で変更できます。"
  },
  {
    "objectID": "pages/tips/240531_wsl_memory/index.html#手順",
    "href": "pages/tips/240531_wsl_memory/index.html#手順",
    "title": "【WSL】割り当てるメモリを増やす方法",
    "section": "手順",
    "text": "手順\n\nエクスプローラーを開く\nc: → ユーザー → 自分のユーザー と進む\n\n僕の場合だったら C:\\Users\\yo5uk\n\n左上の「新規作成」から「テキストドキュメント」を選び、ファイル名を .wslconfig とする\n\n拡張子も全て消して名前を付けてください。.wslconfig.txt ではだめです。\nもし拡張子がデフォルトで表示されない設定の場合は、表示されるよう設定を変更してから行って下さい。\nエクスプローラー右上の「表示」→「表示」→「ファイル名拡張子」をオンにします。\n\nメモ帳など任意のテキストエディタで開く\n中身を以下のように記述\n\nGB の部分は好きに置き換えてください。\n8GB のPC を使っている場合には、もちろん 12GB は割り当てられません。\n\n\n[wsl2]\nmemory=12GB\nswap=8GB\n\n保存して閉じる\n\n以上です。これで WSL に割り当てられるメモリが増えました。\nちなみに memory は読んで字のごとくメモリを表しますが、ここでの swap は、WSL2 が使用するスワップファイルのサイズを設定することを意味します。スワップファイルを適切に設定することで、物理メモリが不足した場合でもシステムの安定性を維持することができます。"
  },
  {
    "objectID": "pages/tips/240531_wsl_memory/index.html#おわりに",
    "href": "pages/tips/240531_wsl_memory/index.html#おわりに",
    "title": "【WSL】割り当てるメモリを増やす方法",
    "section": "おわりに",
    "text": "おわりに\nWSL に割り当てるメモリを増やす方法をご紹介しました。\nプロジェクトによっては必要になることもあると思うので、ご参考まで。"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/demo/demo3.html",
    "href": "pages/tips/240629_write_thesis/demo/demo3.html",
    "title": "【PDF】Quarto で論文を書く",
    "section": "",
    "text": "図 1 が出力した図です。\n\n\n\n\n\n\n図 1: iris を使用したプロット"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/demo/demo1.html#見出し2",
    "href": "pages/tips/240629_write_thesis/demo/demo1.html#見出し2",
    "title": "【PDF】Quarto で論文を書く",
    "section": "見出し2",
    "text": "見出し2\n\n見出し3\n本文です。セクションに応じて見出しをつけることができます。基本的には3段階までの見出しを使います。\n\n箇条書き1\n\n箇条書き2\n\n箇条書き3\n\n\n\n箇条書きを使うときは、ハイフンとスペースを入れてください。2段階目、3段階目を使用するときは、半角スペース4つを入れてください。\n\n番号付きリスト1\n\n箇条書き\n\n番号付きリスト2\n\n番号付きリストを使うときは、数字とピリオドとスペースを入れてください。\nまた、改行するときは空行を入れなければなりません。\n文中で数式を使いたいときは、$ で囲んでください。例えば、\\(y = ax + b\\) のように記述します。\n数式を別行で書きたいときは、$$ で囲んでください。例えば、\n\\[\ny = ax + b\n\\tag{1}\\]\nのように記述します。数式にラベルをつけることもできます。#eq- の後にラベル名を記述します。\n数式を引用するときは、@eq-equation-name のように記述します。"
  },
  {
    "objectID": "pages/tips/240414_benri_seirei/index.html#はじめに",
    "href": "pages/tips/240414_benri_seirei/index.html#はじめに",
    "title": "政令指定都市・中核市の整理",
    "section": "はじめに",
    "text": "はじめに\nこれを作ったきっかけは、政令指定都市ダミーや中核市ダミーをサクサクッと作りたかったからです。\nまた、データによっては\n\n\n\n\n\n\n\n\n都道府県\n市区町村\nID\n\n\n\n\n北海道\n札幌市中央区\n01101\n\n\n北海道\n札幌市北区\n01102\n\n\n北海道\n札幌市東区\n01103\n\n\n\n\n\n\n\nと、政令指定都市が市単位ではなく区単位でしかなかったりします。要は、「札幌市」だけのような行が欲しいということです。\nデータによってはもう少しいじらなければならないものの、dplyr::bind_rows()を使って市のデータを追加できたりします。"
  },
  {
    "objectID": "pages/tips/240414_benri_seirei/index.html#コード",
    "href": "pages/tips/240414_benri_seirei/index.html#コード",
    "title": "政令指定都市・中核市の整理",
    "section": "コード",
    "text": "コード\nまとめたコードは以下です1。\n\n# 政令指定都市一覧\nname_seirei = c(\"札幌市\", \"仙台市\", \"さいたま市\", \"千葉市\", \"横浜市\", \"川崎市\", \n                \"相模原市\", \"新潟市\", \"静岡市\", \"浜松市\", \"名古屋市\", \"京都市\", \n                \"大阪市\", \"堺市\", \"神戸市\", \"岡山市\", \"広島市\", \"北九州市\", \n                \"福岡市\", \"熊本市\")\n\n# 政令指定都市（特別区含む）の市町村コード\nseirei_city &lt;- tibble::tibble(\n  name_pref = c(\"北海道\", \"宮城県\", \"埼玉県\", \"千葉県\", \"東京都\", \"神奈川県\", \n                \"神奈川県\", \"神奈川県\", \"新潟県\", \"静岡県\", \"静岡県\", \"愛知県\", \n                \"京都府\", \"大阪府\", \"大阪府\", \"兵庫県\", \"岡山県\", \"広島県\", \n                \"福岡県\", \"福岡県\", \"熊本県\"), \n  name_muni = c(\"札幌市\", \"仙台市\", \"さいたま市\", \"千葉市\", \"特別区\", \"横浜市\", \n                \"川崎市\", \"相模原市\", \"新潟市\", \"静岡市\", \"浜松市\", \"名古屋市\", \n                \"京都市\", \"大阪市\", \"堺市\", \"神戸市\", \"岡山市\", \"広島市\", \n                \"北九州市\", \"福岡市\", \"熊本市\"), \n  id_muni   = c(\"01100\", \"04100\", \"11100\", \"12100\", \"13100\", \"14100\", \"14130\", \n                \"14150\", \"15100\", \"22100\", \"22130\", \"23100\", \"26100\", \"27100\", \n                \"27140\", \"28100\", \"33100\", \"34100\", \"40100\", \"40130\", \"43100\")\n)\n\n# 中核市一覧\nchukaku &lt;- c(\"宇都宮市\", \"金沢市\", \"岐阜市\", \"姫路市\", \"鹿児島市\", \"秋田市\", \"郡山市\", \n             \"和歌山市\", \"長崎市\", \"大分市\", \"豊田市\", \"福山市\", \"高知市\", \"宮崎市\", \n             \"いわき市\", \"長野市\", \"豊橋市\", \"高松市\", \"旭川市\", \"松山市\", \"横須賀市\", \n             \"奈良市\", \"倉敷市\", \"川越市\", \"船橋市\", \"岡崎市\", \"高槻市\", \"東大阪市\", \n             \"富山市\", \"函館市\", \"下関市\", \"青森市\", \"盛岡市\", \"柏市\", \"西宮市\", \n             \"久留米市\", \"前橋市\", \"大津市\", \"尼崎市\", \"高崎市\", \"豊中市\", \"那覇市\", \n             \"枚方市\", \"八王子市\", \"越谷市\", \"呉市\", \"佐世保市\", \"八戸市\", \"福島市\", \n             \"川口市\", \"八尾市\", \"明石市\", \"鳥取市\", \"松江市\", \"山形市\", \"福井市\", \n             \"甲府市\", \"寝屋川市\", \"水戸市\", \"吹田市\", \"松本市\", \"一宮市\")\n\n市区町村 という列に市区町村名が入っているとして、dplyr::filter(市区町村 %in% name_seirei) のようにすれば、政令指定都市だけをとりだすことができます。\nまた、dplyr::if_else(市区町村 %in% name_seirei, 1, 0) のようにすれば、ダミーも簡単に作れます。\ndplyr::bind_rows() |&gt; dplyr::arrange() をすれば、市レベルのデータを追加できます（ついでに昇順に並べ替えもしています）。\nこんな感じになります。\n\n\n\n\n\n\n\n\n都道府県\n市区町村\nID\n\n\n\n\n北海道\n札幌市\n01100\n\n\n北海道\n札幌市中央区\n01101\n\n\n北海道\n札幌市北区\n01102\n\n\n北海道\n札幌市東区\n01103"
  },
  {
    "objectID": "pages/tips/240414_benri_seirei/index.html#政令指定都市の区単位のデータ",
    "href": "pages/tips/240414_benri_seirei/index.html#政令指定都市の区単位のデータ",
    "title": "政令指定都市・中核市の整理",
    "section": "政令指定都市の区単位のデータ",
    "text": "政令指定都市の区単位のデータ\n政令指定都市の区単位のデータを作成しました。市の自治体コードも追加してあるので、区単位のデータを市単位で集計したいときに便利です。\n基準は国勢調査年の10月1日としてあります2。また、2015年10月1日から2020年9月30日までは特に変更がなかったので（2015年のデータと2020年のデータは同じ）、データに含めていません。\nまた、国勢調査基準で考えているので、最新のデータは反映していません。具体的には、2024年1月1日の浜松市の再編が反映されていません。\n更新：2025年3月20日  浜松市の最新のデータを使いたいことがあったので、id_ward2024を追加しました。浜松市北区が分割して再編されていたのですが、市単位で集計すれば結局浜松市で一緒かなと思ったので、とりあえず大部分が含まれる浜名区として反映しています。\n\nseirei_ward &lt;- tibble::tibble(\n  id_origin = c(\"01101\", \"01102\", \"01103\", \"01104\", \"01105\", \"01106\", \"01107\", \"01108\", \"01109\", \"01110\", \"04101\", \"04102\", \"04103\", \"04104\", \"04105\", \"11205\", \"11205\", \"11205\", \"11205\", \"11220\", \"11204\", \"11204\", \"11204\", \"11204\", \"11213\", \"12101\", \"12102\", \"12103\", \"12104\", \"12105\", \"12106\", \"14101\", \"14102\", \"14103\", \"14104\", \"14105\", \"14106\", \"14107\", \"14108\", \"14109\", \"14110\", \"14111\", \"14112\", \"14113\", \"14114\", \"14115\", \"14116\", \"14117\", \"14118\", \"14131\", \"14132\", \"14133\", \"14134\", \"14135\", \"14136\", \"14137\", \"14209\", \"14209\", \"14209\", \"15201\", \"15201\", \"15201\", \"15201\", \"15201\", \"15201\", \"15201\", \"15201\", \"22201\", \"22201\", \"22201\", \"22202\", \"22202\", \"22202\", \"22202\", \"22202\", \"22202\", \"22202\", \"23101\", \"23102\", \"23103\", \"23104\", \"23105\", \"23106\", \"23107\", \"23108\", \"23109\", \"23110\", \"23111\", \"23112\", \"23113\", \"23114\", \"23115\", \"23116\", \"26101\", \"26102\", \"26103\", \"26104\", \"26105\", \"26106\", \"26107\", \"26108\", \"26109\", \"26110\", \"26111\", \"27102\", \"27103\", \"27104\", \"27106\", \"27107\", \"27108\", \"27109\", \"27111\", \"27113\", \"27114\", \"27115\", \"27116\", \"27117\", \"27118\", \"27119\", \"27120\", \"27121\", \"27122\", \"27123\", \"27124\", \"27125\", \"27126\", \"27127\", \"27128\", \"27201\", \"27201\", \"27201\", \"27201\", \"27201\", \"27201\", \"27201\", \"28101\", \"28102\", \"28105\", \"28106\", \"28107\", \"28108\", \"28109\", \"28110\", \"28111\", \"33201\", \"33201\", \"33201\", \"33201\", \"34101\", \"34102\", \"34103\", \"34104\", \"34105\", \"34106\", \"34107\", \"34108\", \"40101\", \"40103\", \"40105\", \"40106\", \"40107\", \"40108\", \"40109\", \"40131\", \"40132\", \"40133\", \"40134\", \"40135\", \"40136\", \"40137\", \"43201\", \"43201\", \"43201\", \"43201\", \"43201\"), \n  name_muni2020 = c(\"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"仙台市\", \"仙台市\", \"仙台市\", \"仙台市\", \"仙台市\", \"さいたま市\", \"さいたま市\", \"さいたま市\", \"さいたま市\", \"さいたま市\", \"さいたま市\", \"さいたま市\", \"さいたま市\", \"さいたま市\", \"さいたま市\", \"千葉市\", \"千葉市\", \"千葉市\", \"千葉市\", \"千葉市\", \"千葉市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"川崎市\", \"川崎市\", \"川崎市\", \"川崎市\", \"川崎市\", \"川崎市\", \"川崎市\", \"相模原市\", \"相模原市\", \"相模原市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"静岡市\", \"静岡市\", \"静岡市\", \"浜松市\", \"浜松市\", \"浜松市\", \"浜松市\", \"浜松市\", \"浜松市\", \"浜松市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"堺市\", \"堺市\", \"堺市\", \"堺市\", \"堺市\", \"堺市\", \"堺市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"岡山市\", \"岡山市\", \"岡山市\", \"岡山市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"北九州市\", \"北九州市\", \"北九州市\", \"北九州市\", \"北九州市\", \"北九州市\", \"北九州市\", \"福岡市\", \"福岡市\", \"福岡市\", \"福岡市\", \"福岡市\", \"福岡市\", \"福岡市\", \"熊本市\", \"熊本市\", \"熊本市\", \"熊本市\", \"熊本市\"), \n  name_muni2000 = c(\"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"札幌市\", \"仙台市\", \"仙台市\", \"仙台市\", \"仙台市\", \"仙台市\", \"大宮市\", \"大宮市\", \"大宮市\", \"大宮市\", \"与野市\", \"浦和市\", \"浦和市\", \"浦和市\", \"浦和市\", \"岩槻市\", \"千葉市\", \"千葉市\", \"千葉市\", \"千葉市\", \"千葉市\", \"千葉市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"横浜市\", \"川崎市\", \"川崎市\", \"川崎市\", \"川崎市\", \"川崎市\", \"川崎市\", \"川崎市\", \"相模原市\", \"相模原市\", \"相模原市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"新潟市\", \"静岡市\", \"静岡市\", \"静岡市\", \"浜松市\", \"浜松市\", \"浜松市\", \"浜松市\", \"浜松市\", \"浜松市\", \"浜松市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"名古屋市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"京都市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"大阪市\", \"堺市\", \"堺市\", \"堺市\", \"堺市\", \"堺市\", \"堺市\", \"堺市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"神戸市\", \"岡山市\", \"岡山市\", \"岡山市\", \"岡山市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"広島市\", \"北九州市\", \"北九州市\", \"北九州市\", \"北九州市\", \"北九州市\", \"北九州市\", \"北九州市\", \"福岡市\", \"福岡市\", \"福岡市\", \"福岡市\", \"福岡市\", \"福岡市\", \"福岡市\", \"熊本市\", \"熊本市\", \"熊本市\", \"熊本市\", \"熊本市\"), \n  name_ward2024 = c(\"中央区\", \"北区\", \"東区\", \"白石区\", \"豊平区\", \"南区\", \"西区\", \"厚別区\", \"手稲区\", \"清田区\", \"青葉区\", \"宮城野区\", \"若林区\", \"太白区\", \"泉区\", \"西区\", \"北区\", \"大宮区\", \"見沼区\", \"中央区\", \"桜区\", \"浦和区\", \"南区\", \"緑区\", \"岩槻区\", \"中央区\", \"花見川区\", \"稲毛区\", \"若葉区\", \"緑区\", \"美浜区\", \"鶴見区\", \"神奈川区\", \"西区\", \"中区\", \"南区\", \"保土ヶ谷区\", \"磯子区\", \"金沢区\", \"港北区\", \"戸塚区\", \"港南区\", \"旭区\", \"緑区\", \"瀬谷区\", \"栄区\", \"泉区\", \"青葉区\", \"都筑区\", \"川崎区\", \"幸区\", \"中原区\", \"高津区\", \"多摩区\", \"宮前区\", \"麻生区\", \"緑区\", \"中央区\", \"南区\", \"北区\", \"東区\", \"中央区\", \"江南区\", \"秋葉区\", \"南区\", \"西区\", \"西蒲区\", \"葵区\", \"駿河区\", \"清水区\", \"中央区\", \"中央区\", \"中央区\", \"中央区\", \"浜名区\", \"浜名区\", \"天竜区\", \"千種区\", \"東区\", \"北区\", \"西区\", \"中村区\", \"中区\", \"昭和区\", \"瑞穂区\", \"熱田区\", \"中川区\", \"港区\", \"南区\", \"守山区\", \"緑区\", \"名東区\", \"天白区\", \"北区\", \"上京区\", \"左京区\", \"中京区\", \"東山区\", \"下京区\", \"南区\", \"右京区\", \"伏見区\", \"山科区\", \"西京区\", \"都島区\", \"福島区\", \"此花区\", \"西区\", \"港区\", \"大正区\", \"天王寺区\", \"浪速区\", \"西淀川区\", \"東淀川区\", \"東成区\", \"生野区\", \"旭区\", \"城東区\", \"阿倍野区\", \"住吉区\", \"東住吉区\", \"西成区\", \"淀川区\", \"鶴見区\", \"住之江区\", \"平野区\", \"北区\", \"中央区\", \"堺区\", \"中区\", \"東区\", \"西区\", \"南区\", \"北区\", \"美原区\", \"東灘区\" , \"灘区\", \"兵庫区\", \"長田区\", \"須磨区\", \"垂水区\", \"北区\", \"中央区\", \"西区\", \"北区\", \"中区\", \"東区\", \"南区\", \"中区\", \"東区\", \"南区\", \"西区\", \"安佐南区\", \"安佐北区\", \"安芸区\", \"佐伯区\", \"門司区\", \"若松区\", \"戸畑区\", \"小倉北区\", \"小倉南区\", \"八幡東区\", \"八幡西区\", \"東区\", \"博多区\", \"中央区\", \"南区\", \"西区\", \"城南区\", \"早良区\", \"中央区\", \"東区\", \"西区\", \"南区\", \"北区\"), \n  name_ward2020 = c(\"中央区\", \"北区\", \"東区\", \"白石区\", \"豊平区\", \"南区\", \"西区\", \"厚別区\", \"手稲区\", \"清田区\", \"青葉区\", \"宮城野区\", \"若林区\", \"太白区\", \"泉区\", \"西区\", \"北区\", \"大宮区\", \"見沼区\", \"中央区\", \"桜区\", \"浦和区\", \"南区\", \"緑区\", \"岩槻区\", \"中央区\", \"花見川区\", \"稲毛区\", \"若葉区\", \"緑区\", \"美浜区\", \"鶴見区\", \"神奈川区\", \"西区\", \"中区\", \"南区\", \"保土ヶ谷区\", \"磯子区\", \"金沢区\", \"港北区\", \"戸塚区\", \"港南区\", \"旭区\", \"緑区\", \"瀬谷区\", \"栄区\", \"泉区\", \"青葉区\", \"都筑区\", \"川崎区\", \"幸区\", \"中原区\", \"高津区\", \"多摩区\", \"宮前区\", \"麻生区\", \"緑区\", \"中央区\", \"南区\", \"北区\", \"東区\", \"中央区\", \"江南区\", \"秋葉区\", \"南区\", \"西区\", \"西蒲区\", \"葵区\", \"駿河区\", \"清水区\", \"中区\", \"東区\", \"西区\", \"南区\", \"北区\", \"浜北区\", \"天竜区\", \"千種区\", \"東区\", \"北区\", \"西区\", \"中村区\", \"中区\", \"昭和区\", \"瑞穂区\", \"熱田区\", \"中川区\", \"港区\", \"南区\", \"守山区\", \"緑区\", \"名東区\", \"天白区\", \"北区\", \"上京区\", \"左京区\", \"中京区\", \"東山区\", \"下京区\", \"南区\", \"右京区\", \"伏見区\", \"山科区\", \"西京区\", \"都島区\", \"福島区\", \"此花区\", \"西区\", \"港区\", \"大正区\", \"天王寺区\", \"浪速区\", \"西淀川区\", \"東淀川区\", \"東成区\", \"生野区\", \"旭区\", \"城東区\", \"阿倍野区\", \"住吉区\", \"東住吉区\", \"西成区\", \"淀川区\", \"鶴見区\", \"住之江区\", \"平野区\", \"北区\", \"中央区\", \"堺区\", \"中区\", \"東区\", \"西区\", \"南区\", \"北区\", \"美原区\", \"東灘区\" , \"灘区\", \"兵庫区\", \"長田区\", \"須磨区\", \"垂水区\", \"北区\", \"中央区\", \"西区\", \"北区\", \"中区\", \"東区\", \"南区\", \"中区\", \"東区\", \"南区\", \"西区\", \"安佐南区\", \"安佐北区\", \"安芸区\", \"佐伯区\", \"門司区\", \"若松区\", \"戸畑区\", \"小倉北区\", \"小倉南区\", \"八幡東区\", \"八幡西区\", \"東区\", \"博多区\", \"中央区\", \"南区\", \"西区\", \"城南区\", \"早良区\", \"中央区\", \"東区\", \"西区\", \"南区\", \"北区\"), \n  name_ward2010 = c(\"中央区\", \"北区\", \"東区\", \"白石区\", \"豊平区\", \"南区\", \"西区\", \"厚別区\", \"手稲区\", \"清田区\", \"青葉区\", \"宮城野区\", \"若林区\", \"太白区\", \"泉区\", \"西区\", \"北区\", \"大宮区\", \"見沼区\", \"中央区\", \"桜区\", \"浦和区\", \"南区\", \"緑区\", \"岩槻区\", \"中央区\", \"花見川区\", \"稲毛区\", \"若葉区\", \"緑区\", \"美浜区\", \"鶴見区\", \"神奈川区\", \"西区\", \"中区\", \"南区\", \"保土ヶ谷区\", \"磯子区\", \"金沢区\", \"港北区\", \"戸塚区\", \"港南区\", \"旭区\", \"緑区\", \"瀬谷区\", \"栄区\", \"泉区\", \"青葉区\", \"都筑区\", \"川崎区\", \"幸区\", \"中原区\", \"高津区\", \"多摩区\", \"宮前区\", \"麻生区\", \"緑区\", \"中央区\", \"南区\", \"北区\", \"東区\", \"中央区\", \"江南区\", \"秋葉区\", \"南区\", \"西区\", \"西蒲区\", \"葵区\", \"駿河区\", \"清水区\", \"中区\", \"東区\", \"西区\", \"南区\", \"北区\", \"浜北区\", \"天竜区\", \"千種区\", \"東区\", \"北区\", \"西区\", \"中村区\", \"中区\", \"昭和区\", \"瑞穂区\", \"熱田区\", \"中川区\", \"港区\", \"南区\", \"守山区\", \"緑区\", \"名東区\", \"天白区\", \"北区\", \"上京区\", \"左京区\", \"中京区\", \"東山区\", \"下京区\", \"南区\", \"右京区\", \"伏見区\", \"山科区\", \"西京区\", \"都島区\", \"福島区\", \"此花区\", \"西区\", \"港区\", \"大正区\", \"天王寺区\", \"浪速区\", \"西淀川区\", \"東淀川区\", \"東成区\", \"生野区\", \"旭区\", \"城東区\", \"阿倍野区\", \"住吉区\", \"東住吉区\", \"西成区\", \"淀川区\", \"鶴見区\", \"住之江区\", \"平野区\", \"北区\", \"中央区\", \"堺区\", \"中区\", \"東区\", \"西区\", \"南区\", \"北区\", \"美原区\", \"東灘区\" , \"灘区\", \"兵庫区\", \"長田区\", \"須磨区\", \"垂水区\", \"北区\", \"中央区\", \"西区\", \"北区\", \"中区\", \"東区\", \"南区\", \"中区\", \"東区\", \"南区\", \"西区\", \"安佐南区\", \"安佐北区\", \"安芸区\", \"佐伯区\", \"門司区\", \"若松区\", \"戸畑区\", \"小倉北区\", \"小倉南区\", \"八幡東区\", \"八幡西区\", \"東区\", \"博多区\", \"中央区\", \"南区\", \"西区\", \"城南区\", \"早良区\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), \n  name_ward2005 = c(\"中央区\", \"北区\", \"東区\", \"白石区\", \"豊平区\", \"南区\", \"西区\", \"厚別区\", \"手稲区\", \"清田区\", \"青葉区\", \"宮城野区\", \"若林区\", \"太白区\", \"泉区\", \"西区\", \"北区\", \"大宮区\", \"見沼区\", \"中央区\", \"桜区\", \"浦和区\", \"南区\", \"緑区\", \"岩槻区\", \"中央区\", \"花見川区\", \"稲毛区\", \"若葉区\", \"緑区\", \"美浜区\", \"鶴見区\", \"神奈川区\", \"西区\", \"中区\", \"南区\", \"保土ヶ谷区\", \"磯子区\", \"金沢区\", \"港北区\", \"戸塚区\", \"港南区\", \"旭区\", \"緑区\", \"瀬谷区\", \"栄区\", \"泉区\", \"青葉区\", \"都筑区\", \"川崎区\", \"幸区\", \"中原区\", \"高津区\", \"多摩区\", \"宮前区\", \"麻生区\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"葵区\", \"駿河区\", \"清水区\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"千種区\", \"東区\", \"北区\", \"西区\", \"中村区\", \"中区\", \"昭和区\", \"瑞穂区\", \"熱田区\", \"中川区\", \"港区\", \"南区\", \"守山区\", \"緑区\", \"名東区\", \"天白区\", \"北区\", \"上京区\", \"左京区\", \"中京区\", \"東山区\", \"下京区\", \"南区\", \"右京区\", \"伏見区\", \"山科区\", \"西京区\", \"都島区\", \"福島区\", \"此花区\", \"西区\", \"港区\", \"大正区\", \"天王寺区\", \"浪速区\", \"西淀川区\", \"東淀川区\", \"東成区\", \"生野区\", \"旭区\", \"城東区\", \"阿倍野区\", \"住吉区\", \"東住吉区\", \"西成区\", \"淀川区\", \"鶴見区\", \"住之江区\", \"平野区\", \"北区\", \"中央区\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"東灘区\" , \"灘区\", \"兵庫区\", \"長田区\", \"須磨区\", \"垂水区\", \"北区\", \"中央区\", \"西区\", NA_character_, NA_character_, NA_character_, NA_character_, \"中区\", \"東区\", \"南区\", \"西区\", \"安佐南区\", \"安佐北区\", \"安芸区\", \"佐伯区\", \"門司区\", \"若松区\", \"戸畑区\", \"小倉北区\", \"小倉南区\", \"八幡東区\", \"八幡西区\", \"東区\", \"博多区\", \"中央区\", \"南区\", \"西区\", \"城南区\", \"早良区\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), \n  name_ward2000 = c(\"中央区\", \"北区\", \"東区\", \"白石区\", \"豊平区\", \"南区\", \"西区\", \"厚別区\", \"手稲区\", \"清田区\", \"青葉区\", \"宮城野区\", \"若林区\", \"太白区\", \"泉区\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"中央区\", \"花見川区\", \"稲毛区\", \"若葉区\", \"緑区\", \"美浜区\", \"鶴見区\", \"神奈川区\", \"西区\", \"中区\", \"南区\", \"保土ヶ谷区\", \"磯子区\", \"金沢区\", \"港北区\", \"戸塚区\", \"港南区\", \"旭区\", \"緑区\", \"瀬谷区\", \"栄区\", \"泉区\", \"青葉区\", \"都筑区\", \"川崎区\", \"幸区\", \"中原区\", \"高津区\", \"多摩区\", \"宮前区\", \"麻生区\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"千種区\", \"東区\", \"北区\", \"西区\", \"中村区\", \"中区\", \"昭和区\", \"瑞穂区\", \"熱田区\", \"中川区\", \"港区\", \"南区\", \"守山区\", \"緑区\", \"名東区\", \"天白区\", \"北区\", \"上京区\", \"左京区\", \"中京区\", \"東山区\", \"下京区\", \"南区\", \"右京区\", \"伏見区\", \"山科区\", \"西京区\", \"都島区\", \"福島区\", \"此花区\", \"西区\", \"港区\", \"大正区\", \"天王寺区\", \"浪速区\", \"西淀川区\", \"東淀川区\", \"東成区\", \"生野区\", \"旭区\", \"城東区\", \"阿倍野区\", \"住吉区\", \"東住吉区\", \"西成区\", \"淀川区\", \"鶴見区\", \"住之江区\", \"平野区\", \"北区\", \"中央区\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"東灘区\" , \"灘区\", \"兵庫区\", \"長田区\", \"須磨区\", \"垂水区\", \"北区\", \"中央区\", \"西区\", NA_character_, NA_character_, NA_character_, NA_character_, \"中区\", \"東区\", \"南区\", \"西区\", \"安佐南区\", \"安佐北区\", \"安芸区\", \"佐伯区\", \"門司区\", \"若松区\", \"戸畑区\", \"小倉北区\", \"小倉南区\", \"八幡東区\", \"八幡西区\", \"東区\", \"博多区\", \"中央区\", \"南区\", \"西区\", \"城南区\", \"早良区\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), \n  id_ward2024 = c(\"01101\", \"01102\", \"01103\", \"01104\", \"01105\", \"01106\", \"01107\", \"01108\", \"01109\", \"01110\", \"04101\", \"04102\", \"04103\", \"04104\", \"04105\", \"11101\", \"11102\", \"11103\", \"11104\", \"11105\", \"11106\", \"11107\", \"11108\", \"11109\", \"11110\", \"12101\", \"12102\", \"12103\", \"12104\", \"12105\", \"12106\", \"14101\", \"14102\", \"14103\", \"14104\", \"14105\", \"14106\", \"14107\", \"14108\", \"14109\", \"14110\", \"14111\", \"14112\", \"14113\", \"14114\", \"14115\", \"14116\", \"14117\", \"14118\", \"14131\", \"14132\", \"14133\", \"14134\", \"14135\", \"14136\", \"14137\", \"14151\", \"14152\", \"14153\", \"15101\", \"15102\", \"15103\", \"15104\", \"15105\", \"15106\", \"15107\", \"15108\", \"22101\", \"22102\", \"22103\", \"22138\", \"22138\", \"22138\", \"22138\", \"22139\", \"22139\", \"22140\", \"23101\", \"23102\", \"23103\", \"23104\", \"23105\", \"23106\", \"23107\", \"23108\", \"23109\", \"23110\", \"23111\", \"23112\", \"23113\", \"23114\", \"23115\", \"23116\", \"26101\", \"26102\", \"26103\", \"26104\", \"26105\", \"26106\", \"26107\", \"26108\", \"26109\", \"26110\", \"26111\", \"27102\", \"27103\", \"27104\", \"27106\", \"27107\", \"27108\", \"27109\", \"27111\", \"27113\", \"27114\", \"27115\", \"27116\", \"27117\", \"27118\", \"27119\", \"27120\", \"27121\", \"27122\", \"27123\", \"27124\", \"27125\", \"27126\", \"27127\", \"27128\", \"27141\", \"27142\", \"27143\", \"27144\", \"27145\", \"27146\", \"27147\", \"28101\", \"28102\", \"28105\", \"28106\", \"28107\", \"28108\", \"28109\", \"28110\", \"28111\", \"33101\", \"33102\", \"33103\", \"33104\", \"34101\", \"34102\", \"34103\", \"34104\", \"34105\", \"34106\", \"34107\", \"34108\", \"40101\", \"40103\", \"40105\", \"40106\", \"40107\", \"40108\", \"40109\", \"40131\", \"40132\", \"40133\", \"40134\", \"40135\", \"40136\", \"40137\", \"43101\", \"43102\", \"43103\", \"43104\", \"43105\"), \n  id_ward2020 = c(\"01101\", \"01102\", \"01103\", \"01104\", \"01105\", \"01106\", \"01107\", \"01108\", \"01109\", \"01110\", \"04101\", \"04102\", \"04103\", \"04104\", \"04105\", \"11101\", \"11102\", \"11103\", \"11104\", \"11105\", \"11106\", \"11107\", \"11108\", \"11109\", \"11110\", \"12101\", \"12102\", \"12103\", \"12104\", \"12105\", \"12106\", \"14101\", \"14102\", \"14103\", \"14104\", \"14105\", \"14106\", \"14107\", \"14108\", \"14109\", \"14110\", \"14111\", \"14112\", \"14113\", \"14114\", \"14115\", \"14116\", \"14117\", \"14118\", \"14131\", \"14132\", \"14133\", \"14134\", \"14135\", \"14136\", \"14137\", \"14151\", \"14152\", \"14153\", \"15101\", \"15102\", \"15103\", \"15104\", \"15105\", \"15106\", \"15107\", \"15108\", \"22101\", \"22102\", \"22103\", \"22131\", \"22132\", \"22133\", \"22134\", \"22135\", \"22136\", \"22137\", \"23101\", \"23102\", \"23103\", \"23104\", \"23105\", \"23106\", \"23107\", \"23108\", \"23109\", \"23110\", \"23111\", \"23112\", \"23113\", \"23114\", \"23115\", \"23116\", \"26101\", \"26102\", \"26103\", \"26104\", \"26105\", \"26106\", \"26107\", \"26108\", \"26109\", \"26110\", \"26111\", \"27102\", \"27103\", \"27104\", \"27106\", \"27107\", \"27108\", \"27109\", \"27111\", \"27113\", \"27114\", \"27115\", \"27116\", \"27117\", \"27118\", \"27119\", \"27120\", \"27121\", \"27122\", \"27123\", \"27124\", \"27125\", \"27126\", \"27127\", \"27128\", \"27141\", \"27142\", \"27143\", \"27144\", \"27145\", \"27146\", \"27147\", \"28101\", \"28102\", \"28105\", \"28106\", \"28107\", \"28108\", \"28109\", \"28110\", \"28111\", \"33101\", \"33102\", \"33103\", \"33104\", \"34101\", \"34102\", \"34103\", \"34104\", \"34105\", \"34106\", \"34107\", \"34108\", \"40101\", \"40103\", \"40105\", \"40106\", \"40107\", \"40108\", \"40109\", \"40131\", \"40132\", \"40133\", \"40134\", \"40135\", \"40136\", \"40137\", \"43101\", \"43102\", \"43103\", \"43104\", \"43105\"), \n  id_ward2010 = c(\"01101\", \"01102\", \"01103\", \"01104\", \"01105\", \"01106\", \"01107\", \"01108\", \"01109\", \"01110\", \"04101\", \"04102\", \"04103\", \"04104\", \"04105\", \"11101\", \"11102\", \"11103\", \"11104\", \"11105\", \"11106\", \"11107\", \"11108\", \"11109\", \"11110\", \"12101\", \"12102\", \"12103\", \"12104\", \"12105\", \"12106\", \"14101\", \"14102\", \"14103\", \"14104\", \"14105\", \"14106\", \"14107\", \"14108\", \"14109\", \"14110\", \"14111\", \"14112\", \"14113\", \"14114\", \"14115\", \"14116\", \"14117\", \"14118\", \"14131\", \"14132\", \"14133\", \"14134\", \"14135\", \"14136\", \"14137\", \"14151\", \"14152\", \"14153\", \"15101\", \"15102\", \"15103\", \"15104\", \"15105\", \"15106\", \"15107\", \"15108\", \"22101\", \"22102\", \"22103\", \"22131\", \"22132\", \"22133\", \"22134\", \"22135\", \"22136\", \"22137\", \"23101\", \"23102\", \"23103\", \"23104\", \"23105\", \"23106\", \"23107\", \"23108\", \"23109\", \"23110\", \"23111\", \"23112\", \"23113\", \"23114\", \"23115\", \"23116\", \"26101\", \"26102\", \"26103\", \"26104\", \"26105\", \"26106\", \"26107\", \"26108\", \"26109\", \"26110\", \"26111\", \"27102\", \"27103\", \"27104\", \"27106\", \"27107\", \"27108\", \"27109\", \"27111\", \"27113\", \"27114\", \"27115\", \"27116\", \"27117\", \"27118\", \"27119\", \"27120\", \"27121\", \"27122\", \"27123\", \"27124\", \"27125\", \"27126\", \"27127\", \"27128\", \"27141\", \"27142\", \"27143\", \"27144\", \"27145\", \"27146\", \"27147\", \"28101\", \"28102\", \"28105\", \"28106\", \"28107\", \"28108\", \"28109\", \"28110\", \"28111\", \"33101\", \"33102\", \"33103\", \"33104\", \"34101\", \"34102\", \"34103\", \"34104\", \"34105\", \"34106\", \"34107\", \"34108\", \"40101\", \"40103\", \"40105\", \"40106\", \"40107\", \"40108\", \"40109\", \"40131\", \"40132\", \"40133\", \"40134\", \"40135\", \"40136\", \"40137\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), \n  id_ward2005 = c(\"01101\", \"01102\", \"01103\", \"01104\", \"01105\", \"01106\", \"01107\", \"01108\", \"01109\", \"01110\", \"04101\", \"04102\", \"04103\", \"04104\", \"04105\", \"11101\", \"11102\", \"11103\", \"11104\", \"11105\", \"11106\", \"11107\", \"11108\", \"11109\", \"11110\", \"12101\", \"12102\", \"12103\", \"12104\", \"12105\", \"12106\", \"14101\", \"14102\", \"14103\", \"14104\", \"14105\", \"14106\", \"14107\", \"14108\", \"14109\", \"14110\", \"14111\", \"14112\", \"14113\", \"14114\", \"14115\", \"14116\", \"14117\", \"14118\", \"14131\", \"14132\", \"14133\", \"14134\", \"14135\", \"14136\", \"14137\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"22101\", \"22102\", \"22103\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"23101\", \"23102\", \"23103\", \"23104\", \"23105\", \"23106\", \"23107\", \"23108\", \"23109\", \"23110\", \"23111\", \"23112\", \"23113\", \"23114\", \"23115\", \"23116\", \"26101\", \"26102\", \"26103\", \"26104\", \"26105\", \"26106\", \"26107\", \"26108\", \"26109\", \"26110\", \"26111\", \"27102\", \"27103\", \"27104\", \"27106\", \"27107\", \"27108\", \"27109\", \"27111\", \"27113\", \"27114\", \"27115\", \"27116\", \"27117\", \"27118\", \"27119\", \"27120\", \"27121\", \"27122\", \"27123\", \"27124\", \"27125\", \"27126\", \"27127\", \"27128\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"28101\", \"28102\", \"28105\", \"28106\", \"28107\", \"28108\", \"28109\", \"28110\", \"28111\", NA_character_, NA_character_, NA_character_, NA_character_, \"34101\", \"34102\", \"34103\", \"34104\", \"34105\", \"34106\", \"34107\", \"34108\", \"40101\", \"40103\", \"40105\", \"40106\", \"40107\", \"40108\", \"40109\", \"40131\", \"40132\", \"40133\", \"40134\", \"40135\", \"40136\", \"40137\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), \n  id_ward2000 = c(\"01101\", \"01102\", \"01103\", \"01104\", \"01105\", \"01106\", \"01107\", \"01108\", \"01109\", \"01110\", \"04101\", \"04102\", \"04103\", \"04104\", \"04105\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"12101\", \"12102\", \"12103\", \"12104\", \"12105\", \"12106\", \"14101\", \"14102\", \"14103\", \"14104\", \"14105\", \"14106\", \"14107\", \"14108\", \"14109\", \"14110\", \"14111\", \"14112\", \"14113\", \"14114\", \"14115\", \"14116\", \"14117\", \"14118\", \"14131\", \"14132\", \"14133\", \"14134\", \"14135\", \"14136\", \"14137\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"23101\", \"23102\", \"23103\", \"23104\", \"23105\", \"23106\", \"23107\", \"23108\", \"23109\", \"23110\", \"23111\", \"23112\", \"23113\", \"23114\", \"23115\", \"23116\", \"26101\", \"26102\", \"26103\", \"26104\", \"26105\", \"26106\", \"26107\", \"26108\", \"26109\", \"26110\", \"26111\", \"27102\", \"27103\", \"27104\", \"27106\", \"27107\", \"27108\", \"27109\", \"27111\", \"27113\", \"27114\", \"27115\", \"27116\", \"27117\", \"27118\", \"27119\", \"27120\", \"27121\", \"27122\", \"27123\", \"27124\", \"27125\", \"27126\", \"27127\", \"27128\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, \"28101\", \"28102\", \"28105\", \"28106\", \"28107\", \"28108\", \"28109\", \"28110\", \"28111\", NA_character_, NA_character_, NA_character_, NA_character_, \"34101\", \"34102\", \"34103\", \"34104\", \"34105\", \"34106\", \"34107\", \"34108\", \"40101\", \"40103\", \"40105\", \"40106\", \"40107\", \"40108\", \"40109\", \"40131\", \"40132\", \"40133\", \"40134\", \"40135\", \"40136\", \"40137\", NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), \n  id_muni2020 = c(\"01100\", \"01100\", \"01100\", \"01100\", \"01100\", \"01100\", \"01100\", \"01100\", \"01100\", \"01100\", \"04100\", \"04100\", \"04100\", \"04100\", \"04100\", \"11100\", \"11100\", \"11100\", \"11100\", \"11100\", \"11100\", \"11100\", \"11100\", \"11100\", \"11100\", \"12100\", \"12100\", \"12100\", \"12100\", \"12100\", \"12100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14100\", \"14130\", \"14130\", \"14130\", \"14130\", \"14130\", \"14130\", \"14130\", \"14150\", \"14150\", \"14150\", \"15100\", \"15100\", \"15100\", \"15100\", \"15100\", \"15100\", \"15100\", \"15100\", \"22100\", \"22100\", \"22100\", \"22130\", \"22130\", \"22130\", \"22130\", \"22130\", \"22130\", \"22130\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"23100\", \"26100\", \"26100\", \"26100\", \"26100\", \"26100\", \"26100\", \"26100\", \"26100\", \"26100\", \"26100\", \"26100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27100\", \"27140\", \"27140\", \"27140\", \"27140\", \"27140\", \"27140\", \"27140\", \"28100\", \"28100\", \"28100\", \"28100\", \"28100\", \"28100\", \"28100\", \"28100\", \"28100\", \"33100\", \"33100\", \"33100\", \"33100\", \"34100\", \"34100\", \"34100\", \"34100\", \"34100\", \"34100\", \"34100\", \"34100\", \"40100\", \"40100\", \"40100\", \"40100\", \"40100\", \"40100\", \"40100\", \"40130\", \"40130\", \"40130\", \"40130\", \"40130\", \"40130\", \"40130\", \"43100\", \"43100\", \"43100\", \"43100\", \"43100\"), \n  id_muni2010 = cn  id_muni2005 = cn  id_muni2000 = cn)\n\n改行すると長いのでそれぞれ1行にしておきました。以下のような感じのデータフレームになっており、政令指定都市の区のID（id_ward）と所属する市のID（id_muni）がそれぞれ入っています。\n\n\n\n\n\n\n\n\nid_origin\nname_muni2020\nname_muni2000\nname_ward2024\nname_ward2020\nname_ward2010\nname_ward2005\nname_ward2000\nid_ward2024\nid_ward2020\nid_ward2010\nid_ward2005\nid_ward2000\nid_muni2020\nid_muni2010\nid_muni2005\nid_muni2000\n\n\n\n\n01101\n札幌市\n札幌市\n中央区\n中央区\n中央区\n中央区\n中央区\n01101\n01101\n01101\n01101\n01101\n01100\n01100\n01100\n01100\n\n\n01102\n札幌市\n札幌市\n北区\n北区\n北区\n北区\n北区\n01102\n01102\n01102\n01102\n01102\n01100\n01100\n01100\n01100\n\n\n01103\n札幌市\n札幌市\n東区\n東区\n東区\n東区\n東区\n01103\n01103\n01103\n01103\n01103\n01100\n01100\n01100\n01100\n\n\n01104\n札幌市\n札幌市\n白石区\n白石区\n白石区\n白石区\n白石区\n01104\n01104\n01104\n01104\n01104\n01100\n01100\n01100\n01100\n\n\n01105\n札幌市\n札幌市\n豊平区\n豊平区\n豊平区\n豊平区\n豊平区\n01105\n01105\n01105\n01105\n01105\n01100\n01100\n01100\n01100\n\n\n01106\n札幌市\n札幌市\n南区\n南区\n南区\n南区\n南区\n01106\n01106\n01106\n01106\n01106\n01100\n01100\n01100\n01100\n\n\n\n\n\n\n\nこのデータフレームのポイントを以下に挙げます。\n\n2020年10月1日時点の政令指定都市について、2000年から2020年までの各区の名前、行政区コード、市町村コードがまとめられています。\n\n複数の期間をまたいで同じデータのところは省略しています。\nname_muni2005～name_muni2015、id_ward2015、id_muni2015が該当します。\n\nid_originを用いてマージすることができます。\n\nこの変数は、行政区であれば当初の行政区コード、途中から政令指定都市に移行した市であれば移行前の市町村コードが入っています。\n例えば手持ちのデータの市町村コードがcodeという変数名だった場合、dplyr::left_join(seirei_ward, by = c(\"id_origin\" = \"code\"))のようにすると結合することができます3。\nもし2020年の市町村コードを付与したいのであれば、予めdplyr::select(id_origin, id_muni2020)のようにしておくと無駄な変数を付けずに済むと思います。\n\n\nCSVファイルで保存したい場合は以下からダウンロードが可能です。\n\nUTF-8（Macユーザーやデータ分析向け）\nShift_JIS（WindowsのExcelで見る場合向け）\n\n区単位のデータは市の行がなかったりするので、dplyr::group_by()などが使いにくいという問題があります。それに対し、id_wardでマージしてid_muniを付与すればgroup_by()で集計することができます。\n僕は地価公示データを市単位で平均したいとき、政令指定都市は区単位でしかデータがなかったのでこれを活用しました。"
  },
  {
    "objectID": "pages/tips/240414_benri_seirei/index.html#まとめ",
    "href": "pages/tips/240414_benri_seirei/index.html#まとめ",
    "title": "政令指定都市・中核市の整理",
    "section": "まとめ",
    "text": "まとめ\n持ってて損は無し！また何かあれば更新します。"
  },
  {
    "objectID": "pages/tips/240414_benri_seirei/index.html#footnotes",
    "href": "pages/tips/240414_benri_seirei/index.html#footnotes",
    "title": "政令指定都市・中核市の整理",
    "section": "注",
    "text": "注\n\n\n2024年4月現在↩︎\n例えば相模原市は2010年4月1日から政令指定都市に移行したので、10月1日時点で政令指定都市であることから2010年のデータには政令指定都市として反映してあります。↩︎\nseirei_wardはここで示したデータです。↩︎"
  },
  {
    "objectID": "pages/tips/240906_municipality_converter/index.html#はじめに",
    "href": "pages/tips/240906_municipality_converter/index.html#はじめに",
    "title": "市町村合併を反映させる",
    "section": "はじめに",
    "text": "はじめに\n市町村合併（平成の大合併）前のデータを使わなければならない場合に、うまく市町村コードを新使いながらパネルデータを作成する方法についてご紹介します。\nこの記事では近藤恵介先生（RIETI、神戸大学）が作成された市町村コンバーターを使用します。\n以下のGitHubリポジトリよりダウンロードが可能です。\nhttps://github.com/keisukekondokk/municipality-converter"
  },
  {
    "objectID": "pages/tips/240906_municipality_converter/index.html#方法",
    "href": "pages/tips/240906_municipality_converter/index.html#方法",
    "title": "市町村合併を反映させる",
    "section": "方法",
    "text": "方法\n\nコンバーターファイルのダウンロードと読み込み\nGitHubリポジトリのdata_converter内にあるmunicipality_converter_jp.csvを開きます1。次のリンクから直接飛ぶことも可能です。\nhttps://github.com/keisukekondokk/municipality-converter/blob/master/data_converter/municipality_converter_jp.csv\nmunicipality_converter_jp.csvを開くと、コード右上にあるダウンロードアイコン2より任意の場所にダウンロードが可能です。\nダウンロードできたら、Rで読み込みます。\n\nlibrary(tidyverse)\nlibrary(here)\n\nconverter &lt;- read_csv(here(\"data/240906_municipality_converter/municipality_converter_jp.csv\"))\n\n\n\nパネル化したいデータの準備\n\n\n\n\n\n\n使用するデータ\n\n\n\n今回使用するデータはこちらからダウンロードできます。\n\n\n例えば人口データをパネル化したいとします。今回は例として、2000年から2005年の人口データ3を、2020年の市町村区分になるようにくっつけます。例なので、総人口のみを扱います。\n今回使用するデータは次のようなファイルになっています。\n\n\n\n\n\nまずはこれらのファイル（自分がパネル化したいデータがあればそれらのファイル）をRで読み込んでください。.xlsファイルであればreadxlパッケージのread_xls()を僕は使っています。以下は5年分まとめて読み込むときの例です。\nlibrary(readxl)\n\nfor (year in 2000:2005) {\n  obj &lt;- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), \n                  skip = 4) |&gt; \n    select(1:3, 6)\n  \n  colnames(obj) &lt;- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  obj &lt;- obj |&gt; \n    mutate(code = as.numeric(code) %/% 10)\n  \n  assign(paste0(\"pop_\", year), obj)\n}\nforループやassign()についての説明は行いませんが、これで2000年から2005年までを一括で読み込むことができます。ポイントは、今回使用するコンバーターはキーとなるコードが整数かつ下1桁を落としているため、mutate(code = as.numeric(code) %/% 10)で処理しているところです。\nとりあえずここで重要なことは、select()で必要な列のみ取り出しているのですが、団体コードと人口の列は必ず取り出すことです。市町村名も一応取り出していますが、別になくてもよいです。\n\n\n2020年の自治体コードを付与\n合併前のデータに、合併後の自治体コードを付与します。具体的には、人口データのcodeとコンバーターのmerge_id_muniをキーにしてleft_join()し、id_muni2020を付与します。\nこれもまとめて6年分やりたいので、先ほどのコードに追記します。\nfor (year in 2000:2005) {\n  obj &lt;- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), skip = 4) |&gt; \n    select(1:3, 6)\n  \n  colnames(obj) &lt;- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  obj &lt;- obj |&gt; \n    mutate(code = as.numeric(code) %/% 10) |&gt; \n    left_join(converter, by = c(\"code\" = \"merge_id_muni\")) |&gt; \n    select(code, prefecture, municipality, population, id_muni2020)\n  \n  assign(paste0(\"pop_\", year), obj)\n}\n試しにpop_2020の変数名をcolnames(pop_2020)などで確認してみると、code, prefecture, municipality, population, id_muni2020となっていることがわかります。\n\n\nid_muni2020を使ってサマライズ\n例えばB市とC市がA市に合併した場合、Aはもとから2020年基準の自治体コードを持っていますが、B市とC市は古い自治体コードを持っていて、新しく2020年の自治体コードを付与されています。\nすなわち、id_muni2020の列を見ると、A市と同じ自治体コードをB市とC市は持っていることになります。\nこれを使うと、各自治体コードで人口を足し算すれば、現在の自治体区分における人口総数を算出することができます。これを実行するのがsummarise()関数です。\n\nfor (year in 2000:2005) {\n  df &lt;- get(paste0(\"pop_\", year))\n  \n  summarised_df &lt;- df |&gt; \n    summarise(population = sum(population, na.rm = TRUE), \n              .by = id_muni2020)\n  \n  assign(paste0(\"summarised_pop_\", year), summarised_df)\n}\n\nforループの中でデータフレーム名を取得するのは少々ややこしいですが、以上のような書き方で可能です。\nsummarise()内では.byで指定したid_muni2020ごとにpopulationをsum()するようになっています。na.rm = TRUEは、NAがあった場合に計算結果がNAにならないようにするために必要です。\n以上を実行すると、summarised_pop_2000～summarised_pop_2005までが出来上がります。\nちなみにここで使っている変数がid_muni2020とpopulationだけなので、出来上がったデータフレームもこの2つの変数しか入っていません。市町村名も残したい場合は、.byでprefectureとmunicipalityも追加で指定すれば残すことができます。\n\n\nleft_join()でくっつける\n2000年のデータフレームをベースとして2001～2005年を結合するので、最初に2000年のデータをfinal_dfとして格納しておきます。その際に変数名も2000年のものであることを明記します。\n\nfinal_df &lt;- summarised_pop_2000 |&gt; \n  rename(population_2000 = population)\n\nfor (year in 2001:2005) {\n  df_to_join &lt;- get(paste0(\"summarised_pop_\", year)) |&gt; \n    rename_with(~ paste0(., \"_\", year), population)\n  \n  \n  final_df &lt;- left_join(final_df, df_to_join, \n                        by = c(\"id_muni2020\"))\n}\n\npopulationの列が複数出てくるので、それらの後が_20xxとなるようにrename_with()で設定しています。\nfinal_dfが最終的なデータフレームです。確認してみてください。\n以上の作業で合併前のデータを最新の市町村区分を基準として結合することができました。\nこれを応用して変数を追加したりロング形式に変換することが可能です。"
  },
  {
    "objectID": "pages/tips/240906_municipality_converter/index.html#まとめ",
    "href": "pages/tips/240906_municipality_converter/index.html#まとめ",
    "title": "市町村合併を反映させる",
    "section": "まとめ",
    "text": "まとめ\n今回紹介したコードをまとめると以下の通りです。\nlibrary(tidyverse)\nlibrary(here)\nlibrary(readxl)\n\nfor (year in 2000:2005) {\n  obj &lt;- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), skip = 4) |&gt; \n    select(1:3, 6)\n  \n  colnames(obj) &lt;- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  obj &lt;- obj |&gt; \n    mutate(code = as.numeric(code) %/% 10) |&gt; \n    left_join(converter, by = c(\"code\" = \"merge_id_muni\")) |&gt; \n    select(code, prefecture, municipality, population, id_muni2020)\n  \n  assign(paste0(\"pop_\", year), obj)\n}\n\nfor (year in 2000:2005) {\n  df &lt;- get(paste0(\"pop_\", year))\n  \n  summarised_df &lt;- df |&gt; \n    summarise(population = sum(population, na.rm = TRUE), \n              .by = id_muni2020)\n  \n  assign(paste0(\"summarised_pop_\", year), summarised_df)\n}\n\nfinal_df &lt;- summarised_pop_2000 |&gt; \n  rename(population_2000 = population)\n\nfor (year in 2001:2005) {\n  df_to_join &lt;- get(paste0(\"summarised_pop_\", year)) |&gt; \n    rename_with(~ paste0(., \"_\", year), population)\n  \n  \n  final_df &lt;- left_join(final_df, df_to_join, \n                        by = c(\"id_muni2020\"))\n}\nさらに1つのコードで完結させる場合は次のようになります。\nlibrary(tidyverse)\nlibrary(here)\nlibrary(readxl)\n\nfor (year in 2000:2005) {\n  obj &lt;- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), skip = 4) |&gt; \n    select(1:3, 6)\n  \n  colnames(obj) &lt;- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  summarised_df &lt;- obj |&gt; \n    mutate(code = as.numeric(code) %/% 10) |&gt; \n    left_join(converter, by = c(\"code\" = \"merge_id_muni\")) |&gt; \n    select(code, prefecture, municipality, population, id_muni2020) |&gt; \n    summarise(population = sum(population, na.rm = TRUE), .by = id_muni2020)\n  \n  if (year == 2000) {\n    final_df &lt;- summarised_df |&gt; \n      rename(population_2000 = population)\n  } else {\n    summarised_df &lt;- summarised_df |&gt; \n      rename_with(~ paste0(\"population_\", year), population)\n    \n    final_df &lt;- left_join(final_df, summarised_df, by = \"id_muni2020\")\n  }\n}\n以上です。合併処理はめんどくさいので、少しでもお役に立てれば幸いです。"
  },
  {
    "objectID": "pages/tips/240906_municipality_converter/index.html#footnotes",
    "href": "pages/tips/240906_municipality_converter/index.html#footnotes",
    "title": "市町村合併を反映させる",
    "section": "注",
    "text": "注\n\n\n別に英語版でもよいです。↩︎\nカーソルを合わせると「Download raw file」と出てきます。↩︎\n住民基本台帳より↩︎"
  },
  {
    "objectID": "pages/tips/241224_pins/index.html#はじめに",
    "href": "pages/tips/241224_pins/index.html#はじめに",
    "title": "pinsでデータ管理",
    "section": "はじめに",
    "text": "はじめに\npinsというパッケージをご存じでしょうか。pinsは、Rでデータやオブジェクトを簡単に共有・保存・再利用するためのパッケージです。\nこのパッケージでは、Google Driveなど、様々なツールと連携してデータを管理することができます。\nこれまでの記事1ではDVCを用いた方法を紹介してきましたが、特にGoogle Cloud projectを使用しなければならなくなって以降、正直めんどくさいです。\nここではなるべく簡単にデータを管理、共有できるツールとしてpinsをご紹介します。"
  },
  {
    "objectID": "pages/tips/241224_pins/index.html#設定",
    "href": "pages/tips/241224_pins/index.html#設定",
    "title": "pinsでデータ管理",
    "section": "設定",
    "text": "設定\n早速設定です。インストールされていない場合、以下のコードでパッケージをインストールしてください。Tidyverseを使っている場合は、googledriveはインストール済みです。\n# install.packages(\"pak\")\npak::pak(c(\"pins\", \"googledrive\"))\n\n\n\n\n\n\nTip\n\n\n\n\n\n余談ですが、最近はパッケージのインストールにpak::pak()をメインで使用しています。pak::pak()は\n\nA Fresh Approach to R Package Installation\n\nであり、install.packages()とdevtools::install_github()を兼ね合わせています2。ミーハーな僕としては使わずにはいられません。\n\n\n\n続いて以下のコードでドライブと連携します。ブラウザ上でデータを保存したいフォルダを作成し、URLをコピーしておいてください。その後、以下のコードのリンク部分を置き換えて実行します。\n\nboard &lt;- board_gdrive(\"https://drive.google.com/drive/u/0/folders/1F3T0SUmdKBrYUvo180KqBf00yoRrzPdP\")\n\nこのコマンドを実行すると、\nIs it OK to cache OAuth access credentials in the folder ~/.cache/gargle between R sessions?\n1: Yes\n2: No\nと出てくると思いますが、基本的に1を打って実行でいいと思います。これでセッションが切れても（RStudioを再起動しても）認証が継続されます。共用のPCなどの場合は2になると思いますが。\n続けてブラウザでGoogleに認証を求められると思いますが、必要な権限を与え（チェックボックスにチェックを入れ）、次へと進んでいきます。\n最後に以下の画面が出てきたら、下部のコードをコピーし、RStudioのコンソールに打ち込み、実行します。\n\n\n\n\n\nこれで認証は完了です。"
  },
  {
    "objectID": "pages/tips/241224_pins/index.html#データの管理",
    "href": "pages/tips/241224_pins/index.html#データの管理",
    "title": "pinsでデータ管理",
    "section": "データの管理",
    "text": "データの管理\n\nピン留め\npinsでは、パッケージ名通りデータをピン留めすることができます。例えばデフォルトで入っているmtcarsデータを例に、データをフォルダにピン留めします。\n\nboard |&gt; \n  pin_write(mtcars, \"mtcars\")\n\nGuessing `type = 'rds'`\nCreating new version '20241223T131135Z-418c9'\nWriting to pin 'mtcars'\n\n\nメッセージに出ている通り、デフォルトでは.rdsファイルとして保存されるようです。試しにhead()で行数を絞って、csvで保存してみます。その場合、\n\nboard |&gt; pin_write(head(mtcars), \"mtcars\", type = \"csv\")\n\nCreating new version '20241223T131142Z-6a6e3'\nWriting to pin 'mtcars'\n\n\nと、typeを指定してください。\n\n\n読み込み\n保存したデータを読み込みたい場合は、\n\nboard |&gt; pin_read(\"mtcars\")\n\n   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nで可能です。\n\n\nバージョン管理\nちなみに、バージョン管理も可能です。まずはpin_versions()でバージョンを確認します。\n\nboard |&gt; pin_versions(\"mtcars\")\n\n# A tibble: 2 × 3\n  version                created             hash \n  &lt;chr&gt;                  &lt;dttm&gt;              &lt;chr&gt;\n1 20241223T131135Z-418c9 2024-12-23 22:11:35 418c9\n2 20241223T131142Z-6a6e3 2024-12-23 22:11:42 6a6e3\n\n\n上はmtcarsの全データ、下はhead()を適用したデータです。\n現在は下のデータで上書きされている状態ですが、ここでやはり全データを読み込みたいとします。\nその場合、以下のようにして読み込みます。\n\nboard |&gt; \n  pin_read(\"mtcars\", version = \"20241223T131135Z-418c9\") |&gt; \n  tibble::as_tibble()\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nversion引数に、上で出てきたバージョンをペーストしてやれば可能です。"
  },
  {
    "objectID": "pages/tips/241224_pins/index.html#まとめ",
    "href": "pages/tips/241224_pins/index.html#まとめ",
    "title": "pinsでデータ管理",
    "section": "まとめ",
    "text": "まとめ\n今回はpinsパッケージを使ったデータ管理の方法についてご紹介しました。\nGoogle Driveは多くの人がアカウントを所持しているため、アカウント設定に時間を割かなくてよい点が魅力的だと思います。\n僕が思う良い点としては、直接Google Driveにデータが保存されるため、PCの容量を食わなくていいことがあると思います。\nぜひ使ってみてください。"
  },
  {
    "objectID": "pages/tips/241224_pins/index.html#番外編",
    "href": "pages/tips/241224_pins/index.html#番外編",
    "title": "pinsでデータ管理",
    "section": "番外編",
    "text": "番外編\nちなみに今回はGoogle Driveでご紹介しましたが、Dropbox等でも可能です。\nboard &lt;- board_folder(\"~/Dropbox\")\nDropboxのパスは環境によって異なると思いますが、Dropboxでの共有設定をしておき、各自そのフォルダへのパスを設定しておけば、Dropboxでもpinsを使うことができます。\nDropboxユーザーの方は是非お試しあれ。"
  },
  {
    "objectID": "pages/tips/241224_pins/index.html#footnotes",
    "href": "pages/tips/241224_pins/index.html#footnotes",
    "title": "pinsでデータ管理",
    "section": "注",
    "text": "注\n\n\n例えばこちらなど。↩︎\npakドキュメント↩︎"
  },
  {
    "objectID": "pages/tips/241113_copilot_rstudio/index.html#はじめに",
    "href": "pages/tips/241113_copilot_rstudio/index.html#はじめに",
    "title": "RStudio (Server)でGitHub Copilotを使う",
    "section": "はじめに",
    "text": "はじめに\n皆さん、GitHub Copilot使ってますか？チャットでコーディングについて質問できたり、コードを補完してくれたりして便利ですよね。\n主にVSCodeで使うことが多い僕ですが、RStudioも最近は使うようになってきたので、その設定についてまとめたいと思います。\nGitHubは学生なら無料で使えますので、以下の記事など参考にしながら、ぜひ登録してみてください。\n\n\n\n\n\n\n【学生は申し込め】GitHub Copilotを申請しよう\n\n\n\n前提として、GitHub Copilotに申請して、使えるようになっていることを確認してください。"
  },
  {
    "objectID": "pages/tips/241113_copilot_rstudio/index.html#ローカルのrstudio",
    "href": "pages/tips/241113_copilot_rstudio/index.html#ローカルのrstudio",
    "title": "RStudio (Server)でGitHub Copilotを使う",
    "section": "ローカルのRStudio",
    "text": "ローカルのRStudio\n自分のPCにRStudioをインストールして使っている方が多いと思いますが、ローカルの場合は簡単に設定できます。\nまず、RStudioを開き、画面上部のToolsから、Global Options...へ入ります。すると1番下にGitHubのアイコンとともにCopilotがあると思いますので、そこをクリックします。\n「Enable GitHub Copilot」が1番上に出ると思うので、チェックを入れます。\n\n\n\n\n\n「The GitHub Copilot agent is not currently installed. Would you like to install it?」みたいに出てきたら、それはインストールしてください。無事にインストールできたと出てきたら、OKで閉じます。\nすると、Sign Inのボタンが現れると思いますので、そこを押し、表示された手順に従ってサインインします。\n\n\n\nリンクに飛んで、Varification codeを入力します。\n\n\n\n\n\nContinueを押します。\n\n\n上のように出てくるので、リンクをクリックしてGitHubに飛び、Continueを押したらコードを入力します。これで無事サインインができ、RSturio上でGitHub Copilotが使えるようになります。"
  },
  {
    "objectID": "pages/tips/241113_copilot_rstudio/index.html#開発コンテナrstudio-server",
    "href": "pages/tips/241113_copilot_rstudio/index.html#開発コンテナrstudio-server",
    "title": "RStudio (Server)でGitHub Copilotを使う",
    "section": "開発コンテナ×RStudio Server",
    "text": "開発コンテナ×RStudio Server\n以前紹介した記事で紹介したような開発コンテナを使用しているような場合では、RStudio Server上でローカルと同じようにやろうとしても、権限がないとか何とかで使えないようになっています。\nもう少し設定が要るので、それをご紹介します。\nまずは、開発コンテナ内のワーキングディレクトリに、etcというフォルダを作り、その中にrstudioというフォルダをさらに作り、その中にrsession.confというファイルを作成します1。そして、rsession.confファイルを開いて、以下の内容を書き込みます。\n# R Session Configuration File\n\ncopilot-enabled=1\nそしたらコードを保存して閉じ、次にDockerfileを編集します。\nDockerfileを開いたら、以下の内容を追記します。\nCOPY --chown=rstudio:rstudio /etc/rstudio/rsession.conf /etc/rstudio/rsession.conf\n要は今作ったファイルをコンテナ側にコピーするということです。これにより設定を反映させることができます。\n追記したら保存して、コンテナをリビルドしてください。\nすると、RStudio Serverでもローカルと同じような設定ができるようになり、GitHub Copilotを使えるようになります。"
  },
  {
    "objectID": "pages/tips/241113_copilot_rstudio/index.html#おわりに",
    "href": "pages/tips/241113_copilot_rstudio/index.html#おわりに",
    "title": "RStudio (Server)でGitHub Copilotを使う",
    "section": "おわりに",
    "text": "おわりに\n開発コンテナを使用している場合は若干手間がかかりますが、ローカルと同じようにCipolotを使うことができます。\nコードを書いていて、Copilotが提案してくれたコードを確定するときはTabキーを使うのですが、これがRStudioのもともとの設定に干渉するので、使いようによっては使いにくいかもしれません。\n便利なことには違いはないので、ぜひ試してみてください。"
  },
  {
    "objectID": "pages/tips/241113_copilot_rstudio/index.html#footnotes",
    "href": "pages/tips/241113_copilot_rstudio/index.html#footnotes",
    "title": "RStudio (Server)でGitHub Copilotを使う",
    "section": "注",
    "text": "注\n\n\nぶっちゃけフォルダは作らずに.confファイルをそのまま作ってもよいのですが、雑然としてしまうかなと個人的には思うので、このようにしています。↩︎"
  },
  {
    "objectID": "pages/tips/240722_quarto_latex_setting/index.html#はじめに",
    "href": "pages/tips/240722_quarto_latex_setting/index.html#はじめに",
    "title": "【Quarto】論文の体裁を整える",
    "section": "はじめに",
    "text": "はじめに\n以下の記事で、Quarto × \\(\\LaTeX\\) で論文を書く方法についてまとめました。\n\n\n\n\n\n\n【PDF】Quarto で論文を書く\n\n\n\n今回はもう少し踏み込んで、論文の体裁を整える設定について考えます1。"
  },
  {
    "objectID": "pages/tips/240722_quarto_latex_setting/index.html#yaml-ヘッダーをいじる",
    "href": "pages/tips/240722_quarto_latex_setting/index.html#yaml-ヘッダーをいじる",
    "title": "【Quarto】論文の体裁を整える",
    "section": "YAML ヘッダーをいじる",
    "text": "YAML ヘッダーをいじる\nQuarto や R Markdown でお馴染みの YAML ヘッダーですが、以前の記事での設定は以下の通りでした。\n---\ntitle: \"【PDF】Quarto で論文を書く\"\nauthor: \"阿部洋輔\"\ndate: 2024-07-08  # todayで今日の日付にできます\ndate-format: \"YYYY年M月D日\" \nformat: \n  pdf: \n    documentclass: article\n    number-sections: true\n    include-in-header: \n      - text: |\n          \\usepackage{zxjatype}\n          \\usepackage[ipaex]{zxjafont} \n          # これらは日本語フォントの設定のために記述しています\nexecute: \n  echo: false  # コードを表示しない\n  warning: false # 警告とメッセージを表示しない\nlanguage: \n  crossref-fig-title: \"図\"\n  crossref-tbl-title: \"表\"\n  crossref-eq-prefix: \"式\"\n---\n今回は簡単化のため英語で設定していきますが、さっそく今回の結論は次の通りです。\n---\ntitle: \"Title\"\nauthor: \n  - \"Yosuke Abe\\\\thanks{Osaka School of International Public Policy}\"\n  - \"Author 2\\\\thanks{Osaka School of International Public Policy}\"\ndate: 2024-07-22\ndate-format: long\nlang: en\nabstract: &gt;\n  Here is the abstract.\nformat: \n  pdf: \n    documentclass: article\n    papersize: a4paper\n    geometry: \n      - top=2.5cm\n      - bottom=2.5cm\n      - left=2.5cm\n      - right=2.5cm\n    keep-tex: true\n# bibliography: bibliography.bib\n# 必要に応じて入れる\n---\n\n**JEL classification:** C12, D24, E31\n\n**keywords:** Keyword 1, Keyword 2...\n\n\\newpage\n# Section 1\n\nWrite the text here.\n\n# Section 2\n\n@fig-cars is a plot of CARS data.\n今回発見したのは、abstract が書けるところです。これは助かります。\nkeyword と JEL classification の部分はもう少し工夫が必要そうです。\n出力するとこのような感じになります。\nとりあえず、ポイントとしては\n\nauthor に \\\\thanks{} を使って所属を書くことができる\nabstract が書ける\n\n&gt; で改行を入れ、2スペース分インデントして書き始めるとよい。\n\nformat で pdf の設定を変更できる\n\ndocumentclass で文書クラスを指定できる。article で十分だと思う。\npapersize で用紙サイズを指定できる。\ngeometry で余白を設定できる。\nkeep-tex: true で .tex ファイルを残すことができる。\n\nbibliography で参考文献を指定できる\n\nZotero など使用して文献管理をしましょう。\n\n\nといったところでしょうか。"
  },
  {
    "objectID": "pages/tips/240722_quarto_latex_setting/index.html#おわりに",
    "href": "pages/tips/240722_quarto_latex_setting/index.html#おわりに",
    "title": "【Quarto】論文の体裁を整える",
    "section": "おわりに",
    "text": "おわりに\nQuarto で論文を書く際の体裁について考えてみました。\n自分でも論文を書いていくうちに、また新しい発見があれば追記していきたいと思います。"
  },
  {
    "objectID": "pages/tips/240722_quarto_latex_setting/index.html#footnotes",
    "href": "pages/tips/240722_quarto_latex_setting/index.html#footnotes",
    "title": "【Quarto】論文の体裁を整える",
    "section": "注",
    "text": "注\n\n\n僕自身も試行錯誤中です。↩︎"
  },
  {
    "objectID": "pages/tips/250613_scraping_pop_by_mesh/index.html#はじめに",
    "href": "pages/tips/250613_scraping_pop_by_mesh/index.html#はじめに",
    "title": "【スクレイピング】Rでe-Statのメッシュ人口データファイルを一気に取得する",
    "section": "はじめに",
    "text": "はじめに\n以前の記事でe-Statから境界データ（シェープファイル）をスクレイピングで取得する方法をご紹介しました。\n今回は国勢調査をもとに公開しているメッシュごとの人口データを取得するコードの覚書です。時々実行することがあるので自分は忘れっぽいですし残しておくことにしました。\n詳細は前回とほぼ同じで、URL等が若干異なるくらいです。コードについては以下で詳しめに書いたので、不明点があればご覧下さい。\n\n\n\n\n\n\n【スクレイピング】rvestを使ってe-Statからファイルを取得する"
  },
  {
    "objectID": "pages/tips/250613_scraping_pop_by_mesh/index.html#コード",
    "href": "pages/tips/250613_scraping_pop_by_mesh/index.html#コード",
    "title": "【スクレイピング】Rでe-Statのメッシュ人口データファイルを一気に取得する",
    "section": "コード",
    "text": "コード\nlibrary(rvest)\n\n# データを保存したいフォルダを指定\nsave_dir &lt;- here::here(\"data/pop_by_mesh\")\n\n# 保存したいフォルダがない場合に作成\nif (!dir.exists(save_dir)) {\n  dir.create(save_dir)\n}\n\nbase_url &lt;- \"https://www.e-stat.go.jp\"\n\nfor (i in 1:8) {\n  url &lt;- paste0(\n    \"https://www.e-stat.go.jp/gis/statmap-search?page=\",\n    i,\n    \"&type=1&toukeiCode=00200521&toukeiYear=2020&aggregateUnit=H\",\n    \"&serveyId=H002005112020&statsId=T001141&datum=2011\"\n  )\n\n  html &lt;- read_html_live(url)\n  Sys.sleep(1)\n\n  links &lt;- html |&gt;\n    html_elements(\"a\") |&gt;\n    html_attr(\"href\")\n\n  csv_links &lt;- links[grepl(\"data\\\\?statsId=T001141\", links)]\n  full_urls &lt;- paste0(base_url, csv_links)\n\n  for (j in seq_along(full_urls)) {\n    code &lt;- sub(\".*code=([0-9]+).*\", \"\\\\1\", csv_links[j])\n    zip_path &lt;- file.path(save_dir, paste0(\"pop_mesh\", code, \".zip\"))\n    txt_path &lt;- file.path(save_dir, paste0(\"pop_mesh\", code, \".txt\"))\n    \n    # 既にファイルがある場合は次のループへ\n    if (file.exists(txt_path)) next\n\n    tryCatch({\n      download.file(full_urls[j], destfile = zip_path, mode = \"wb\")\n      Sys.sleep(1)\n\n      unzip_files &lt;- unzip(zip_path, list = TRUE)$Name\n      unzip(zip_path, exdir = save_dir)\n\n      for (original_name in unzip_files) {\n        if (grepl(\"\\\\.txt$\", original_name, ignore.case = TRUE)) {\n          old_path &lt;- file.path(save_dir, original_name)\n          new_path &lt;- txt_path\n          file.rename(old_path, new_path)\n        }\n      }\n\n      file.remove(zip_path)\n\n    }, error = function(e) {\n      warning(paste(\"エラー：\", full_urls[j]))\n    })\n\n    Sys.sleep(2)\n  }\n}\n最初の\nsave_dir &lt;- here::here(\"data/pop_by_mesh\")\nの部分だけ自分のディレクトリのパスに変えれば、あとはそっくりそのまま実行できると思います。次のifでもしディレクトリがない場合でも作成するようにしている1ので、エクスプローラー上でフォルダを作らなくても使うことができます。\nダウンロードにはまあまあ時間がかかりますが、手作業よりは圧倒的に速いので、機会があれば使ってみてください。"
  },
  {
    "objectID": "pages/tips/250613_scraping_pop_by_mesh/index.html#footnotes",
    "href": "pages/tips/250613_scraping_pop_by_mesh/index.html#footnotes",
    "title": "【スクレイピング】Rでe-Statのメッシュ人口データファイルを一気に取得する",
    "section": "注",
    "text": "注\n\n\nある場合はスキップするので、わざわざ消さなくても問題ありません。↩︎"
  },
  {
    "objectID": "pages/research/notsu_et_al_2025.html",
    "href": "pages/research/notsu_et_al_2025.html",
    "title": "The indirect effects of nuclear power plant accidents on population dynamics",
    "section": "",
    "text": "Most studies have focused on the economic consequences of disaster shocks, but the broader impact on areas outside the disaster remains unclear. Using the shock of the Great East Japan Earthquake and cross-municipality variation in the locations of nuclear power plants unrelated to the earthquake, this paper shows the indirect impact of disasters on population dynamics. The earthquake triggered nuclear power plant accidents, which heightened residents’ risk perceptions of the plants. We find that population inflows to and outflows from municipalities with nuclear power plants decreased after the earthquake. The effects could also be driven by the residents’ risk perceptions and falling land prices. Our findings suggest that policymakers and researchers need to consider the broader extent of disaster effects more carefully.\nURL: https://www.tandfonline.com/doi/full/10.1080/13504851.2025.2493771"
  },
  {
    "objectID": "pages/research/notsu_et_al_2025.html#abstract",
    "href": "pages/research/notsu_et_al_2025.html#abstract",
    "title": "The indirect effects of nuclear power plant accidents on population dynamics",
    "section": "",
    "text": "Most studies have focused on the economic consequences of disaster shocks, but the broader impact on areas outside the disaster remains unclear. Using the shock of the Great East Japan Earthquake and cross-municipality variation in the locations of nuclear power plants unrelated to the earthquake, this paper shows the indirect impact of disasters on population dynamics. The earthquake triggered nuclear power plant accidents, which heightened residents’ risk perceptions of the plants. We find that population inflows to and outflows from municipalities with nuclear power plants decreased after the earthquake. The effects could also be driven by the residents’ risk perceptions and falling land prices. Our findings suggest that policymakers and researchers need to consider the broader extent of disaster effects more carefully.\nURL: https://www.tandfonline.com/doi/full/10.1080/13504851.2025.2493771"
  },
  {
    "objectID": "pages/research/notsu_et_al_2025.html#bibtex",
    "href": "pages/research/notsu_et_al_2025.html#bibtex",
    "title": "The indirect effects of nuclear power plant accidents on population dynamics",
    "section": "BibTeX",
    "text": "BibTeX\n@article{notsu_indirect_2025,\n    title = {The indirect effects of nuclear power plant accidents on population dynamics},\n    issn = {1350-4851},\n    url = {https://doi.org/10.1080/13504851.2025.2493771},\n    doi = {10.1080/13504851.2025.2493771},\n    journal = {Applied Economics Letters},\n    author = {Notsu, Naruki and Abe, Yosuke and Harada, Shuko},\n    year = {2025},\n    note = {Publisher: Routledge},\n    pages = {1--6},\n}"
  },
  {
    "objectID": "pages/blog/241125_cite_drive/index.html#はじめに",
    "href": "pages/blog/241125_cite_drive/index.html#はじめに",
    "title": "【CiteDrive】オンラインで手軽に文献管理（？）",
    "section": "はじめに",
    "text": "はじめに\n文献管理には何を使っていますか？\nZoteroやEndnote、Paperpileなど様々なツールがあると思いますが、最近CiteDriveなるものをR Markdown公式がツイートしていました。\n\n\n📚 Tired of juggling citations? Meet (CiteDrive?)—your ultimate solution for seamless citation and reference management with #RStudio, #RMarkdown, and #QuartoPub. Simplify your workflow today! 🚀 Learn more: https://t.co/tEQyezjwEa#RStats #DataScience #QuartoPub #BibTeX #LaTeX…\n\n— R Markdown ((rmarkdown?)) November 25, 2024\n\n\nどうやらOverleaf, R Markdown, Quartoに適した文献管理ツールのようで、Quartoユーザーの僕にとってはいい選択肢になるのでは？と思いました。\nとは言っても修士論文の文献管理はZoteroで行っており、それをいまさら変えるつもりはなかったので、とりあえずプレゼンスライド用にQuarto \\(\\times\\) CiteDriveで使ってみました。\n結果として、簡単で使いやすく、文献管理ツールを使ったことがない方でも大きな抵抗感なく使えると思い、今回まとめることにしました。"
  },
  {
    "objectID": "pages/blog/241125_cite_drive/index.html#citedriveの準備",
    "href": "pages/blog/241125_cite_drive/index.html#citedriveの準備",
    "title": "【CiteDrive】オンラインで手軽に文献管理（？）",
    "section": "CiteDriveの準備",
    "text": "CiteDriveの準備\nCiteDriveのいいなと思った点に、アプリをインストールしなくてよいということが挙げられ、そのためブラウザ上ですべてが完結します。\nまずはCiteDriveにアクセスします。すると右上にSign upがあると思うので、そこからユーザー登録します。\nホーム画面へ行くので、New Projectより任意のプロジェクト名を入力し、Create New Projectを選択します。\n\n\n\n\n\n次に拡張機能をインストールします1。\nchrome ウェブストアやFirefox Browser ADD-ONSからCiteDriveと検索して出てきたものをインストールします。どちらも1番上に出てくることを確認したので、特に問題ないと思います。\n\n\n\nchromeウェブストアの場合\n\n\nちなみに上のツールバーにピン止めしておくと使いやすくお勧めです。\n\nユーザー登録\n拡張機能のインストール\n\nこれで準備は完了です。"
  },
  {
    "objectID": "pages/blog/241125_cite_drive/index.html#文献を追加する",
    "href": "pages/blog/241125_cite_drive/index.html#文献を追加する",
    "title": "【CiteDrive】オンラインで手軽に文献管理（？）",
    "section": "文献を追加する",
    "text": "文献を追加する\n引用したい2論文のページに行きます。今回は Bassetto et al. (2024) を例に紹介します。\n追加の方法は2種類あります。\n\n拡張機能を使って追加する\n.bibファイルを使って追加する\n\n\n拡張機能を利用\nまず1つ目です。\n論文のページに行き、ツールバーの拡張機能ボタン、もしくは右下に出ているCiteDriveボタンをクリックします。\n\n\n\n右下にもボタンが出ています\n\n\nすると、次のような画面に進みます。\n\n\n\n一部おかしくなっています\n\n\nこのように出てきて、問題がなければ右上のSaveをクリックし、保存します。\nしかし、冒頭にも書いたようにまだ完璧ではないツールなので、たまにおかしくなることがあり、今回も文字化けのような現象が起きています。\nこのような場合は手で修正するのが早いでしょう。名前とページの部分で修正が必要なので、まず名前は「Marco Bassetto & Zhen Huo & José-Víctor Ríos-Rull」とFirst name Last name & …となるように&でつないでいきます。ページは-（ハイフン）が文字化けしているので、ハイフンに直します。「3427–68」といった具合です。\nどうしてもページ情報を読み取っているので、その過程でおかしくなってしまうみたいですね。\nできたら右上のSaveで保存します。\n\n\n.bibファイルを利用\n次に2つ目の手順です。\n論文のページでは、citationをexportできるようになっています。一般的にはRISやBibTeXを使うことが多いと思いますが、ここではBibTeXを使用します。例えばAEAのページでは、論文ページの下の方へ行くと、Citationというところがあり、そこから.bibファイルをダウンロードできます。\n\n\n\nBibTeXを選択します\n\n\n選択ボックスからBibTeXを選択し、「Download as .bib」をクリックし、ダウンロードします。\n次にCiteDriveの任意のプロジェクトから、「Add」\\(\\rightarrow\\)「Upload BibTeX / RIS files」を選択し、「参照…」から、今ダウンロードした.bibファイルをアップロードします。\n.bibファイルは必要な情報を正確に含んでいる（はず）なので、画面の情報から作成する1の手順より正確です。"
  },
  {
    "objectID": "pages/blog/241125_cite_drive/index.html#限界に気づく",
    "href": "pages/blog/241125_cite_drive/index.html#限界に気づく",
    "title": "【CiteDrive】オンラインで手軽に文献管理（？）",
    "section": "限界に気づく",
    "text": "限界に気づく\n…とここまで書いて、CiteDriveの限界に気が付いた。\n.bibファイルを読み込んでも、それを正確に認識してくれないのだ。特に著者が複数人いる場合。\n.bibファイルの書かれ方は結構いろいろあり、「Last name, First name and …」みたいな書き方もあれば「First name Last name, …」みたいな書き方もある。しかし、CiteDriveはこれに対する認識力が欠如しており、「First name Last name & …」という書き方しか認識してくれないようだ（阿部調べ）。\nこれではせっかく正確な情報を写すために.bibファイルをダウンロードしてきているのに、手直しが必要なのでは元も子もない。\nここは今後改善されていくのだろうが、現段階ではあまりに不便すぎる。Zotero等は自動で認識して整理してくれるので大変ありがたい。\nしかしこれではZoteroでいい！となってしまう（実際なりそうなのだが）ので、引用が非常に便利という利点（これは本当にそう）を伝えるべく、この点には目をつむって書き進めていこうと思う。"
  },
  {
    "objectID": "pages/blog/241125_cite_drive/index.html#citedrive内を整理",
    "href": "pages/blog/241125_cite_drive/index.html#citedrive内を整理",
    "title": "【CiteDrive】オンラインで手軽に文献管理（？）",
    "section": "CiteDrive内を整理",
    "text": "CiteDrive内を整理\n追加した文献は、プロジェクトに自動追加されるのではなく、ホームのリストにプールされます。そのため、使いたいプロジェクトに振り分けてやる必要があります。\n\n\n\n「mywebsite」というフォルダに入れています\n\n\n文献をプロジェクトに入れることができたら、左側のリストから使いたいプロジェクトを選択します。すると、画面右上に「.bib」というボタンがあるのでそこをクリックし、出てきたURLをコピーしておきます。\n続いてRStudioに移ります。"
  },
  {
    "objectID": "pages/blog/241125_cite_drive/index.html#quarto内で引用",
    "href": "pages/blog/241125_cite_drive/index.html#quarto内で引用",
    "title": "【CiteDrive】オンラインで手軽に文献管理（？）",
    "section": "Quarto内で引用",
    "text": "Quarto内で引用\nRStudioで新しいQuartoファイルもしくはR Markdownファイルを開きます。\n---で囲まれたYAMLヘッダーと呼ばれる部分がありますが、ここにbibliography: \"コピーしたURL\"という感じで追加します。\n\n\n\nダブルクォーテーションで囲むのをお忘れなく\n\n\n長ったらしいですが、これでOKです。\n次にCiteDriveに戻り、プロジェクト内で引用したい論文にチェックを入れ、上の引用符をクリックします。\n\n\n\n\n\nこれで引用するためのコードがコピーされました。\nRStudioに戻り、任意の場所にペーストすると、[@bassetto_institution_2024]のように出てきますので、このままRenderすれば、(Bassetto et al. 2024) のように出力されます。Bassetto et al. (2024) のようにしたければ、四角括弧を外す必要がありますので、用途に応じて変えてみてください。"
  },
  {
    "objectID": "pages/blog/241125_cite_drive/index.html#おわりに",
    "href": "pages/blog/241125_cite_drive/index.html#おわりに",
    "title": "【CiteDrive】オンラインで手軽に文献管理（？）",
    "section": "おわりに",
    "text": "おわりに\nこのように、文献追加のところさえうまくいけば、ローカルにアプリをインストールする必要もなくブラウザ上で完結するし、.bibファイルをエクスポートする必要もないので非常に便利なツールなのです。\nしかし、その課題点が僕には大きく、本格採用には至っていません。僕は公式推奨のツールはなるべく使ってみたい人間なので、改善点が早期に修正され、満足いく使用感が得られるようになることを望みます。\n興味があれば、使ってみてください。"
  },
  {
    "objectID": "pages/blog/241125_cite_drive/index.html#footnotes",
    "href": "pages/blog/241125_cite_drive/index.html#footnotes",
    "title": "【CiteDrive】オンラインで手軽に文献管理（？）",
    "section": "注",
    "text": "注\n\n\nサイト側からインストールするよう勧められるかもしれませんが、指示に従って大丈夫です。↩︎\n実際に論文で使うかはさておいて、メモとして記録しておくためだけでも使えます↩︎"
  },
  {
    "objectID": "pages/blog/240723_typst/index.html#typst",
    "href": "pages/blog/240723_typst/index.html#typst",
    "title": "もはや TinyTeX も要らないのか…？",
    "section": "Typst…？",
    "text": "Typst…？\nこれまで PDF 出力は Quarto × TinyTeX でやってきたけど、たまたま Typst なるものを見つけた。\n疲れたら Quarto 公式ドキュメントを読んでいるのだけど、PDF 出力 = \\(\\LaTeX\\) との先入観があったので、Typst に気が付かなかったのだ。\nどうやら \\(\\LaTeX\\) 出力よりは速いらしい。早速使ってみる。"
  },
  {
    "objectID": "pages/blog/240723_typst/index.html#確かに早いし楽",
    "href": "pages/blog/240723_typst/index.html#確かに早いし楽",
    "title": "もはや TinyTeX も要らないのか…？",
    "section": "確かに早いし、楽。",
    "text": "確かに早いし、楽。\nとりあえず、以下のようにして書き始めてみる。\nYAML ヘッダーに keywords の項目あるのにPDFには出力できないのはなぜなんだろうか…。公式見ると HTML とかではいけそうなんだけどね。\n---\ntitle: Typst demo\nauthor: \n  - name: Yosuke Abe\n    affiliation: OSIPP\nabstract: |\n  Here is an abstract.\ndate: today\ndate-format: long\nlang: en\nformat: \n  typst: \n    keep-typ: true\n---\nそんで出力できたのがこちら\n結構いい感じですねー。そんなに \\(\\LaTeX\\) と比べても遜色ない。\nこれはもう少し丁寧にまとめて Tips に追加したい。\nそれでは。"
  },
  {
    "objectID": "pages/blog/240824_dvc/index.html#データはdvcで管理しているのだが",
    "href": "pages/blog/240824_dvc/index.html#データはdvcで管理しているのだが",
    "title": "DVCが使えない…？",
    "section": "データはDVCで管理しているのだが…。",
    "text": "データはDVCで管理しているのだが…。\nなんかDVCが使えなくなった。\ndvc pushやdvc pullをしようとするとはじめは認証が必要になると思うのだが、認証しようとするとこんなものが出る。\n\n\n\n\n\nえー、という感じ。\nDVCの公式を覗いてみたら、やっぱりこれは問題らしい。\n\n\n\n\n\n\n\nDVC公式ドキュメント\n\n\nちょっと読んでみると、Google Cloudプロジェクトを使えば何とかなるような感じがする。\nしばらくして治らなかったら、このやり方もまとめるとしようかなー。"
  },
  {
    "objectID": "pages/blog/240824_dvc/index.html#結論",
    "href": "pages/blog/240824_dvc/index.html#結論",
    "title": "DVCが使えない…？",
    "section": "結論",
    "text": "結論\nこれまでのが楽でよかった。"
  },
  {
    "objectID": "pages/blog/240708_positron/index.html#positron",
    "href": "pages/blog/240708_positron/index.html#positron",
    "title": "Positron は何者？",
    "section": "Positron…?",
    "text": "Positron…?\n先日後輩に教えられて「Positron」なるものの存在を知りました。\nどうやら RStudio に次ぐ IDE（統合開発環境）のようで、R には RStudio しか勝たんだろうと思っていた僕としては少し驚きました。\nというのも、VSCode での R 操作も試していたことがあり、その際に不便を感じることが多かったからです。特にキーボードショートカットで、は万能な VSCode であるがゆえに他の言語や機能と干渉してしまい、設定も面倒でした。その後は開発コンテナを使用している場合も RStudio Server を使用してきました。\nしかし今度は RStudio を提供する Posit 社が直々に新たな IDE を提供してきたと聞いて、大変興味を惹かれさっそくインストールすることにしました。\nとりあえず、R と Python のどちらとも親和性が高いことが売りみたいです！"
  },
  {
    "objectID": "pages/blog/240708_positron/index.html#インストール",
    "href": "pages/blog/240708_positron/index.html#インストール",
    "title": "Positron は何者？",
    "section": "インストール！",
    "text": "インストール！\nまだ正式リリースはされていないようです。\nGitHub からリリースページに飛んでインストールをしてみます。ここからインストールできます。\nインストールに難しいことはなく、サクサクと進みました。"
  },
  {
    "objectID": "pages/blog/240708_positron/index.html#開いてみる",
    "href": "pages/blog/240708_positron/index.html#開いてみる",
    "title": "Positron は何者？",
    "section": "開いてみる",
    "text": "開いてみる\n画面はこんな感じです。\n\nこれを開くまで知らなかったのですが、これは VSCode をフォークして作られているっぽいですね。\nVSCode での R に挫折した僕としては、少し不穏なスタートです😅"
  },
  {
    "objectID": "pages/blog/240708_positron/index.html#コードを実行してみる",
    "href": "pages/blog/240708_positron/index.html#コードを実行してみる",
    "title": "Positron は何者？",
    "section": "コードを実行してみる",
    "text": "コードを実行してみる\n試しに ggplot2::ggplot() を使ってプロットしてみることにします。\n\nうーん、現段階では課題が多そうですね。プレリリース版なので仕方なしです。\n\nショートカットが違う\n\nVSCode ベースの時点でなんとなく察していましたが、いろいろと違います。設定の必要あり。\n例えばチャンクの挿入は RStudio では Ctrl + Alt + I でしたが、Positron では Alt ではなく Shift。\nパイプも Ctrl + Shift + M では入れられない。など…。\n\nインライン出力未対応\n\nRStudio ではコードの下に実行結果が出ていましたが、Positron では対応していないようです。\n後で触れますが、今後対応していくみたい。\n\nggplot() で日本語を使うと文字化けする\n\nRStudio では文字化けしないので、今後修正されるのかな？\n\n\n\n\n\nRStudio"
  },
  {
    "objectID": "pages/blog/240708_positron/index.html#レンダリングしてみる",
    "href": "pages/blog/240708_positron/index.html#レンダリングしてみる",
    "title": "Positron は何者？",
    "section": "レンダリングしてみる",
    "text": "レンダリングしてみる\nではレンダリング（R Markdown で言うところの Knit）してみます。\n\nあれ、なんか普通に日本語出力できてますね…笑\n\nでも PDF だといつも通り文字化けします。ここは YAML ヘッダーの設定で対応できそうです。"
  },
  {
    "objectID": "pages/blog/240708_positron/index.html#感想",
    "href": "pages/blog/240708_positron/index.html#感想",
    "title": "Positron は何者？",
    "section": "感想",
    "text": "感想\n\n今後の期待が高まる\n現時点では VSCode の時の不便さを解消しきれておらず、まだ乗り換えられないなというのが正直なところです。\nしかし、他ではコンソールで予測変換が使えるようになってて、それが結構いい感じです。install.packages() と書く時間が短縮できます(^^)（他にもっとないのか()）\n次の課題を乗り越えてきたら、僕は Positron に移行するかもしれません。\n\nインライン出力\n\n実行結果がコードの下に出てほしいです。\n\n拡張機能の充実\n\n現時点では主要な拡張機能が使えません。Microsoft が提供する拡張機能は純正 VSCode でしか使えないようです。\n\nリモート開発機能への対応\n\nTips でも紹介している通り、開発コンテナを使用した環境構築をしているので、ここへの対応は必須です。\n\n\nちなみに、Posit 公式が言っているように、現在は多くの課題を抱えていて、データサイエンティストにとってすぐに最適なものになるとは考えていないようです。\nまた、今後のビジョンも示されており、上に挙げたような課題も克服されると思います。\nこれからのアップデートに期待しましょう！"
  },
  {
    "objectID": "pages/blog/index.html",
    "href": "pages/blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "学生最後にやってみたかったこと\n\n\nここから得られるエビデンスは特にないが。\n\n\n\n\n\n2025/03/31\n\n\n\n\n\n\n\n\n\n\n\n\nパッケージがCRANに公開された話\n\n\n\nR\n\n\n\n果たして分析者が使ってくれるほどになるだろうか…。\n\n\n\n\n\n2025/03/23\n\n\n\n\n\n\n\n\n\n\n\n\n【CiteDrive】オンラインで手軽に文献管理（？）\n\n\n\nQuarto\n\nR Markdown\n\nLaTeX\n\n\n\n結構いいと思ったけど、まだまだやな。\n\n\n\n\n\n2024/11/25\n\n\n\n\n\n\n\n\n\n\n\n\n【念願】GitHub CopilotにGPT 4oが搭載\n\n\n\nGitHub\n\nAI\n\n\n\n\n\n\n\n\n\n2024/11/12\n\n\n\n\n\n\n\n\n\n\n\n\n【学生は申し込め】GitHub Copilotを申請しよう\n\n\n\nGitHub\n\nAI\n\n\n\n\n\n\n\n\n\n2024/09/18\n\n\n\n\n\n\n\n\n\n\n\n\nDVCが使えない…？\n\n\n\nDVC\n\n\n\n\n\n\n\n\n\n2024/08/24\n\n\n\n\n\n\n\n\n\n\n\n\nもはや TinyTeX も要らないのか…？\n\n\n\nTypst\n\nQuarto\n\n\n\n\n\n\n\n\n\n2024/07/23\n\n\n\n\n\n\n\n\n\n\n\n\nPositron は何者？\n\n\n\nR\n\nPositron\n\n\n\nPosit社が出した新たなIDE！\n\n\n\n\n\n2024/07/08\n\n\n\n\n\n一致なし"
  },
  {
    "objectID": "index.html#highlights",
    "href": "index.html#highlights",
    "title": "Yosuke Abe",
    "section": "🌟 Highlights",
    "text": "🌟 Highlights\n🗓 2025/07/06\nRパッケージ「fixes」バージョン0.5.0をCRANで公開しました！（→ CRAN, Tipsへ）\n📌 Staggered DiDのイベントスタディにも対応しています！\n🗓 2025/04/17\nNotsu, Abe, and Harada (2025)がApplied Economics Lettersに掲載されました！\n📌 Abstractはこちら\n🗓 2025/03/29\nShinyアプリケーションを公開しています！「地方財政状況マップ」を追加！（→ Softwareへ）\n📌 他にも人口ヒートマップなどを公開しています！\n🗓 2025/02/16\n「政令指定都市・中核市の整理」ページをアップデート（→ Tipsへ）\n📌 行政区を市単位で集計できるコードを追加しました。"
  },
  {
    "objectID": "index.html#latest-posts",
    "href": "index.html#latest-posts",
    "title": "Yosuke Abe",
    "section": "📜 Latest Posts",
    "text": "📜 Latest Posts\n\n\n\n\n\n\n\n\n\n\nRStudio Serverをインストールする【リモートデスクトップも】\n\n\n他のデバイスからも操作できます！\n\n\n\n\n\n2025/07/15\n\n\n\n\n\n\n\n\n\n\n\n\n【スクレイピング】Rでe-Statのメッシュ人口データファイルを一気に取得する\n\n\n今回はメッシュデータのCSVファイルを取得していきます。\n\n\n\n\n\n2025/06/13\n\n\n\n\n\n\n\n\n\n\n\n\n【データ管理】DVCの設定まとめ\n\n\nトークン切れによる再認証が必要な問題を解消できるかもしれません。\n\n\n\n\n\n2025/06/01\n\n\n\n\n\n\n\n\n\n\n\n\n【パッケージ開発】fixesでイベントスタディを効率化\n\n\nStaggered DiDにも対応しました。\n\n\n\n\n\n2025/05/25\n\n\n\n\n\n\n\n\n\n\n\n\n【GIS】行政区域データを整理【ファイル有】\n\n\n元データをサマライズし、簡略化・軽量化しました。\n\n\n\n\n\n2025/04/13\n\n\n\n\n\n一致なし"
  },
  {
    "objectID": "pages/about.html",
    "href": "pages/about.html",
    "title": "阿部洋輔",
    "section": "",
    "text": "X (Twitter)\n  \n  \n      Bluesky\n  \n  \n    \n     GitHub\n  \n\n  \n  \n\n\n\n福島県出身（福島市）\n学士（経済学）\n修士（国際公共政策）\n趣味：スポーツ観戦\n\n東北楽天ゴールデンイーグルス\nFCバイエルンミュンヘン\n\n\n\n\n\n\n (Base, Tidyverse)\n Quarto Markdown\n\\(\\LaTeX\\)\n Python （勉強中）"
  },
  {
    "objectID": "pages/about.html#ざっくり",
    "href": "pages/about.html#ざっくり",
    "title": "阿部洋輔",
    "section": "",
    "text": "福島県出身（福島市）\n学士（経済学）\n修士（国際公共政策）\n趣味：スポーツ観戦\n\n東北楽天ゴールデンイーグルス\nFCバイエルンミュンヘン"
  },
  {
    "objectID": "pages/about.html#スキル",
    "href": "pages/about.html#スキル",
    "title": "阿部洋輔",
    "section": "",
    "text": "(Base, Tidyverse)\n Quarto Markdown\n\\(\\LaTeX\\)\n Python （勉強中）"
  },
  {
    "objectID": "pages/about.html#research",
    "href": "pages/about.html#research",
    "title": "阿部洋輔",
    "section": "Research",
    "text": "Research\n\n\n  \n  \n    \n      \n        Notsu, Abe, and Harada (2025) \"The Indirect Effects of Nuclear Power Plant Accidents on Population Dynamics\" Applied Economics Letters,\n        \n          https://doi.org/10.1080/13504851.2025.2493771\n        \n      \n      \n      \n        \n           Abstract\n        \n      \n      \n    \n  \n  \n\n一致なし"
  },
  {
    "objectID": "pages/blog/241112_copilot_gpt/index.html#github-copilotにgpt-4oがやってきた",
    "href": "pages/blog/241112_copilot_gpt/index.html#github-copilotにgpt-4oがやってきた",
    "title": "【念願】GitHub CopilotにGPT 4oが搭載",
    "section": "GitHub CopilotにGPT 4oがやってきた",
    "text": "GitHub CopilotにGPT 4oがやってきた\nもう多分１か月は前のことだと思うが、GitHub CopilotでGPT 4oが使えるようになり、そのウェイトリストに登録できますという旨のニュースを見かけた。\nついにやってきたかーという思いで早速登録ページに行き、登録したわけだが、どうやらそんなすぐに使えるようになるわけでもないらしく、しばらく待機とのこと…。\nしかし、まだかなーとボケーっとしていたとある日、VSCodeのGitHub Copilot拡張機能にアップデートが入り、仕様も大きく変わったことに気が付いた。\nおや？と思いCopilot Chatを見てみるとなんと！\n\n\n\n右下にありますね。チャット自体はページ上部の真ん中右にあるアイコンから開けます。\n\n\nGPT 4oが選択できるようになっている。\nもちろんコーディング支援の精度や反応速度は向上するだろう。頼もしい限りだ。ブラウザでChat GPTを開かなくてもいいというのは大きい。\nまだ使い込めてはいないので何とも言えないところだが、Copilotの今後のさらなる成長に期待したい！\nGitHub Copilotをまだお使いでない方、学生なら無料で使えるので、少し手間だが以下の記事も参照に申請してみることをお勧めします！\n\n\n\n\n\n\n【学生は申し込め】GitHub Copilotを申請しよう"
  },
  {
    "objectID": "pages/blog/241112_copilot_gpt/index.html#おまけ",
    "href": "pages/blog/241112_copilot_gpt/index.html#おまけ",
    "title": "【念願】GitHub CopilotにGPT 4oが搭載",
    "section": "おまけ",
    "text": "おまけ\nところで、CopilotをRStudioで使えるようにする（と言ってもローカルのRStudioの場合はすぐできるけれども）tipsを近々公開しようと思うので、RStudio Serverをお使いの方は、また見てみてください。"
  },
  {
    "objectID": "pages/blog/241112_copilot_gpt/index.html#追記",
    "href": "pages/blog/241112_copilot_gpt/index.html#追記",
    "title": "【念願】GitHub CopilotにGPT 4oが搭載",
    "section": "追記",
    "text": "追記\nTipsすぐ書けたので、記事を追加しました。以下をご覧ください。\n\n\n\n\n\n\nRStudio (Server)でGitHub Copilotを使う"
  },
  {
    "objectID": "pages/blog/250331_hanzai/index.html#いよいよ学生が終わる",
    "href": "pages/blog/250331_hanzai/index.html#いよいよ学生が終わる",
    "title": "学生最後にやってみたかったこと",
    "section": "いよいよ学生が終わる",
    "text": "いよいよ学生が終わる\n今日は3月31日ということで、今日をもって正式に学生生活が終わる。まさか大学院まで行って勉強することになるとは思っていなかったが、思ったより頑張れたし、同期や先輩後輩、先生にも恵まれてうまいことやってこれたと思う。\nところで先日の卒業式、総長が感受性の話をされていたのだが、その中でフィルターバブルの話にもなった。僕自身はこの言葉はつい最近まで全く知らなかったのだが、日経に最近は普通に使われる～といったようなことが書いてあったので焦って調べたのがつい2週間くらい前だ。まぁそんなことはどうでもよくて、ともかく最近は自分もフィルターバブルの中にいたのだと気づいて大いに反省し、スマホもあまり触らなくなった（おかげでメンタルがやられなくて幸福度が上がった気がする）。しかしどうしても最後にXで見た論調で気になることがあって、最後にどうしてもそれだけ自分でデータを集めてみたくなった。\nそれは、\n「（実質的な）移民を増やせば犯罪が増加する」\nというものである。保守（というよりネトウヨ）がずっと言っていることだが、特に大した根拠も示されていないのに、もしかしたらそうなのかな…とかこれまた根拠のない不安を覚えていた（大体みな敵意がすさまじく、とにかくこれがメンタルヘルスに悪い）。\n僕はとにかくアカデミアの世界に疎いので、どうせこの手の研究はごまんとあるのだろうと思ってはいる。しかしデータを集める、可視化するというのがそもそも好きなのと、（おまけ程度だが）仕事でいろいろな国のデータを見ることになると思うのでその練習という意味合いもある。\n直感的には日本は世界最高水準に治安が良いので、在留外国人が増えたら異なる価値基準の人が増えて犯罪は増えそうだ。しかし、実際には外国人の犯罪率は高くないという記事も見たことがある。なので根拠のない思い込みという可能性が大いにあるのかもしれないとも思う。\n何はともあれ、この学生最後の春休み最終日という、明日の準備しろよと言う時間に急ぎデータを集めプロットしてみることにした。さすがに分析までは無理そうだ。開始は16時。朝早く起きていたのに思い出したのが遅かった…。"
  },
  {
    "objectID": "pages/blog/250331_hanzai/index.html#e-statにあたってみる",
    "href": "pages/blog/250331_hanzai/index.html#e-statにあたってみる",
    "title": "学生最後にやってみたかったこと",
    "section": "e-Statにあたってみる",
    "text": "e-Statにあたってみる\n犯罪のデータなど見たことがなかったので、どのデータがよいのかもわからない。とりあえずe-Statで「犯罪」と打ち込んでヒットした犯罪統計をあたってみる。\nひとまず犯罪の種類ごとにデータがあったので、（レイプなどが増えるという話が特に吹き荒れているので）ひとまず不同意性交等のデータを集めてみた。不同意わいせつもあったのだが、とにかくデータが分析に不向きで時間がないため、このデータにした。こんなExcelファイル見て「ほぉほぉなるほど！」とかなる人いないのだから、せめて分析向きにしてほしい。切実に。\n\n\n\n元データ\n\n\nとりあえずコロナ前の2018年から2024年までのデータを収集した。\nあとは住民基本台帳から都道府県ごとの外国人人口を回収。同じく2018年から2024年。"
  },
  {
    "objectID": "pages/blog/250331_hanzai/index.html#取り急ぎプロット",
    "href": "pages/blog/250331_hanzai/index.html#取り急ぎプロット",
    "title": "学生最後にやってみたかったこと",
    "section": "取り急ぎプロット",
    "text": "取り急ぎプロット\nとにかくデータ整備が煩わしく、思い立ってから整備を終えるだけで2時間近くかかってしまった。やっとデータフレーム化できたので、急いでプロットしてみよう。\n\n\nコード\nlibrary(tidyverse)\nlibrary(ggrepel)\ndata_dir &lt;- here::here(\"data/250331_hanzai\")\n\n# --------------------\n# 変数の整備\n# --------------------\ndf &lt;- read_csv(file.path(data_dir, \"dataframe.csv\")) |&gt; \n  mutate(\n    group = if_else(id_pref %in% c(13, 23, 27), \n                    as.factor(name_pref), \"other\"), \n    group_lab = if_else(id_pref %in% c(13, 23, 27) & year == 2024, \n                        name_pref, NA_character_)\n  )\n\n# --------------------\n# プロット\n# --------------------\nggplot(\n  df |&gt; filter(id_pref %in% c(13, 23, 27)), \n  aes(x = year, y = ninchi_total, group = id_pref)\n) + \n  theme_minimal() + \n  theme(\n    panel.grid = element_blank(), \n    legend.position = \"none\"\n  ) + \n  geom_vline(\n    xintercept = seq(2018, 2024, by = 1), \n    color = \"gray91\", \n    linewidth = .6\n  ) + \n  geom_segment(\n    data = tibble(y = seq(0, 600, by = 200), x1 = 2018, x2 = 2024), \n    aes(x = x1, xend = x2, y = y, yend = y), \n    inherit.aes = FALSE, \n    color = \"gray91\", \n    linewidth = .6\n  ) + \n  geom_segment(\n    data = tibble(y = seq(100, 500, by = 200), x1 = 2018, x2 = 2024), \n    aes(x = x1, xend = x2, y = y, yend = y), \n    inherit.aes = FALSE, \n    color = \"gray93\", \n    linewidth = .4\n  ) + \n  geom_line(\n    data = df |&gt; filter(group == \"other\"), \n    color = \"gray75\"\n  ) + \n  geom_line(\n    aes(color = group)\n  ) + \n  geom_text_repel(\n    aes(color = group, label = group_lab), \n    hjust = 0, \n    xlim = c(2024.4, NA), \n    size = 4, \n    segment.linetype = \"dotted\"\n  ) + \n  labs(x = \"年\", y = \"不同意性交等の認知件数\") + \n  scale_x_continuous(\n    expand = c(0, 0), \n    limits = c(2018, 2025), \n    breaks = seq(2018, 2024, by = 2)\n  ) + \n  scale_y_continuous(\n    expand = c(0, 0), \n    limits = c(0, 600), \n    breaks = seq(0, 600, by = 200)\n  )\n\n\n\n\n\n\n\n\n\nここまでプロットして、人口当たりにするのを忘れていたことに気づく…。そりゃ東京大阪名古屋が多いに決まってるよねー…という感じではある。\nしかし繰り返すが時間がない。ここで分かったこととしては、明確にコロナ以降に犯罪数が伸びていることである。東京なんかは前と比べて3倍弱になっているようだ。\nコロナで何かが変わったのか？という気がするが、ここで外国人が増えたからだとは論じることはできない。とはいえインバウンドが盛んになったのもコロナ以後であるから、犯罪が増加したのと時期が被っているのは確かなようである。"
  },
  {
    "objectID": "pages/blog/250331_hanzai/index.html#ここまできたら最後までやりたいが",
    "href": "pages/blog/250331_hanzai/index.html#ここまできたら最後までやりたいが",
    "title": "学生最後にやってみたかったこと",
    "section": "ここまできたら最後までやりたいが…",
    "text": "ここまできたら最後までやりたいが…\n今は19時15分。さっさと明日の準備して寝ないとという焦りも生じてきたので、せめて相関くらいは見ておこう。仕事が始まってもし時間ができたらさらに調べてみることにする。\n\n\nコード\ndf_ratio &lt;- df |&gt; \n  filter(year %in% c(2018, 2024)) |&gt; \n  select(id_pref, name_pref, year, ninchi_total, pop_gaikoku) |&gt; \n  pivot_wider(\n    names_from = year, \n    values_from = c(ninchi_total, pop_gaikoku), \n    names_sep = \"\"\n  ) |&gt; \n  mutate(\n    ninchi_inc = ninchi_total2024 / ninchi_total2018, \n    fpop_inc = pop_gaikoku2024 / pop_gaikoku2018\n  ) |&gt; \n  select(ends_with(c(\"_pref\", \"_inc\")))\n\nggplot(df_ratio, aes(x = fpop_inc, y = ninchi_inc)) + \n  geom_point() + \n  xlab(\"外国人人口増加率\") + \n  ylab(\"不同意性交等罪認知件数増加率\") + \n  stat_smooth(method = lm, se = FALSE, color = \"darkgreen\") + \n  annotate(\"text\", x = 1.75, y = 11, label = \"R^2 == 0.088\", \n           parse = TRUE) + \n  theme_bw()\n\n\n\n\n\n2018年から2024年の増加率で見た相関\n\n\n\n\nまぁ、正の相関は見られるが、大して強くはないな。しかも思いついた変数同士で適当に見ただけだから特に説得力もない。やってみただけになってしまった…（はじめからそのつもりではあったのだが）。\n時間も時間なのでここが限界かもしれない。"
  },
  {
    "objectID": "pages/blog/250331_hanzai/index.html#力尽きた",
    "href": "pages/blog/250331_hanzai/index.html#力尽きた",
    "title": "学生最後にやってみたかったこと",
    "section": "力尽きた",
    "text": "力尽きた\nこんな簡単なプロットでも数時間かかると思うと恐ろしいものだ。しかも説得力を持たせようと思ったらさらに入念に変数を検討して、適切な手法を用いて分析せねばならない。\n研究者とはすごいなと改めて思った。僕はどちらかというとその環境整備というか、もちろんRで分析カタカタすることもあるとは思うのだが、使いやすいデータを普及させたり、一般市民が社会問題の概要を適切に把握できるようなプロットを作成したいという思いがある。エビデンスという言葉は一見説得力があるが、なんだかほんとにわかってるのかなと、未熟な僕でも思うことがある。\n今日もプロットを作っていて、これをこう切って貼ったら信じちゃう人もいるんじゃないかと感じた。上のプロットだって大した検討もしていないのに、これだけ持ってやっぱり外国人が増えると犯罪が増えるじゃないかと主張できかねない。何事も妄信はいけないなと、なぜか春休みの最後に考えることとなった。\nともかく明日からは社会人。まずは見習いだが、自分でも納得がいくいい仕事をできるように頑張っていきたい。"
  },
  {
    "objectID": "pages/blog/250331_hanzai/index.html#最後に",
    "href": "pages/blog/250331_hanzai/index.html#最後に",
    "title": "学生最後にやってみたかったこと",
    "section": "最後に",
    "text": "最後に\n春休みはShinyアプリケーションも作ってみた。RESASに感化されてRでもやれたらどうかと思い、勢いで3つくらい作った（ついでに久しぶりにRESASみたらだいぶアップデートされてた）。\n春休みの自由課題ということで、ここまで読んでくれた方にはぜひそちらも少し見ていってほしい。お願いします。\n\n\n\n\n\n\nSoftware"
  },
  {
    "objectID": "pages/blog/250323_fixes/index.html#春休みの成果",
    "href": "pages/blog/250323_fixes/index.html#春休みの成果",
    "title": "パッケージがCRANに公開された話",
    "section": "春休みの成果",
    "text": "春休みの成果\n自分の修士論文だったり先輩後輩との研究だったり、昨年末あたりからDID分析をすることがまぁまぁ多かった。DID自体は比較的簡単に分析を回せるから別にいいんだけど、いかんせんイベントスタディが面倒くさかった。fixestにi()関数があることは知っていたものの、あまり使い勝手が良くないなと思っていたので、修士論文が年始に書き終わったタイミングでイベントスタディ用のパッケージを開発しようと決めた。\n他のパッケージのソースコードを何個か見たことがあったのでその複雑さは知っていたものの、幸いにも今はAIが発展してきているので、なんとかなるだろうという楽観的な気持ちで始めてみた。\n結果的になんとか書き終わったものの、その道のりは思ったよりも大変だった。"
  },
  {
    "objectID": "pages/blog/250323_fixes/index.html#意外と考えることは多い",
    "href": "pages/blog/250323_fixes/index.html#意外と考えることは多い",
    "title": "パッケージがCRANに公開された話",
    "section": "意外と考えることは多い",
    "text": "意外と考えることは多い\n何が大変だったかというと、変数の扱いがある。変数をダブルクォーテーションで囲んで指定するというのは個人的に面倒だな～と思っているので、なるべく囲まなくていいようにしたかったのだが、これがまぁ難しい。いくらAIが助けてくれるとはいっても、今の段階では「とはいえAI」だと思っているので、書いてくれたのが間違っていた時がしんどい。ダブルクォーテーションで囲まなくてよくするのがこんなに大変なのかと、これまでのパッケージの開発者の方々には尊敬の念を抱くばかりだ。\n次は条件分岐。もし存在しない変数が入力されたり、値が存在する範囲をはみ出していたりすると警告やエラーメッセージを出さなくてはならない。今も完璧ではないかもしれないが、ある程度は対処できているとは思う。しかし、自分の想像しない入力があったりすると、対応できていないことがあるかもしれない。今後もこうしたことが見つかってくると思うと、メンテナンスの意義をひしひしと感じる。"
  },
  {
    "objectID": "pages/blog/250323_fixes/index.html#関数ができてからも長い",
    "href": "pages/blog/250323_fixes/index.html#関数ができてからも長い",
    "title": "パッケージがCRANに公開された話",
    "section": "関数ができてからも長い",
    "text": "関数ができてからも長い\n関数ができたまではいいものの、結構提出するまでが長かったりする。パッケージをビルドしてドキュメントを作成し、タイポをチェックしたりと、やることは多い。コード例やテストコードを書いたりしなくてもならない。RStudio上でコマンドが用意されているものの…という感じではある。\nこのあたり忘れそうだから、またtipsでまとめたいな。"
  },
  {
    "objectID": "pages/blog/250323_fixes/index.html#けどcranに公開できたのは大きい",
    "href": "pages/blog/250323_fixes/index.html#けどcranに公開できたのは大きい",
    "title": "パッケージがCRANに公開された話",
    "section": "けどCRANに公開できたのは大きい",
    "text": "けどCRANに公開できたのは大きい\nしばらくはCRANに公開するつもりもなかったのでGitHub上で公開しているだけだったのだが、どうせならinstall.packages()でインストールできるようにしたいし、なんか実績っぽくていいかなという思いもあったので、やっぱり公開することにした。\n新しくNEWS.mdを書かなきゃいけなかったりいくつかステップは必要だったものの、提出自体はそこまで大変ではなかった。しかし、Windows, Mac, Linuxでしっかり動くことだったり、ドキュメントの中身が精査されたりと、ハードルはGitHubで公開するよりも厳しい。実際提出した後に一回送り返された。\nけど幸いにも送り返されたのは一回だけで、二回目の提出で承認された。あまりにもぬるっと掲載されていたのでしばらく気づかなかったのだが、これで春休みの頑張りが一つ結果になった気がしてちょっとうれしかった。\nというわけで、掲載されたページは以下。\nhttps://cran.r-project.org/web/packages/fixes/index.html\ninstall.packages(\"fixes\")\nでインストールできるようにもなっている。"
  },
  {
    "objectID": "pages/blog/250323_fixes/index.html#これからも何か作るかも",
    "href": "pages/blog/250323_fixes/index.html#これからも何か作るかも",
    "title": "パッケージがCRANに公開された話",
    "section": "これからも何か作るかも",
    "text": "これからも何か作るかも\nとりあえず流れを知ることができたのは大きい。今後も仕事でRを使っていくことが多いと思うので、引き続きなにか効率化できそうなものがあったらパッケージ化していけたらいいなと思う。"
  },
  {
    "objectID": "pages/blog/240723_typst/demo/demo.html",
    "href": "pages/blog/240723_typst/demo/demo.html",
    "title": "Typst demo",
    "section": "",
    "text": "Keywords: Keyword 1, Keyword 2, Keyword 3…"
  },
  {
    "objectID": "pages/blog/240723_typst/demo/demo.html#subsection",
    "href": "pages/blog/240723_typst/demo/demo.html#subsection",
    "title": "Typst demo",
    "section": "Subsection",
    "text": "Subsection\nYou can also write mathematical expressions like Equation 1.\n\\[\nY_{it} = \\delta D_{it} + u_i + \\varepsilon_{it}, \\quad t = 1, 2, \\ldots, T\n\\tag{1}\\]"
  },
  {
    "objectID": "pages/blog/240918_github_copilot/index.html#copilotは強い",
    "href": "pages/blog/240918_github_copilot/index.html#copilotは強い",
    "title": "【学生は申し込め】GitHub Copilotを申請しよう",
    "section": "Copilotは強い",
    "text": "Copilotは強い\n最近はAIの時代といっても過言じゃないほどスマホにもパソコンにもAIが搭載されるのが普通になっている。\n僕はM1の頃にGitHub Copilotの存在を知り、それを使い続けているのだが、結構すごくて役に立つ。特にVSCodeで作業するときに重宝している（RStudioでも使えるのだが、RStudioの良さが消えてしまうのであまり使っていない。）\n本来GitHub Copilotは有料だが、学生は無料で使えるため全大学院生が申請して損はないと思う。今回は申請方法をまとめてくれている記事の紹介とどんな感じで使えるのかを紹介したい。"
  },
  {
    "objectID": "pages/blog/240918_github_copilot/index.html#申請方法",
    "href": "pages/blog/240918_github_copilot/index.html#申請方法",
    "title": "【学生は申し込め】GitHub Copilotを申請しよう",
    "section": "申請方法",
    "text": "申請方法\n申請方法については、以下の記事がわかりやすくまとめてくれている。\n\n\n\n\n\n\n【GitHub】学生申請をして無料でGitHub Copilotを使う\n\n\n\n特に難しいところはない。学生証を英語にして書き直すところが面倒なくらいかと。\n後半に書いてあるように、VSCodeでGitHub Copilotの拡張機能を入れ、GitHubでログインすればVSCode上で使うことができる。"
  },
  {
    "objectID": "pages/blog/240918_github_copilot/index.html#使い方のイメージ",
    "href": "pages/blog/240918_github_copilot/index.html#使い方のイメージ",
    "title": "【学生は申し込め】GitHub Copilotを申請しよう",
    "section": "使い方のイメージ",
    "text": "使い方のイメージ\nVSCodeで空ファイルを作ると、以下のように出てくる。\n\n\n\n「何らかの操作を依頼」することができるようだ。\n\n\n早速Ctrl + Iを押して依頼してみる。\n\n\n\n\n\nこんな感じで依頼してみると、\n\n\n\n\n\nこんな感じで書いてくれた。「同意する」を押すと、コードが入力される。\nもっと丁寧に指示すれば、細かいコードも書いてくれる。\nまた、ChatGPTのように、チャット形式で依頼することも可能。GitHub Copilot Chatの拡張機能を入れると、左側のバーにチャットのアイコンが出てくるので、そこをクリック。\nチャットで聞くと、回答を出してくれる。\n\n\n\n\n\nいい感じに出してくれた。出してくれたコードにカーソルを合わせると星マークのようなものが出てくるが、それは「エディターで適用します」であり、クリックすれば書いていた文書にそのコードを適用してくれる。\nさらに、Copilotは書いている文章の候補も自動で提示してくれる。\n先ほどのコードの「はじめに」の部分を少しいじってみると、\n\n\n\n\n\n初めまして、と打ったら続けてグレーの文字で続きを提示してくれている。\nTabキーで一括採用できるし、Ctrl + →で一部採用もできる。文章によっては、超絶長い提示もしてくれることがあって、すげえな…と思うこともある。\n全然そういうことじゃないんだけどなーということもあれば、的を射た提示をしてくれることもある。場合にはよるが、結構頼りになる。"
  },
  {
    "objectID": "pages/blog/240918_github_copilot/index.html#まとめ",
    "href": "pages/blog/240918_github_copilot/index.html#まとめ",
    "title": "【学生は申し込め】GitHub Copilotを申請しよう",
    "section": "まとめ",
    "text": "まとめ\n入れておいて損はなかったなと、1年使ってみて思う。\nもちろん文章だけでなくRやPython、LaTeXなどなどにも使えるし、むしろそっちが本業だと思う。\nぜひ紹介したサイトを参考にしながら、申請してみてほしい。"
  },
  {
    "objectID": "pages/software/index.html#r",
    "href": "pages/software/index.html#r",
    "title": "Software",
    "section": "R",
    "text": "R\n\n\n  \n  \n      \n          \n              \n              fixes \n              \n          \n          TWFEを用いたDIDにおけるイベントスタディの計算とプロットを行う関数を提供しています。\n\n          \n              \n                  Link:\n                  \n                      \n                      \n                      \n                      \n                           CRAN\n                      \n                      \n                      \n                      \n                      \n                           GitHub\n                      \n                      \n                  \n              \n          \n      \n  \n  \n\n\n一致なし\n\n\n\nShiny\n\nShinyアプリケーションの一覧です。地方財政状況マップを追加しました（2025/3/28）。\n\n\n\n\n  \n    \n      \n        地方財政状況マップ\n         \n        \n          \n        \n        \n        2014 ~ 2023\n\n      \n    \n    \n      \n    \n    \n    \n    \n  \n\n  \n    \n      \n        課税状況ヒートマップ\n         \n        \n          \n        \n        \n        \n      \n    \n    \n      \n    \n    \n    \n    \n  \n\n  \n    \n      \n        人口ヒートマップ\n         \n        \n          \n        \n        \n        1980～2020\n\n      \n    \n    \n      \n    \n    \n    \n    \n  \n\n  \n    \n      \n        白地図 Japan\n         \n        \n          \n        \n        \n        全国版\n\n      \n    \n    \n      \n    \n    \n    \n    \n  \n\n\n\n一致なし"
  },
  {
    "objectID": "pages/tips/index.html",
    "href": "pages/tips/index.html",
    "title": "Tips",
    "section": "",
    "text": "【パッケージ開発】fixesでイベントスタディを効率化【Staggered対応】\n\n\n\n\n\n\n\nggplot2ガイド\n\n\n\n\n\n\n\n【改訂版】開発コンテナを使ってR環境を構築！\n\n\n\n\n\n\n\n【王道】TeX LiveをインストールしてLaTeX環境を構築する\n\n\n\n\n\n\n\n【PDF】Quarto で論文を書く\n\n\n\n\n\n\n\nQuarto & R MarkdownでPDF出力【LaTeX】\n\n\n\n\n\nPrevoius\n\n\n\nNext\n\n\n\n\n\n\n\n\n\n   \n    \n    \n      並び替え\n      デフォルト\n      \n        題名\n      \n      \n        日付 - 日付（昇順）\n      \n      \n        日付 - 日付（降順）\n      \n      \n        作者\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nRStudio Serverをインストールする【リモートデスクトップも】\n\n\n\nR\n\nRStudio\n\nWindows\n\nWSL\n\n\n\n他のデバイスからも操作できます！\n\n\n\n\n\n\n2025/07/15\n\n\n\n\n\n\n\n\n\n\n\n【スクレイピング】Rでe-Statのメッシュ人口データファイルを一気に取得する\n\n\n\nR\n\nデータ処理\n\n備忘録\n\n\n\n今回はメッシュデータのCSVファイルを取得していきます。\n\n\n\n\n\n\n2025/06/13\n\n\n\n\n\n\n\n\n\n\n\n\n\n【データ管理】DVCの設定まとめ\n\n\n\nDVC\n\n\n\nトークン切れによる再認証が必要な問題を解消できるかもしれません。\n\n\n\n\n\n\n2025/06/01\n\n\n\n\n\n\n\n\n\n\n\n【パッケージ開発】fixesでイベントスタディを効率化\n\n\n\nR\n\n\n\nStaggered DiDにも対応しました。\n\n\n\n\n\n\n2025/05/25\n\n\n\n\n\n\n\n\n\n\n\n【GIS】行政区域データを整理【ファイル有】\n\n\n\nR\n\nGIS\n\nデータ処理\n\n\n\n元データをサマライズし、簡略化・軽量化しました。\n\n\n\n\n\n\n2025/04/13\n\n\n\n\n\n\n\n\n\n\n\n\n\n【スクレイピング】rvestを使ってe-Statからファイルを取得する\n\n\n\nR\n\nデータ処理\n\n\n\nRのrvestパッケージを使って、e-Statの境界データを取得していきます！\n\n\n\n\n\n\n2025/03/19\n\n\n\n\n\n\n\n\n\n\n\ne-Stat APIを使ってデータを取得しよう\n\n\n\nR\n\nデータ処理\n\n\n\nAPIの第一歩についてまとめます！\n\n\n\n\n\n\n2025/03/09\n\n\n\n\n\n\n\n\n\n\n\n【ウェブサイト】設定を追加する\n\n\n\nQuarto\n\n\n\nGoogleアナリティクス、SNSアイコン、フッターの設定を追加します。\n\n\n\n\n\n\n2025/02/05\n\n\n\n\n\n\n\n\n\n\n\npinsでデータ管理\n\n\n\nR\n\n\n\nR × Google Driveでデータ管理\n\n\n\n\n\n\n2024/12/24\n\n\n\n\n\n\n\n\n\n\n\n\n\n【改訂版】開発コンテナを使ってR環境を構築！\n\n\n\nR\n\nDocker\n\nWindows\n\nMac\n\nUbuntu\n\nVSCode\n\nGitHub\n\n\n\nローカル環境から卒業！\n\n\n\n\n\n\n2024/12/19\n\n\n\n\n\n\n\n\n\n\n\n\n\n【Quarto & RStudio】ウェブサイトを作る！\n\n\n\nQuarto\n\nRStudio\n\nGitHub\n\n\n\nQuartoを使ってRStudio上でウェブサイトを作る方法をご紹介します。\n\n\n\n\n\n\n2024/12/13\n\n\n\n\n\n\n\n\n\n\n\nQuartoでアイコンを挿入したい\n\n\n\nQuarto\n\nVSCode\n\nRStudio\n\n備忘録\n\n\n\nQuartoのHTML出力でアイコンを挿入する方法を紹介します。\n\n\n\n\n\n\n2024/12/01\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2ガイド\n\n\n\nR\n\n\n\nggplotを使うのに役立つコマンドを紹介します。\n\n\n\n\n\n\n2024/11/17\n\n\n\n\n\n\n\n\n\n\n\nRStudio (Server)でGitHub Copilotを使う\n\n\n\nGitHub\n\nRStudio\n\nDocker\n\n\n\nローカルとRStudio Serverに分けて説明します。\n\n\n\n\n\n\n2024/11/13\n\n\n\n\n\n\n\n\n\n\n\n\n\n【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】\n\n\n\nR\n\nデータ処理\n\n\n\nワイドからロングへ、データを変換します。\n\n\n\n\n\n\n2024/09/17\n\n\n\n\n\n\n\n\n\n\n\n市町村合併を反映させる\n\n\n\nR\n\nデータ処理\n\n\n\n古いデータに市町村合併を反映させる方法をご紹介します。\n\n\n\n\n\n\n2024/09/06\n\n\n\n\n\n\n\n\n\n\n\n\n\n【王道】TeX LiveをインストールしてLaTeX環境を構築する\n\n\n\nLaTeX\n\nVSCode\n\n\n\n王道ともいえるTeX Liveを用いたLaTeX環境の構築を解説します。とりあえずWindows版。\n\n\n\n\n\n\n2024/09/01\n\n\n\n\n\n\n\n\n\n\n\nDVCのためのGoogle Cloud Project\n\n\n\nDVC\n\n備忘録\n\n\n\nDVCにおける設定のエラーへの対処です（2024年8月31日）\n\n\n\n\n\n\n2024/08/31\n\n\n\n\n\n\n\n\n\n\n\n\n\n【RStudio】ローカルへのインストールまとめ\n\n\n\nR\n\nRStudio\n\n\n\nRが初めての方へ。～リンクも添えて～\n\n\n\n\n\n\n2024/08/29\n\n\n\n\n\n\n\n\n\n\n\n【Quarto】マークダウンでできること！\n\n\n\nQuarto\n\n\n\nマークダウンでできることは意外と奥が深い。独断と偏見で使う順にまとめます！\n\n\n\n\n\n\n2024/08/02\n\n\n\n\n\n\n\n\n\n\n\n\n\n【Quarto】論文の体裁を整える\n\n\n\nQuarto\n\nLaTeX\n\n\n\nQuarto × \\(\\LaTeX\\) で論文の体裁を整える方法について考えます。随時更新予定です。\n\n\n\n\n\n\n2024/07/22\n\n\n\n\n\n\n\n\n\n\n\n\n\n【PDF】Quarto で論文を書く\n\n\n\nQuarto\n\nR\n\nLaTeX\n\n\n\nQuarto を使って論文を書く方法（マークダウン、表、図）をまとめました。\n\n\n\n\n\n\n2024/06/29\n\n\n\n\n\n\n\n\n\n\n\n\n\n国勢調査データのクレンジング\n\n\n\nR\n\nデータ処理\n\n\n\n人口データのファイルを一括で読み込んで、分析で使いやすくするためのクレンジングコードです。\n\n\n\n\n\n\n2024/06/22\n\n\n\n\n\n\n\n\n\n\n\n\n\n環境構築におけるトラブルシューティング\n\n\n\n備忘録\n\n\n\n環境構築において直面したエラー等を随時まとめていきます。\n\n\n\n\n\n\n2024/06/19\n\n\n\n\n\n\n\n\n\n\n\n【WSL】割り当てるメモリを増やす方法\n\n\n\nWSL\n\nWindows\n\n備忘録\n\n\n\nWSL はデフォルトで PC の半分のメモリが割り当てられています。\n\n\n\n\n\n\n2024/05/31\n\n\n\n\n\n\n\n\n\n\n\n【ワークフロー】VSCode で GitHub を使う\n\n\n\nVSCode\n\nGitHub\n\n\n\nVSCode で GitHub を使った作業の流れを紹介します。\n\n\n\n\n\n\n2024/05/25\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeX Live を使わずに LaTeX 環境を作る！\n\n\n\nWindows\n\nMac\n\nUbuntu\n\nLaTeX\n\n\n\nTinyTeX を使って R 環境以外でも \\(\\LaTeX\\) を使えるようにしよう！\n\n\n\n\n\n\n2024/05/20\n\n\n\n\n\n\n\n\n\n\n\n【R】アーカイブされたパッケージを使う\n\n\n\nR\n\n\n\nパッケージがインストールできない？\n\n\n\n\n\n\n2024/05/16\n\n\n\n\n\n\n\n\n\n\n\n\n\n【R】プロジェクトを使う\n\n\n\nR\n\n\n\nR プロジェクトを使って作業環境を整えよう！\n\n\n\n\n\n\n2024/05/15\n\n\n\n\n\n\n\n\n\n\n\n\n\n【Quarto】チャンクオプションまとめてみた【R Markdown】\n\n\n\nR\n\nQuarto\n\nR Markdown\n\n備忘録\n\n\n\nチャンクオプションは忘れやすい！\n\n\n\n\n\n\n2024/05/09\n\n\n\n\n\n\n\n\n\n\n\n【R Markdown】相互参照を使いこなす【Quarto】\n\n\n\nR Markdown\n\nQuarto\n\nR\n\n\n\n図や表に自動で番号を振りたい！\n\n\n\n\n\n\n2024/05/09\n\n\n\n\n\n\n\n\n\n\n\n\n\n【R パッケージ】インストールも読み込みも一撃で？【pacman】\n\n\n\nR\n\n\n\ninstall.packages() はもう不要！\n\n\n\n\n\n\n2024/05/07\n\n\n\n\n\n\n\n\n\n\n\nR でGIS を動かす【ハンドリング】\n\n\n\nR\n\nGIS\n\n\n\nR で GIS を動かそう！\n\n\n\n\n\n\n2024/05/06\n\n\n\n\n\n\n\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\nR\n\nDocker\n\nWindows\n\nMac\n\nUbuntu\n\nVSCode\n\nGitHub\n\n\n\nローカル環境から卒業！\n\n\n\n\n\n\n2024/05/04\n\n\n\n\n\n\n\n\n\n\n\n政令指定都市・中核市の整理\n\n\n\nR\n\nデータ処理\n\n\n\nRで市区町村データを整理するための政令指定都市・中核市をまとめたコードです。\n\n\n\n\n\n\n2024/04/14\n\n\n\n\n\n\n\n\n\n\n\nQuarto & R MarkdownでPDF出力【LaTeX】\n\n\n\nR\n\nR Markdown\n\nQuarto\n\nLaTeX\n\n\n\nレポートでR Markdown、使ってますか？\n\n\n\n\n\n\n2024/03/29\n\n\n\n\n\n\n一致なし\n\n  \n\n\n\n\n\n\n\n\n\n\n\n開発環境\n\n\n\n最終更新日：2025年7月15日\n\nUbuntu 24.04\nRStudio 2025.05.1+513 (Mariposa Orchid) for Ubuntu Jammy\nR version 4.5.1 (2025-06-13)\nPython 3.12.3\nQuarto 1.7.32"
  },
  {
    "objectID": "pages/tips/240722_quarto_latex_setting/demo/demo.html",
    "href": "pages/tips/240722_quarto_latex_setting/demo/demo.html",
    "title": "Title",
    "section": "",
    "text": "JEL classification: C12, D24, E31\nkeywords: Keyword 1, Keyword 2…\n\n\nSection 1\nWrite the text here.\n\n\nSection 2\nFigure 1 is a plot of CARS data.\n\n\n\n\n\n\n\n\nFigure 1: Scatter plot of CARS data"
  },
  {
    "objectID": "pages/tips/250601_dvc/index.html#はじめに",
    "href": "pages/tips/250601_dvc/index.html#はじめに",
    "title": "【データ管理】DVCの設定まとめ",
    "section": "はじめに",
    "text": "はじめに\n環境構築の記事でDVCを使用したデータ管理についてもまとめていますが、Google Cloud Projectを使用するため若干ややこしいことに加え、定期的にトークンが切れて認証し直さないといけないという大きいデメリットがありました。\n今回は初回の設定のみで設定がすむ方法について解説します。\n記事と同様の流れでの作業を想定しているので、その点ご留意ください。"
  },
  {
    "objectID": "pages/tips/250601_dvc/index.html#google-cloud-console",
    "href": "pages/tips/250601_dvc/index.html#google-cloud-console",
    "title": "【データ管理】DVCの設定まとめ",
    "section": "Google Cloud Console",
    "text": "Google Cloud Console\n\nGoogle Cloud Consoleへアクセス\n画面上部のボックスからプロジェクトを作成\n\n左上にGoogle Cloudと書いてある部分の右です\n出てくるウィンドウの右上から作れます\n\n\n\n\n\n\n\n\n画面左のメニューから「IAMと管理」を選択\n\n左にメニューがない場合は左上の3本線から開けます\n\nサイドバーの真ん中上あたりから「サービスアカウント」を選択\n画面上部の「サービスアカウントを作成」へ進む\n任意の名前と説明を入力し、完了を押下\n\n権限のところはスキップで構いません\n\n\n\n\n\n\n\n\nメールの列に書いてある、長いメールアドレスをコピーしておく\n\n後ほどGoogle Driveのフォルダにこのアドレスを共有します\n\n作成したサービスアカウントの一番右にある「操作」から「鍵を管理」を選択\n\n長ったらしいメールアドレスの右側にある点々の部分です\n\n「キーを追加」→「新しい鍵を作成」→「JSON」を選択、作成へ進む\nファイルとして保存されるので、作業ディレクトリへ保存する\n\n.secretsフォルダを作り、その中へ保存してください\nファイル名は変えて問題ありません。key.jsonとかで大丈夫です"
  },
  {
    "objectID": "pages/tips/250601_dvc/index.html#google-drive",
    "href": "pages/tips/250601_dvc/index.html#google-drive",
    "title": "【データ管理】DVCの設定まとめ",
    "section": "Google Drive",
    "text": "Google Drive\n\nGoogle Driveの任意の場所にプロジェクトでデータをしまうフォルダを作成する\nフォルダの共有の設定から、先ほどコピーしたメールアドレスを貼り付け共有する\n\n\n\n\nメールアドレスを貼り付け、権限を「編集者」にして共有します\n\n\n\nGoogleドライブで作成したフォルダのIDをコピー\n\nIDは、ドライブでフォルダを開いたときのURLで、最後のスラッシュ（~/folders/）より右側の部分です"
  },
  {
    "objectID": "pages/tips/250601_dvc/index.html#vscode",
    "href": "pages/tips/250601_dvc/index.html#vscode",
    "title": "【データ管理】DVCの設定まとめ",
    "section": "VSCode",
    "text": "VSCode\n\nVSCodeのターミナルで次のコマンドを入力して実行 - 最後の部分（四角括弧ごと）をコピーしたIDに変更してください\n\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\nサービスアカウントを有効にする\n\n以下のコマンドを実行してください\n\n\ndvc remote modify myremote gdrive_use_service_account true\n\n次のコマンドを実行する\n\nフォルダ名やファイル名を自分で変えた場合、修正してから実行してください\n\n\ndvc remote modify myremote --local \\\n    gdrive_service_account_json_file_path .secrets/key.json"
  },
  {
    "objectID": "pages/tips/250601_dvc/index.html#設定ファイルをgitignore重要",
    "href": "pages/tips/250601_dvc/index.html#設定ファイルをgitignore重要",
    "title": "【データ管理】DVCの設定まとめ",
    "section": "設定ファイルをgitignore（重要！）",
    "text": "設定ファイルをgitignore（重要！）\nいま.secretsを作りましたが、この中身はいわば個人情報であり他人に漏らしていいものではないので、.gitignoreファイルにしっかり記載し、Gitのトラッキングを解除しておく必要があります。\n以下のように.gitignoreに追記してください。\n\n\n.gitignore\n\n/.secrets/\n\nこれで.secretsフォルダの中身がGitに追跡されません。"
  },
  {
    "objectID": "pages/tips/250601_dvc/index.html#データフォルダを作ったら適宜add-push",
    "href": "pages/tips/250601_dvc/index.html#データフォルダを作ったら適宜add-push",
    "title": "【データ管理】DVCの設定まとめ",
    "section": "データフォルダを作ったら適宜add, push",
    "text": "データフォルダを作ったら適宜add, push\n以上で設定は終了です。\n環境構築の記事でも説明しているように、あとはdataなどデータを入れるフォルダを作りデータを追加したら、dvc add data/を実行し、最後はdvc pushでプッシュすることでデータファイルをGoogle Drive上で管理することができます。"
  },
  {
    "objectID": "pages/tips/250601_dvc/index.html#共有する場合",
    "href": "pages/tips/250601_dvc/index.html#共有する場合",
    "title": "【データ管理】DVCの設定まとめ",
    "section": "共有する場合",
    "text": "共有する場合\n共同研究などで他の人と作業を進める場合はこのデータフォルダも共有したいということになると思います。その場合は、記事における共有に加え、.secretsは別に送る必要があります（Gitで追跡していないのでクローンしても.secretsは現れないからです）。\n別に共有したうえでワーキングディレクトリに.secretsを置いてもらえばdvc pullでデータを引っ張ってくることができるようになります。\nその際、.dvc/config.localファイルを以下のように編集してもらってください。\n[remote \"myremote\"]\n    gdrive_use_service_account = true\n    gdrive_service_account_json_file_path = ../.secrets/key.json\n../は1つ上の階層のフォルダの～という意味なので、これであっています。.dvc/config.localもgitignoreされているので、クローン下だけでは共有されません。"
  },
  {
    "objectID": "pages/tips/250601_dvc/index.html#感想",
    "href": "pages/tips/250601_dvc/index.html#感想",
    "title": "【データ管理】DVCの設定まとめ",
    "section": "感想",
    "text": "感想\n今のところ結構いい感じです。例えばこのウェブサイトを作るうえではあまり新しくデータを追加することがないので、追加するたびにトークンが切れて認証のし直しということが頻発していました。今回の方法では再認証がない（はず）なので、ストレスが軽減されたかなという印象です。\n何かあればぜひコメントまでお願いします。"
  },
  {
    "objectID": "pages/tips/240509_cross_reference/index.html#はじめに",
    "href": "pages/tips/240509_cross_reference/index.html#はじめに",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "はじめに",
    "text": "はじめに\nR Markdown や Quarto で文書を書いているとき、相互参照をどうしようと思ったことはありませんか？僕はありました。\n手書きで「図1：Hogehoge」と書くとなんだかスマートさに欠けるし、前に図を挿入したくなった時に数字を書き換えなければならず不便ですよね。\n今回は R Markdown ＆ Quarto における相互参照の使い方をご紹介します。\nR Markdown と Quarto で設定が異なりますので、それぞれ見ていきましょう。"
  },
  {
    "objectID": "pages/tips/240509_cross_reference/index.html#r-markdown",
    "href": "pages/tips/240509_cross_reference/index.html#r-markdown",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "R Markdown",
    "text": "R Markdown\n\nYAML ヘッダー\nまず、新しいファイルを開くと出てくる --- で囲まれた部分を、YAML ヘッダーと呼びます。\n\n\n\nR Markdown ファイルを開くとこれが出てきますよね\n\n\nR Markdown はデフォルトでは相互参照が使えません（私調べ）（そんな馬鹿な）。そのため、パッケージを使って設定します。\nデフォルトの設定はこのような感じになっています。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nauthor: \"Yosuke Abe\"\ndate: \"2024-12-24\"\noutput: html_document\n---\n\nこれを bookdown パッケージを用いて変更します。\nまずはインストール。\n\n\nR\n\ninstall.packages(\"bookdown\")\n\n次にヘッダーを次のように変更。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nauthor: \"Yosuke Abe\"\ndate: \"2024-12-24\"\noutput:\n  bookdown::html_document2: default\n---\n\nこれで準備が整いました。\n\n\n相互参照\nでは何かプロットして、それを参照してみましょう。例えば次の図をプロットしたいとします。\n\n\n\n\n\n\n\n\n\nこれを参照するために R Markdown 内で入力すると次のようになります。\n\n\nR Markdown\n\n```{r pressure, fig.cap=\"図のキャプションです。\"}\nplot(pressure)\n```\n\nここでのポイントは、{r pressure} の部分です。デフォルトでは {r} だけだと思いますが、スペースを空けることでチャンク1に名前を付けることができ、このチャンク名を使って参照します。また、カンマで区切った後の fig.cap は図のキャプションです。\n文中で参照したいときは、次のように書きます。\n\n\nR Markdown\n\n表 \\@ref(fig:pressure) を参照する。\n\nすると…\n\nこのように、文中での参照ができます。前に新たに図が入っても、自動で番号を振り直してくれます。\n\n\n\n\n\n\n図以外の場合\n\n\n\n\n\nもちろん、表や数式の場合にも使えます。\n\n表の場合\n\n様々な表の関数がありますが、R Markdown では基本的に関数内でキャプションを付けます。\n図の場合とは違い、参照の際には tab:を使います。\n\n\n\n\nQuarto\n\n```{r mtcars}\nknitr::kable(mtcars[1:5, 1:5], caption = \"mtcars データ\")\n```\n\n表 \\@ref(tab:mtcars) を参照する。\n\n\n数式の場合\n\n\\(\\LaTeX\\) 形式で書きます。HTML 出力でも、この書き方が可能です。\n$ で挟む方法もありますが、これだと参照ができません2。\n参照の際には、eq: を使います。\n\n\n\n\nQuarto\n\n\\begin{equation}\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n} (\\#eq:mean)\n\\end{equation}\n\n式 \\@ref(eq:mean) を参照する。\n\n以上のやり方で表や数式の参照にも対応しています。"
  },
  {
    "objectID": "pages/tips/240509_cross_reference/index.html#quarto",
    "href": "pages/tips/240509_cross_reference/index.html#quarto",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "Quarto",
    "text": "Quarto\nQuarto もほとんど同じ方法で参照が可能ですが、書き方はもっとシンプルです。\n\nYAML ヘッダー\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nformat: html\n---\n\nデフォルトでは著者も日付もないのでめちゃくちゃシンプルですね3。\nQuarto では、相互参照のためにこれをいじる必要はありません（素晴らしい！）。\nその代わり、チャンクの方をいろいろいじっていきます。\n\n\nチャンクオプション\n改めてになりますが、``` で囲まれたコード部分をチャンクと言います。\nR Markdown では、{r}の中にチャンク名を書きましたが、Quarto ではチャンクの中に書いていきます4。\n\n\nR Markdown\n\n```{r}\n#| label: fig-pressure\n#| fig-cap: \"図のキャプションです。\"\n\nplot(pressure)\n```\n\nポイントは以下の2つです。\n\n#| の後ろにオプションを指定して書くことができます。\nlabel は fig- で始めないと参照できません。\n\n\n\n相互参照\n文中では以下のように書いていきます。\n\n\nQuarto\n\n@fig-pressure を参照する。\n\n@ だけだなんて、なんてシンプルなのでしょう。以下のように出力されます。\n\nとても簡単に引用できました。よく見ると、図 @fig-pressure とは書かずとも Figure 1 となっています。図～とは書かなくてよいということですね。英語になっているのが気になる方は、後のセクションで解説しているのでご覧ください。\n\n\n\n\n\n\n図以外の場合\n\n\n\n\n\nもちろん、表や数式の場合にも使えます。\n\n表の場合\n\nQuarto では、表もチャンクオプションを使ってキャプションがつけられます。\nR Markdown では、参照の際に tab: を使っていたのに対し、Quarto では tbl- となります。ややこしい！\n\n\n\n\nQuarto\n\n```{r}\n#| label: tbl-mtcars\n#| tbl-cap: \"mtcars データ\"\n\nknitr::kable(mtcars[1:5, 1:5])\n```\n\n@tbl-mtcars を参照する。\n\n\n数式の場合\n\n\\(\\LaTeX\\) 形式でも書けますが、$$ で囲む方法が便利です。\n数式自体は \\(\\LaTeX\\) 表記です。\n自分で打ってみるとわかりますが、プレビューできるのもいい点です。\n\n\n\n\nQuarto\n\n$$\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n}\n$$ {#eq-mean}\n\n@eq-mean を参照する。\n\n以上のやり方で表や数式も参照できます。"
  },
  {
    "objectID": "pages/tips/240509_cross_reference/index.html#sec-lang-setting",
    "href": "pages/tips/240509_cross_reference/index.html#sec-lang-setting",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "言語の設定について",
    "text": "言語の設定について\n特に Quarto で、@fig- で参照すると Figure ~ となってしまう問題について、気になる方は次の設定で修正できます。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nformat: html\nlang: ja\n---\n\nlang: ja を追加しました。これが日本語設定です。\nこれを設定したうえで実行すると、\n\n無事日本語にできました。表や式もこれでいけます。"
  },
  {
    "objectID": "pages/tips/240509_cross_reference/index.html#おわりに",
    "href": "pages/tips/240509_cross_reference/index.html#おわりに",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "おわりに",
    "text": "おわりに\n今回は R Markdown と Quarto で相互参照を使う方法をご紹介しました。\n相互参照が簡単にできるだけで、かなり Markdown を使う魅力が増すと思います。修士学生の私としては、Quarto で修論を書き上げるのが目標です^^\nご参考になれば幸いです。それでは。"
  },
  {
    "objectID": "pages/tips/240509_cross_reference/index.html#footnotes",
    "href": "pages/tips/240509_cross_reference/index.html#footnotes",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "注",
    "text": "注\n\n\n``` で囲まれているコード部分↩︎\nする方法をご存じの方がいらっしゃいましたら、是非コメントください。↩︎\nもちろん author: \"著者\" や date: 2024-05-09 などで入力できますよ。↩︎\nR Markdown と同様の書き方もできるのですが、私は今回紹介している方法の方がすっきりしていて好みです。↩︎"
  },
  {
    "objectID": "pages/tips/240831_google_cloud_project/index.html#はじめに",
    "href": "pages/tips/240831_google_cloud_project/index.html#はじめに",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "はじめに",
    "text": "はじめに\n以下の記事で紹介した開発コンテナですが、そのままやるとDVCの認証プロセスでエラーが出ます。\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\n\n\n\n認証を進めるとこのように出てきます。\n\n\nもしかすると今後対応されて何の問題もなく使えるようになるかもしれませんが、公式で推奨されているGoogle Cloud Projectを使えばこの問題に対処できるため、今回はその方法についてまとめていきます。"
  },
  {
    "objectID": "pages/tips/240831_google_cloud_project/index.html#手順",
    "href": "pages/tips/240831_google_cloud_project/index.html#手順",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "手順",
    "text": "手順\nまず前提として、以下のコマンドまでは問題なく行えます。\n\n\nTerminal\n\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\nここからさらにdvc pushやdvc pullを行おうとするときに先ほどの画面が出てきます。\n先述の通りGoogle Cloud Projectを使えば対処できますので、その設定を行います。\n\n次のリンクからGoogle API Consoleにアクセス\n\nhttps://console.developers.google.com/\nなにやら同意を求められた場合は同意して進めて下さい。\n使いたいGoogleアカウントでログインしていることを確認してください。\n\n「プロジェクトを作成」を選択\n\n\n\n\n初めてであれば画面右に出てきます。\n\n\n\nプロジェクト名を設定し、作成する\n\nこだわりがなければそのままで大丈夫です。\n場所も無視して下さい。\n\n「APIとサービスを有効にする」を選択\n\n3の手順を踏むと「APIとサービス」の右に出てきます。\n\n\n\n\n\n\n\n\nGoogle Drive APIに入り、「有効にする」をクリック\n\n少し下にあります。\n\n\n\n\n\n有効にします\n\n\n\nOAuth同意画面\n\n画面左の「OAuth 同意画面」に入り、外部を選択して作成します。\nアプリ名は何でもいいです（例：DVC remote storage）。\nユーザーサポートメールとデベロッパーの連絡先情報は自分のメールアドレスを入れ、その他は空欄でよいです。\n保存して次へ、その次は無視して保存して次へ、最後にAdd usersで自分のメールアドレス（使っているGoogleアカウントのGmailアドレス）を入れて追加し、保存して次へを押して下さい。\n\n認証情報を作成\n\n画面左の「認証情報」に入り、上部に出てくる「認証情報を作成」から「OAuth クライアント ID」を選択して下さい。\nアプリケーションの種類は、「デスクトップ アプリ」、名前はそのままでよいので、作成して下さい。\n\n\n\n\n\n\n\nここまでが第1段階です。クライアントIDとクライアントシークレットが表示されていると思いますが、これは後から確認できるのでOKで閉じても大丈夫です。\n一応どこかにコピーして控えておくと楽かもしれません。"
  },
  {
    "objectID": "pages/tips/240831_google_cloud_project/index.html#vscode",
    "href": "pages/tips/240831_google_cloud_project/index.html#vscode",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "(VSCode?)",
    "text": "(VSCode?)\nVSCodeに戻ります。\nCtrl ＋ J1でターミナルを開き、次のコードを入力します。\ndvc remote modify --local myremote gdrive_client_id 'client-id'\ndvc remote modify --local myremote gdrive_client_secret 'client-secret'\nここで、client-idとclient-secretは先ほどのクライアントIDとクライアントシークレットに置き換えて、それぞれ実行してください（シングルクォーテーションは残してください）。\nもし画面を閉じてどこかわからなくなった場合は、画面左の認証情報から「OAuth 2.0 クライアント ID」の名前部分をクリックすると見ることができるようになります。\nさらに、追加で以下のコードを実行してください。\ndvc remote modify --local myremote gdrive_user_credentials_file ~/.cache/myremote-credentials.json\nここでは特に変える部分はありません。\nこれで第2段階も終了しました。\ndvc pushやdvc pullを実行すると、今度はブロックされずに進められるのではないでしょうか。途中「続行」を選ぶところがあれば、選んで進めてください。\n認証が成功したら、VSCodeに戻るとプッシュやプルが進められているはずです。\n\n\n\n\n\n\n異なるエラーが出た場合\n\n\n\n一応上のコードで対処したつもりですが、dvc pushで異なるエラーが出た場合には、トラブルシューティングのページを参照してください。"
  },
  {
    "objectID": "pages/tips/240831_google_cloud_project/index.html#おわりに",
    "href": "pages/tips/240831_google_cloud_project/index.html#おわりに",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "おわりに",
    "text": "おわりに\nなにやら面倒な設定でしたが、今のところこれが（多分）唯一の解決策っぽいです。\nそもそもDVCを使わずにデータもGitHubで実行すればという話でもあるのですが、データサイズの制約もありますので、自分のプロジェクトに合わせて使ってもらえればと思います。\nGoogle Cloud Projectは普段あまり使うことがないと思うので、お役に立てれば幸いです。\nうまくいかないことがあればコメントください。"
  },
  {
    "objectID": "pages/tips/240831_google_cloud_project/index.html#footnotes",
    "href": "pages/tips/240831_google_cloud_project/index.html#footnotes",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "注",
    "text": "注\n\n\nMacなら⌘ ＋ J↩︎"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/index.html#はじめに",
    "href": "pages/tips/240629_write_thesis/index.html#はじめに",
    "title": "【PDF】Quarto で論文を書く",
    "section": "はじめに",
    "text": "はじめに\nこれまでの記事で R Markdown や Quarto を使って \\(\\LaTeX\\) 経由で PDF 出力する方法や、それらで使えるチャンクオプションについてご紹介してきました。\n\n\n\n\n\n\nR MarkdownでPDF出力【LaTeX】\n\n\n\n\n\n\n\n\n\n【Quarto】チャンクオプションまとめてみた【R Markdown】\n\n\n\n今回は、Quarto を使って論文を書く方法について包括的にまとめてみました。\nぜひ参考にしてみてください。\nまた、環境として RStudio を使用していると仮定します。"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/index.html#準備",
    "href": "pages/tips/240629_write_thesis/index.html#準備",
    "title": "【PDF】Quarto で論文を書く",
    "section": "準備",
    "text": "準備\nQuarto は R Markdown の亜種、と考えてもらえればと思います。マークダウン形式で記述することができ、\\(\\LaTeX\\) 記法を必ずしも用いる必要がないのが特徴です1。\\(\\LaTeX\\) を深く学ばなくてもスタイリッシュな論文が書けるのではないでしょうか。\nここからは、書くのに最低限必要な使い方を紹介します。\n\nプロジェクトの作成\n必須ではありませんが推奨します。プロジェクトを作成することで、ファイルの管理がしやすくなります。\nプロジェクトの作成については以下の記事で紹介しています。\\(\\LaTeX\\) との差別化点として、分析結果をそのまま埋め込めることがあげられ、プロジェクトを作成することで、その恩恵を最大限受けられると考えています。\n\n\n\n\n\n\n【R】プロジェクトを使う\n\n\n\n\n\nファイルの作成\nQuarto で論文を書くには、拡張子が .qmd のファイルを作成します。これは Quarto Markdown の略です。\nRStudio 画面左上の  をクリックし、「Quarto Document…」を選択します。\n以下のようにタイトルと著者名、PDF を選択し、Create をクリックします。“Use visual markdown editor” はオフにしてください2。\n\n作成出来たら、 でファイルを任意の場所に保存します3。\nもし Quarto や R Markdown を使うのが初めての場合、上部に “Package rmarkdown required but not installed. Install Don’t show again” というメッセージが表示されるかもしれません。その場合、“Install” をクリックしてインストールしてください。\n\n\nGlobal Options の設定\nRStudio 上部のメニューから “Tools” &gt; “Global Options…” を選択します。\nその中の “Sweave” を選択し、“Typeset LaTeX into PDF using:” で “XeLaTeX” を選択します。また、その下にある “Use tinytex when compiling .tex files” にチェックを入れます。\n最後に OK を押して閉じてください。\n\n\nヘッダーの記述\nファイルを作成すると、ドキュメントの上部に---で囲まれた部分があります。これを YAML ヘッダーと呼び、ここで文書の設定を行います。\n以下は、基本的なYAMLヘッダーの設定です。\n---\ntitle: \"【PDF】Quarto で論文を書く\"\nauthor: \"阿部洋輔\"\ndate: 2024-07-08  # todayで今日の日付にできます\ndate-format: \"YYYY年M月D日\" \nformat: \n  pdf: \n    documentclass: article\n    number-sections: true\n    include-in-header: \n      - text: |\n          \\usepackage{zxjatype}\n          \\usepackage[ipaex]{zxjafont} \n          # これらは日本語フォントの設定のために記述しています\nexecute: \n  echo: false  # コードを表示しない\n  warning: false # 警告とメッセージを表示しない\nlanguage: \n  crossref-fig-title: \"図\"\n  crossref-tbl-title: \"表\"\n  crossref-eq-prefix: \"式\"\n---\n分析コードや実行の際に表示されるメッセージ・警告は出力しなくてよいので false にしてあります。\nまた、デフォルトだと英語設定でキャプションが Table 1 や Figure 1 と表示されてしまうので、それを日本語に直すために language を追加しています。他にも自動で英語出力されてしまって困る際はこちらから該当するものを探し、下に追加していってください4。\nもちろん英語論文を執筆する際に日本語設定は不要です。\ndate-format についてはこちらを参考にしてください。"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/index.html#本文の書き方マークダウン編",
    "href": "pages/tips/240629_write_thesis/index.html#本文の書き方マークダウン編",
    "title": "【PDF】Quarto で論文を書く",
    "section": "本文の書き方（マークダウン編）",
    "text": "本文の書き方（マークダウン編）\n本文は Markdown で記述します。\\(\\LaTeX\\) 記法を使うこともできますが、必ずしも使う必要はありません。もちろん、数式などは \\(\\LaTeX\\) 記法を使うことができます。\n以下のコードは、基本的な書き方の例です。\n# 見出し1\n\n## 見出し2\n\n### 見出し3\n\n本文です。セクションに応じて見出しをつけることができます。基本的には3段階までの見出しを使います。\n\n- 箇条書き1\n\n    - 箇条書き2\n\n        - 箇条書き3\n\n箇条書きを使うときは、ハイフンとスペースを入れてください。2段階目、3段階目を使用するときは、半角スペース4つを入れてください。\n\n1. 番号付きリスト1\n\n    - 箇条書き\n\n2. 番号付きリスト2\n\n番号付きリストを使うときは、数字とピリオドとスペースを入れてください。\n\nまた、改行するときは空行を入れなければなりません。\n\n文中で数式を使いたいときは、`$` で囲んでください。例えば、$y = ax + b$ のように記述します。\n\n数式を別行で書きたいときは、`$$` で囲んでください。例えば、\n\n$$\ny = ax + b\n$$ {#eq-equation-name}\n\nのように記述します。数式にラベルをつけることもできます。`#eq-` の後にラベル名を記述します。\n\n数式を引用するときは、`@eq-equation-name` のように記述します。\n以上が基本的な書き方です。\nコードチャンクを使うときは、上記のように記述します。コードは YAML ヘッダーで echo: false としているので、出力されません。結果は出力されます5。\n出力された PDF はこちらから確認してください。"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/index.html#本文の書き方テーブル編",
    "href": "pages/tips/240629_write_thesis/index.html#本文の書き方テーブル編",
    "title": "【PDF】Quarto で論文を書く",
    "section": "本文の書き方（テーブル編）",
    "text": "本文の書き方（テーブル編）\nQuarto で論文を書くことの醍醐味ともいえる、コードとその出力について説明します。\nここではデフォルトで使用できる iris というデータセットを利用して分析、表の出力をしてみたいと思います。\n例えば以下のコードを実行すると 表 1 のように出力されます。\n#| label: tbl-regression\n#| tbl-cap: \"iris を使用した回帰分析\"\n\nlibrary(tidyverse)\nlibrary(fixest)\nlibrary(modelsummary)\nlibrary(tinytable)\n\n# リスト形式で保存すると複数の分析結果を1つの表に表示可能\nregression &lt;- list(\n  \"(1)\" = iris |&gt; \n    feols(Sepal.Length ~ Sepal.Width, se = \"hetero\"), \n  \"(2)\" = iris |&gt; \n    feols(Sepal.Length ~ Sepal.Width + Petal.Length, se = \"hetero\"), \n  \"(3)\" = iris |&gt; \n    feols(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, se = \"hetero\")\n)\n\n# ここで変数名の表記を変更\ncm &lt;- c(\n  \"Sepal.Width\" = \"がく片の幅（cm）\", \n  \"Petal.Length\" = \"花弁の長さ（cm）\", \n  \"Petal.Width\" =  \"花弁の幅（cm）\", \n  \"Species\" = \"アイリスの種類\"\n)\n\n# 表に加える統計量を整理\ngm &lt;- tibble(\n  \"raw\" = c(\"nobs\", \"r.squared\"), \n  \"clean\" = c(\"Observations\", \"R\\u00B2\"), \n  \"fmt\" = c(0, 2)\n)\n\n# フットノートを書く\nfn &lt;- \"注：標準誤差は括弧内に記載。+p &lt; 10%, *p &lt; 5%, **p &lt; 1%\"\n\nmsummary(regression, estimate = \"{estimate}{stars}\", \n         notes = fn, coef_map = cm, gof_map = gm, \n         stars = c(\"+\" = .1, \"*\" = .05, \"**\" = .01)) |&gt; \n  group_tt(j = list(\"がく片の長さ（cm）\" = 2:4))\n\n\n\n\n表 1: iris を使用した回帰分析\n\n\n\n\n\n    \n\n    \n    \n      \n        \n\n \nがく片の長さ（cm）\n\n        \n              \n                 \n                (1)\n                (2)\n                (3)\n              \n        \n        注：標準誤差は括弧内に記載。+p &lt; 10%, *p &lt; 5%, **p &lt; 1%\n        \n                \n                  がく片の幅（cm）\n                  -0.223 \n                  0.596**\n                  0.651** \n                \n                \n                                  \n                  (0.141)\n                  (0.065)\n                  (0.060) \n                \n                \n                  花弁の長さ（cm）\n                         \n                  0.472**\n                  0.709** \n                \n                \n                                  \n                         \n                  (0.017)\n                  (0.062) \n                \n                \n                  花弁の幅（cm）  \n                         \n                         \n                  -0.556**\n                \n                \n                                  \n                         \n                         \n                  (0.144) \n                \n                \n                  観測数          \n                  150    \n                  150    \n                  150     \n                \n                \n                  R²              \n                  0.01   \n                  0.84   \n                  0.86    \n                \n        \n      \n    \n\n\n\n\n\n\n出力された PDF はこちらから確認してください。\n\n\n\n\n\n\nキャッシュの設定\n\n\n\n設定でcache: trueに設定しておくと、レンダリングするときにエラーが出ることがあるので、表出力においてcache: trueを設定するのは避けた方が良いでしょう。\n以下のようなNoteがtinytableのドキュメントに記載してあります。\n\nNote: Your document will fail to compile to PDF in Quarto if you enable caching and you use tinytable due to missing LaTeX headers. To avoid this problem, set the option ⁠#| cache: false⁠ for the chunk(s) where you use tinytable.\n\n\n\nまた、このサイトのフォント的に &lt;- や |&gt; と表示されていますが、それぞれ &lt; と -、| と &gt; になります。ご了承ください。\nここからは、表作成におけるポイントを説明します。\nテーブルにおけるポイント\n\nチャンクオプション\n\n#| で始まっている部分です。\nlabel は tbl- で始めることでテーブルにおけるラベルを付けられます。論文内で参照するときに必要です。@tbl-regression という書き方で論文内で参照できます。\ntbl-cap で表のキャプションを付けられます。\n\nライブラリ\n\ntidyverse：データハンドリングのために使用します。\nfixest：分析のために使用します。いろいろな分析用パッケージがありますが、とりあえずこれを使えば事足りることが多いと思います。あと速い。\nmodelsummary：分析結果を表示するために使用します。様々な分析用パッケージに対応しています。\ntinytable：modelsummary で作成した表をより細かく設定するために使います。\n\n分析モデルを格納\n\nリスト形式で保存します。こうすることによって複数の分析結果を modelsummary で1つの表に起こせます。\n\ncoef_map と gof_map 用の cm & gm\n\ncm6 は、分析で使用した変数名を書き換えて表に出すためのものです。\"Sepal.Width\" = \"がく片の幅（cm）\" は、 “Sepal.Width” という変数名を “がく片の幅（cm）” と表示することを意味します。\ngm は少し複雑です。コンソールで gof_map と打ってみると、raw, clean, fmt, omit の4列が出てきます。raw が表示する統計量、clean がそれらを表示するテキスト、fmt は小数点以下の桁数で、これらを gm で編集するということです7。\n“R\\u00B2” はユニコード文字で、2乗を \\(\\TeX\\) 上で表すために使用しています。\nfn はフットノートを書くためのものです。ここでは標準誤差の説明をしています。\n\n\n\n\n\ngof_map を実行するとこのように出てきます。\n\n\n\nmsummary\n\n分析結果を表示するための関数です。msummary は modelsummary の関数です8。ここでは、regression に格納した分析結果を表示しています。\nestimate で “{estimate}{stars}” と指定しています。これは推定値とその有意性を表示するためのものです。入れたパターンと入れないパターンで試してもらいたいのですが、有意性について別に脚注が入ってしまい、上で書いた脚注と合わせて2行になってしまうので、わざわざこの設定をしています。下の表を確認してください。\nnotes , coef_map , gof_map は上で設定したものを反映させています。\nstars は有意性の表示を設定しています。ここでは、+p &lt; 10%, *p &lt; 5%, **p &lt; 1% としています。\ngroup_tt は表のグルーピングを行うためのものです。ここでは、被説明変数が全て “がく片の長さ（cm）” なので、それをグルーピングしています。1列目は変数名にあたるので、2:4 としています。\ngroup_tt の引数 j は列のグルーピングで、i 引数は行のグルーピングに対応しています。\n\n\n\n\n\nestimate を指定しないとこのように脚注が2行になります。\n\n\n以上がテーブル作成のポイントです。"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/index.html#本文の書き方フィギュア編",
    "href": "pages/tips/240629_write_thesis/index.html#本文の書き方フィギュア編",
    "title": "【PDF】Quarto で論文を書く",
    "section": "本文の書き方（フィギュア編）",
    "text": "本文の書き方（フィギュア編）\n次に、フィギュアの出力について説明します。\nここでも iris データセットを使用してプロットしてみます。\n次のコードを実行すると、図 1 のような図が作成されます。\nlibrary(tidyverse)\n\np &lt;- iris |&gt; \n  ggplot(aes(x = Sepal.Length, y = Petal.Length)) + \n  geom_point() + \n  labs(x = \"がく片の長さ（cm）\", \n       y = \"花弁の長さ（cm）\") + \n  theme_minimal()\n\nggsave(\"iris_plot.pdf\", p, device = cairo_pdf)\n![iris を使用したプロット](iris_plot.pdf){#fig-iris}\n\n\n\n\n\n\n\n\n図 1: iris を使用したプロット\n\n\n\n\n\n出力された PDF はこちらから確認してください。\nここでもポイントを説明します。\nフィギュアにおけるポイント\n\nパイプを使用してプロット\n\nデータセットをパイプ（|&gt;）で ggplot に渡しています。これによって、変数が予測変換で出てくるので、作業がしやすくなります9。\n\nggplot\n\nggplot 内の aes で x 軸と y 軸を指定しています。\nggplot は + で繋げていくことでプロットを作成していきます。\n今回は散布図を作成したいので、geom_point() を繋げています。他にも折れ線の場合は geom_line() などを使います。\n\nlabs\n\nlabs で x 軸と y 軸のラベルを設定しています。\n\ntheme_minimal\n\ntheme_minimal は背景が白で、軸の線が薄いテーマです。他にも theme_bw, theme_classic などがあります。\n\n\n\n\n\n\n\n\nテーマについて\n\n\n\n\n\ntheme_minimal でテーマを大方設定できますが、それに加えて細かい設定をしたいこともあると思います。その場合は、 + で theme を繋げていくことで設定できます。ここでは theme の詳細については説明しませんが、繋げる際は、theme_minimal() + theme() という順番で繋げていくことをおすすめします。\n順番は逆でも構いませんが、theme() で設定したものが theme_minimal() で上書きされることがあるので、想定していたものと違う結果になることがあります。\n\n\n\n\nggsave\n\nggsave でプロットを保存しています。ここでは iris_plot.pdf という名前で保存しています。“iris_plot.pdf” の部分は任意の名前で構いません。また、パスを指定して保存することももちろんできます。here を使っている場合は、here(\"output/iris_plot.pdf\") などとして保存することができます10。\ndevice を cairo_pdf にしています。.png など他の形式でも出力できますが、環境によっては文字化けなどに大変苦しめられるので11、cairo_pdf がおすすめです。僕の環境では一番安定しました。\nちなみに、画像の解像度が上がるので、とりあえず一度保存するのがいいと思います。\n\nマークダウン表記で図を出力\n\n![iris を使用したプロット](iris_plot.pdf){#fig-iris} で図を出力しています。iris_plot.pdf の部分は保存したファイル名になります。{#fig-iris} はラベルを付けるためのものです。論文内で参照するときに必要です。@fig-iris という書き方で論文内で参照できます。\n\n\n\n\n\n\n\n\nパスの指定\n\n\n\n\n\n例えば画像を output というフォルダに保存しており、書いているコードは code フォルダにあるとします。すなわち以下のような形です。\nmain_directory/\n├── output/\n│   └── iris_plot.pdf\n└── code/\n    └── code.qmd\nこの場合、![iris を使用したプロット](iris_plot.pdf){#fig-iris} としても図が表示されません。その場合は、コードファイルからの相対パスを使用しなければなりません。すなわち ![iris を使用したプロット](../output/iris_plot.pdf){#fig-iris} としてください。../ は一つ上の階層を示しています。\n\n\n\nもちろん、既に所有している画像もマークダウン記法で出力することができます。その場合は、![画像の説明](画像のパス){#fig-label} のように記述します。キャプションは抜かせるので、![](画像のパス){#fig-label} としても構いません。\n以上がフィギュア作成のポイントです。"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/index.html#まとめ",
    "href": "pages/tips/240629_write_thesis/index.html#まとめ",
    "title": "【PDF】Quarto で論文を書く",
    "section": "まとめ",
    "text": "まとめ\nQuarto を使って論文を書く方法について説明しました。\n長くなってしまいましたが、現在 M2 の私自身も Quarto を使用して修士論文を書こうと思っているので、その際に必要な情報をまとめてみました。\nぜひ参考にしてみてください。"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/index.html#footnotes",
    "href": "pages/tips/240629_write_thesis/index.html#footnotes",
    "title": "【PDF】Quarto で論文を書く",
    "section": "注",
    "text": "注\n\n\n直接 LaTeX コードを埋め込むこともできます。↩︎\n僕は使い方が分かりません。↩︎\n僕は基本的に code フォルダを作ってそこに保存しています。↩︎\n本当は lang: ja を設定するだけで万事解決のはずなのですが、パッケージのインストールでトラブるので、このような場当たり的な対処になっています。↩︎\n結果も隠したいときは、代わりに include: false を指定します。チャンクオプションについてはこちら↩︎\ngm もそうですが、名前は何でもよいです。↩︎\n“nobs”, “r.squared” の2つの項目を表示し、その表記を “観測数”, “\\(R^2\\)” とし、小数点以下は観測数がなし、\\(R^2\\) は第2位までにしています。↩︎\nmsummary でも modelsummary でも使用できます。↩︎\nggplot(iris, aes(~)) の形でも図は作れますが、変数名は予測変換で出てきません。↩︎\nhere についてはこちら↩︎\n僕の場合は Linux で苦労しました。↩︎"
  },
  {
    "objectID": "pages/tips/240629_write_thesis/demo/demo2.html",
    "href": "pages/tips/240629_write_thesis/demo/demo2.html",
    "title": "【PDF】Quarto で論文を書く",
    "section": "",
    "text": "表 1 が出力した表です。\n\n\n\n\n表 1: iris を使用した回帰分析\n\n\n\n\n\n    \n\n    \n    \n      \n        \n\n \nがく片の長さ（cm）\n\n        \n              \n                 \n                (1)\n                (2)\n                (3)\n              \n        \n        注：標準誤差は括弧内に記載。+p &lt; 10%, *p &lt; 5%, **p &lt; 1%\n        \n                \n                  がく片の幅（cm）\n                  -0.223 \n                  0.596**\n                  0.651** \n                \n                \n                                  \n                  (0.141)\n                  (0.065)\n                  (0.060) \n                \n                \n                  花弁の長さ（cm）\n                         \n                  0.472**\n                  0.709** \n                \n                \n                                  \n                         \n                  (0.017)\n                  (0.062) \n                \n                \n                  花弁の幅（cm）  \n                         \n                         \n                  -0.556**\n                \n                \n                                  \n                         \n                         \n                  (0.144) \n                \n                \n                  Observations    \n                  150    \n                  150    \n                  150     \n                \n                \n                  R²              \n                  0.01   \n                  0.84   \n                  0.86"
  },
  {
    "objectID": "pages/tips/250309_estat_api/index.html#はじめに",
    "href": "pages/tips/250309_estat_api/index.html#はじめに",
    "title": "e-Stat APIを使ってデータを取得しよう",
    "section": "はじめに",
    "text": "はじめに\n今回は説明するという言い方がおこがましい程度の備忘録的な内容です。\n今後データを使う仕事をするにあたり、もう少し統計データに詳しくなりたいと思い、e-Statでよく目にするAPIに目を付けました。正直APIというのが何かわからないレベルからのスタートでしたが、調べながら初歩的な部分をすこーし理解できた気がしないでもありません。\n今回はAPIの初歩の初歩をまとめていきたいと思います。"
  },
  {
    "objectID": "pages/tips/250309_estat_api/index.html#e-statでの準備",
    "href": "pages/tips/250309_estat_api/index.html#e-statでの準備",
    "title": "e-Stat APIを使ってデータを取得しよう",
    "section": "e-Statでの準備",
    "text": "e-Statでの準備\nまずはじめにe-Statでユーザー登録をし、アプリケーションIDを取得する必要があります。\nブラウザでe-Statを開き、画面右上の「新規登録」から登録します。難しい点はほとんどないと思うので詳細は省略しますが、登録できたらログインした状態にしておいてください。\n\n\n\n右上の「新規登録」から登録します\n\n\nログインできたら、上部の青いナビゲーションバーに「マイページ」が出てきますので、そこをクリックしてマイページに進みます。\nするとナビゲーションバーの少し下に水色のバーが出てきて、そこに「API機能（アプリケーションID発行）」とあるので、そこをクリックします。\n\n\n\n右から2つ目の項目です\n\n\nするとアプリケーションIDの取得ということで3つの欄が出てきますので、1番上の欄を使用していきます。名称の部分に任意の名前を入れ、URLはそのままにしておきます。右側の「発行」をクリックすれば「appId」の部分にアプリケーションIDが表示され、これを後ほど使うことになります。\n\n\n\n名称は何でも大丈夫です"
  },
  {
    "objectID": "pages/tips/250309_estat_api/index.html#使用するパッケージ",
    "href": "pages/tips/250309_estat_api/index.html#使用するパッケージ",
    "title": "e-Stat APIを使ってデータを取得しよう",
    "section": "使用するパッケージ",
    "text": "使用するパッケージ\nRに戻ります。\n今回は以下の3つのパッケージを使用します。\n\n# インストール\n# pak::pak(c(\"httr\", \"xml2\", \"tidyverse\"))\n\nlibrary(httr)\nlibrary(xml2)\nlibrary(tidyverse)\n\nhttrはHTTPリクエストを送信してWeb APIからデータを取得するためのパッケージで、xml2はXMLデータを解析して必要な情報を抽出するためのパッケージです。XMLはデータを構造化して表現するためのフォーマットであり、APIなどでデータを受け取る際によく使われるようです。\ntidyverseはおなじみのデータハンドリング用です。"
  },
  {
    "objectID": "pages/tips/250309_estat_api/index.html#apiでデータを取得",
    "href": "pages/tips/250309_estat_api/index.html#apiでデータを取得",
    "title": "e-Stat APIを使ってデータを取得しよう",
    "section": "APIでデータを取得",
    "text": "APIでデータを取得\n\nAPIリクエストURLを取得、格納\nまずはe-Statで取得したい統計のページへアクセスします。今回は令和2年国勢調査の人口等基本集計、総人口と男女別人口のデータを取得したいと思います。今回使うページのURLは以下です。\nhttps://www.e-stat.go.jp/stat-search/database?page=1&layout=datalist&toukei=00200521&tstat=000001136464&cycle=0&tclass1=000001136466&statdisp_id=0003445078&tclass2val=0\nページにAPIと書かれた青いアイコンがあるので、そこをクリックします。するとURLが表示されるので、表示されたURLをコピーしておきます。\n\n\n\n左側にあるAPIと書かれた部分をクリックして出てきたURLをコピーします\n\n\n次にRで今コピーしたURLを格納します。ダブルクォーテーションで囲んでください。\nurl &lt;- \"https://api.e-stat.go.jp/rest/3.0/app/getStatsData?appId=&lang=J&statsDataId=0003445078&metaGetFlg=Y&cntGetFlg=N&explanationGetFlg=Y&annotationGetFlg=Y&sectionHeaderFlg=1&replaceSpChars=0\"\nここで注意ですが、URLの中にappId=という部分があり、ここに先ほど作成したアプリケーションIDを入れる必要があります。仮にアプリケーションIDをhogehogeとすると、\nurl &lt;- \"https://api.e-stat.go.jp/rest/3.0/app/getStatsData?appId=hogehoge&lang=J&statsDataId=0003445078&metaGetFlg=Y&cntGetFlg=N&explanationGetFlg=Y&annotationGetFlg=Y&sectionHeaderFlg=1&replaceSpChars=0\"\nとなります。\n\n\nURLを使ってAPIリクエストを実行\n次に入力したURLを使ってAPIリクエストを実行します。\n\nresponse &lt;- GET(url)\n\nこのレスポンスの内容をテキストとして取得し、XMLとして読み込んでいきます。responseにはステータスコードが含まれているのですが、これが200だと読み込みが成功しています。成功していれば読み込むように設定します。\n\nif (status_code(response) == 200) {\n  \n  xml_data &lt;- read_xml(content(response, as = \"text\", encoding = \"UTF-8\"))\n  \n  print(xml_data)\n  \n} else {\n  stop(\"データの取得に失敗しました。HTTPステータスコード: \", status_code(response))\n}\n\n{xml_document}\n&lt;GET_STATS_DATA noNamespaceSchemaLocation=\"https://api.e-stat.go.jp/rest/3.0/schema/GetStatsData.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n[1] &lt;RESULT&gt;\\n  &lt;STATUS&gt;0&lt;/STATUS&gt;\\n  &lt;ERROR_MSG&gt;正常に終了しました。&lt;/ERROR_MSG&gt;\\n  &lt;D ...\n[2] &lt;PARAMETER&gt;\\n  &lt;LANG&gt;J&lt;/LANG&gt;\\n  &lt;STATS_DATA_ID&gt;0003445078&lt;/STATS_DATA_ID ...\n[3] &lt;STATISTICAL_DATA&gt;\\n  &lt;RESULT_INF&gt;\\n    &lt;TOTAL_NUMBER&gt;12258&lt;/TOTAL_NUMBER ...\n\n\nステータスコードが200になっていたので{xml_document}としていろいろ出てきました。また、xml_dataに読み込んだXMLが保存されています。\n\n\nXMLの構造確認\n次にXMLの構造を確認してみます。しかしこれは非常に長くなるので、結果は表示しません。実際に手元で実行してみてください。\n\nxml_structure(xml_data)\n\n結果の中には様々な情報が構造化されて格納されていることがわかります。僕たちが抽出したい情報は{text}と書かれているのでこのままでは確認することができませんが、この中には統計名やカテゴリ、更新日など、統計に関する様々な情報が含まれます。必要に応じてここから情報を取得することができるので、試しにいろいろやってみましょう。\n\n統計表の名前\n\n\ntable_name &lt;- xml_text(xml_find_first(xml_data, \"//TABLE_INF/STATISTICS_NAME\"))\nprint(table_name)\n\n[1] \"令和２年国勢調査 人口等基本集計　（主な内容：男女・年齢・配偶関係，世帯の構成，住居の状態，母子・父子世帯，国籍など）\"\n\n\n\n調査日\n\n\nsurvey_date &lt;- xml_text(xml_find_first(xml_data, \"//TABLE_INF/SURVEY_DATE\"))\nprint(survey_date)\n\n[1] \"202010\"\n\n\n\nカテゴリ\n\n\nopen_date &lt;- xml_text(xml_find_first(xml_data, \"//TABLE_INF/OPEN_DATE\"))\nprint(open_date)\n\n[1] \"2021-11-30\"\n\n\nいろいろ結果が出てきました。ここで、使用していた関数について説明します。\nまずxml_text()です。これはXML内の ノード1のテキストを取得する関数です。内容をテキストとして抽出するものというようなイメージだと思ってください。\n次にxml_find_first()です。これは括弧内で指定したパスと合致する最初のものを抽出してくるという関数です。例えば1番では、\"//TABLE_INF/STATISTICS_NAME\"に一致する部分を探して、そこに書かれている内容を引っ張ってきます。最初ということは複数あるのか？と僕も最初は思ったのですが、どうやら1つしかない要素に対しても一般的に使うようです2。\n\n\n\n\n\n\nXPath（XML上のパス）について\n\n\n\nXMLの構造を丁寧に見た方の中にはTABLE_INFはGET_STATS_DATAの中のさらにSTATISTICAL_DATAの中に入っているがそれは指定しなくてよいのか、と思った方もいるかもしれません。そこは最初の2つのスラッシュ（//）で対応していて、これは全体のどこにあっても例えばTABLE_INF/STATISTICS_NAMEとなっている部分を見つけ出して中身を抽出するということを意味しています。つまり、上記の書き方は\"/GET_STATS_DATA/STATISTICAL_DATA/TABLE_INF/STATISTICS_NAME\"に等しいです。\n\n\n\n\nデータを取得\nではいろいろ確認できたところでデータを取得する作業に入ります。\nデータは//DATA_INF/VALUEというところに含まれているので、このパスを用います。また構造を確認していただけばわかるように、VALUEというのは大量にありますのでxml_find_first()では最初の1つしか取得できず、不適切です。ここではxml_find_all()ですべての用をを取得していきます。\n加えて、\n&lt;VALUE [tab, cat01, area, time, unit]&gt;\nとなっているように、VALUEには5つの属性が付与されており、それぞれ統計表のタブ（表のバージョンや種類）、統計のカテゴリ、自治体コード、時間（ここでは年）、単位を示します。これを踏まえて必要な情報を以下のコードでは取得しています。\n\n# データがあるノードをすべて取得\nvalue_nodes &lt;- xml_find_all(xml_data, \"//DATA_INF/VALUE\")\n\ndf &lt;- tibble(\n  # xml_attr()で特定の属性を取得\n  area     = xml_attr(value_nodes, \"area\"),\n  time     = xml_attr(value_nodes, \"time\"),\n  category = xml_attr(value_nodes, \"cat01\"),\n  value    = as.numeric(xml_text(value_nodes))\n)\n\nprint(df)\n\n# A tibble: 12,258 × 4\n   area  time       category     value\n   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;\n 1 00000 2020000000 0        126146099\n 2 01000 2020000000 0          5224614\n 3 01100 2020000000 0          1973395\n 4 01101 2020000000 0           248680\n 5 01102 2020000000 0           289323\n 6 01103 2020000000 0           265379\n 7 01104 2020000000 0           211835\n 8 01105 2020000000 0           225298\n 9 01106 2020000000 0           135777\n10 01107 2020000000 0           217040\n# ℹ 12,248 more rows\n\n\nこのままだと少しわかりにくいですね。timeは年なので上4桁だけ取り出したいし、categoryには３つの数字があるのですが、それぞれが何を意味しているのか分かりません。\nひとまずカテゴリについて確認しておきましょう。XMLの中にCLASS_INFがあり、その中に情報が含まれています。カテゴリ（cat01がそれです）について知りたい場合は\"//CLASS_INF/CLASS_OBJ[@id='cat01']/CLASS\"で確認できます。以下のコードを実行してください。\n\n# xml_data内のノードを取得\ncat01_nodes &lt;- xml_find_all(xml_data, \"//CLASS_INF/CLASS_OBJ[@id='cat01']/CLASS\")\n\n# cat01のコードと対応する名前を取得\ndf_cat01 &lt;- tibble(\n  cat01_code = xml_attr(cat01_nodes, \"code\"),\n  cat01_name = xml_attr(cat01_nodes, \"name\")\n)\n\n# 結果を表示\nprint(df_cat01)\n\n# A tibble: 3 × 2\n  cat01_code cat01_name\n  &lt;chr&gt;      &lt;chr&gt;     \n1 0          総数      \n2 1          男        \n3 2          女        \n\n\n0が総数、1が男、2が女であることがわかりました。なのでここでカテゴリを書き換え、ついでに年も整理し並べ替えておきましょう。\n\ndf_clean &lt;- df |&gt; \n  arrange(area, time, category) |&gt; \n  mutate(\n    # timeの上4桁を整数として格納\n    time = as.integer(str_sub(time, 1, 4)), \n    # case_when()で条件分岐\n    category = case_when(\n      # 文字列として格納されているので\"\"で囲みます\n      category == \"0\" ~ \"population\", \n      category == \"1\" ~ \"pop_male\", \n      category == \"2\" ~ \"pop_female\"\n      )\n  )\n\nprint(df_clean)\n\n# A tibble: 12,258 × 4\n   area   time category       value\n   &lt;chr&gt; &lt;int&gt; &lt;chr&gt;          &lt;dbl&gt;\n 1 00000  2020 population 126146099\n 2 00000  2020 pop_male    61349581\n 3 00000  2020 pop_female  64796518\n 4 01000  2020 population   5224614\n 5 01000  2020 pop_male     2465088\n 6 01000  2020 pop_female   2759526\n 7 01100  2020 population   1973395\n 8 01100  2020 pop_male      918682\n 9 01100  2020 pop_female   1054713\n10 01101  2020 population    248680\n# ℹ 12,248 more rows\n\n\nもしカテゴリの各種をそれぞれ列にしたければpivot_wider()でできます。\n\ndf_wide &lt;- df_clean |&gt; \n  pivot_wider(\n    names_from = category, \n    values_from = value\n  )\n\nprint(df_wide)\n\n# A tibble: 4,086 × 5\n   area   time population pop_male pop_female\n   &lt;chr&gt; &lt;int&gt;      &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 00000  2020  126146099 61349581   64796518\n 2 01000  2020    5224614  2465088    2759526\n 3 01100  2020    1973395   918682    1054713\n 4 01101  2020     248680   112853     135827\n 5 01102  2020     289323   136596     152727\n 6 01103  2020     265379   126023     139356\n 7 01104  2020     211835   100062     111773\n 8 01105  2020     225298   104154     121144\n 9 01106  2020     135777    62347      73430\n10 01107  2020     217040   100027     117013\n# ℹ 4,076 more rows\n\n\nこれでひとまずデータフレームとして整理することができました。ここからさらに整理したり、分析を回していきましょう！"
  },
  {
    "objectID": "pages/tips/250309_estat_api/index.html#データベースから取得する",
    "href": "pages/tips/250309_estat_api/index.html#データベースから取得する",
    "title": "e-Stat APIを使ってデータを取得しよう",
    "section": "データベースから取得する",
    "text": "データベースから取得する\n今回は国勢調査のような既にまとめられたデータを用いましたが、e-Statのデータベースを使えば必要なデータを選択して取得することができます。\n例えばこちらから「市区町村データ」を選択し「データ表示」をクリックします。\n出てきた画面から地域を選択し、「確定」をクリックしたのち取得したいデータを選択し、再度「確定」をクリックします。\n\n\n\n地域を選択します\n\n\n\n\n\n取得したい統計項目を選択します\n\n\nするとデータが画面に表示されますが、ここで右上の「API」をクリックし、表示されたURLをコピーします。ここからは上で書いてきた手順と同様です。\n\n\n\nURLの使い方はこれまでと同様です"
  },
  {
    "objectID": "pages/tips/250309_estat_api/index.html#おわりに",
    "href": "pages/tips/250309_estat_api/index.html#おわりに",
    "title": "e-Stat APIを使ってデータを取得しよう",
    "section": "おわりに",
    "text": "おわりに\nAPIは正直初心者には難しいなと感じましたが、大体のコードはそのまま使いまわせますし、XMLの構造を少し辛抱して眺めてみればどこに何が入っているのか少しずつわかってきました。\nCSVでダウンロードすると余計な情報量が多く分析の手間に感じていましたので、春休みを機に少しではありますが知れてよかったと思います。ぜひ活用してみて下さい。"
  },
  {
    "objectID": "pages/tips/250309_estat_api/index.html#footnotes",
    "href": "pages/tips/250309_estat_api/index.html#footnotes",
    "title": "e-Stat APIを使ってデータを取得しよう",
    "section": "注",
    "text": "注\n\n\nXMLデータの中の要素（タグ）や属性、テキストなどの構成要素のことを言います。↩︎\n今回取得してきたような要素は全体を見ても1か所にしか出てきません。↩︎"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#これぞ王道",
    "href": "pages/tips/240901_tex_live/index.html#これぞ王道",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "これぞ王道",
    "text": "これぞ王道\nLaTeX環境でまず思い浮かぶのがTeX Liveを用いたローカル環境です。\n本記事では設定方法を解説します。\nなかなかややこしいと思いますが、これできっとローカルでもTeXファイルをコンパイル（PDF化）できるはずです！\n本記事はWindowsに対応しています。\nまた、基本的な内容は以下のページを参考にしています。\n\n\n\n\n\n\n【大学生向け】LaTeX完全導入ガイド Windows編 (2022年)\n\n\n\n簡潔に、かつ自分が設定して困った点を追記しています。\nまた、VSCodeはインストールしてある前提で進めます。"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#インストーラーをダウンロード",
    "href": "pages/tips/240901_tex_live/index.html#インストーラーをダウンロード",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "インストーラーをダウンロード",
    "text": "インストーラーをダウンロード\n以下のリンクよりインストーラーをダウンロードします。\nWindows：https://www.tug.org/texlive/acquire-netinstall.html\n開いたら最初に出てくるリンクのinstall-tl-windows.exeをクリックしてダウンロードします。\nダウンロードできたら開いてください。"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#インストールする",
    "href": "pages/tips/240901_tex_live/index.html#インストールする",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "インストールする",
    "text": "インストールする\n開くと以下のようなメッセージが出るかもしれません。\n\n\n\n\n\nその場合、詳細情報＞実行で進むことができます。進めて問題ありません。\n\nInstallが選択された状態でNext&gt;\nInstallを選択\n\n数秒待つと新たなウィンドウが登場し、さらに待機すると以下の画面が出てくると思います。\n\n\n\n\n\nここで、デフォルトでは一番下の「TeXworksをインストール」にチェックが入っていますが、とりあえず要らないので、チェックを外してください。\nさらに、左下の「高度な設定」に進みます。\n\n\n\n\n\nここでやることは2つです。\n\n「スキーム」を変更し、「basicスキーム（plainおよびlatex）」を選択します。\nその下の「追加コレクションの数」をカスタマイズし、言語で日本語と英語・米語を追加、さらに右列にある「LaTeX推奨パッケージ」を追加します。\n\nOKを押して戻るとスキームがまたカスタムスキームに戻っていますが、問題ありません。\nインストールを押してインストールしましょう。\nめちゃくちゃ時間がかかりますが、辛抱強く待ちましょう。不安になって中止とか押さないように！\nインストール画面のInstalling [001/399, ...]を見てもらえればわかると思いますが、約400個のパッケージをインストールしています。時間がかかるわけですね…。\n以下の画面になれば終わりなので、閉じるを押してください。"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#sec-tex-live-manager",
    "href": "pages/tips/240901_tex_live/index.html#sec-tex-live-manager",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "TeX Live Managerを開く",
    "text": "TeX Live Managerを開く\nアプリ一覧からTeX Live Managerを開いてください。\n\n\n\n下から2番目のやつです。\n\n\n開いたら、「パッケージリスト」の中にある「未インストール」を選択します。選択すると別ウィンドウが出てきますので、読み込みが完了するまで待機し、完了したら閉じてください。\n検索窓でlatexmkを入力します。\n\n\n\n\n\nすると下に2つ候補が出てくるので、左側の丸をクリックして両方ともにチェックを入れます。\nウィンドウの真ん中右に「選択項目をインストール」があると思うので、チェックしたのちクリックしてください。"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#sumatra-pdfのダウンロード任意",
    "href": "pages/tips/240901_tex_live/index.html#sumatra-pdfのダウンロード任意",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "Sumatra PDFのダウンロード（任意）",
    "text": "Sumatra PDFのダウンロード（任意）\n推奨する方：既定のPDFビュワーがAdobeの方\nTeXファイルを一度コンパイルするとPDFビュワーで開くことになるのですが、AdobeではPDFファイルを開いたまま再度コンパイルをすることができません。一度コンパイルた後に修正したい場合、PDFファイルを一度閉じて再度コンパイルする必要があります。\nこの面倒さを回避するためには、Sumatra PDFのようなPDFビュワーを使用するのがよいです。このビュワーではPDFファイルを開いたまま追加のコンパイルをすることができます。\n以下のリンクからダウンロードページに行ってください。\nhttps://www.sumatrapdfreader.org/download-free-pdf-viewer\n自分の環境にあった（おそらくほとんどのWindowsユーザーにとって一番上の）.exeファイルをダウンロードします。\nダウンロードしたファイルを開くとカラフルなウィンドウが開きますので、インストールしてください。とりあえずこれでOKです。\n既定にするかどうかはお任せします（コンパイル時以外はAdobeを使っているので僕はしてないです笑）。"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#諸々の設定",
    "href": "pages/tips/240901_tex_live/index.html#諸々の設定",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "諸々の設定",
    "text": "諸々の設定\n\n.latexmkrc\n\n\n\n\n\n\n拡張子の表示\n\n\n\nエクスプローラーで拡張子（.pdfや.docsなど）が非表示になっている場合、表示する設定にしてください。エクスプローラー上部にある「表示」からさらに1番下の「表示」に進むと、「ファイル名拡張子」という項目があります。この項目にチェックを入れてください。\n\n\n\n\n\n\n\n次に、エクスプローラーを開いてください。\n開いたら左にあるバーの下部からPC&gt;Windows (C:)と進み、さらにユーザー&gt;[自分のユーザー名]と進みます1。\n左上の「新規作成」からテキストドキュメントを作成し、ファイル名は.txtもすべて消したうえで.latexmkrc.としてエンターを押します。最初と最後に.があるのを確認してください。\n作成の際には最初と最後にドットを入れますが、作成されたファイルでは最後のドットは消えています。\n\n\n\nできたファイルは`.latexmkrc`となっています。\n\n\n作成できたら開きます。何で開くか聞かれると思いますが、（何で開いてもよいのですが）VSCodeでよいと思います。\n開いたら以下の内容をコピペして保存し、閉じてください。\n\n\n.latexmkrc\n\n# 通常の LaTeX ドキュメントのビルドコマンド\n$latex = 'uplatex %O -kanji=utf8 -no-guess-input-enc -synctex=1 -interaction=nonstopmode %S';\n# pdfLaTeX のビルドコマンド\n$pdflatex = 'pdflatex %O -synctex=1 -interaction=nonstopmode %S';\n# LuaLaTeX のビルドコマンド\n$lualatex = 'lualatex %O -synctex=1 -interaction=nonstopmode %S';\n# XeLaTeX のビルドコマンド\n$xelatex = 'xelatex %O -no-pdf -synctex=1 -shell-escape -interaction=nonstopmode %S';\n# Biber, BibTeX のビルドコマンド\n$biber = 'biber %O --bblencoding=utf8 -u -U --output_safechars %B';\n$bibtex = 'upbibtex %O %B';\n# makeindex のビルドコマンド\n$makeindex = 'upmendex %O -o %D %S';\n# dvipdf のビルドコマンド\n$dvipdf = 'dvipdfmx %O -o %D %S';\n# dvipd のビルドコマンド\n$dvips = 'dvips %O -z -f %S | convbkmk -u &gt; %D';\n$ps2pdf = 'ps2pdf.exe %O %S %D';\n\n# PDF の作成方法を指定するオプション\n## $pdf_mode = 0; PDF を作成しない。\n## $pdf_mode = 1; $pdflatex を利用して PDF を作成。\n## $pdf_mode = 2; $ps2pdf を利用して .ps ファイルから PDF を作成。\n## pdf_mode = 3; $dvipdf を利用して .dvi ファイルから PDF を作成。\n## $pdf_mode = 4; $lualatex を利用して .dvi ファイルから PDF を作成。\n## $pdf_mode = 5; xdvipdfmx を利用して .xdv ファイルから PDF を作成。\n$pdf_mode = 4;\n\n# PDF viewer の設定\n$pdf_previewer = \"start %S\";  # \"start %S\": .pdf に関連付けられた既存のソフトウェアで表示する。\n\nここでは$pdf_previewer = \"start %S\"となっていますが、これは既定のPDFビュワーで開くという設定です。AdobeであればAdobeでコンパイルしたファイルが自動で開かれます。\n次に、コンパイル後に先ほどインストールしたSumatra PDFで開く設定方法です。\n\n\n.latexmkec（Sumatra PDF ver.）\n\n\n\n\n\n\n隠しファイルの表示\n\n\n\n以下の設定をする場合は隠しファイルを表示する設定にする必要があります。先ほどの拡張子を表示する設定の下に「隠しファイル」という項目がありますので、そこにチェックを入れてください2。\n\n\n内容は上のとほとんど同じです。Sumatra PDFで開くために、次のことを確認してください。\n\nエクスプローラーを開く\n先ほど.latexmkrcファイルを作成したディレクトリの上の方にAppDataがあるのでダブルクリック\nLocal&gt;SumatraPDFと進む\nSumatraPDF.exeを右クリックし、パスのコピーを選択\n一番最後のイコールの後にペースト\n\n# 通常の LaTeX ドキュメントのビルドコマンド\n$latex = 'uplatex %O -kanji=utf8 -no-guess-input-enc -synctex=1 -interaction=nonstopmode %S';\n# pdfLaTeX のビルドコマンド\n$pdflatex = 'pdflatex %O -synctex=1 -interaction=nonstopmode %S';\n# LuaLaTeX のビルドコマンド\n$lualatex = 'lualatex %O -synctex=1 -interaction=nonstopmode %S';\n# XeLaTeX のビルドコマンド\n$xelatex = 'xelatex %O -no-pdf -synctex=1 -shell-escape -interaction=nonstopmode %S';\n# Biber, BibTeX のビルドコマンド\n$biber = 'biber %O --bblencoding=utf8 -u -U --output_safechars %B';\n$bibtex = 'upbibtex %O %B';\n# makeindex のビルドコマンド\n$makeindex = 'upmendex %O -o %D %S';\n# dvipdf のビルドコマンド\n$dvipdf = 'dvipdfmx %O -o %D %S';\n# dvipd のビルドコマンド\n$dvips = 'dvips %O -z -f %S | convbkmk -u &gt; %D';\n$ps2pdf = 'ps2pdf.exe %O %S %D';\n\n# PDF の作成方法を指定するオプション\n## $pdf_mode = 0; PDF を作成しない。\n## $pdf_mode = 1; $pdflatex を利用して PDF を作成。\n## $pdf_mode = 2; $ps2pdf を利用して .ps ファイルから PDF を作成。\n## pdf_mode = 3; $dvipdf を利用して .dvi ファイルから PDF を作成。\n## $pdf_mode = 4; $lualatex を利用して .dvi ファイルから PDF を作成。\n## $pdf_mode = 5; xdvipdfmx を利用して .xdv ファイルから PDF を作成。\n$pdf_mode = 4;\n\n# PDF viewer の設定\n$pdf_previewer = \n次のようになるはずです。\n$pdf_previewer = \"C:\\Users\\ユーザー名\\AppData\\Local\\SumatraPDF\\SumatraPDF.exe\"\nしかしこれで終わりではありません。最後に、パス内のバックスラッシュを二重にする必要があります！\n最終的には次のようになります。\n$pdf_previewer = \"C:\\\\Users\\\\ユーザー名\\\\AppData\\\\Local\\\\SumatraPDF\\\\SumatraPDF.exe\"\nこのコードをコピペしてユーザー名のところを自分のものに変えれば解決な気もしますね…笑\nこれでPDF出力の際にSumatra PDFで開かれるようになり、コンパイルのストレスが軽減されます。"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#vscodeでコンパイル",
    "href": "pages/tips/240901_tex_live/index.html#vscodeでコンパイル",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "VSCodeでコンパイル",
    "text": "VSCodeでコンパイル\n\n\n\n\n\n\nはじめに\n\n\n\nまず、VSCodeを既に開いている場合、一度閉じて再度開いてください。TeX Liveの設定を反映させるためです。\n\n\n\n設定\n画面左の拡張機能アイコンを開き、検索窓にJames-Yu.latex-workshopを入力します。これがLaTeX用の拡張機能です。\nインストールしたら、VSCodeを再起動して設定を反映させます。\nここからの設定は以下の手順です。\n\n左下の「管理」（設定アイコン）から「設定」をクリック\n右上の「設定を開く」をクリック\n{ } の中に以下の内容をペースト、保存3\n\n\n\nsettings.json\n\n// 日本語文書で単語移動を使うため、助詞や読点、括弧を区切り文字として指定する\n    \"editor.wordSeparators\": \"./\\\\()\\\"'-:,.;&lt;&gt;~!@#$%^&*|+=[]{}`~?　、。「」【】『』（）！？てにをはがのともへでや\",\n\n    // 設定: LaTeX Workshop\n\n    // LaTeX Workshop ではビルド設定を「Tool」と「Recipe」という2つで考える\n    //   Tool: 実行される1つのコマンド。コマンド (command) と引数 (args) で構成される\n    //   Recipe: Tool の組み合わわせを定義する。Tool の組み合わせ (tools) で構成される。\n    //           tools の中で利用される Tool は \"latex-workshop.latex.tools\" で定義されている必要がある。\n    \n    // latex-workshop.latex.tools: Tool の定義\n    \"latex-workshop.latex.tools\": [\n      \n        // latexmk を利用した lualatex によるビルドコマンド\n        {\n          \"name\": \"Latexmk (LuaLaTeX)\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-f\", \"-gg\", \"-pv\", \"-lualatex\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n          ]\n        },\n        // latexmk を利用した xelatex によるビルドコマンド\n        {\n          \"name\": \"Latexmk (XeLaTeX)\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-f\", \"-gg\", \"-pv\", \"-xelatex\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n          ]\n        },\n        // latexmk を利用した uplatex によるビルドコマンド\n        {\n          \"name\": \"Latexmk (upLaTeX)\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-f\", \"-gg\", \"-pv\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n          ]\n        },\n        // latexmk を利用した platex によるビルドコマンド\n        // 古い LaTeX のテンプレートを使いまわしている (ドキュメントクラスが jreport や jsreport ) 場合のため\n        {\n          \"name\": \"Latexmk (pLaTeX)\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-f\", \"-gg\", \"-pv\", \"-latex='platex'\", \"-latexoption='-kanji=utf8 -no-guess-input-env'\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n          ]\n        }\n    ],\n\n    // latex-workshop.latex.recipes: Recipe の定義\n    \"latex-workshop.latex.recipes\": [\n        // LuaLaTeX で書かれた文書のビルドレシピ\n        {\n          \"name\": \"LuaLaTeX\",\n          \"tools\": [\n            \"Latexmk (LuaLaTeX)\"\n          ]\n        },\n        // XeLaTeX で書かれた文書のビルドレシピ\n        {\n          \n          \"name\": \"XeLaTeX\",\n          \"tools\": [\n            \"Latexmk (XeLaTeX)\"\n          ]\n        },\n        // LaTeX(upLaTeX) で書かれた文書のビルドレシピ\n        {\n          \"name\": \"upLaTeX\",\n          \"tools\": [\n            \"Latexmk (upLaTeX)\"\n          ]\n        },\n        // LaTeX(pLaTeX) で書かれた文書のビルドレシピ\n        {\n          \"name\": \"pLaTeX\",\n          \"tools\": [\n            \"Latexmk (pLaTeX)\"\n          ]\n        },\n    ],\n\n    // latex-workshop.latex.magic.args: マジックコメント付きの LaTeX ドキュメントをビルドする設定\n    // '%!TEX' で始まる行はマジックコメントと呼ばれ、LaTeX のビルド時にビルドプログラムに解釈され、\n    // プログラムの挙動を制御する事ができる。\n    // 参考リンク: https://blog.miz-ar.info/2016/11/magic-comments-in-tex/\n    \"latex-workshop.latex.magic.args\": [\n      \"-f\", \"-gg\", \"-pv\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n    ],\n\n    // latex-workshop.latex.clean.fileTypes: クリーンアップ時に削除されるファイルの拡張子\n    // LaTeX 文書はビルド時に一時ファイルとしていくつかのファイルを生成するが、最終的に必要となるのは\n    // PDF ファイルのみである場合などが多い。また、LaTeX のビルド時に失敗した場合、失敗時に生成された\n    // 一時ファイルの影響で、修正後のビルドに失敗してしまう事がよくある。そのため、一時的なファイルを\n    // 削除する機能 (クリーンアップ) が LaTeX Workshop には備わっている。\n    \"latex-workshop.latex.clean.fileTypes\": [\n        \"*.aux\", \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \"*.acr\", \"*.alg\", \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\", \"*.synctex.gz\",\n        // for Beamer files\n        \"_minted*\", \"*.nav\", \"*.snm\", \"*.vrb\",\n    ],\n\n    // latex-workshop.latex.autoClean.run: ビルド失敗時に一時ファイルのクリーンアップを行うかどうか\n    // 上記説明にもあったように、ビルド失敗時に生成された一時ファイルが悪影響を及ぼす事があるため、自動で\n    // クリーンアップがかかるようにしておく。\n\n    \"latex-workshop.latex.autoClean.run\": \"onBuilt\",\n\n    // latex-workshop.view.pdf.viewer: PDF ビューアの開き方\n    // VSCode 自体には PDF ファイルを閲覧する機能が備わっていないが、\n    // LaTeX Workshop にはその機能が備わっている。\n    // \"tab\" オプションを指定すると、今開いているエディタを左右に分割し、右側に生成されたPDFを表示するようにしてくれる\n    // この PDF ビュアーは LaTeX のビルドによって更新されると同期して内容を更新してくれる。\n    \"latex-workshop.view.pdf.viewer\": \"tab\",\n\n    // latex-workshop.latex.autoBuild.run: .tex ファイルの保存時に自動的にビルドを行うかどうか\n    // LaTeX ファイルは .tex ファイルを変更後にビルドしないと、PDF ファイル上に変更結果が反映されないため、\n    // .tex ファイルの保存と同時に自動的にビルドを実行する設定があるが、文書が大きくなるに連れてビルドにも\n    // 時間がかかってしまい、ビルドプログラムの負荷がエディタに影響するため、無効化しておく。\n    \"latex-workshop.latex.autoBuild.run\": \"never\",\n\n    \"[tex]\": {\n        // スニペット補完中にも補完を使えるようにする\n        \"editor.suggest.snippetsPreventQuickSuggestions\": false,\n        // インデント幅を2にする\n        \"editor.tabSize\": 2\n    },\n\n    \"[latex]\": {\n        // スニペット補完中にも補完を使えるようにする\n        \"editor.suggest.snippetsPreventQuickSuggestions\": false,\n        // インデント幅を2にする\n        \"editor.tabSize\": 2\n    },\n\n    \"[bibtex]\": {\n        // インデント幅を2にする\n        \"editor.tabSize\": 2\n    },\n\n\n    // ---------- LaTeX Workshop ----------\n\n    // 使用パッケージのコマンドや環境の補完を有効にする\n    \"latex-workshop.intellisense.package.enabled\": true,\n\n\n\nいよいよコンパイル\nエクスプローラー上で好きな場所にフォルダーを作っておきます。\nお試しなのでtestとかでよいと思います。\nVSCode上でウィンドウ左上の「ファイル」から「フォルダーを開く」をクリック、今作成したフォルダをクリックし、「選択」をクリックします。\n左上のTESTの右にある「ファイルを作成」をクリックし、test.texのような.texファイルを作成します。\n作成できたら、以下のようなサンプルコードを書いてみます。\n\\documentclass{ltjsarticle}\n\n\\title{日本語のLaTeX入門}\n\\author{あなたの名前}\n\\date{\\today}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{はじめに}\nLaTeXは、高品質な文書を作成するための強力なツールです。日本語でも簡単に利用することができます。\n\n\\section{基本的な書き方}\nLaTeXでは、文章をセクションやパラグラフに分けることができます。また、数式や図表の挿入も簡単に行えます。\n\n\\section{結論}\nLaTeXを使えば、美しい日本語の文書を作成することができます。ぜひ活用してみてください。\n\n\\end{document}\nファイルをCtrl + Sで保存したら、右上の緑の▷、ビルドボタンをクリックしてコンパイルしましょう！\nすると以下のようなSumatra PDFのウィンドウが出てくるのではないでしょうか。\n\n\n\n\n\nいい感じですね。そしたらSumatra PDFの魅力を感じるために、適当に内容を変え、再度コンパイルしてみてください。\nSumatra PDFを一度閉じなくても、修正されたPDFが出てくるのではないでしょうか。Adobeではこれができません。\n先ほど別にいっかーと思ってインストールしてなかった方、してみてはいかがでしょうか笑"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#エラーパッケージ不足",
    "href": "pages/tips/240901_tex_live/index.html#エラーパッケージ不足",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "エラー：パッケージ不足",
    "text": "エラー：パッケージ不足\nいつかパッケージが足りなくてコンパイルできなくなることがあるかもしれません。\n次のようなエラーが出てきた場合、「Open compiler log」をクリックします。\n\n\n\n\n\nログは一見ややこしいのですが、少し上に遡ると、例えば次のような文言が目に入ります。\n! LaTeX Error: File `type1cm.sty' not found.\nこれはtype1cmパッケージが足りていないことを指しています。\nそしたら最初の方で開いたTeX Live Managerを開き、latexmkの時と同様に未インストールを選択したうえで検索窓にtype1cmと入力します。\n出てきた項目にチェックを入れ、「選択項目をインストール」をクリックしてインストールしてください。\nこれでパッケージを補い、コンパイルできるはずです。まだ足りなかったら、同様の方法でインストールすることで対処できます。"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#最後に",
    "href": "pages/tips/240901_tex_live/index.html#最後に",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "最後に",
    "text": "最後に\nこれで基本的なLaTeX環境の構築ができました。\n冒頭に紹介したサイトにかなり頼る形にはなりましたが、自分が詰まったところは改善して追記してあります。\n不明点があれば元サイトを参照していただくか、コメントをお願いします。"
  },
  {
    "objectID": "pages/tips/240901_tex_live/index.html#footnotes",
    "href": "pages/tips/240901_tex_live/index.html#footnotes",
    "title": "【王道】TeX LiveをインストールしてLaTeX環境を構築する",
    "section": "注",
    "text": "注\n\n\nOneDriveフォルダやダウンロードフォルダ、ビデオフォルダなどがあるところです。↩︎\n先ほどの画像を確認していただくと、「隠しファイル」にチェックが入っているのが確認できると思います。↩︎\n{ }は消さないでください。また、既に何か書き込まれている場合、前の内容の最後をカンマで区切り、改行したうえで貼り付けてください。↩︎"
  },
  {
    "objectID": "pages/tips/240515_rproj/index.html#r-プロジェクトについて",
    "href": "pages/tips/240515_rproj/index.html#r-プロジェクトについて",
    "title": "【R】プロジェクトを使う",
    "section": "R プロジェクトについて",
    "text": "R プロジェクトについて\nR プロジェクトは、RStudio で作成できるプロジェクトです。プロジェクトを作成すると、プロジェクトのためのディレクトリが作成され、そのディレクトリ内で作業することになります。\nプロジェクトを作成すると、プロジェクトのための .Rproj ファイルが作成され、RStudio でそのファイルを開くことで、プロジェクトが開かれます。"
  },
  {
    "objectID": "pages/tips/240515_rproj/index.html#作り方",
    "href": "pages/tips/240515_rproj/index.html#作り方",
    "title": "【R】プロジェクトを使う",
    "section": "作り方",
    "text": "作り方\n\nRStudio を開く\n画面右上の  をクリックし、「New Project…」を選択\n\nここで、新しいディレクトリを作るか、既存のディレクトリに作るかを選択できます。\n新しくフォルダを作って作業をしたい場合は新しいディレクトリを、既にデータフォルダなどを含む作業ディレクトリがある場合は既存のディレクトリを選択します。\n新規ディレクトリの場合、特に目的が決まっていなければ「New Project」を選んでもらって大丈夫です。\n「Browse」より、プロジェクトを作成するディレクトリを選択します。\n既存のディレクトリを選択した場合、そのディレクトリ内に .Rproj ファイルが作成されます。\n\n\n\n自動でプロジェクトが開く\n\n右上を見てもらうと、プロジェクト名になっていることが分かると思います。\n\n\n2回目以降開くときは、同様に右上から「Open Project」を選ぶか、エクスプローラーもしくは Finder から .Rproj ファイルをダブルクリックして開くことができます。"
  },
  {
    "objectID": "pages/tips/240515_rproj/index.html#プロジェクトの強みを活かす",
    "href": "pages/tips/240515_rproj/index.html#プロジェクトの強みを活かす",
    "title": "【R】プロジェクトを使う",
    "section": "プロジェクトの強みを活かす",
    "text": "プロジェクトの強みを活かす\n\n強み\nプロジェクトの強みとして、そのディレクトリ内で作業が完結することが挙げられます。\nデータやソースコードは、プロジェクトのディレクトリ内に保存しておきましょう。その上で強みを発揮するのが、here パッケージを使った相対パスの指定です。\n例えば、次のようなディレクトリであるとします。\nproject-root/\n├── proj.Rproj\n├── code/\n│   ├── script1.R\n│   ├── script2.R\n│   └── utils/\n│       ├── helper1.R\n│       └── helper2.R\n└── data/\n    ├── raw/\n    │   ├── dataset1.csv\n    │   └── dataset2.csv\n    └── processed/\n        ├── processed1.csv\n        └── processed2.csv\nこのもとで話を進めます。\n\n\nhere パッケージ\nhere パッケージを使うと、.Rproj ファイルがあるディレクトリを基準として、相対パスを指定することができます。\nまずはインストールしましょう。\n\n\nR\n\ninstall.packages(\"here\")\n\n次に読み込みます。\n\n\nR\n\nlibrary(here)\n\n例えばここで、processed1.csv を使いたいとします。\nC: から始まるパスを指定していたのでは長いですし、setwd() でワーキングディレクトリを設定していたとしても、その都度設定するのも非効率です1。\nパッケージの主要関数である here() は、.Rproj があるディレクトリ起点とした相対パスを使用可能です。\n百聞は一見に如かずということで、次のコードをご覧ください。\n\n\nR\n\ndf &lt;- readr::read_csv(here(\"data/processed/processed1.csv\"))\n\n&lt;ポイント&gt;\n\n引数がデータのところで here() を使う\n.Rproj があるディレクトリからのパスを書く\nhere() 内ではダブルクォーテーションでパスを囲む\n\nこのようにすれば、フォルダの位置が PC 内で変わるなどの環境の変化に対応しながらコーディングができます。"
  },
  {
    "objectID": "pages/tips/240515_rproj/index.html#おわりに",
    "href": "pages/tips/240515_rproj/index.html#おわりに",
    "title": "【R】プロジェクトを使う",
    "section": "おわりに",
    "text": "おわりに\n今回はプロジェクトを使った環境のメリットと、here() パッケージをご紹介しました。ぜひ論文などのプロジェクトでは、R にもプロジェクトを作って作業してみてください。"
  },
  {
    "objectID": "pages/tips/240515_rproj/index.html#footnotes",
    "href": "pages/tips/240515_rproj/index.html#footnotes",
    "title": "【R】プロジェクトを使う",
    "section": "注",
    "text": "注\n\n\n共同研究を行うなら PC ごとに環境が異なりますから、なおさら非効率的です。↩︎"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#はじめに",
    "href": "pages/tips/240506_gis_on_r/index.html#はじめに",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "はじめに",
    "text": "はじめに\nR 上で GIS を操作する方法を簡単に紹介します。\nGIS を R 上で実行するメリットは、再現性が担保できることです。同じ作業を繰り返しするような場合、力を発揮すると思います。また、ggplot2 で可視化できる点も便利です。\n主に、使用するパッケージ、データの読み込み、簡単なデータハンドリング、そして交差する地物の抽出を少しご紹介します。"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#使用するパッケージ",
    "href": "pages/tips/240506_gis_on_r/index.html#使用するパッケージ",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "使用するパッケージ",
    "text": "使用するパッケージ\nsf パッケージを使用します。また、これらのデータを通常のデータと同様 tidyverse でハンドリングできるので、これら2つを主に使います。\nまた、ここでは詳しく紹介しませんが、私は here パッケージも使用します。こちらの記事で紹介しているような方法でプロジェクトを実行している場合、相対パスを使用すると便利です。詳しくは作業の流れで見てみてください。\n\n\n\n\n\n\nDocker で環境を構築する場合\n\n\n\n\n\nDocker を用いた環境構築の記事で紹介している方法で環境を構築する場合、1つ注意点があります。Dockerfile の1行目を以下のように変更してください。\nFROM rocker/geospatial:latest\nrocker/rstudio のままだと、GIS を扱うのに必要なパッケージを使用できません。上のように変更してファイルを保存した後、画面左下「&gt;&lt; 開発コンテナー」 をクリックし、「コンテナーのリビルド」を実行してください。\n\n\n\n\n# パッケージのインストール\ninstall.packages(\"sf\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"here\")\n\n\n# パッケージの読み込み\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(here)"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#使用するデータ",
    "href": "pages/tips/240506_gis_on_r/index.html#使用するデータ",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "使用するデータ",
    "text": "使用するデータ\n\n鉄道データ\n今回は日本の鉄道（駅）データを使用してみます。\n\n国土数値情報ダウンロードサイトより「鉄道（ライン）」をクリック、2022年のデータをダウンロード\n\n\n\n\n一番上の2022年データを今回は使用\n\n\n\n\n行政区域データ\n後ほど鉄道データと重ねて使うために使用します。\n同様に国土数値情報ダウンロードサイトから、「行政区域」に進み、今回は福島県の2024年データをダウンロードします。\n鉄道データと同じフォルダに入れておいてください。"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#データの読み込み",
    "href": "pages/tips/240506_gis_on_r/index.html#データの読み込み",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "データの読み込み",
    "text": "データの読み込み\nダウンロードしたデータには、駅のデータと路線のデータがそれぞれ入っています。\nそれぞれ読み込みます。読み込みには、sf::read_sf() を使います。sf::st_read() もありますが、こちらは読み込む際に設定を施したい場合に使います。基本は前者で OK です。\nUTF-8 で読み込みたいので、utf8 フォルダの中のデータを使用します。読み込むのは Shapefile です。\n\nstation &lt;- read_sf(here(\"data/N02-22_GML/utf8/N02-22_Station.shp\"))\n\nrail &lt;- read_sf(here(\"data/N02-22_GML/utf8/N02-22_RailroadSection.shp\"))\n\n\n\n\n\n\n\nhere について\n\n\n\n\n\nご覧の通り、here はワーキングディレクトリをベースとして、そこからの相対パスでファイルの読み込み等を行うことができます。\nR のプロジェクトを使用している場合、.Rproj ファイルがあるところがワーキングディレクトリです。今回はその中の data フォルダにデータを入れているので、このような書き方になっています。here() の中はダブルクォーテーションで囲んでください。"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#データの可視化",
    "href": "pages/tips/240506_gis_on_r/index.html#データの可視化",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "データの可視化",
    "text": "データの可視化\n\nggplot2\nおなじみ ggplot2 パッケージを使ってこれらの路線を可視化します1。\n\nstation |&gt; \n  ggplot() + \n  geom_sf() + # GIS 用\n  theme_void() # 背景や罫線を除去\n\n\n\n\n\n\n\n図 1: 日本の駅\n\n\n\n\n\nなんとなく日本が形作られましたね。東京と大阪に特に駅が多いことも一目瞭然です。\n同様に路線もプロットします。\n\nrail |&gt; \n  ggplot() + \n  geom_sf() + \n  theme_void()\n\n\n\n\n\n\n\n図 2: 日本の鉄道路線\n\n\n\n\n\nこうして見るとなんか面白いですよね。北海道の北東部は線路がないみたいです。\nここまでシンプルに可視化する方法をご紹介しました。次のセクションでもう少し地域にフォーカスして見ていきます。"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#データハンドリング",
    "href": "pages/tips/240506_gis_on_r/index.html#データハンドリング",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "データハンドリング",
    "text": "データハンドリング\n\nデータの抽出\n例えば、新幹線の駅だけデータとして使いたいとします。\n先ほどのダウンロードサイトの属性情報の部分をご覧ください。そこから事業者種別コード（変数名：N02-002）を確認してみると、1が新幹線に該当することが分かります。\nここで、tidyverse パッケージを使用しながら、東北新幹線の駅だけを抽出してみましょう。また、列名を変更しながら必要な変数のみ抽出します。\n\nsta_tohoku &lt;- station |&gt; \n  filter(N02_002 == 1, N02_003 == \"東北新幹線\") |&gt; \n  select(\"路線名\" = N02_003, \"駅名\" = N02_005, geometry)\n\n\n\n\n\n表 1: 東北新幹線の駅情報（上から6行を表示）\n\n\n\n\n\n\n\n\n\n路線名\n駅名\ngeometry\n\n\n\n\n東北新幹線\n二戸\nc(141.28627, 141.28491, 40.26107, 40.25848)\n\n\n東北新幹線\nいわて沼宮内\nc(141.21742, 141.21742, 39.96114, 39.96009)\n\n\n東北新幹線\n八戸\nc(141.42981, 141.43206, 40.50822, 40.51043)\n\n\n東北新幹線\n盛岡\nc(141.13807, 141.13499, 39.70015, 39.70295)\n\n\n東北新幹線\n北上\nc(141.12356, 141.12285, 141.12234, 141.12168, 39.28386, 39.28272, 39.28188, 39.28054)\n\n\n東北新幹線\n水沢江刺\nc(141.18919, 141.18822, 39.14381, 39.14651)\n\n\n\n\n\n\n\n\n\n\n表 1 をご覧いただくと分かる通り、東北新幹線の駅のみを抽出できています。また、geometry 変数が地理情報を示しています。\n\n\nラインデータをポイントデータ化する\n駅はラインデータになっています。駅は幅を持っているためです。そこで、これをポイントデータ化し、駅の位置を1点で特定します。\nまず、ラインデータがどうなっているか確認しましょう。地図を拡大して見てみると、線状になっていることが分かります。\n\n\n\n\n\n\n\nこれをポイント化するために使用するのが、sf::st_centroid() です。地物の重心を求めてくれます。\nコードは以下です。\n\nsta_tohoku_c &lt;- sta_tohoku |&gt; \n  st_centroid(geometry)\n\n改めて見てみると、ポイントになっていることが分かります。\n\n\n\n\n\n\n\nポイントデータ化するメリットとしては、距離の算出に使えることなどがあります。ある地点から駅までの距離を算出したい場合、駅が幅を持っていると距離算出の基準が曖昧になってしまうので、そこでポイント化すればその基準を明確化できるというわけです。\n以上、sf::st_centroid() を用いてポイントデータ化する方法をご紹介しました。"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#交差する地物の抽出",
    "href": "pages/tips/240506_gis_on_r/index.html#交差する地物の抽出",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "交差する地物の抽出",
    "text": "交差する地物の抽出\n先ほど福島県のデータをダウンロードしました。ここで、福島県に含まれる新幹線駅を抽出したいとします2。\n\n行政区域データ\nまず、福島県の行政区域データを読み込み、可視化しましょう。\n\nfukushima &lt;- read_sf(here(\"data/N03-20240101_07_GML/N03-20240101_07.shp\"))\n\n\nfukushima |&gt; \n  ggplot() + \n  geom_sf() + \n  theme_void()\n\n\n\n\n\n\n\n図 3: 福島県\n\n\n\n\n\n\n\n抽出\n次に、sta_tohoku_c を用いて、福島県と交差する（含まれる）駅を抽出します。\n交差する地物を抽出するためには、sf::st_intersects() もしくは sf::st_intersection() を用います。\n正直後者の方がシンプルなのですが、両者には次のような違いがあります。\n\nst_intersects(): 2つのジオメトリが交差するかどうかの論理判定（TRUE/FALSEやインデックスのリスト）を返す\nst_intersection(): 交差部分のジオメトリそのものを新しいオブジェクトとして返します。\n\n何やら難しいので、わかんなくて困ったら後者を使っておけばよいのではないでしょうか3。\nコードは以下のようになります。\n\nsta_07_a &lt;- sta_tohoku_c |&gt; \n  filter(\n    row_number() %in% \n      st_intersects(fukushima, sta_tohoku_c) |&gt; \n      unlist()\n  )\n\n\nsta_07_b &lt;- st_intersection(fukushima, sta_tohoku_c)\n\n\n\n\n\n\n\n1つ目の方法について\n\n\n\n\n\n1つ目は大変複雑ですね。プロセスを紐解くと次のようになります。\n\nsta_tohoku_c から抽出するので、sta_tohoku_c からスタート\n抽出するので dplyr::filter() を使用\nsf::st_intersects() で、fukushima と重なる sta_tohoku_cを抽出\nsf::st_intersects() はリスト形式で結果を返すので、unlist() を用いてリスト形式を解除\nsta_tohoku_c の行番号と照らし合わせ、返ってきた結果と同じもののみ抽出\n\n\n\n\n結果は次のようになります。\n\n\n\n\n表 2: st_intersects() を用いた場合\n\n\n\n\n\n\n\n\n\n路線名\n駅名\ngeometry\n\n\n\n\n東北新幹線\n福島\nc(140.458612067603, 37.7540599673619)\n\n\n東北新幹線\n郡山\nc(140.388619989856, 37.3986200007428)\n\n\n東北新幹線\n新白河\nc(140.188827537169, 37.1233084742238)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n表 3: st_intersection() を用いた場合\n\n\n\n\n\n\n\n\n\nN03_001\nN03_002\nN03_003\nN03_004\nN03_005\nN03_007\n路線名\n駅名\ngeometry\n\n\n\n\n福島県\nNA\nNA\n福島市\nNA\n07201\n東北新幹線\n福島\nc(140.458612067603, 37.7540599673619)\n\n\n福島県\nNA\nNA\n郡山市\nNA\n07203\n東北新幹線\n郡山\nc(140.388619989856, 37.3986200007428)\n\n\n福島県\nNA\n西白河郡\n西郷村\nNA\n07461\n東北新幹線\n新白河\nc(140.188827537169, 37.1233084742238)\n\n\n\n\n\n\n\n\n\n\n2つ目のやり方の方が少しごちゃっとしたデータとして返ってきました。\nめんどくさいけどクリーンな方か、簡単だけど煩雑な方か、お好みで使ってみてください。"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#おわりに",
    "href": "pages/tips/240506_gis_on_r/index.html#おわりに",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "おわりに",
    "text": "おわりに\n今回は GIS を R で動かす基礎的な内容をご紹介しました。\n交差する地物の抽出にも触れましたが、これだけではまだ分析に使える内容ではないので、距離計算などはまた別記事で書こうと思います。\n間違いや効率的なコーディング等ございましたら、コメントにご記入ください。"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#参考文献",
    "href": "pages/tips/240506_gis_on_r/index.html#参考文献",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "参考文献",
    "text": "参考文献\n\n\n\n\n\n\n事例で学ぶ経済・政策分析のためのGIS入門\n\n\n\n\n\n\n\n\n\nその無茶振り，（Rで）GISが解決します"
  },
  {
    "objectID": "pages/tips/240506_gis_on_r/index.html#footnotes",
    "href": "pages/tips/240506_gis_on_r/index.html#footnotes",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "注",
    "text": "注\n\n\nあまりなじみのない方に向けて言っておくと、tidyverse パッケージの中に ggplot2 も含まれています。↩︎\n正直この程度であればこんなことするまでもないですが、例ということで悪しからず。いろいろ応用は利きますよ！↩︎\nしかし後者の方が時間はかかりますし、2つのデータをもとに新しいデータを作るので、できたデータは2つのデータフレームの情報を含みます。つまり、ちょっと煩雑なデータが出来上がります。↩︎"
  },
  {
    "objectID": "pages/tips/240516_archived_pkg/index.html#はじめに",
    "href": "pages/tips/240516_archived_pkg/index.html#はじめに",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "はじめに",
    "text": "はじめに\n因果推論を勉強している人にはおなじみの Mixtape ですが、昨年勉強中にこの中の合成コントロール法の章でパッケージがインストールできない問題に直面しました。\nよく調べてみると、当時1 SCtools パッケージはアーカイブされてしまっており、install.packages('SCtools') ではインストールができないことが判明しました。\n現在2では復活してインストールできるようになっていますが、そんなときに備えて対処法をまとめます。"
  },
  {
    "objectID": "pages/tips/240516_archived_pkg/index.html#作業の流れ",
    "href": "pages/tips/240516_archived_pkg/index.html#作業の流れ",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "作業の流れ",
    "text": "作業の流れ\n\nアーカイブされたパッケージを探す\nCRAN のアーカイブにアクセスして、アーカイブされたパッケージを探します。\n例えば当時アーカイブされていた SCtools を探すと、次のようになります。\n\nこの中で最新のものを右クリックし、リンクをコピーしてください。\n\n\nRStudio を開く\n続いて RStudio を開き、スクリプトに次のコードを入力してください。\n\n\nR\n\nurl &lt;- \"https://cran.r-project.org/src/contrib/Archive/SCtools/SCtools_0.3.2.tar.gz\"\npkgFile &lt;- \"SCtools_0.3.2.tar.gz\"\ndownload.file(url = url, destfile = pkgFile)\n\nここで URL はコピーしたものに変え、pkgFile は URL の最後の .tar.gz 部分をコピペしてください。\n実行するとエラーが出るかもしれませんが、それは依存しているパッケージがインストールされていないということです。エラーを読んでみて、足りなそうなパッケージを以下のコードの c() にまとめて入れて実行し、 改めて download.file() を実行してみてください。\n\n\nR\n\ninstall.packages(c(\"xxx\", \"yyy\", \"zzz\"))\n\nそしてパッケージをインストールします。次のコードを実行してください。\n\n\nR\n\ninstall.packages(pkgs=pkgFile, type=\"source\", repos=NULL)\n\n最後に以下を実行して下さい。\n\n\nR\n\nunlink(pkgFile)\n\n以上です。インストール出来たのではないでしょうか。"
  },
  {
    "objectID": "pages/tips/240516_archived_pkg/index.html#おわりに",
    "href": "pages/tips/240516_archived_pkg/index.html#おわりに",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "おわりに",
    "text": "おわりに\n備忘録的にアーカイブされたパッケージのインストール方法をまとめました。\n出会ってしまった際にはご活用ください。"
  },
  {
    "objectID": "pages/tips/240516_archived_pkg/index.html#参考",
    "href": "pages/tips/240516_archived_pkg/index.html#参考",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nstackoverflow\n\n\n\n\n\n\n\n\n\nCRANから消えた”Archived R package”をインストールしたい"
  },
  {
    "objectID": "pages/tips/240516_archived_pkg/index.html#footnotes",
    "href": "pages/tips/240516_archived_pkg/index.html#footnotes",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "注",
    "text": "注\n\n\n2023年秋↩︎\n2024年5月16日↩︎"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#はじめに",
    "href": "pages/tips/250319_scraping/index.html#はじめに",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "はじめに",
    "text": "はじめに\n今回はRでスクレイピングを行っていきます。rvestパッケージを使ったスクレイピング自体は他のウェブサイトでも多数紹介されているのですが、今回JavaScriptが使われているページ（特にe-Stat）にも対応した方法をまとめます。これを行うには既に紹介されている方法からもう一工夫する必要があり、それも少々面倒です。\nこれまで僕はブラウザ拡張機能の「DownThemAll!」1を使って無理くり実行していたのですが、この手の方法は再現が難しいし手間という欠点があるので、できればR上でコードとして残しておきたいと思っていました。そんなところ友人からあるページを紹介してもらい、抱えていた課題2が解決できそうでしたので、これを機にまとめていきます。\n紹介してもらったページはこちらです↓\n\n\n\n\n\n\nrvestで動的サイトをスクレイピングする（Seleniumを使わずに）\n\n\n\nまた、Google Chromeを使用するので、インストールしていない方はしておいてください。"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#使用するパッケージ",
    "href": "pages/tips/250319_scraping/index.html#使用するパッケージ",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "使用するパッケージ",
    "text": "使用するパッケージ\n使用するパッケージは以下の通りです。Rプロジェクトを使うなりsetwd()を使うなりでワーキングディレクトリを現在のディレクトリに設定しておいてください。プロジェクトについてはこちら。\nついでに、保存するディレクトリ（dataフォルダ内のshpfiles）をあらかじめ指定しておきます。なければ作成する関数もつけておきます。\nlibrary(rvest)\nlibrary(here)\n\nsave_dir &lt;- here(\"data/shpfiles\")\n# ダウンロード用のフォルダがなければ作成する\nif (!dir.exists(save_dir)) {\n  dir.create(save_dir)\n}"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#ファイルをダウンロードするページ",
    "href": "pages/tips/250319_scraping/index.html#ファイルをダウンロードするページ",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "ファイルをダウンロードするページ",
    "text": "ファイルをダウンロードするページ\n今回ファイルを取得していくのは、e-Statの「地図」→「境界データダウンロード」→「3次メッシュ」→「世界測地系平面直角座標系・Shapefile」のページです。\nhttps://www.e-stat.go.jp/gis/statmap-search?page=1&type=2&aggregateUnitForBoundary=S&coordsys=2&format=shape\nメッシュいうのは国土を例えば1km×1kmの正方形で区切ったものをいい、その中の人口等のデータを扱うことができるようになります。このあたりの詳細は以下の書籍が非常にわかりやすいのでおすすめです。RでGISを扱う方法も学べます。\n\n\n\n\n\n\n事例で学ぶ経済・政策分析のためのGIS入門: QGIS,R,GeoDa対応"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#ページを取得",
    "href": "pages/tips/250319_scraping/index.html#ページを取得",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "ページを取得",
    "text": "ページを取得\n基本的にはread_html()関数で読み込むことができるのですが、JavaScriptを使用しているような動的なページには対応していません。そこで使用するのがread_html_live()関数です。これらの関数の仕組み自体は冒頭で紹介したページがわかりやすいのでそちらを読んでみてください。\n先ほどのURLを読み込んでみましょう。\nhtml &lt;- read_html_live(\"https://www.e-stat.go.jp/gis/statmap-search?page=1&type=2&aggregateUnitForBoundary=S&coordsys=2&format=shape\")"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#ファイルのリンクを取得",
    "href": "pages/tips/250319_scraping/index.html#ファイルのリンクを取得",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "ファイルのリンクを取得",
    "text": "ファイルのリンクを取得\n次にいよいよファイルを取得していきます。僕もHTMLに詳しいわけではないので詳細は書きませんが、aタグというのがリンクを生成するためのもので、その中にhrefという属性があります。例えば\n&lt;a class=\"stat-dl_icon stat-statistics-table_icon\" tabindex=\"40\" href=\"/gis/statmap-search/data?dlserveyId=S&amp;code=3036&amp;coordSys=2&amp;format=shape&amp;downloadType=5\"&gt;\n&lt;span class=\"stat-dl_text\"&gt;世界測地系平面直角座標系・Shapefile&lt;/span&gt;\n&lt;/a&gt;\nというようになっており、aと/aで囲まれている間にhrefやその他の属性が含まれていることがわかります。\n\n\n\n\n\n\nどうやって探す？\n\n\n\n\n\nこのHTMLはどうやって探せばよいのでしょうか。実はブラウザ上から簡単に見ることができます。\nブラウザ上で任意のページを開いたら、Ctrl + Shift + Iを同時に入力します。もしくはブラウザ右上の点々から「その他のツール」→「デベロッパー ツール」でも開けます。\n\n\n\n\n\nすると画面右側になにやらぶわぁーっと出てきますね。これの上半分がHTMLコードです。ここから特定のコードを探すのは骨が折れそうですが、逆にページの要素をクリックすることで該当するコードを探すことができます。デベロッパーツール画面上部の左側にカーソルのようなアイコンがあります。\n\n\n\n一番左側です\n\n\nこれをクリックしたうえでページ上の要素にカーソルを重ねてクリックすると、該当箇所のコードが表示されます。カーソルを「世界測地系平面直角座標系・Shapefile」という文字に重ねると先ほどのコードが表示されます。\n\n\n\nここではaタグを探す→hrefを探し取得する、という手順を踏みます。\nlinks &lt;- html |&gt; \n  html_elements(\"a\") |&gt; \n  html_attr(\"href\")\nhtml_elements(\"a\")でaタグを探し、html_attr(\"href\")で属性（attribute）を探しています。linksにはaタグの中のhrefに入っているリンクがずらーっと入っていることになります。\nここでは表示しませんが、linksの中身を確認すると、想像以上にたくさんのリンクが入っていることがわかります。ここからさらにシェープファイルのダウンロードリンクを探さなければなりません。\n上のaタグの例を見てもらうと、/gis/statmap-search/data?dlserveyId=S&code=3036&coordSys=2&format=shape&downloadType=5というのがシェープファイルのダウンロードリンクであることがわかります。他のシェープファイルのリンクと見比べてもらうと、code=3036の部分だけがそれぞれ異なっており、他は同じです。すなわち、まとめてダウンロードしたければこの部分さえうまいことやれば可能になるということです。\nとりあえず、数多のリンクの中からシェープファイルのリンクだけ抽出しておきましょう。linksの中のリンクを確認すると、data?dlserveyId=S&という部分がシェープファイルのダウンロードリンクにのみ含まれていることがわかる、これを含むリンクを抽出すればよいことになります。\nshp_links &lt;- links[grepl(\"data\\\\?dlserveyId=S&\", links)]\nポイント：\n\ngrepl()で条件に合致するものを抽出\n\ngrepl(x, y)で、yの中でxを含むものにTRUEを返す\nlinksの中でdata\\\\?dlserveyId=S&を含むものにTRUEを返している\n?の前に\\\\が入っているのは、正規表現の中で?は特別な役割を持っているので、その役割として認識されるのを防ぐため（エスケープしている）\n\nlinks[ ] で、TRUEを持つものを抽出している\n\nすなわちgrepl()でTRUEを返したもの（=シェープファイルのダウンロードリンクをもつもの）だけが残る\n\n\n短いコードでもややこしいですね。特に記号のところには気を付けていただければと思います。"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#リンクを整形する",
    "href": "pages/tips/250319_scraping/index.html#リンクを整形する",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "リンクを整形する",
    "text": "リンクを整形する\nお気づきの方もいらっしゃると思いますが、実は先ほどのリンクは相対的なものです。https://から始まっていません。ベースとしてhttps://www.e-stat.go.jpというURLがあり、そこに続く形で/gis/...が入ってきます。\n以下では取得したリンクにベースリンクをくっつけていきます。\nbase_url &lt;- \"https://www.e-stat.go.jp\"\nfull_urls &lt;- paste0(base_url, shp_links)\nこれでページ内の20個のリンクを抽出することができました。次にこれらのリンクを使ってダウンロードしていきます。"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#ファイルをダウンロード",
    "href": "pages/tips/250319_scraping/index.html#ファイルをダウンロード",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "ファイルをダウンロード",
    "text": "ファイルをダウンロード\nいよいよダウンロードをしていきます。\n全てのリンクに対しダウンロードするコードを適用します。forの出番です。\nfor (i in seq_along(full_urls)) {\n  # リンクからメッシュコードを取得\n  code &lt;- sub(\".*code=([0-9]+).*\", \"\\\\1\", shp_links[i])\n  \n  # ダウンロードするファイルのパスを指定する\n  # 例: shpfiles/shpfile_3036.zip\n  file_path &lt;- file.path(save_dir, paste0(\"shpfile_\", code, \".zip\"))\n\n  # ファイルをダウンロード\n  download.file(full_urls[i], destfile = file_path, mode = \"wb\")\n  \n  # アクセス間隔を空ける\n  # サーバー負荷を考慮\n  Sys.sleep(2)\n}\nポイント：\n\nseq_along(full_urls)はfull_urlsの要素の数を取得している\n\n今回はURLが20個と分かっているが、数が多くて数えにくいような場合にも有用\n\nsub(\".*code=([0-9]+).*\", \"\\1\", shp_links[i])でメッシュコードを取得\n\nsub(pattern, replacement, x)でxのpetternをreplacementに置換する\n.*code=([0-9]+).*はざっくり言うと、前後が何であれcode=(何らかの数字)というものを探してきて、括弧内の数字を取得しているということ\n\\\\1は今取得した数字を返すということ\nxにはshp_links[i]が該当するので、i番目のリンクで上で述べた置換をしているということ\n\nfile_path &lt;- file.path(save_dir, paste0(\"shpfile_\", code, \".zip\"))で保存する際のファイル名を作成\n\n現在のワーキングディレクトリにあるdata内のshpfilesというフォルダの中にshpfile_3036.zipというようなZipファイルを作成する\nダウンロードはZipファイルで行われるので拡張子は.zipとしておく\n\n\nmy_project/\n├── data/\n├── shpfiles/  ← ここにダウンロードする\n└── scripts/\n    ├── download_script.R\n    ├── analysis.R\n    └── ...\n\ndownload.file(full_urls[i], destfile = file_path, mode = \"wb\")でダウンロード\n\ndownload.file(url, destfile, mode)でurlをdestfileにmodeで指定したモードでダウンロードする\n詳細は省くが、Zipファイルに対してはmode=\"wbを指定する\n\nSys.sleep(2)でサーバー負荷を軽減する\n\n作業ごとに2秒のインターバルを設けるということ\n\n\nさすがに面倒すぎますね。最初は困ると思いますが、2回目以降大変便利に思えるはずです。\nひとまずこれでページ上のファイルをダウンロードすることができました！"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#全ページまとめてダウンロード",
    "href": "pages/tips/250319_scraping/index.html#全ページまとめてダウンロード",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "全ページまとめてダウンロード",
    "text": "全ページまとめてダウンロード\nここまでは1ページ内のファイルをダウンロードする方法について順を追って見てきました。\nこのセクションではシェープファイルが1～9ページにまたがって並んでいることを踏まえ、さらにforループを構築し、これまでの作業を9ページにわたって実行できるようにします。\nfor (i in 1:9) {\n  url &lt;- paste0(\"https://www.e-stat.go.jp/gis/statmap-search?page=\", i, \"&type=2&aggregateUnitForBoundary=S&coordsys=1&format=shape\")\n  \n  html &lt;- read_html_live(url)\n  Sys.sleep(1)\n  \n  links &lt;- html |&gt; \n    html_elements(\"a\") |&gt; \n    html_attr(\"href\")\n  \n  shp_links &lt;- links[grepl(\"data\\\\?dlserveyId=S&\", links)]\n  \n  full_urls &lt;- paste0(base_url, shp_links)\n  \n  for (j in seq_along(full_urls)) {\n    code &lt;- sub(\".*code=([0-9]+).*\", \"\\\\1\", shp_links[j])\n    file_path &lt;- file.path(save_dir, paste0(\"shpfile_\", code, \".zip\"))\n    \n    if (!file.exists(file_path)) {\n      tryCatch({\n        download.file(full_urls[j], destfile = file_path, mode = \"wb\")\n      }, error = function(e) {})\n      Sys.sleep(2)\n    }\n  }\n}\nポイント：\n\nURLのpage=の部分に1から9が入るように設定\n\nURLを分割し、ページ数の部分にiで数字を入れています。\n\nHTMLを読み込んだ後にSys.sleep(1)で1秒待機\n\nHTMLを読み込んですぐ次のコマンドに移ると、中身を最後まで読み込まないまま次を実行してしまうので、しっかり読み込めるようにするための設定です。\n\nforループ2段階目\n\n大外のforでiを使っているので、今度はjにしています。\nifでファイルがない場合に実行するようにしている。\n\n何らかの理由で途中エラーが発生し、再度全体を実行しても、既にダウンロードできているファイルを重複してダウンロードせずに済みます。\n\ntryCatchは、途中でエラーが起きたときでもスクリプト全体を止めずに柔軟に処理を続けるための関数で、エラーが起きても一旦スキップして最後まで実行します。\n\n\n見慣れない関数も登場しましたが、このコードを実行すれば9ページ分まとめてダウンロードすることが可能です。"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#コードまとめ",
    "href": "pages/tips/250319_scraping/index.html#コードまとめ",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "コードまとめ",
    "text": "コードまとめ\n最後に今回のコードをまとめます。\nlibrary(rvest)\nlibrary(here)\n\nfor (i in 1:9) {\n  url &lt;- paste0(\"https://www.e-stat.go.jp/gis/statmap-search?page=\", i, \"&type=2&aggregateUnitForBoundary=S&coordsys=1&format=shape\")\n  \n  html &lt;- read_html_live(url)\n  Sys.sleep(1)\n  \n  links &lt;- html |&gt; \n    html_elements(\"a\") |&gt; \n    html_attr(\"href\")\n  \n  shp_links &lt;- links[grepl(\"data\\\\?dlserveyId=S&\", links)]\n  \n  full_urls &lt;- paste0(base_url, shp_links)\n  \n  for (j in seq_along(full_urls)) {\n    code &lt;- sub(\".*code=([0-9]+).*\", \"\\\\1\", shp_links[j])\n    file_path &lt;- here(\"shpfiles\", paste0(\"shpfile_\", code, \".zip\"))\n    \n    if (!file.exists(file_path)) {\n      tryCatch({\n        download.file(full_urls[j], destfile = file_path, mode = \"wb\")\n      }, error = function(e) {})\n      Sys.sleep(2)\n    }\n  }\n}"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#おわりに",
    "href": "pages/tips/250319_scraping/index.html#おわりに",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "おわりに",
    "text": "おわりに\n今回はRでe-Statのシェープファイルを取得してきました。個人的にもずっとやりたいことだったので、不完全とはいえ、念願かなった感じです。\n今後も調査して全ページを一つのループでダウンロードできるようなコードを書いていきたいと思います。"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#おまけ",
    "href": "pages/tips/250319_scraping/index.html#おまけ",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "おまけ",
    "text": "おまけ\nZipファイルでダウンロードすることになりますが、今回の流れでエクスプローラーから直接展開したりファイルを削除するのは面倒だと思います。\n解凍し、使用済みのZipファイルを削除するには以下を実行します。\nzip_files &lt;- list.files(save_dir, pattern = \"\\\\.zip$\", full.names = TRUE)\n\nfor (zip_path in zip_files) {\n  unzip(zip_path, exdir = save_dir)\n  file.remove(zip_path)\n}\nunzip()でZipファイルを解凍して、file.remove()でZipファイルを削除します。"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#その他の実用例",
    "href": "pages/tips/250319_scraping/index.html#その他の実用例",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "その他の実用例",
    "text": "その他の実用例\n最近仕事の一環で時間がかかりそうな作業をスクレイピングでサクッと解決したので、地味な例ではありますがご参考までに紹介します。\n\nシーン\n各省庁が出している白書のリストが載っているページがあるのですが、ここから白書名、省庁名、リンクをぱぱーっと取ってきたいという場面です。\n\n\n\nこんな感じでずらーっと並んでいます\n\n\n\n\n手順\n\nread_html()でURLを読み込む（今回はliveの方でなくてもできる例です）\n\n\nlibrary(rvest)\nlibrary(tidyverse)\n\nurl &lt;- \"https://www.e-gov.go.jp/about-government/white-papers.html\"\nhtml &lt;- read_html(url)\n\n\n要素を確認する\n\nCtrl + Shift + Iでデベロッパーツールを開き、白書名やリンクなどがどうなっているか確認します\n\n\n\n\n\n水循環白書はこのようになっています\n\n\n\n要素を取得する\n\nitems &lt;- html |&gt; \n  html_element(\"main\") |&gt; \n  html_element(\"ul\")\n\nhakusho &lt;- items |&gt; \n  html_elements(\"span\") |&gt; \n  html_text()\n\nministry &lt;- items |&gt; \n  html_elements(\"p\") |&gt; \n  html_text()\n\nlinks &lt;- items |&gt; \n  html_elements(\"a\") |&gt; \n  html_attr(\"href\")\n\nデータフレームにまとめる\n\ndf &lt;- tibble::tibble(\n  白書名 = hakusho, \n  省庁名 = ministry, \n  リンク = links\n)\n\n\n詳細\nブラウザ上でHTMLコードを下の方まで見てみるとわかるのですが、白書の情報は&lt;main role=\"main\"&gt;から&lt;/main&gt;の間に含まれていることがわかります。さらに、画像をジーっと見てみると、欲しい要素は\n\nspanで囲まれている部分\npで囲まれている部分\naタグの中のhref\n\nであることがわかります。試しにこれまで説明したコードを用いて取得してみると、\n\nhakusho &lt;- html |&gt; \n  html_elements(\"span\")\n\n\n\n{xml_nodeset (61)}\n [1] &lt;span class=\"egovui-title\"&gt;\\n        ポータル&lt;/span&gt;\n [2] &lt;span class=\"egovui-english-link\"&gt;&lt;a href=\"/en/\" class=\"egovui-textlink- ...\n [3] &lt;span class=\"egovui-label\"&gt;サイト内検索&lt;/span&gt;\n [4] &lt;span class=\"egovui-label\"&gt;行政機関横断検索&lt;/span&gt;\n [5] &lt;span class=\"egovui-search \"&gt;\\n          &lt;input type=\"text\" name=\"q\" cla ...\n [6] &lt;span&gt;水循環白書&lt;/span&gt;\n [7] &lt;span&gt;年次報告書&lt;/span&gt;\n [8] &lt;span&gt;経済財政白書&lt;/span&gt;\n [9] &lt;span&gt;原子力白書&lt;/span&gt;\n[10] &lt;span&gt;防災白書&lt;/span&gt;\n[11] &lt;span&gt;高齢社会白書&lt;/span&gt;\n[12] &lt;span&gt;障害者白書&lt;/span&gt;\n[13] &lt;span&gt;交通安全白書&lt;/span&gt;\n[14] &lt;span&gt;男女共同参画白書&lt;/span&gt;\n[15] &lt;span&gt;年次報告&lt;/span&gt;\n[16] &lt;span&gt;警察白書&lt;/span&gt;\n[17] &lt;span&gt;犯罪被害者白書&lt;/span&gt;\n[18] &lt;span&gt;年次報告&lt;/span&gt;\n[19] &lt;span&gt;金融庁の１年&lt;/span&gt;\n[20] &lt;span&gt;消費者白書&lt;/span&gt;\n...\n\n\n欲しいのは「水循環白書」みたいな白書名だけですが、&lt;span&gt;の文字など余計な要素も取れてしまいました。中身のテキストだけ抜きたい場合はhtml_text()を使います。\n\nhakusho &lt;- html |&gt; \n  html_elements(\"span\") |&gt; \n  html_text()\n\n\n\n [1] \"\\n        ポータル\"     \"English\"                \"サイト内検索\"          \n [4] \"行政機関横断検索\"       \"\\n          \\n        \" \"水循環白書\"            \n [7] \"年次報告書\"             \"経済財政白書\"           \"原子力白書\"            \n[10] \"防災白書\"              \n\n\n表示しているのは一部ですが、それでも、そもそも余計なものが多いことがわかります。これは、欲しいのが&lt;main&gt;で囲まれている部分であるにもかかわらず、ページ全体からspanを探して拾ってきているためです。\nさらに画像をよーく見ると、mainの中でもpは「各行政機関が～」という文言も含んでしまっていることがわかります。main→pと指定すると、この文言も拾ってきてしまいます。そのため絞り込みとしてはmain、さらにはulにも絞った方が良いということが考えられます3。すなわちmain→ul→pという絞り方です。\nまずは対象をmain→ulに絞っておきます。\n\nitems &lt;- html |&gt; \n  html_element(\"main\") |&gt; \n  html_element(\"ul\")\n\nhtml_elements()もありますが、これは複数形なので要素が多くあり、全部取りたいような場合に使います。今回はmainが1つでその中のulも1つとわかっているので単数形です。\nこの上でitemsを用いて取得します。\n\nhakusho &lt;- items |&gt; \n  html_elements(\"span\") |&gt; \n  html_text()\n\n\n\n [1] \"水循環白書\"       \"年次報告書\"       \"経済財政白書\"     \"原子力白書\"      \n [5] \"防災白書\"         \"高齢社会白書\"     \"障害者白書\"       \"交通安全白書\"    \n [9] \"男女共同参画白書\" \"年次報告\"        \n\n\nこれも表示しているのは一部ですが、しっかりとれています。同様の手順で要素を確認しつつ取得を進めます。\n\nministry &lt;- items |&gt; \n  html_elements(\"p\") |&gt; \n  html_text()\n\nlinks &lt;- items |&gt; \n  html_elements(\"a\") |&gt; \n  html_attr(\"href\")\n\nこれで全53件分そろいました。最後にデータフレーム化して終了です。\n\ndf &lt;- tibble(\n  白書名 = hakusho, \n  省庁名 = ministry, \n  リンク = links\n)\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                白書名\n                省庁名\n                リンク\n              \n        \n        \n        \n                \n                  水循環白書\n                  内閣官房\n                  https://www.cas.go.jp/jp/seisaku/mizu_junkan/materials/materials/white_paper.html\n                \n                \n                  年次報告書\n                  人事院\n                  https://www.jinji.go.jp/hakusho/\n                \n                \n                  経済財政白書\n                  内閣府\n                  https://www5.cao.go.jp/keizai3/whitepaper.html#keizai\n                \n                \n                  原子力白書\n                  内閣府\n                  http://www.aec.go.jp/jicst/NC/about/hakusho/index.htm\n                \n                \n                  防災白書\n                  内閣府\n                  http://www.bousai.go.jp/kaigirep/hakusho/index.html\n                \n                \n                  高齢社会白書\n                  内閣府\n                  https://www8.cao.go.jp/kourei/whitepaper/index-w.html\n                \n        \n      \n    \n\n\n\nいい感じに整理できました。\nウェブサイトからたくさんの情報を繰り返し同じ動作で集めなければならないとき、役に立ちそうですね！\nおまけもおまけで、もはや本題には関係ありませんが、厳密に白書と明記されているもののみをとりたいならデータフレームにフィルタリングしてしまいましょう。\n\ndf_hakusho &lt;- df |&gt; \n  filter(str_detect(hakusho, \"白書\"))\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                白書名\n                省庁名\n                リンク\n              \n        \n        \n        \n                \n                  水循環白書\n                  内閣官房\n                  https://www.cas.go.jp/jp/seisaku/mizu_junkan/materials/materials/white_paper.html\n                \n                \n                  経済財政白書\n                  内閣府\n                  https://www5.cao.go.jp/keizai3/whitepaper.html#keizai\n                \n                \n                  原子力白書\n                  内閣府\n                  http://www.aec.go.jp/jicst/NC/about/hakusho/index.htm\n                \n                \n                  防災白書\n                  内閣府\n                  http://www.bousai.go.jp/kaigirep/hakusho/index.html\n                \n                \n                  高齢社会白書\n                  内閣府\n                  https://www8.cao.go.jp/kourei/whitepaper/index-w.html\n                \n                \n                  障害者白書\n                  内閣府\n                  https://www8.cao.go.jp/shougai/whitepaper/index-w.html\n                \n        \n      \n    \n\n\n\n「年次報告書」などは抜くことができています。str_detect(変数名, パターン)で対応するものを抜き取ることができます。"
  },
  {
    "objectID": "pages/tips/250319_scraping/index.html#footnotes",
    "href": "pages/tips/250319_scraping/index.html#footnotes",
    "title": "【スクレイピング】rvestを使ってe-Statからファイルを取得する",
    "section": "注",
    "text": "注\n\n\nChromeではサービスが終了したみたいです。Firefoxではまだあるようです。↩︎\n先述のJavaScriptが使われているページで実行できないという課題↩︎\n絞り込み方はこれ以外にもいろいろあると思います。↩︎"
  },
  {
    "objectID": "pages/tips/240917_pivot/index.html#はじめに",
    "href": "pages/tips/240917_pivot/index.html#はじめに",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】",
    "section": "はじめに",
    "text": "はじめに\n今回はtidyrのpivot_longer()を使ってワイド形式のデータをロング形式にする方法をご紹介します。"
  },
  {
    "objectID": "pages/tips/240917_pivot/index.html#使用するパッケージ",
    "href": "pages/tips/240917_pivot/index.html#使用するパッケージ",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】",
    "section": "使用するパッケージ",
    "text": "使用するパッケージ\ntidyverseを使用します。tidyverseにはdplyrやtidyrをはじめとした諸パッケージが含まれているので、一括でやるのが便利で僕は好きです。\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "pages/tips/240917_pivot/index.html#データの準備",
    "href": "pages/tips/240917_pivot/index.html#データの準備",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】",
    "section": "データの準備",
    "text": "データの準備\n今回は適当に作成していきます。\n\ndf &lt;- tibble(\n  Region_id = 1:2, \n  Region = c(\"Region1\", \"Region2\"),\n  income_2000 = c(40000, 35000),\n  income_2005 = c(42000, 37000),\n  income_2010 = c(45000, 39000),\n  population_2000 = c(500000, 450000),\n  population_2005 = c(520000, 460000),\n  population_2010 = c(540000, 470000)\n)\n\n\n\n\n\n表 1: ワイド形式のパネルデータ\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Region_id\n                Region\n                income_2000\n                income_2005\n                income_2010\n                population_2000\n                population_2005\n                population_2010\n              \n        \n        \n        \n                \n                  1\n                  Region1\n                  40000\n                  42000\n                  45000\n                  500000\n                  520000\n                  540000\n                \n                \n                  2\n                  Region2\n                  35000\n                  37000\n                  39000\n                  450000\n                  460000\n                  470000\n                \n        \n      \n    \n\n\n\n\n\n\n2つの地域について収入と人口のデータを作りました。\nポイントは、主要なデータにおいて変数名_年となっていることです。"
  },
  {
    "objectID": "pages/tips/240917_pivot/index.html#pivot_longerを使う",
    "href": "pages/tips/240917_pivot/index.html#pivot_longerを使う",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】",
    "section": "pivot_longer()を使う",
    "text": "pivot_longer()を使う\n一番ベーシックなやり方は次の通りです。\n\ndf_long &lt;- df |&gt; \n  pivot_longer(\n    cols = starts_with(c(\"income_\", \"population_\")), \n    names_to = c(\".value\", \"year\"), \n    names_sep = \"_\"\n  )\n\ncolsではロング形式に変換したい変数を指定しています。dplyrのstarts_with()を使えば、複数年分の変数を一括で指定することができます。今回はincome_とpopulation_で始まる変数という意味です。\nnames_toは新しい列名をどうするかを指定しています。names_sepで分割の区切りを指定しているのですが（この場合はアンダースコア）、その区切り前なら.value（すなわち、もとの名前のまま1）、区切り後はYearという列に格納するという意味です。\nできたデータフレームは次のようになります。\n\n\n\n\n表 2: ロング形式のパネルデータ\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Region_id\n                Region\n                year\n                income\n                population\n              \n        \n        \n        \n                \n                  1\n                  Region1\n                  2000\n                  40000\n                  500000\n                \n                \n                  1\n                  Region1\n                  2005\n                  42000\n                  520000\n                \n                \n                  1\n                  Region1\n                  2010\n                  45000\n                  540000\n                \n                \n                  2\n                  Region2\n                  2000\n                  35000\n                  450000\n                \n                \n                  2\n                  Region2\n                  2005\n                  37000\n                  460000\n                \n                \n                  2\n                  Region2\n                  2010\n                  39000\n                  470000\n                \n        \n      \n    \n\n\n\n\n\n\nもし仮に、ロング形式に変換したい変数がすべてアンダースコアで区切られている場合2、cols = contain(\"_\")とすれば、変数が多くても一気に指定することができます。ただ今回の場合、Region_idがありますからうまくいきませんね。使える場面は限られそうです。"
  },
  {
    "objectID": "pages/tips/240917_pivot/index.html#もしくは",
    "href": "pages/tips/240917_pivot/index.html#もしくは",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】",
    "section": "もしくは",
    "text": "もしくは\n今は具体的にincome_などと指定しましたが、変数がたくさんあると手動で書くのも大変かと思います。もし何列目を変えたいのかわかっていれば、列の番号で指定することも可能です。\n\ndf_long &lt;- df |&gt; \n  pivot_longer(\n    cols = 3:8, \n    names_to = c(\".value\", \"year\"), \n    names_sep = \"_\"\n  )\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Region_id\n                Region\n                year\n                income\n                population\n              \n        \n        \n        \n                \n                  1\n                  Region1\n                  2000\n                  40000\n                  500000\n                \n                \n                  1\n                  Region1\n                  2005\n                  42000\n                  520000\n                \n                \n                  1\n                  Region1\n                  2010\n                  45000\n                  540000\n                \n                \n                  2\n                  Region2\n                  2000\n                  35000\n                  450000\n                \n                \n                  2\n                  Region2\n                  2005\n                  37000\n                  460000\n                \n                \n                  2\n                  Region2\n                  2010\n                  39000\n                  470000\n                \n        \n      \n    \n\n\n\ncols = 3:8で3～8列目を対象に変換するということが可能になっています。"
  },
  {
    "objectID": "pages/tips/240917_pivot/index.html#アンダースコアが2つ以上ある場合",
    "href": "pages/tips/240917_pivot/index.html#アンダースコアが2つ以上ある場合",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】",
    "section": "アンダースコアが2つ以上ある場合",
    "text": "アンダースコアが2つ以上ある場合\n\ndf &lt;- tibble(\n  id = 1, \n  income_hoge_2020 = 100, \n  income_hoge_2021 = 110, \n  population_fuga_2020 = 1000, \n  population_fuga_2021 = 1050\n)\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                id\n                income_hoge_2020\n                income_hoge_2021\n                population_fuga_2020\n                population_fuga_2021\n              \n        \n        \n        \n                \n                  1\n                  100\n                  110\n                  1000\n                  1050\n                \n        \n      \n    \n\n\n\nこんな感じでアンダースコアが2つ以上ある場合に先ほどのコードを使うと、意図せぬ分割が起きてしまう可能性があります。そうした場合は正規表現を用いて指定することで対処可能です。\nここでは変数の末がhoge_fuga_2025のようになんちゃら_年のような形になっていることを仮定します。\n\ndf_long &lt;- df |&gt; \n  pivot_longer(\n    cols = 2:5, \n    names_to = c(\".value\", \"year\"), \n    names_pattern = \"^(.*)_(\\\\d{4})$\"\n  )\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                id\n                year\n                income_hoge\n                population_fuga\n              \n        \n        \n        \n                \n                  1\n                  2020\n                  100\n                  1000\n                \n                \n                  1\n                  2021\n                  110\n                  1050\n                \n        \n      \n    \n\n\n\nこのようにnames_pattern = \"^(.*)_(\\d{4})$\"とすること1つ目のアンダースコアを残したまま変換することが可能です。正規表現はややこしいので、このおまじないで最後のアンダースコアを境に分離できるんだ、くらいの解釈でよいと思います。\nあまりないかもしれませんが、2つのアンダースコアで挟まれた部分が要らない場合は\n\ndf_long &lt;- df |&gt; \n  pivot_longer(\n    cols = 2:5, \n    names_to = c(\".value\", \"year\"), \n    names_pattern = \"^(.*)_.*_(\\\\d{4})$\"\n  )\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                id\n                year\n                income\n                population\n              \n        \n        \n        \n                \n                  1\n                  2020\n                  100\n                  1000\n                \n                \n                  1\n                  2021\n                  110\n                  1050\n                \n        \n      \n    \n\n\n\nとすれば省くこともできます。正規表現が少し長くなってるのが違いです。"
  },
  {
    "objectID": "pages/tips/240917_pivot/index.html#おまけ",
    "href": "pages/tips/240917_pivot/index.html#おまけ",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】",
    "section": "おまけ",
    "text": "おまけ\nこの方法でロング形式にしたデータはyearがキャラクター型になっているので、mutate(year = as.integer(year))等でクラスを変えておくことをお忘れなく…。\nincomeなどの値はnumeric型になっています。"
  },
  {
    "objectID": "pages/tips/240917_pivot/index.html#おわりに",
    "href": "pages/tips/240917_pivot/index.html#おわりに",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】",
    "section": "おわりに",
    "text": "おわりに\n今回はワイド形式のデータフレームをロング形式に変換する方法をご紹介しました。\n僕自身pivot_longer()を使う時いつも何を指定すればいいんだっけ？となりがちです😅\nご参考まで。"
  },
  {
    "objectID": "pages/tips/240917_pivot/index.html#footnotes",
    "href": "pages/tips/240917_pivot/index.html#footnotes",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】",
    "section": "注",
    "text": "注\n\n\nこの場合ならincomeやpopulation↩︎\n逆に言うと、ほかの変数はアンダースコアが用いられていない場合↩︎"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#はじめに",
    "href": "pages/tips/240802_quarto_markdown/index.html#はじめに",
    "title": "【Quarto】マークダウンでできること！",
    "section": "はじめに",
    "text": "はじめに\nQuarto（別にR Markdownでも同じですが）ではマークダウン記法を使います。\n僕もRAブートキャンプでR Markdownと衝撃の出会い()を果たしてから早1年、途中Quartoに浮気しながらマークダウンについて勉強してきました（経済の勉強をしろ）。\nそこで、今回はマークダウンについてまとめます。これまでちょこちょこと紹介を挟みながらやってきましたが、今回は論文とかHTMLとか出力にこだわらず、ひたすらマークダウンについてまとめます。\n基本はQuarto公式ガイドに沿っていますが、なるべく使う順にまとめます。\n大前提として、改行したいときは1行空行を入れます。コード上で改行しても出力には反映されません。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#見出し",
    "href": "pages/tips/240802_quarto_markdown/index.html#見出し",
    "title": "【Quarto】マークダウンでできること！",
    "section": "見出し",
    "text": "見出し\nコード\n# Heading 1\n\n## Heading 2\n\n### Heading 3\n#の数によって見出しのレベルが決まります。基本は3段くらい使えば事足りると思いますが、それ以降もいけます。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#箇条書き",
    "href": "pages/tips/240802_quarto_markdown/index.html#箇条書き",
    "title": "【Quarto】マークダウンでできること！",
    "section": "箇条書き",
    "text": "箇条書き\n2種類あります。順序なしリストと順序付きリストです。基本的には以下の書き方です。\n\n\n\n\n\n\n\nコード\n出力\n\n\n\n\n- 順序なし1\n    - スペース4つで2段目\n- 順序なし2\n    1. 2段目に順序付きを入れることも可\n\n順序なし1\n\nスペース4つで2段目\n\n順序なし2\n\n2段目に順序付きを入れることも可\n\n\n\n\n1. 順序付き1\n    1. 同様にスペース4つで2段目\n1. 順序付き2\n    - 2段目に順序なしを入れることも可\n\n順序付き1\n\n同様にスペース4つで2段目\n\n順序付き2\n\n2段目に順序なしを入れることも可\n\n\n\n\n\n本文では改行するのに空行が必要でしたが、箇条書きの場合空行は要りません1。順序付きリストの場合、全ての行頭を1.で揃えることで、自動的に番号を振ってくれます。0から始めたければ全て0.で書けば大丈夫です。\n間にコード等を挟む場合は空行を入れた方が見やすいかもですね。また、間にコードや図などを挟むと連続番号がリセットされるので、その場合は手動で振る方が簡単かもしれません。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#図",
    "href": "pages/tips/240802_quarto_markdown/index.html#図",
    "title": "【Quarto】マークダウンでできること！",
    "section": "図",
    "text": "図\n![パソコンを笑顔でいじっている人](computer_man4_laugh.png)\n\n\n\nパソコンを笑顔でいじっている人\n\n\nご覧の通り、[ ]の中は図のキャプションで、( )の中はファイル名です。ファイル名のところは、必要に応じてパスを追加してください2。例えば、今コードがあるところにimageというフォルダがあって、その中にcomputer_man4_laugh.pngがある場合は、(image/computer_man4_laugh.png)とする必要があります。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#数式",
    "href": "pages/tips/240802_quarto_markdown/index.html#数式",
    "title": "【Quarto】マークダウンでできること！",
    "section": "数式",
    "text": "数式\n基本的には\\(\\LaTeX\\)表記です。$$で数式を挟むことで数式を挿入できます。\n$$\nY_{it} = \\beta (Treat \\times Post)_{it} + \\gamma_i + \\delta_t + \\varepsilon_{it}\n$$\n\\[\nY_{it} = \\beta (Treat \\times Post)_{it} + \\gamma_i + \\delta_t + \\varepsilon_{it}\n\\]\n文中に\\(Y = 5X\\)のように式を入れたい場合は、ドルマーク1つで$Y = 5X$とすればOKです。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#リンク",
    "href": "pages/tips/240802_quarto_markdown/index.html#リンク",
    "title": "【Quarto】マークダウンでできること！",
    "section": "リンク",
    "text": "リンク\n[Yosuke Abe](https://yo5uke.github.io/)\nYosuke Abe\n[ ]でタイトルを囲んで( )内にリンクを記述します。\nURLをそのまま表示したいときは次のようにします。\n&lt;https://yo5uke.github.io/&gt;\nhttps://yo5uke.github.io/"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#脚注",
    "href": "pages/tips/240802_quarto_markdown/index.html#脚注",
    "title": "【Quarto】マークダウンでできること！",
    "section": "脚注",
    "text": "脚注\nこれは本文^[これは脚注]\nこれは本文3\n脚注にもいろいろな書き方はあるのですが、これは脚注番号を自動で振ってくれるので、番号を気にせず書けておすすめです。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#コード",
    "href": "pages/tips/240802_quarto_markdown/index.html#コード",
    "title": "【Quarto】マークダウンでできること！",
    "section": "コード",
    "text": "コード\n普通に実行する場合は通常のチャンクで問題ありませんが、実行はせずコードだけ示したいこともあるかと思います。その場合は次の書き方でできます。\n``` r\nplot(cars)\n```\n通常のチャンクではrの部分は{r}となっていると思いますが、{ }を外すことで言語を指定しつつコードのみを提示できます。また、\n\n\nここがfilename\n\nplot(cars)\n\nこのようにfilenameを付けたい場合は、\n``` {.r filename=\"ここがfilename\"}\nplot(cars)\n```\nとすることで可能です。{.r}はrと同じです。コードのみを表示します。\n文中にコードを入れる場合は、`で挟むとできます。`plot(cars)`のように書きます。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#改ページ",
    "href": "pages/tips/240802_quarto_markdown/index.html#改ページ",
    "title": "【Quarto】マークダウンでできること！",
    "section": "改ページ",
    "text": "改ページ\nページ1\n\n{{&lt; pagebreak &gt;}}\n\nページ2\nまたは、\\(\\LaTeX\\)を使っている場合は\\newpageでもできます。\\pagebreakでもできます。二つは微妙に異なるので、違いはググってみてください。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#calloutブロック",
    "href": "pages/tips/240802_quarto_markdown/index.html#calloutブロック",
    "title": "【Quarto】マークダウンでできること！",
    "section": "Calloutブロック",
    "text": "Calloutブロック\n\n\n\n\n\n\nこれがcalloutブロック\n\n\n\nこれを入れるためには、以下のように書きます。\n\n\n::: {.callout-note}\n## ここがキャプションです。\n\n`note`の他に、`tip`、`warning`、`caution`、そして`important`があります。\n:::\n{.callout-note}の部分を{.callout-note collapse=true}にすると折りたたみ可能なブロックになります。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#参考文献",
    "href": "pages/tips/240802_quarto_markdown/index.html#参考文献",
    "title": "【Quarto】マークダウンでできること！",
    "section": "参考文献",
    "text": "参考文献\nZotero等を使ってreferences.bibファイル4を作成し、コードと同じディレクトリに置いてあるとします。\nYAMLヘッダーで次のように設定します。\n---\ntitle: \"Title\"\nauthor: \"Author\"\nformat: pdf\nbibliography: references.bib\n---\n.bibファイルの中身は次のようになっているので、本文中で@lamport1994latexと書けば本文内で参照できます。\n@article{lamport1994latex,\n  title={LaTeX: A Document Preparation System},\n  author={Lamport, Leslie},\n  journal={Addison-Wesley},\n  year={1994},\n  volume={2}\n}"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#おわりに",
    "href": "pages/tips/240802_quarto_markdown/index.html#おわりに",
    "title": "【Quarto】マークダウンでできること！",
    "section": "おわりに",
    "text": "おわりに\nここまで個人的によく使うマークダウン記法についてまとめました。\n僕自身もいろいろ書いていく中で使うものが出てくると思うので、適宜追記していきます。"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#参考",
    "href": "pages/tips/240802_quarto_markdown/index.html#参考",
    "title": "【Quarto】マークダウンでできること！",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nQuarto公式ガイド"
  },
  {
    "objectID": "pages/tips/240802_quarto_markdown/index.html#footnotes",
    "href": "pages/tips/240802_quarto_markdown/index.html#footnotes",
    "title": "【Quarto】マークダウンでできること！",
    "section": "注",
    "text": "注\n\n\nもちろん入れても大丈夫です。↩︎\nパスの説明は文面で書くにはやや長くなりそうなので、こちらなどを参考にしてください。↩︎\nこれは脚注↩︎\nファイル名は何でも大丈夫ですよ。↩︎"
  },
  {
    "objectID": "pages/tips/241117_ggplot2/index.html#はじめに",
    "href": "pages/tips/241117_ggplot2/index.html#はじめに",
    "title": "ggplot2ガイド",
    "section": "はじめに",
    "text": "はじめに\n皆さん、ggplot、使ってますか？多分お使いですよね。\n僕は数か月前ggplotのガイドブックを買いまして、いろいろと勉強しているところでございます。\nこんなこともできるのか！という発見が多々あり、Rユーザーの皆様にはぜひ買っていただきたい代物なのですが、いかんせんお値段が張りますので、いくつかピックアップしてご紹介します。\n書籍のリンクは以下です。\n\n\n\n\n\n\nRグラフィックスクックブック 第2版 ―ggplot2によるグラフ作成のレシピ集"
  },
  {
    "objectID": "pages/tips/241117_ggplot2/index.html#ggplot2の基本",
    "href": "pages/tips/241117_ggplot2/index.html#ggplot2の基本",
    "title": "ggplot2ガイド",
    "section": "ggplot2の基本",
    "text": "ggplot2の基本\n\n\n\n\n\n\nNote\n\n\n\n使ったことがある方はこの辺はスキップしてください。\n今回使うデータは、デフォルトで用意されているirisとOrangeです。\n\n\nひとまず主要なパッケージであるggplot2を読み込みます。\n\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n基本的な使い方としては、ggplot()とaes()、そして図に応じてgeom_line()やgeom_point()を使っていきます。\n今回は例として、アイリスのがく片の長さ、幅をそれぞれ軸としてプロットします。\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point()\n\n\n\n\n\n\n\n図 1: irisデータフレームを使った散布図\n\n\n\n\n\n\nggplot(data, aes())という形で使用するデータを指定\naes()内ではX軸とY軸をそれぞれ指定する。\n\n例：aes(x = Sepal.Length, y = Sepal.Width)\n\nggplotのコマンドは+で繋ぐ\n散布図を作るにはgeom_point()を繋げる\n\nその他、折れ線ならgeom_line()、ヒストグラムならgeom_histogram()など\n\n\nこれが土台です。ggplot()だけではプロットは表示されませんので、何かしら繋ぐ形にしてください。\n今回はggplotの基本というよりも、そこからの拡張を主に書きたいので、この散布図をベースに進めます。"
  },
  {
    "objectID": "pages/tips/241117_ggplot2/index.html#軸",
    "href": "pages/tips/241117_ggplot2/index.html#軸",
    "title": "ggplot2ガイド",
    "section": "軸",
    "text": "軸\n\n軸ラベル\nまずはX軸、Y軸のラベルを変更します。次のコマンドを追加することで変更できます。\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\")\n\n\n\n\n\n\n\n図 2: 軸ラベルを変更\n\n\n\n\n\nまた、以下のコードは同じ結果を示します。\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  xlab(\"Length of Sepal\") + \n  ylab(\"Width of Sepal\")\nすなわち、labs()はそれ一つでX軸もY軸もラベルを変更することができますが、xlab()、ylab()を使えば片方ずつ変更できるということです。\n次に、軸ラベルの体裁を変更したい場合、以下のようにします。\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\") + \n  theme(\n    axis.title = element_text(family = \"times\", face = \"italic\", \n                              color = \"red\", size = 20)\n  )\n\n\n\n\n\n\n\n図 3: 文字の体裁が変わっています\n\n\n\n\n\n\ntheme()内のaxis.titleで変更する\n\nX軸Y軸のどちらかだけにしたければ、axis.title.xのようにします。\n\nelement_text()内で具体的にフォントの体裁を指定\n\n今回はわかりやすく派手にしましたが、これらの要素を変更すれば調整できます。\n例えば、face = \"bold\"にすれば太字にできます。\n他にもありますが、おおむね使うのはこのあたりでしょう。\n\n\n\n\n軸の目盛り\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  scale_x_continuous(breaks = seq(4.5, 8, .5)) + \n  scale_y_continuous(breaks = seq(2, 4, 1))\n\n\n\n\n\n\n\n図 4: 目盛りの間隔が変わっています\n\n\n\n\n\n目盛りがX軸は0.5刻み、Y軸は1刻みになるよう変更しました。このように、X（Y）が連続値である場合、scale_x_continuous()（scale_y_continuous()）で変更できます。seq()は数列を作る関数で、seq(from, to, by)の順に指定します1。\n目盛りも同様にフォントのスタイルを変更できます。\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(\n    axis.text = element_text(family = \"times\", face = \"bold\", \n                             color = \"red\", size = 20)\n  )\n\n\n\n\n\n\n\n図 5: 数字のフォントが変わっています\n\n\n\n\n\nもはや訳が分からない図ですが、このように体裁は変更可能です。要素は大体上と同じで、axis.text.xのようにどちらかだけ変更することも可能です。\nまた、axis.ticksで目盛りを消去することも可能です。\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(\n    axis.text = element_text(family = \"times\", face = \"bold\", \n                             color = \"red\", size = 20), \n    axis.ticks = element_blank()\n  )\n\n\n\n\n\n\n\n図 6: 目盛りが消えています\n\n\n\n\n\nお判りいただけますか？軸の数字は残っていますが、目盛り線は消えています。図 5 と見比べてみてください。\n\n\n軸の範囲\nX軸とY軸の範囲を設定する方法です。これまでの図ではだいたい4から8あたりがXの範囲、2.0から4.5がYの範囲でした。xlim(a, b)とylim(a, b)で設定できます。\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  xlim(5, 7) + \n  ylim(3, 4) + \n  theme(\n    axis.text = element_text(family = \"times\", face = \"bold\", \n                             color = \"red\", size = 20), \n    axis.ticks = element_blank()\n  )\n\n\n\n\n\n\n\n図 7: 範囲を変えました"
  },
  {
    "objectID": "pages/tips/241117_ggplot2/index.html#注釈",
    "href": "pages/tips/241117_ggplot2/index.html#注釈",
    "title": "ggplot2ガイド",
    "section": "注釈",
    "text": "注釈\n\n文字\n表の中に文字を入れることができます。\nannotate()内で\"text\"か\"segment\"を指定することで挿入可能です。\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"text\", label = \"ggplot is\\nwonderful!\", x = 6.5, y = 4, \n           family = \"times\", color = \"#CC6666\", size = 10)\n\n\n\n\n\n\n\n図 8: 表内に文字を入れられました\n\n\n\n\n\n\nannotate(\"text\", label = \"hogehoge\")で文字を入れることができる\nxとyを指定しないと反映されない\n改行したい場合、\\nを入れる\nフォント、色、サイズも指定できる\n\n関数一つで意外と簡単にできます。\n\n\nセグメント\n棒線や矢印を付けることも可能です。\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"segment\", x = 5, xend = 7, y = 4, yend = 2.5, \n           linewidth = 2, color = \"#CC6666\")\n\n\n\n\n\n\n\n図 9: 斜めに棒線が入りました。\n\n\n\n\n\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"segment\", x = 5, xend = 7, y = 4, yend = 2.5, \n           linewidth = 2, color = \"#CC6666\", \n           arrow = arrow(length = unit(2, units = \"cm\")))\n\n\n\n\n\n\n\n図 10: 矢印になりました。\n\n\n\n\n\n\n\"segment\"で棒線ができる\nxとxend、yとyendを指定する必要がある\n\n\\((x, y)\\)から\\((xend, yend)\\)までの2点を結ぶようにできます。\n\nlinewidthで線の太さを指定可\n\n他の要素も文字と同様に指定できますが、sizeがlinewidthに置き換わっています。\n\narrow = arrow(length = unit(x, units = \"cm\"))で矢じりが付く\n\nxで矢じりのサイズ、unitsは単位で、他にmmやinchesなどがあります。\n\n\n以上のように、文字だけでなく線や矢印を追加することができます。"
  },
  {
    "objectID": "pages/tips/241117_ggplot2/index.html#複数のプロットと凡例",
    "href": "pages/tips/241117_ggplot2/index.html#複数のプロットと凡例",
    "title": "ggplot2ガイド",
    "section": "複数のプロットと凡例",
    "text": "複数のプロットと凡例\n\n複数のカテゴリのプロット\nここではOrangeデータセットを使って複数のカテゴリのプロットと、凡例について説明します。\n複数のカテゴリのプロットとは、以下のデータを見ていただけると早いと思います。\n\n\n\n\n表 1: Orangeの一部\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Tree\n                age\n                circumference\n              \n        \n        \n        \n                \n                  1\n                  118\n                  30\n                \n                \n                  1\n                  484\n                  58\n                \n                \n                  1\n                  664\n                  87\n                \n                \n                  1\n                  1004\n                  115\n                \n                \n                  1\n                  1231\n                  120\n                \n                \n                  1\n                  1372\n                  142\n                \n                \n                  1\n                  1582\n                  145\n                \n                \n                  2\n                  118\n                  33\n                \n                \n                  2\n                  484\n                  69\n                \n                \n                  2\n                  664\n                  111\n                \n        \n      \n    \n\n\n\n\n\n\nTreeは木の識別子で、1～5まであります。ageは日齢、circumferenceは幹の周囲です。\nここでやりたいことは、木の種類ごとに、日齢と幹の周囲を軸にとってプロットすることです。これをただプロットしてしまうと、\n\nggplot(Orange, aes(x = age, y = circumference)) + \n  geom_point()\n\n\n\n\n\n\n\n図 11: すべてのデータを放り込みました\n\n\n\n\n\nこれでは各点がどの木のものなのか判別できない状態です。これを識別するには次のようにします。\n\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point()\n\n\n\n\n\n\n\n図 12: 色が分かれました\n\n\n\n\n\nこれでとりあえずはどの点がどの木のものかわかるようになりました。color = Treeで、木の種類ごとに色を使うことを指定しています。\n今は散布図なので色を分けるだけで済みますが、折れ線グラフのような場合は、色だけでなく線の種類を変えたいかもしれません。そんな時は次のようにします。\n\nggplot(Orange, aes(x = age, y = circumference, color = Tree, linetype = Tree)) + \n  geom_point() + \n  geom_line()\n\n\n\n\n\n\n\n図 13: 折れ線の種類も分かれました\n\n\n\n\n\nlinetype = Treeを追加することで線の種類も木の種類ごとに変更することができました。\nこのようにaes()内で要素を追加することで種類ごとに分けることができます。\nまだ色遣いなどは不格好ですが、いったんこのまま進めます。\n\n\n凡例の位置\n次にしたいのは、凡例の設定です。凡例は現在右側に表示されていますが、まずはこれを下に表示したいとします。これは、次のコードでできます。\n\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n図 14: 凡例が下に来ました\n\n\n\n\n\ntheme(legend.position = \"bottom\")を設定することで、凡例の位置が下になりました。もちろんbottom以外にもtop, left, right（デフォルト）などを指定することができます。\nさらに凡例を消したい場合は次のようにします。\n\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n図 15: 凡例を消しました\n\n\n\n\n\ntheme(legend.position = \"none\")で凡例を消すことができました。\n\n\n凡例の調整\n例えば、凡例のタイトルは消したい場合が結構あると思います。図 12 の例でいえば、Treeという文字は消したいということです。\nそんな場合は、以下のようにします。\n\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  guides(color = guide_legend(title = NULL))\n\n\n\n\n\n\n\n図 16: 凡例のタイトルを削除\n\n\n\n\n\nTreeというタイトルが消えました。\nここではguides(color = guide_legend(title = NULL))としていますが、aes()内で例えばlinetypeを使っている場合は、guides()内もlinetype =にする必要があります。"
  },
  {
    "objectID": "pages/tips/241117_ggplot2/index.html#テーマ",
    "href": "pages/tips/241117_ggplot2/index.html#テーマ",
    "title": "ggplot2ガイド",
    "section": "テーマ",
    "text": "テーマ\nggplotではテーマを選ぶことができます。デフォルトではこれまでの図のように背景がグレーになっていますが、ほとんどの場合で背景は白にしたいですよね。\n背景だけでなく、罫線等もテーマで変更することができます。\n\nプリセットのテーマ\nいくつかのテーマが準備されています。代表的なものをいくつかご紹介します。\n\nminimalbwclassiclinedrawlightvoid\n\n\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal()\n\n\n\n\n\n\n\n図 17: theme_minimal()\n\n\n\n\n\n\n\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_bw()\n\n\n\n\n\n\n\n図 18: theme_bw()\n\n\n\n\n\ntheme_minimal()と比べて外枠が付いています。\n\n\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_classic()\n\n\n\n\n\n\n\n図 19: theme_classic()\n\n\n\n\n\n\n\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_linedraw()\n\n\n\n\n\n\n\n図 20: theme_linedraw()\n\n\n\n\n\n\n\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_light()\n\n\n\n\n\n\n\n図 21: theme_light()\n\n\n\n\n\n\n\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_void()\n\n\n\n\n\n\n\n図 22: theme_void()\n\n\n\n\n\nさすがにやりすぎでは…と思うかもしれませんが、GISで地図を可視化するようなときに重宝します。\n\n\n\n\n\ntheme()関数\nここまでご紹介したものの中でtheme()を使ったものがいくつかありました。\nここでtheme()はtheme_xxx()の後に使うということに注意してください。\nこれは、theme_xxx()がtheme()を上書きしてしまうためです。\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(axis.title = element_text(color = \"red\")) + \n  theme_minimal()\n\n\n\n\n\n\n\n図 23: 失敗例\n\n\n\n\n\ntheme(axis.title = element_text(color = \"red\"))で軸ラベルを赤色に設定していますが、出力されたものは黒いラベルになっています。\n順番を逆にすれば、\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal() + \n  theme(axis.title = element_text(color = \"red\"))\n\n\n\n\n\n\n\n図 24: 正しい例\n\n\n\n\n\nこのようにしっかり反映されます。"
  },
  {
    "objectID": "pages/tips/241117_ggplot2/index.html#発展1ggrepel",
    "href": "pages/tips/241117_ggplot2/index.html#発展1ggrepel",
    "title": "ggplot2ガイド",
    "section": "発展1：ggrepel",
    "text": "発展1：ggrepel\nここからは、ggrepelというパッケージを用いて折れ線グラフを発展させた例をご紹介します。\n\n# インストール\n# pak::pak(\"ggrepel\")\nlibrary(ggrepel)\n\nまず、以下のようなデータがあるとします。firm_idは30まであります。\n\n\n\n\n表 2: データの一部\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                firm_id\n                state_id\n                year\n                treated_1998\n                is_treated\n                y\n              \n        \n        \n        \n                \n                  1\n                  50\n                  1980\n                  0\n                  0\n                  0.6546029\n                \n                \n                  1\n                  50\n                  1981\n                  0\n                  0\n                  1.9160271\n                \n                \n                  1\n                  50\n                  1982\n                  0\n                  0\n                  2.1400894\n                \n                \n                  1\n                  50\n                  1983\n                  0\n                  0\n                  1.8364579\n                \n                \n                  1\n                  50\n                  1984\n                  0\n                  0\n                  1.7661105\n                \n                \n                  1\n                  50\n                  1985\n                  0\n                  0\n                  1.2856041\n                \n        \n      \n    \n\n\n\n\n\n\nこれを使って横軸にYear、縦軸にyをとってグラフにします。\n詳細を書くと長くなるので、適宜メモを入れました。ご参考まで。\n\ndf &lt;- df |&gt; \n  mutate(\n    # ハイライトする群とそれ以外に分ける\n    group = if_else(treated_1998 == 1, as.factor(firm_id), \"other\"), \n    # 最後の年にだけラベルを付ける\n    group_lab = if_else(treated_1998 == 1 & year == 2015, \n                        paste0(\"Firm \", firm_id), NA_character_)\n  )\n\nggplot(\n  # まずハイライトする群だけプロット\n  df |&gt; filter(treated_1998 == 1), \n  aes(x = year, y = y, group = firm_id)\n) + \n  theme_minimal() + \n  theme(\n    # 罫線を削除\n    panel.grid = element_blank(), \n    # 凡例を削除\n    legend.position = \"none\", \n    # 軸のタイトルと文字のフォントとサイズを調整\n    axis.title = element_text(family = \"Times\", size = 18), \n    axis.text = element_text(family = \"Times\", size = 14)\n  ) + \n  geom_vline(\n    # 垂直線を描写\n    xintercept = seq(1980, 2015, by = 5), \n    color = \"gray91\", \n    linewidth = .6\n  ) + \n  geom_segment(\n    # 水平線を描写\n    # 描写のためにデータを準備\n    data = tibble(y = seq(-2.5, 5.0, by = 2.5), x1 = 1980, x2 = 2015), \n    aes(x = x1, xend = x2, y = y, yend = y), \n    inherit.aes = FALSE, \n    color = \"gray91\", \n    linewidth = .6\n  ) + \n  geom_segment(\n    # 薄い水平線を描写\n    data = tibble(y = seq(-2.0, 4.5, by = .5), x1 = 1980, x2 = 2015), \n    aes(x = x1, xend = x2, y = y, yend = y), \n    inherit.aes = FALSE, \n    color = \"gray97\", \n    linewidth = .3\n  ) + \n  geom_segment(\n    # 縦軸が0のところに水平線を描写\n    data = tibble(y = 0, x1 = 1980, x2 = 2015), \n    aes(x = x1, xend = x2, y = y), \n    inherit.aes = FALSE, \n    linetype = \"dashed\", \n    color = \"gray40\"\n  ) + \n  geom_vline(\n    # 処置年に垂直線を描写\n    xintercept = 1998, \n    linetype = \"dashed\", \n    color = \"gray40\"\n  ) + \n  geom_line(\n    # ハイライトしない群をプロット\n    data = df |&gt; filter(group == \"other\"), \n    color = \"gray75\", \n    alpha = .5\n  ) + \n  geom_line(\n    # ハイライトする群をプロット\n    aes(color = group)\n  ) + \n  geom_text_repel(\n    # ハイライトした線にラベルを追加\n    aes(color = group, label = group_lab), \n    family = \"Times\", \n    hjust = 0, \n    # 2017年の位置にラベルを書く\n    xlim = c(2017, NA), \n    size = 4, \n    segment.linetype = \"dotted\"\n  ) + \n  xlab(\"Year\") + \n  ylab(\"Value\") + \n  scale_x_continuous(\n    expand = c(0, 0), \n    # ラベルが見えるように図の端の2015年より広くとる\n    limits = c(1980, 2021), \n    breaks = seq(1980, 2015, by = 5)\n  ) + \n  scale_y_continuous(\n    expand = c(0, 0), \n    limits = c(-2.5, 5.0), \n    breaks = c(-2.5, 0, 2.5, 5.0)\n  )\n\n\n\n\n\n\n\n図 25: ggrepelを使ったプロット"
  },
  {
    "objectID": "pages/tips/241117_ggplot2/index.html#おわりに",
    "href": "pages/tips/241117_ggplot2/index.html#おわりに",
    "title": "ggplot2ガイド",
    "section": "おわりに",
    "text": "おわりに\nひとまず僕がよく使うggplotの設定をまとめてみました。ggplotを駆使して、スタイリッシュなプロットを作成していきましょう！\n適宜追記する予定ですので、ご参考になれば幸いです。"
  },
  {
    "objectID": "pages/tips/241117_ggplot2/index.html#footnotes",
    "href": "pages/tips/241117_ggplot2/index.html#footnotes",
    "title": "ggplot2ガイド",
    "section": "注",
    "text": "注\n\n\n離散値の場合はscale_x_discrete()などで変更できますが、今回その説明は省きます。↩︎"
  },
  {
    "objectID": "pages/tips/250525_fixes/index.html#はじめに",
    "href": "pages/tips/250525_fixes/index.html#はじめに",
    "title": "【パッケージ開発】fixesでイベントスタディを効率化",
    "section": "はじめに",
    "text": "はじめに\n本ページでは、two-way fixed effectsモデルのDiDにおけるイベントスタディを行うパッケージ、fixesについて説明します。\n僕が今年の年始から地道に作成してきたパッケージで、一度tipsに書いたことがあるのですが、最近アップデートも重なってきたので再度書き直すことにしました。\n\n\n\n\n\n\nご意見待ってます\n\n\n\n実戦経験が足りないパッケージなので、挙動がおかしかったり、こういう機能にも対応してほしいということがあれば、ページ下のコメントからどしどしお寄せください。こぢんまりしたページなので、いただいたものは余裕で全部対応できると思います。\n\n\nこれまでは処置個体において処置タイミングが同一のDiDにのみ対応していましたが、直近のアップデートで各個体で処置タイミングが異なる、いわゆるStaggered DiDにも対応しました。\n果たしてあらゆるケースに対応できているか、個人開発のパッケージとしては不安ではありますが、いくつかのデータセットでテストした分には問題なかったので、そのテストコードと併せて解説していきます。"
  },
  {
    "objectID": "pages/tips/250525_fixes/index.html#使用するパッケージ",
    "href": "pages/tips/250525_fixes/index.html#使用するパッケージ",
    "title": "【パッケージ開発】fixesでイベントスタディを効率化",
    "section": "使用するパッケージ",
    "text": "使用するパッケージ\n使用するのはfixesです。インストールは以下のコマンドでできます。\npak::pak(\"fixes\")\nもしくは\ninstall.packages(\"fixes\")\nです。開発版はGitHubからインストールできます。\npak::pak(\"yo5uke/fixes\")"
  },
  {
    "objectID": "pages/tips/250525_fixes/index.html#準備",
    "href": "pages/tips/250525_fixes/index.html#準備",
    "title": "【パッケージ開発】fixesでイベントスタディを効率化",
    "section": "準備",
    "text": "準備\nパッケージを読み込んで、デモに使うデータを準備します。\n\nlibrary(fixes)\nlibrary(tidyverse)\n\nデータはfixestパッケージで用意されているものと、MixtapeのStaggered DiDの章で使用されているものを使います。\nまた、不足している変数を追加し、使わない変数もあるのであらかじめ除いておきます。\ndf_staggは未処置の個体の処置年、処置からの相対年をNAに変更し、df_castleに関してはMixtape内で行われている処理をしておきます1\n\ndf_base &lt;- fixest::base_did\ndf_stagg &lt;- fixest::base_stagg\ncastle &lt;- haven::read_dta(\"https://github.com/scunning1975/mixtape/raw/master/castle.dta\")\n\n\ndf_stagg &lt;- df_stagg |&gt; \n  mutate(\n    year_treated = if_else(year_treated == 10000, NA_real_, year_treated), \n    time_to_treatment = if_else(time_to_treatment == -1000, NA_real_, time_to_treatment)\n  )\n\n# 以下Mixtape参考\ndropped_vars &lt;- c(\"r20004\", \"r20014\",\n                  \"r20024\", \"r20034\",\n                  \"r20044\", \"r20054\",\n                  \"r20064\", \"r20074\",\n                  \"r20084\", \"r20094\",\n                  \"r20101\", \"r20102\", \"r20103\",\n                  \"r20104\", \"trend_9\", \"trend_46\",\n                  \"trend_49\", \"trend_50\", \"trend_51\"\n)\n\nregion &lt;- castle |&gt; \n  select(starts_with(\"r20\")) |&gt; \n  names() |&gt; \n  setdiff(dropped_vars)\n\ndf_castle &lt;- castle |&gt; \n  select(state, sid, year, treatment_date, l_homicide, all_of(region), popwt) |&gt; \n  mutate(is_treated = if_else(!is.na(treatment_date), 1, 0), .after = treatment_date)\n\n各データフレームは以下のような感じになっています。\n\ndf_basedf_staggdf_castle\n\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                y\n                x1\n                id\n                period\n                post\n                treat\n              \n        \n        \n        \n                \n                  2.87530627\n                  0.5365377\n                  1\n                  1\n                  0\n                  1\n                \n                \n                  1.86065272\n                  -3.0431894\n                  1\n                  2\n                  0\n                  1\n                \n                \n                  0.09416524\n                  5.5768439\n                  1\n                  3\n                  0\n                  1\n                \n                \n                  3.78147485\n                  -2.8300587\n                  1\n                  4\n                  0\n                  1\n                \n                \n                  -2.55819959\n                  -5.0443544\n                  1\n                  5\n                  0\n                  1\n                \n                \n                  1.72873240\n                  -0.6363849\n                  1\n                  6\n                  1\n                  1\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                id\n                year\n                year_treated\n                time_to_treatment\n                treated\n                treatment_effect_true\n                x1\n                y\n              \n        \n        \n        \n                \n                  90\n                  1\n                  2\n                  -1\n                  1\n                  0\n                  -1.0947021\n                  0.01722971\n                \n                \n                  89\n                  1\n                  3\n                  -2\n                  1\n                  0\n                  -3.7100676\n                  -4.58084528\n                \n                \n                  88\n                  1\n                  4\n                  -3\n                  1\n                  0\n                  2.5274402\n                  2.73817174\n                \n                \n                  87\n                  1\n                  5\n                  -4\n                  1\n                  0\n                  -0.7204263\n                  -0.65103066\n                \n                \n                  86\n                  1\n                  6\n                  -5\n                  1\n                  0\n                  -3.6711678\n                  -5.33381664\n                \n                \n                  85\n                  1\n                  7\n                  -6\n                  1\n                  0\n                  -0.3152137\n                  0.49562631\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                state\n                sid\n                year\n                treatment_date\n                is_treated\n                l_homicide\n                r20001\n                r20002\n                r20003\n                r20011\n                r20012\n                r20013\n                r20021\n                r20022\n                r20023\n                r20031\n                r20032\n                r20033\n                r20041\n                r20042\n                r20043\n                r20051\n                r20052\n                r20053\n                r20061\n                r20062\n                r20063\n                r20071\n                r20072\n                r20073\n                r20081\n                r20082\n                r20083\n                r20091\n                r20092\n                r20093\n                popwt\n              \n        \n        \n        \n                \n                  Alabama\n                  1\n                  2000\n                  2006\n                  1\n                  2.027356\n                  0\n                  0\n                  1\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  4499293\n                \n                \n                  Alabama\n                  1\n                  2001\n                  2006\n                  1\n                  2.164867\n                  0\n                  0\n                  0\n                  0\n                  0\n                  1\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  4499293\n                \n                \n                  Alabama\n                  1\n                  2002\n                  2006\n                  1\n                  1.936334\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  1\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  4499293\n                \n                \n                  Alabama\n                  1\n                  2003\n                  2006\n                  1\n                  1.919567\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  1\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  4499293\n                \n                \n                  Alabama\n                  1\n                  2004\n                  2006\n                  1\n                  1.749841\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  1\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  4499293\n                \n                \n                  Alabama\n                  1\n                  2005\n                  2006\n                  1\n                  2.130440\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  1\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  0\n                  4499293"
  },
  {
    "objectID": "pages/tips/250525_fixes/index.html#パッケージの説明",
    "href": "pages/tips/250525_fixes/index.html#パッケージの説明",
    "title": "【パッケージ開発】fixesでイベントスタディを効率化",
    "section": "パッケージの説明",
    "text": "パッケージの説明\n基本的な使い方と一緒にパッケージについて説明していきます。関数はイベントスタディを実行するrun_es()関数とイベントスタディをggplotベースでプロットするplot_es()です。\n\nrun_es()\nひとまず、run_es()の基本的な引数を説明します。\nrun_es(\n  data,\n  outcome,\n  treatment,\n  time,\n  staggered = FALSE,\n  timing,\n  lead_range = NULL,\n  lag_range = NULL,\n  covariates = NULL,\n  fe,\n  cluster = NULL,\n  weights = NULL,\n  baseline = -1,\n  interval = 1,\n  time_transform = FALSE,\n  unit = NULL\n)\n\ndata：使用するデータフレーム\noutcome：アウトカム変数\ntreatment：処置されていれば（時間によらず）1をとるダミー変数2\ntime：時間を示す変数（yearなど）\ntiming：処置タイミングを表す変数（staggeredがFALSEの場合は数値、TRUEの場合は処置タイミングを示す変数）\nfe：固定効果（~ id + yearのように書く）\nlead_range：処置前の期間（処置年は含まず、デフォルトでは最大の期間をとる）\nlag_range：処置後の期間（処置年は含まず、デフォルトでは最大の期間をとる）\ncovariates：共変量（~ cov1 + cov2のように書く）\ncluster：クラスタリングの単位（~ idのように書く）\nweights：ウェイト（~ weightのように書く）\nbaseline：基準となる相対年（デフォルトでは処置の1期前）\ninterval：時間のインターバル（デフォルトでは1（1年ごとのデータ）、5にすれば国勢調査に対応（5年ごと））\ntime_transform：TRUEで時間変数に通し番号を振って処理。時間変数が文字列だったりイレギュラーな間隔の場合に対応（デフォルトはFALSE）\nunit：time_transformがTRUEの場合に個体の単位を指定（idなど）\nstaggered：処置タイミングが個体ごとに異なるモデルの場合はTRUE（デフォルトはFALSE）\nconf.level：信頼区間を指定（0.90, 0.95, 0.99のいずれか。デフォルトは0.95）\n\n\n文字で見てもわかりにくいと思うので、読み込んだデータを使って関数を回してみましょう。\n\n通常のDiDにおけるイベントスタディ\n\nes &lt;- run_es(\n  data = df_base, \n  outcome = y, \n  treatment = treat, \n  time = period, \n  timing = 6, \n  fe = ~ id + period, \n  cluster = ~ id\n)\n\n基本的なケースであればこれくらいの指定で済みます。プロットは後のセクションでまとめて載せます。\n\n\nStaggered DiD 1\n\nes_stagg1 &lt;- run_es(\n  data = df_stagg, \n  outcome = y, \n  treatment = treated, \n  time = year, \n  timing = year_treated, \n  fe = ~ id + year, \n  cluster = ~ id, \n  staggered = TRUE,\n)\n\n先ほどと違う点は、staggeredがTRUEになっており、timingが具体的な数値ではなく、処置年を示す変数を指定しているところです。\n\n\nStaggered DiD 2\n\n# 共変量の変数を式の形にしておく\ncovariates &lt;- as.formula(paste(\"~\", paste(region, collapse = \"+\")))\n\nes_stagg2 &lt;- run_es(\n  data = df_castle, \n  outcome = l_homicide, \n  treatment = is_treated, \n  time = year, \n  timing = treatment_date, \n  fe = ~ state + year, \n  covariates = covariates, \n  cluster = ~ sid, \n  weights = ~ popwt, \n  staggered = TRUE\n)\n\n今回の例は共変量が多いので事前にas.formula()を使って処理してしまっていますが、関数内でcovariates = ~ cov1 + cov2のような指定の仕方で問題ありません。\n\n\n\nplot_es()\nこだわりがなければ、plot_es(es)の程度の書き方でプロットを出力することができます。引数の説明は後に回して、一旦先ほどのイベントスタディの結果をプロットしてみましょう。\n\n通常のDiDにおけるイベントスタディ\n\nplot_es(es)\n\n\n\n\n\n\n\n\n後の2つもそうですが、ベースラインがデフォルトのままなので、処置前年（-1）が抜けて値が0をとっています。\n\n\nStaggered DiD 1\n\nplot_es(es_stagg1)\n\n\n\n\n\n\n\n\n\n\nStaggered DiD 2\n\nplot_es(es_stagg2)\n\n\n\n\n\n\n\n\nStaggeredの方もいい感じにプロットできています。この図はMixtape内でlead変数とlag変数を手作業で作って実装しプロットされていますが、その図と見比べても同じ推移が示されていることがわかります。\n\n\n使い方\n基本的には上の使い方で十分ですが、ggplotベースで作ったこともあり、柔軟な対応も可能です。\nplot_es(\n  data,\n  type = \"ribbon\",\n  vline_val = 0,\n  vline_color = \"#000\",\n  hline_val = 0,\n  hline_color = \"#000\",\n  linewidth = 1,\n  pointsize = 2,\n  alpha = 0.2,\n  barwidth = 0.2,\n  color = \"#B25D91FF\",\n  fill = \"#B25D91FF\"\n)\n\ndata：run_es()で作成した結果のデータフレーム\ntype：ribbonとerrorbarが指定可能\nvline_val：縦の破線の位置（デフォルトは0）\nvline_color：縦の破線の色（デフォルトは#000（黒））\nhline_val：横の破線の位置（デフォルトは0）\nhline_color：縦の破線の色（デフォルトは#000（黒））\nlinewidth：折れ線の太さ（デフォルトは1）\npointsize：点の大きさ（デフォルトは2）\nalpha：リボンの透明度（デフォルトは0.2）\ncolor：線と点の色（デフォルトは#B25D91FF（ピンク））\nfillリボンの色（デフォルトは#B25D91FF（ピンク））\n\n\nplot_es()関数内でもある程度自由度をもって設定できます。\n例えばプロットをエラーバーのタイプにしてみましょう。\n\nplot_es(es_stagg2, type = \"errorbar\")\n\n\n\n\n\n\n\n\nさらに色も変えてみます。\n\nplot_es(es_stagg2, type = \"errorbar\", color = \"#000\")\n\n\n\n\n\n\n\n\nリボンタイプとエラーバータイプがあり、さらにそこからある程度の自由度もある点が他のパッケージに対する優位性にもなっています。\nちなみに、ggplotベースということで、ggplotの関数をつなげることも可能です！\n\nplot_es(es_stagg2, type = \"errorbar\", color = \"#000\") + \n  geom_hline(yintercept = .08, color = \"red\") + \n  annotate(\"text\", x = 3, y = -.1, label = \"DD Coefficient = 0.08\\n(s.e. = 0.03)\")\n\n\n\n\n\n\n\n\nMixtape風に係数を示す水平線と注釈を追加してみました。このようにどんどん要素を追加していくことができます。"
  },
  {
    "objectID": "pages/tips/250525_fixes/index.html#おわりに",
    "href": "pages/tips/250525_fixes/index.html#おわりに",
    "title": "【パッケージ開発】fixesでイベントスタディを効率化",
    "section": "おわりに",
    "text": "おわりに\nまだまだ開発途上ですが、staggeredまで対応できたので、これからしばらくはブラッシュアップを念頭にアップデートしていこうと思います。\n冒頭にも書きましたが、もし使っていただいて「使いにくい」や「こんな機能が欲しい」等ありましたら、以下のコメントやGitHubのIssuesまでお願いします。"
  },
  {
    "objectID": "pages/tips/250525_fixes/index.html#データ出典",
    "href": "pages/tips/250525_fixes/index.html#データ出典",
    "title": "【パッケージ開発】fixesでイベントスタディを効率化",
    "section": "🔗 データ出典",
    "text": "🔗 データ出典\nデータ出典：Causal Inference: The Mixtape（Scott Cunnningham, 2021）\nデータはGitHub上で公開されており、以下のリポジトリから入手可能です：\n\nhttps://github.com/scunning1975/mixtape\n\nまた、データはMITライセンスのもとで提供されています。"
  },
  {
    "objectID": "pages/tips/250525_fixes/index.html#footnotes",
    "href": "pages/tips/250525_fixes/index.html#footnotes",
    "title": "【パッケージ開発】fixesでイベントスタディを効率化",
    "section": "注",
    "text": "注\n\n\n参考：Mixtape↩︎\nTRUE/FALSEでも可↩︎"
  },
  {
    "objectID": "pages/tips/240619_trouble_shooting/index.html#はじめに",
    "href": "pages/tips/240619_trouble_shooting/index.html#はじめに",
    "title": "環境構築におけるトラブルシューティング",
    "section": "はじめに",
    "text": "はじめに\n環境構築に関する記事をいくつかまとめてきましたが、頻繁にエラーに直面するので、その場合の対処法をまとめていきます。\n本記事は随時更新します。\n関連するエラーや不明点については一番下のコメントに書いていただけると幸いです。\n発生環境に「開発コンテナ内」とあるのは、基本的にこの記事で紹介した環境を指します。"
  },
  {
    "objectID": "pages/tips/240619_trouble_shooting/index.html#python-のパス",
    "href": "pages/tips/240619_trouble_shooting/index.html#python-のパス",
    "title": "環境構築におけるトラブルシューティング",
    "section": "Python のパス",
    "text": "Python のパス\n\n発生環境：開発コンテナ内\nエラーが発生したコマンド：\n\n\n\nTerminal\n\ndvc init\n\n\n発生したエラー：「bash: /home/rstudio/.cache/pip/bin/dvc: /usr/local/bin/python: bad interpreter: No such file or directory」\n発生タイミング：Python 環境をいじった後\n対処法：パッケージをアンインストールして再インストール\n\n\n\nTerminal\n\npip uninstall dvc\npip install dvc\n\n\n原因：\n\n別の Dockerfile でバージョンの異なる Python 環境を作成しており、R 環境と Python 環境で同じ Docker ボリュームにマウントしていた。\nその結果競合が起こり、エラーが発生したと考えられる。\n\n解決策：一時的な対処なら上の方法で十分。根本的解決のためには R 環境と Python 環境で異なるボリュームを作成し、マウントする必要がある。"
  },
  {
    "objectID": "pages/tips/240619_trouble_shooting/index.html#ファイル削除の失敗",
    "href": "pages/tips/240619_trouble_shooting/index.html#ファイル削除の失敗",
    "title": "環境構築におけるトラブルシューティング",
    "section": "ファイル削除の失敗",
    "text": "ファイル削除の失敗\n\n発生環境：WSL（Windows 環境）\n発生タイミング：エクスプローラーからファイルを削除するとき\n発生したエラー：ファイルが削除できない（再試行やスキップしてもダメ）\n対処法：\n\nVSCode を開き、WSL に接続する。\nCtrl + J でターミナルを開いて次のコマンドを入力し、[フォルダ名] を置き換えた上で実行する1。\n\n\n\n\nTerminal\n\nsudo rm -rf [フォルダ名]"
  },
  {
    "objectID": "pages/tips/240619_trouble_shooting/index.html#古い-tinytex",
    "href": "pages/tips/240619_trouble_shooting/index.html#古い-tinytex",
    "title": "環境構築におけるトラブルシューティング",
    "section": "古い TinyTeX",
    "text": "古い TinyTeX\n\n発生環境：開発コンテナ内2\n発生タイミング：TinyTeX を使って Quarto コードをコンパイルしようとしたとき\n発生したエラー：次の画像の通り（TinyTeX が古いと言われる）\n\n\n\n\n\n\n\n対処法：\n\nTinyTeX をアンインストール\nTinyTeX を再インストール3\n\n\n\n\nR\n\ntinytex::uninstall_tinytex()\ntinytex::install_tinytex(dir = \"/home/rstudio/.TinyTeX\", force = TRUE)"
  },
  {
    "objectID": "pages/tips/240619_trouble_shooting/index.html#vscode-で-wsl-が起動しない",
    "href": "pages/tips/240619_trouble_shooting/index.html#vscode-で-wsl-が起動しない",
    "title": "環境構築におけるトラブルシューティング",
    "section": "VSCode で WSL が起動しない",
    "text": "VSCode で WSL が起動しない\n\n発生環境：Windows 11\n発生タイミング：VSCode で WSL を起動しようとしたとき\n発生したエラー：「VS Code Server for WSL closed unexpectedly」という表示と、「/node: not found」で終わるエラーが出力される。\n対処法：vscode-server の再インストール\n\n以下のコードを Ubuntu のターミナルで実行してください。\n\n\n\n\nUbuntu\n\nrm -rf ~/.vscode-server"
  },
  {
    "objectID": "pages/tips/240619_trouble_shooting/index.html#dvcでプッシュできない",
    "href": "pages/tips/240619_trouble_shooting/index.html#dvcでプッシュできない",
    "title": "環境構築におけるトラブルシューティング",
    "section": "DVCでプッシュできない",
    "text": "DVCでプッシュできない\n\nPart 1\n\n発生環境：開発コンテナ内\n発生タイミング：dvc pushを打ったとき\n発生したエラー：以下の通り\n\nERROR: unexpected error - Failed to authenticate GDrive: Access token refresh failed: invalid_grant: Bad Request\n\n\n\n\n\n\n対処法：VSCode（開発コンテナ）のターミナルで次のコマンドを打って再度プッシュ\n\n\n\nTerminal\n\ndvc remote modify myremote --local \\\n      gdrive_user_credentials_file ~/.cache/myremote-credentials.json\n\n\n\nPart 2\n\n発生環境：開発コンテナ内\n発生タイミング：dvc pushを打ったとき\n発生したエラー：以下の通り\n\nトークンが切れているらしいです。\n\n\nERROR: unexpected error - Failed to authenticate GDrive: Access token refresh failed: invalid_grant: Token has been expired or revoked.\n\n対処法：VSCode（開発コンテナ）のターミナルで次のコマンドを打って再度プッシュ\n\n\n\nTerminal\n\nrm /home/rstudio/.cache/myremote-credentials.json\ndvc remote modify myremote --local \\\n      gdrive_user_credentials_file ~/.cache/myremote-credentials.json"
  },
  {
    "objectID": "pages/tips/240619_trouble_shooting/index.html#footnotes",
    "href": "pages/tips/240619_trouble_shooting/index.html#footnotes",
    "title": "環境構築におけるトラブルシューティング",
    "section": "注",
    "text": "注\n\n\n\\\\wsl.localhost\\Ubuntu\\home\\user 下にファイルがあると仮定している。フォルダのパスが異なる場合は、cd [your_path] でディレクトリを変更したうえで実行する。もしくは [フォルダ名] にパス含めて入力する↩︎\nこの記事で紹介した TinyTeX ボリュームを使用。↩︎\ntinytex::reinstall_tinytex() でもいけるのかもしれないけど、途中でエラーが出たので手順を踏むことにしました。↩︎"
  },
  {
    "objectID": "pages/tips/240829_local_r/index.html#はじめに",
    "href": "pages/tips/240829_local_r/index.html#はじめに",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "はじめに",
    "text": "はじめに\nローカルへのRのインストール方法についてまとめます。これまでの記事でご紹介した開発コンテナとは違い、特に事前準備はいりません。\nこんなニッチなサイトを見てくれている方には必要ない気もしますが、Stata出身の方々や実証が初めての方々に向けて…\nあと、シンプルにリンク探すの面倒ですよね、まとめます。"
  },
  {
    "objectID": "pages/tips/240829_local_r/index.html#結論",
    "href": "pages/tips/240829_local_r/index.html#結論",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "結論",
    "text": "結論\n以下のリンクに書いてあるものがすべてです。\nhttps://posit.co/download/rstudio-desktop/"
  },
  {
    "objectID": "pages/tips/240829_local_r/index.html#さすがに",
    "href": "pages/tips/240829_local_r/index.html#さすがに",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "さすがに…",
    "text": "さすがに…\nこんなんで説明になるわけがないので、設定なども含めてもう少し説明します。\nまず、Rを使うには、「R」と、「RStudio」が必要です1。\nRは調理用具で、RStudioはキッチンだと思ってもらえればよいのではないでしょうか。Rという用具だけでも料理はできるけど、RStudioという環境が整っているほうが料理が効率的にスムーズに行えると思います。\nこの観点からすれば、RStudioは必ずしも要るわけではないのかもしれませんが、わざわざキッチン以外で料理する人はいませんよね…笑"
  },
  {
    "objectID": "pages/tips/240829_local_r/index.html#rをインストール",
    "href": "pages/tips/240829_local_r/index.html#rをインストール",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "1. Rをインストール",
    "text": "1. Rをインストール\n以下のリンクを開き、自分の環境に合わせて「Download R for…」を選びます。\nhttps://cran.rstudio.com/\n進んだら、上部に出てくる「base」をクリックして次に行きます。\n次に「Download R-4.4.1 for Windows」のように出てくるので、そこをクリックするとインストーラーがダウンロードできます。\n\n\n\n\n\nダウンロードできたらそのファイルを開き、インストールを開始します。\n\n言語を決めて次へ\n情報を読んで次へ\nインストール先はデフォルトのまま次へ\nコンポーネントもデフォルトのまま次へ\n起動時オプションもデフォルトのまま次へ\nスタートメニューフォルダーもデフォルトのまま次へ\n追加タスクもデフォルトのまま次へ\n\n先ほども言った通り作業はRStudioでするので、デスクトップにアイコンを置いたところで使うことはないため、必要なければそのチェックを外してください。\n\nインストール完了\n\n以上でインストールができました。"
  },
  {
    "objectID": "pages/tips/240829_local_r/index.html#rstudioのインストール",
    "href": "pages/tips/240829_local_r/index.html#rstudioのインストール",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "2. RStudioのインストール",
    "text": "2. RStudioのインストール\n次にキッチンであるRStudioをインストールします。\n以下のリンクの「DOWNLOAD RSTUDIO DESKTOP FOR…」をクリックするとインストーラーをダウンロードできます。\nhttps://posit.co/download/rstudio-desktop/\n先ほどと同様ダウンロードできたファイルを開いてインストールを開始します。\nRほどいろいろ考えることはなく、デフォルトのまま進んでインストールすれば完了です。\nこれでRStudioをインストールできました。開いて作業を進めましょう！"
  },
  {
    "objectID": "pages/tips/240829_local_r/index.html#rstudioの設定",
    "href": "pages/tips/240829_local_r/index.html#rstudioの設定",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "3. RStudioの設定",
    "text": "3. RStudioの設定\nそのまま作業を始めてもよいのですが、少し設定を覗いてみましょう。\n画面上部のToolsからGlobal Options…へ進みます。\n\n\n\n\n\nいろいろな項目がありますが、ここでは簡潔に関係ありそうなところを説明します。\n\nデフォルトのワーキングディレクトリ\n1番上のGeneralの中にDefault working directoryという項目があります。ワーキングディレクトリの説明は長くなるので端折りますが、ここで設定が可能です。\nデフォルトでは「~」ですが2、必要に応じて変えてください。\n\n\n\nC:/Users/yo5ukにデフォルトを変更しました。\n\n\n\n\nパイプ演算子\nもはやRユーザーにはおなじみのパイプ演算子ですが、Tidyverseが提供する%&gt;%と、base Rが提供する|&gt;3の2種類があり、キーボードショートカットでどちらを使うか決められます。デフォルトは%&gt;%です。\n正直どちらを使うのかはお好みというか、厳密に違いはあるのですが、普段使っていてどちらかでないと困るようなことには遭遇しませんので、変えても変えなくても問題ありません。\n上から2番目のCodeの中にある「Use native pipe operator, |&gt;」にチェックを入れるとショートカットで|&gt;が出るようになります。\n\n\n\n\n\nちなみに、ショートカットはCtrl (Macなら⌘) + Shift + Mです。\n\n\nテーマやフォント\n上から4番目のAppearanceではRStudioのテーマやフォントを変更できます。\n特にEditor fontとEditor themeが主な変更点になると思います。\nいろいろ試してみるとよいと思います。\n\n\n\nフォントをCascadia Code Lightに、テーマをTomorrow Nightに変更しました。\n\n\n\n\nレイアウトの変更\nRStudioのデフォルトでは左上にスクリプト、左下にコンソール、右上に変数等、右下にファイル等が表示されるようになっています。\n例えば僕は、スクリプトの表示割合を増やしたく、さらにコンソールも並べて見たいと思っているので、パネルの配置を変更しています。\n上から5番目のPane Layoutで変更します。\n僕の変更後の配置は次の通りです。\n\n\n\nSource（スクリプト）とConsoleが横に並ぶように設定を変えています。\n\n\n確認時以外は変数は表示しなくてよいので、Sourceパネル右上にあるで左半分をスクリプトにしています。\n\n\nSweaveの設定\nそのうちTinyTeXを使ってRStudio上で文書作成などをすることになることもあるかと思います。そんなときのための設定です。\n中央下あたりのSweaveから「Typeset LaTeX into PDF using: 」をXeLaTeXに設定、その下の「Use tinytex when compiling .tex files」にチェックを入れます。\nこれでいつしかTinyTeXを使う時でも問題なしです。\n\n\n\n\n\n設定はこんなところではないでしょうか。\n1番下のCopilot、これはGitHub Copilotでめんどくさい申請をしてでも使うべきだと思っているのですが、RStudioとは相性最悪なのでおすすめしません。VSCodeのために申請するのはとても良いと思います。"
  },
  {
    "objectID": "pages/tips/240829_local_r/index.html#最後に",
    "href": "pages/tips/240829_local_r/index.html#最後に",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "最後に",
    "text": "最後に\n最近はリモート環境について学んでいたので、記事もそちらに偏りがちだったのですが、些細な業務はやっぱりローカルの方が楽でいいですね。\nうまく使い分けていきたいなと思っているところです。\nこれからRを使っていく方の少しでも役に立てれば幸いです。"
  },
  {
    "objectID": "pages/tips/240829_local_r/index.html#footnotes",
    "href": "pages/tips/240829_local_r/index.html#footnotes",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "注",
    "text": "注\n\n\n最近はPositronなどもあるようですね。今はまだプレリリース状態なので、RStudioを推奨します。↩︎\nWindowsだとOneDriveのフォルダとかになっているかもしれません。↩︎\nページのフォントの問題で大変恐縮なのですが、|&gt; は| と&gt; で構成されています。右向きの三角形ではございません。笑↩︎"
  },
  {
    "objectID": "pages/tips/250413_municipality/index.html#はじめに",
    "href": "pages/tips/250413_municipality/index.html#はじめに",
    "title": "【GIS】行政区域データを整理【ファイル有】",
    "section": "はじめに",
    "text": "はじめに\nSoftwareのページで「人口ヒートマップ」などいくつかのwebアプリケーションを公開していますが、これらを作るうえで地理データを軽量化することが課題でした。\n国土数値情報ダウンロードサイトから行政区域データをとってきて使用しているのですが、データを読み込むだけでも時間がかかるため、rmapshaperパッケージを使用して軽量化することにしました。精度は落ちるのですがパッと見ただけでわかるような劣化ではなく、ファイルサイズも1/10以下になっているので、それを公開しておこうと思います。"
  },
  {
    "objectID": "pages/tips/250413_municipality/index.html#使用した関数",
    "href": "pages/tips/250413_municipality/index.html#使用した関数",
    "title": "【GIS】行政区域データを整理【ファイル有】",
    "section": "使用した関数",
    "text": "使用した関数\nrmapshaperパッケージのms_simplify()でポリゴンの頂点の数を5％程度にまで削減しています。"
  },
  {
    "objectID": "pages/tips/250413_municipality/index.html#ファイル",
    "href": "pages/tips/250413_municipality/index.html#ファイル",
    "title": "【GIS】行政区域データを整理【ファイル有】",
    "section": "ファイル",
    "text": "ファイル\n以下のリンクからダウンロードできます。Geopackageファイルと言って、シェープファイルほど普及していませんが、シェープファイルよりも高機能かつGeoJSONほどファイルサイズが大きくない形式で提供しています。\n簡略化GPKGファイル"
  },
  {
    "objectID": "pages/tips/250413_municipality/index.html#利用規約ライセンス情報",
    "href": "pages/tips/250413_municipality/index.html#利用規約ライセンス情報",
    "title": "【GIS】行政区域データを整理【ファイル有】",
    "section": "利用規約・ライセンス情報",
    "text": "利用規約・ライセンス情報\n本ウェブサイトで公開している行政区域データは、国土交通省 国土数値情報ダウンロードサービス から取得した「行政区域データ」をもとに加工・作成したものです。\n\n元データのライセンス： CC BY 4.0\n加工内容：行政区域ポリゴンの簡略化処理（ms_simplify() による座標点の間引き）\n\nデータをご利用いただく場合は、以下の条件に従ってください：\n\n本データの出典として、「国土交通省『国土数値情報 行政区域データ』をもとに作成」と明記してください。\n本データは加工済みであり、正確性・完全性を保証するものではありません。\n本ウェブサイト上のデータは非商用・商用を問わず利用可能ですが、元データと同様にCC BY 4.0ライセンスが適用されます。"
  },
  {
    "objectID": "pages/tips/250413_municipality/index.html#見てみる",
    "href": "pages/tips/250413_municipality/index.html#見てみる",
    "title": "【GIS】行政区域データを整理【ファイル有】",
    "section": "見てみる",
    "text": "見てみる\n本データがどのようなものか見てみます。\n\n\nコード\nlibrary(tidyverse)\nlibrary(sf)\n\nd &lt;- read_sf(here::here(\"data/jpn_geojson/jp_muni_simplified.gpkg\"))\n\nggplot(d) + \n  geom_sf() + \n  theme_void()\n\n\n\n\n\n\n\n\n\nこのように、見た目では違和感なくプロットできていると思います。\n厳密な地理データを求めない場合は非常に有用だと思いますので、ぜひ使ってみてください。"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#はじめに",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#はじめに",
    "title": "プロットの応用",
    "section": "はじめに",
    "text": "はじめに\n第1回でGISデータの読み込みと簡単なハンドリング、プロットを行いました。\n今回は、1.5回として、プロットにフォーカスしてもう少し踏み込んでいきたいと思います。"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#使用するデータ",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#使用するデータ",
    "title": "プロットの応用",
    "section": "使用するデータ",
    "text": "使用するデータ\n第1回と同じデータを用います。\n\n福島県の行政区域データ（2024年、ポリゴン）\n\n国土数値情報ダウンロードサイト\n\n福島県の公園データ（2011年、ポイント）\n\n国土数値情報ダウンロードサイト\n\n\nこれらのデータを、ワーキングディレクトリにdataフォルダを作って入れておいてください。"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#使用するパッケージ",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#使用するパッケージ",
    "title": "プロットの応用",
    "section": "使用するパッケージ",
    "text": "使用するパッケージ\nsfとggplot2です。ggplot2はtidyverseパッケージ群に含まれていますので、後者で読み込みます。\n\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(here)"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#データの読み込み",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#データの読み込み",
    "title": "プロットの応用",
    "section": "データの読み込み",
    "text": "データの読み込み\n前回と同様です。公園のポイントデータには座標参照系（CRS）が設定されていないので、st_set_crs()でデータ本来のCRSに設定し、その上でJDG2011に修正しています。\n\nfukushima &lt;- read_sf(here(\"data/N03-20240101_07_GML/N03-20240101_07.shp\"))\n\npark &lt;- read_sf(here(\"data/P13-11_07_GML/P13-11_07.shp\"), \n                options = \"ENCODING=Shift_JIS\") |&gt; \n  st_set_crs(st_crs(4612)) |&gt;  # JGD2000/(B, L) データ本来のCRS\n  st_transform(st_crs(6668))   # JGD2011/(B, L) 変換したいCRS\n\n# 必要な変数を抽出＆リネーム\nfukushima &lt;- fukushima |&gt; \n  select(\n    name_pref = N03_001,  # 都道府県名\n    name_muni = N03_004,  # 市区町村名\n    geometry              # プロットに必要\n  )\n\npark_s &lt;- park |&gt; \n  select(\n    name_park = P13_003,  # 公園名\n    name_pref = P13_005,  # 都道府県名\n    name_muni = P13_006,  # 市区町村名\n    geometry\n  )"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#プロットの基本",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#プロットの基本",
    "title": "プロットの応用",
    "section": "プロットの基本",
    "text": "プロットの基本\nまずは前回のプロットを確認します。\n\nggplot() + \n  geom_sf(data = fukushima) + \n  geom_sf(data = park_s, color = \"orange\") +  # 点の色も指定\n  theme_void()\n\n\n\n\n\n\n\n図 1: 行政区域と公園ポイントのプロット\n\n\n\n\n\nポイント：\n\nggplot()でプロットを開始\ngeom_sf()で各地理データをプロット\n\n括弧内ではdata =を明記（ないとプロットできない）\n\nコードを書いた順に上書き\n\n公園のデータを先にプロットするとその後に書いた地図に消されてしまう\n\ntheme_void()でシンプルな背景に\n\n緯度経度までプロットしたいことはあまりないと思いますが、軸も表示しつつシンプルなテーマを使いたい場合はこちらも参考にしてください。"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#地図の塗りつぶし",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#地図の塗りつぶし",
    "title": "プロットの応用",
    "section": "地図の塗りつぶし",
    "text": "地図の塗りつぶし\n\n全体\n例えば、デフォルトで市町村はグレーに塗られていますが、ここも白にしたいとします。\n\nggplot() + \n  geom_sf(data = fukushima, fill = \"white\") + \n  geom_sf(data = park_s, color = \"orange\") + \n  theme_void()\n\n\n\n\n\n\n\n図 2: 白で塗りつぶしました\n\n\n\n\n\nfillをgeom_sf()内で指定することにより、塗りつぶすことができます。\n\n\n一部\n時には一部の市町村だけ塗りつぶしたいこともあると思います。ここでは例として、公園が集中している福島市、郡山市、会津若松市、いわき市を塗りつぶしてみます。\nまずはデータの加工からです。\nfukushimaのデータを加工し、4市のいずれかであれば「主要4市」となる変数を作ります。\ncitiesに該当する市の名前を格納し、name_muni %in% citiesでname_muniがcitiesに入っていれば「主要4市」とラベリングされます。\n\ncities &lt;- c(\"福島市\", \"郡山市\", \"会津若松市\", \"いわき市\")\n\nfukushima &lt;- fukushima |&gt; \n  mutate(is_in4cities = if_else(name_muni %in% cities, \"主要4市\", \"その他\"))\n\nif_else(条件, 真, 偽)は、条件に当てはまっていれば真、そうでなければ偽の値をとるような関数です。\n\n\n\n\n\n\nダミー変数の場合\n\n\n\n\n\nこの場合真と偽はダミー変数の1, 0でもよいのですが、プロットの際に連続変数と扱われてしまい、少々面倒です。百聞は一見に如かずということで、ダミー変数で作った場合のプロットはこちらです。\n\n\n\n\n\n\n\n\n\nこれは色をいじっていないのできれいな図ではありませんが、凡例を見ていただければわかる通り、1, 0の2値ではなく連続変数扱いになってしまっています。\nそのため、もし2値でしたいのであれば\"1\", \"0\"のように文字列として変数を作成するのが良いかもしれません。\n\n\n\n次にis_in4citiesが1であれば塗りつぶすようにコードを修正します。\n\nggplot() + \n  geom_sf(data = fukushima, aes(fill = is_in4cities)) + \n  geom_sf(data = park_s, color = \"orange\") + \n  theme_void()\n\n\n\n\n\n\n\n図 3: 特定の市を塗りつぶしました\n\n\n\n\n\naes(fill = is_in4cities)を追加したことで、色分けをすることができました。変数に対して色分けをしたい場合はaes()内で指定する必要があります。\nしかしこのままでは色が非常に見にくいので、色を修正していきます。\n\nggplot() + \n  geom_sf(data = fukushima, aes(fill = is_in4cities)) + \n  geom_sf(data = park_s, color = \"darkgreen\") + \n  scale_fill_manual(\n    values = c(\"white\", \"lightblue\")\n  ) + \n  theme_void()\n\n\n\n\n\n\n\n図 4: 特定の市を塗りつぶしました\n\n\n\n\n\nこれでより見やすいプロットになりました。scale_fill_manual()では、aes(fill = )で設定した変数に対してvalues =で色を割り当てることができます。\n例えば人口など連続変数をマッピングしたい場合はまた別ですが、離散値の場合は基本的にこの方法でプロット可能です。今は2種類しかないのでc(\"white\", \"lightblue\")ですが、3種類以上でも可能です1。"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#凡例の整理",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#凡例の整理",
    "title": "プロットの応用",
    "section": "凡例の整理",
    "text": "凡例の整理\n図 4 では地図自体は整理できたものの、凡例部分が未整理です。\n例えばis_in4citiesは消したいし、主要4市はその他の上にあってほしいです。\nその設定をするコードは以下です。\n\nggplot() + \n  geom_sf(data = fukushima, aes(fill = is_in4cities)) + \n  geom_sf(data = park_s, color = \"darkgreen\") + \n  scale_fill_manual(\n    values = c(\"white\", \"lightblue\")\n  ) + \n  guides(fill = guide_legend(title = NULL, reverse = TRUE)) + \n  theme_void()\n\n\n\n\n\n\n\n図 5: 凡例を整理しました\n\n\n\n\n\nポイント：\n\nguides()内でfillを指定\n\nこれはaes()内でfillを使用しているため2\n\nguide_legend()内でtitle = NULLを指定\n\n文字通りタイトルを空にする\n\nguide_legend()内でreverse = TRUEを指定\n\n要素の順を逆転させる"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#点を色で塗り分ける",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#点を色で塗り分ける",
    "title": "プロットの応用",
    "section": "点を色で塗り分ける",
    "text": "点を色で塗り分ける\n今度は点に色を付ける方法です。これまではオレンジや濃い緑で統一して色を付けてきましたが、これを色分けしていきます。\n先ほどと同様、分け方に従って変数を追加します。先ほどと同様の4市に含まれる公園に色を付けるとします。\n\npark_s &lt;- park_s |&gt; \n  mutate(is_in4cities = if_else(name_muni %in% cities, \"主要4市内\", \"その他\"))\n\nほとんど同じです。\n続いてプロットを行います。\n\nggplot() + \n  geom_sf(data = fukushima, fill = \"white\") + \n  geom_sf(data = park_s, aes(color = is_in4cities)) + \n  theme_void()\n\n\n\n\n\n\n\n図 6: 点を塗り分けました\n\n\n\n\n\n先ほどとの違いは、aes()内でfillではなくcolorを使っている点です。文字通りfillは塗りつぶしですので、点ではcolorを使います。\nここからは塗りつぶしで行った手順をまとめて行っていきます。\n\nggplot() + \n  geom_sf(data = fukushima, fill = \"white\") + \n  geom_sf(data = park_s, aes(color = is_in4cities)) + \n  scale_color_manual(\n    values = c(\"lightblue\", \"darkblue\")\n  ) + \n  guides(color = guide_legend(title = NULL, reverse = TRUE)) + \n  theme_void()\n\n\n\n\n\n\n\n図 7: 点の色と凡例を整理しました\n\n\n\n\n\nこれで点の塗分けも可能になりました。\nポイント：\n\nscale_color_manual(values = )で色を指定\n\n先ほどはfillだったが今回はcolorを使っている\n\nguides()\n\n1と同様color =になっている\n他は塗りつぶしと同じ"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#凡例の位置",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#凡例の位置",
    "title": "プロットの応用",
    "section": "凡例の位置",
    "text": "凡例の位置\n最後に、凡例の位置はtheme()内で変更可能です。\n\nggplot() + \n  geom_sf(data = fukushima, fill = \"white\") + \n  geom_sf(data = park_s, aes(color = is_in4cities)) + \n  scale_color_manual(\n    values = c(\"lightblue\", \"darkblue\")\n  ) + \n  guides(color = guide_legend(title = NULL, reverse = TRUE)) + \n  theme_void() + \n  theme(\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n図 8: 凡例の位置を変更\n\n\n\n\n\n凡例については他のプロット同じなのでこちらも参照してください。"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#おわりに",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#おわりに",
    "title": "プロットの応用",
    "section": "おわりに",
    "text": "おわりに\n今回は1.5回としてR上での地図のプロットをまとめました。今後の回でまた別タイプのプロットが出てくるかもしれませんが、その都度紹介していきます。"
  },
  {
    "objectID": "pages/gis_in_r/1.5_handling_plot/index.html#footnotes",
    "href": "pages/gis_in_r/1.5_handling_plot/index.html#footnotes",
    "title": "プロットの応用",
    "section": "注",
    "text": "注\n\n\n変数が「政令指定都市」、「中核市」、「その他」でscale_fill_manual( values = c(\"white\", \"lightblue\", \"blue\") )とするなど。↩︎\n例えば折れ線グラフでlinetypeを使っていたら、ここもlinetype =になります。↩︎"
  },
  {
    "objectID": "pages/gis_in_r/4_nighttime_light/index.html#はじめに",
    "href": "pages/gis_in_r/4_nighttime_light/index.html#はじめに",
    "title": "夜間光を可視化する",
    "section": "はじめに",
    "text": "はじめに\n今回は夜間光について扱います。\n夜間光とは、人工衛星から夜間に撮影された地上の光のデータのことを指し、夜間光の強さやパターンは、都市の発展、産業の活況、電力消費量などを反映していると考えられています。\n例えば Martínez (2022) では、独裁的な政府ではGDP成長率が過大申告されているという仮説をもとに、夜間光は政府が制御できないという客観性を用いて仮説検証を行っています。結果として独裁国家では、同じ夜間光の伸びに対して報告されるGDP成長率が過大になっていることを明らかにしています。\nこのように夜間光は近年の研究で度々用いられており、その客観性が有用な指標になっているわけですが、今回はどのようにこの夜間光データを扱えばよいのか、説明していきます。"
  },
  {
    "objectID": "pages/gis_in_r/4_nighttime_light/index.html#使用するデータ",
    "href": "pages/gis_in_r/4_nighttime_light/index.html#使用するデータ",
    "title": "夜間光を可視化する",
    "section": "使用するデータ",
    "text": "使用するデータ\n夜間光は、NASAのSuomi NPPに搭載されたVisible/Infrared Imager and Radiometer Suite (VIIRS)という地球観測用のセンサーによって観測され、こちらのページからダウンロードできます。\n今回使用するのはAnnual VNL V2という年単位のデータで、この中の、雲などのノイズを除去しつつ年間の夜間光の平均を反映したものを使っていきます。\nAnnual VNL V2のセクションから「Go to Download V2.2」をクリックし、ダウンロードページに飛びます。\n\n\n\nV2.2には2022年から2024年のデータがあります\n\n\n任意の年（今回は2024年とします）のフォルダをクリックすると、.gzファイル（gzipファイル）がいくつかあります。目的にもよりますが、今回は平均のデータを使うので、~average.dat.tif.gzというファイルをクリックしたダウンロードします。おそらく1番上に表示されていると思います。\nダウンロードに際してアカウント登録が必要です。ダウンロードしたいファイルをクリックすると登録を求められると思うので表示された内容に従って登録してください。\n右にファイルサイズが表示されていますが、10GB近いファイルですので、ダウンロードには30分近く要します。ダウンロードできたら、通常のzipファイル同様に展開してください。"
  },
  {
    "objectID": "pages/gis_in_r/4_nighttime_light/index.html#tiffファイルについて",
    "href": "pages/gis_in_r/4_nighttime_light/index.html#tiffファイルについて",
    "title": "夜間光を可視化する",
    "section": "TIFFファイルについて",
    "text": "TIFFファイルについて\nダウンロードしたファイルは、.tif形式になっています。これはTIFFファイルと言って、Tagged Image File Formatの略です。TIFFファイルは画像ファイルの一種で、写真や図面、スキャン画像などを高画質・非圧縮または可逆圧縮で保存できる形式です。\n特に今回用いるファイルはGeoTIFFと言い、TIFFフォーマットに位置情報（地理情報）を埋め込んだ拡張版です。そのため、シェープファイル等とあわせて特定の場所におけるデータを編集したり分析したりすることができます。"
  },
  {
    "objectID": "pages/gis_in_r/4_nighttime_light/index.html#ラスタデータについて",
    "href": "pages/gis_in_r/4_nighttime_light/index.html#ラスタデータについて",
    "title": "夜間光を可視化する",
    "section": "ラスタデータについて",
    "text": "ラスタデータについて\nこのTIFF形式のデータは、ラスタデータの一種です。ラスタデータとは、格子状のセル（ピクセル）で構成されるもので、各セルに値を持つグリッドデータです。例えばExcelでシート上に地図を書いて、土地に該当するセルにデータを入れていったようなイメージです。ピクセルの大きさによってデータの大きさも異なり、もちろん細かいピクセルにしたデータの方が大きくなります。\nちなみに、これまで扱ってきたシェープファイルやGeoJSON、Geopackageなどの点や線、ポリゴンなどの幾何学的な形で空間情報を表現するデータをベクタデータと言います。こちらは行政区域データのような境界線を表したり、線路などの線、駅などのポイントデータが該当します。"
  },
  {
    "objectID": "pages/gis_in_r/4_nighttime_light/index.html#rで読み込み可視化する",
    "href": "pages/gis_in_r/4_nighttime_light/index.html#rで読み込み可視化する",
    "title": "夜間光を可視化する",
    "section": "Rで読み込み可視化する",
    "text": "Rで読み込み可視化する\nダウンロードしたファイルを読み込みます。\n必要となるパッケージは以下の通りです。\n\n# 未インストールの場合\n# pak::pak(\"terra\")\n\nlibrary(terra)\n\n10GBもあるファイルですが、シェープファイル等と違って読み込み自体は素早くできます。terraパッケージのrast()関数で読み込んでいきます（ファイル名はオリジナルから変更しています）。ファイルまでのパスは各々変更してください。\nntl_24 &lt;- rast(here::here(\"data/nighttime_lights/nighttime_lights_2024.tif\"))\nTIFFファイルをプロットするには、terraパッケージのplot()関数を用います。ここでplot()はベースRの関数としても備わっているため、その関数と区別するためにterra::plot()と明示して使用します。\nterra::plot(ntl_24)\n\n\n\nほぼ認識できません\n\n\nご覧の通り、ほぼ紫になってしまっており、このままではどこがどこなのかさっぱり認識できません。これは外れ値ともいえるような極端に明るいところが点在しているため、その他の光量がほぼ0のようになってしまっていることが原因です。\nここで、右の凡例が光量の値を示しているのですが、この値を600などの大きい値ではなく、0から10のような狭い範囲でプロットしてみましょう。range引数で指定することができます。\nterra::plot(ntl_24, range = c(0, 10))\n\n\n\nだいぶ見やすくなりました\n\n\n今度はどうでしょうか。10以上のところは白飛びしていますが、それでもスケール調整によって見やすくなったと思いますし、地図が浮かび上がってきました。こういうことはプロットの際にはよくあるので、うまくスケール調整をしながらプロットしてみてください。"
  },
  {
    "objectID": "pages/gis_in_r/4_nighttime_light/index.html#日本を切り出す",
    "href": "pages/gis_in_r/4_nighttime_light/index.html#日本を切り出す",
    "title": "夜間光を可視化する",
    "section": "日本を切り出す",
    "text": "日本を切り出す\n今度はこの夜間光のファイルから日本を切り出してみます。\n日本を切り出すメリットとしては、プロットの際に日本にフォーカスできることはもちろん、ファイルサイズを大幅に縮小することができます。日本に切り取った場合、10GBから15MB程度までファイルサイズは小さくなります（！）。\nまずは切り取るための土台として日本の行政区域データを準備します。\n\n日本の市区町村データを準備\n以下のファイルを使用します。国土数値情報ダウンロードサイトからとってきた行政区域データを、各自治体が1オブジェクトになるように整理したデータです。これをmuniとして読み込んでおきます。\nGPKGファイル\n\nlibrary(sf)\n\nmuni &lt;- read_sf(here::here(\"data/jpn_geojson/municipality_summarise.gpkg\"))\n\n\n\nコード\nggplot2::ggplot(muni) + \n  ggplot2::geom_sf() + \n  ggplot2::theme_void()\n\n\n\n\n\nファイルをプロットするとこんな感じです\n\n\n\n\nポイント：夜間光のラスタデータと、行政区域のベクタデータの投影座標系を揃える必要があります。これをあらかじめ設定しておかないと、後々切り取る際の基準がバラバラになってしまい、ずれが生じてしまいます。この行政区域データを、夜間光データと同じ座標系に設定しましょう。\nmuni &lt;- muni |&gt; \n  sf::st_transform(terra::crs(ntl_24))\nわかりやすくパッケージも明示しましたが、ラスタデータの座標系（CRS）はterraパッケージのcrs()関数で取得でき、これをsfパッケージのst_transform()関数で読み込ませて座標系を上書きしています。ベクタデータの場合の座標系は、sf::st_crs()で取得できます1。\n\n\n切り取り\n切り取る際には大きく分けてcrop()関数とmask()関数の2つを使います。\ncrop()関数はある範囲でラスタデータを切り取り、mask()は指定したポリゴンの形状に基づいてその形で切る関数です。今回のイメージで言えば、日本を囲む四角形で一度切り取ったうえで、日本の形に添ってさらに切り取るという流れです。一度crop()を挟むことでmask()の計算を軽量化することができます。\n\ncrop()で四角形に切り取る\n\n切り取るうえで、基準は様々あります。例えば日本の東西南北の端の緯度経度を取得してその通りに切り取るというものであったり、日本がすっぽり埋まるような緯度経度を自分で指定して切り取るといったような方法です。今回は前者を採用して進めてみます。\nいま、ntl_24という夜間光のラスタデータと、muniという自治体のベクタデータがあります。ここでmuniがすっぽり収まるような四角形（外接矩形）に切り取るため、terra::ext()を用います。\njapan_extent &lt;- ext(muni)\nこれ自体はプロットしても日本は表示されません。外接矩形を切り出しただけで、範囲のみが出てきます。\n\n\n\nterra::plot(japan_extent)\n\n\nこれを使って、ntl_24を切り取ります。\ncropped &lt;- crop(ntl_24, japan_extent)\n\nterra::plot(cropped, range = c(0, 10))\n\n\n\n切り取れました\n\n\n先ほどと同様光量の範囲を0～10に絞ってプロットしました。日本がしっかり収まっているのがわかると思います。ぴったり切っているため、北海道の頭が上辺に接していますが、最終的にプロットを載せないのであれば特に問題ないかと思います。\n\n\n\n\n\n\n夜間光のプロットまで載せたい場合\n\n\n\n\n\n成果物にプロットまで載せたい場合は、もう少し北に幅を持たせたいかもしれません。その場合はext()を使う段階で調整をします。\njapan_extent &lt;- ext(muni)\n\n# バッファを加える\njapan_extent &lt;- ext(\n  xmin(japan_extent), \n  xmax(japan_extent), \n  ymin(japan_extent), \n  ymax(japan_extent) + 2\n)\nこのように、ext()で上書きします。経度の下限上限、緯度の下限上限の順に指定し、その中でプラス（あるいはマイナス）何度余白を持たせるかを設定します2。これでプロットすると以下のようになります。\n\n\n\n北に少し幅を持たせられました\n\n\n\n\n\n\nmask()で日本の形に沿って切り出す\n\nラスタデータの範囲を絞ることができたので、次は軽量化したこのデータから日本の形を切り出していきます。\n以下のコードで切り出せます。\nmasked &lt;- mask(cropped, vect(muni))\n\nterra::plot(masked, range = c(0, 10))\n\n\n\n日本の形に切り取られました\n\n\n外接矩形のデータと行政区域データを用いて、日本の領土上における夜間光をプロットすることができました。ポイントは、ラスタデータとベクタデータでそろっておらず計算できないため、vect()を用いてmuniをmask()で計算できる形に変更しているところです。\n以上で夜間光データから日本を切り出すことができました。"
  },
  {
    "objectID": "pages/gis_in_r/4_nighttime_light/index.html#市町村ごとに光量を計算する",
    "href": "pages/gis_in_r/4_nighttime_light/index.html#市町村ごとに光量を計算する",
    "title": "夜間光を可視化する",
    "section": "市町村ごとに光量を計算する",
    "text": "市町村ごとに光量を計算する\nここからは、切り出したデータを用い、市町村の平均光量を計算していきます。なお、本ページでは計算の厳密さは重視しませんので、あくまでも計算方法の提示にとどめます3。\n使用するデータは今計算したmaskedです。そして計算に使用する関数はterra::extract()です。\n\nntl_values &lt;- terra::extract(masked, muni, fun = mean, na.rm = TRUE)\n\nextract()関数を使い、maskedとmuniを重ね合わせながら、平均（mean）を計算しています4。欠損値がある場合でも対応できるように、na.rm = TRUEを指定しています。このときもし\nWarning: [extract] transforming vector data to the CRS of the raster\nというような警告が出てきた場合は座標系が揃っていないということなので、前に戻って座標系を設定してください。\n計算したものの中身は以下のようになっています。\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                ID\n                nighttime_lights_2024\n              \n        \n        \n        \n                \n                  1\n                  10.530607\n                \n                \n                  2\n                  2.032149\n                \n                \n                  3\n                  2.897246\n                \n                \n                  4\n                  3.978741\n                \n                \n                  5\n                  6.942668\n                \n                \n                  6\n                  1.047370\n                \n        \n      \n    \n\n\n\nこのIDはmuniの行番号に対応しているので、muniにbind_cols()等すれば適切に結合できます5。\n例：\n\nlibrary(tidyverse)\n\nmuni_ntl &lt;- muni |&gt; \n  bind_cols(ntl_values) |&gt; \n  select(-ID) |&gt; \n  relocate(geom, .after = last_col())\n\nIDはもはや不要なので抜いて、個人的にgeomは最後に置きたいので移動させていますが、これらはなくても問題ありません。\nこれでできるのが以下です。\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                name_muni\n                id_muni\n                id_pref\n                nighttime_lights_2024\n                geom\n              \n        \n        \n        \n                \n                  札幌市\n                  01100\n                  01\n                  10.530607\n                  MULTIPOLYGON (((141.2828 43...\n                \n                \n                  函館市\n                  01202\n                  01\n                  2.032149\n                  MULTIPOLYGON (((141.1571 41...\n                \n                \n                  小樽市\n                  01203\n                  01\n                  2.897246\n                  MULTIPOLYGON (((140.8554 43...\n                \n                \n                  旭川市\n                  01204\n                  01\n                  3.978741\n                  MULTIPOLYGON (((142.2877 43...\n                \n                \n                  室蘭市\n                  01205\n                  01\n                  6.942668\n                  MULTIPOLYGON (((140.941 42....\n                \n                \n                  釧路市\n                  01206\n                  01\n                  1.047370\n                  MULTIPOLYGON (((144.3589 42...\n                \n        \n      \n    \n\n\n\n単純平均ではあるものの、札幌が大きな値をとっており、傾向はあっていそうな感じです。\n他の、例えばメッシュデータなどを組み合わせればもう少し詳細に計算もできると思いますが、今回はここまでとします。"
  },
  {
    "objectID": "pages/gis_in_r/4_nighttime_light/index.html#footnotes",
    "href": "pages/gis_in_r/4_nighttime_light/index.html#footnotes",
    "title": "夜間光を可視化する",
    "section": "注",
    "text": "注\n\n\n例：st_transform(st_crs(muni))↩︎\nxmin()は経度の下限、ymax()は緯度の上限を表しているといった感じです。↩︎\n単純平均では、面積が大きいかつごく一部のみ都市化しているような市町村は過小評価されると考えてよいと思います。↩︎\nここでもtidyrパッケージとの競合を避けるためterraを明記しています。↩︎\nidはmuni のどの列にも対応しない（行番号のみ）ので、left_join()ではなくbind_cols()しています。↩︎"
  },
  {
    "objectID": "pages/gis_in_r/3_adjust_map/index.html#はじめに",
    "href": "pages/gis_in_r/3_adjust_map/index.html#はじめに",
    "title": "地図の調整",
    "section": "はじめに",
    "text": "はじめに\n今回は地図を調整する方法を説明します。ここでいう調整というのは、日本地図で北海道を本州の左側に、沖縄を東に配置するというようなことを指します。\n図を挿入するスペースが限られており、通常の形で挿入すると地図が小さくなってしまうような場合に役立ちます。\n今回使用するデータは国土数値情報ダウンロードサイトの行政区域データから取得しています。\nhttps://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-2024.html"
  },
  {
    "objectID": "pages/gis_in_r/3_adjust_map/index.html#ファイルデータの読み込み",
    "href": "pages/gis_in_r/3_adjust_map/index.html#ファイルデータの読み込み",
    "title": "地図の調整",
    "section": "ファイル・データの読み込み",
    "text": "ファイル・データの読み込み\n今回は都道府県のマップを使用します（ダウンロードした後にファイル名を変えています）。\n\nlibrary(tidyverse)\nlibrary(sf)\n\n# GISデータを保存しているフォルダ\ndata_dir &lt;- here::here(\"data/jpn_geojson\")\n\npref &lt;- read_sf(file.path(data_dir, \"prefecture.geojson\")) |&gt; \n  st_transform(st_crs(6668))\n\n平面にマッピングするのにCRSを6668に設定するとバランスが良いと感じるので、ついでに設定しています。\n今回は説明を簡単にするため、北海道のみを例にとって説明します。"
  },
  {
    "objectID": "pages/gis_in_r/3_adjust_map/index.html#データの整理",
    "href": "pages/gis_in_r/3_adjust_map/index.html#データの整理",
    "title": "地図の調整",
    "section": "データの整理",
    "text": "データの整理\n今回の目標は北海道を本州の西側に配置することです。\nプロットに先立ち、データを北海道とそれ以外に分割する必要があります。\n\npref_no_hokkaido &lt;- pref |&gt; \n  filter(N03_001 != \"北海道\")\n\nhokkaido &lt;- pref |&gt; \n  filter(N03_001 == \"北海道\")\n\nN03_001に都道府県名が格納されています。\n試しに北海道だけプロットしてみると、\n\nggplot(hokkaido) + \n  geom_sf()\n\n\n\n\n\n\n\n図 1\n\n\n\n\n\nこのように北海道のみが抽出できています。"
  },
  {
    "objectID": "pages/gis_in_r/3_adjust_map/index.html#北海道の移動",
    "href": "pages/gis_in_r/3_adjust_map/index.html#北海道の移動",
    "title": "地図の調整",
    "section": "北海道の移動",
    "text": "北海道の移動\n次に北海道を移動させます。\n先に日本全体をマッピングしておくと、どの程度移動させるべきかイメージが付きやすいと思います。\n\nggplot(pref) + \n  geom_sf()\n\n\n\n\n\n\n\n図 2\n\n\n\n\n\nこれを見ると、北海道を西に11度、南に4度くらい動かせばよいのではないかなと思います。ちなみに動かす単位は緯度経度です。\nそれでは先ほどのhokkaidoデータのgeometryを西と南にそれぞれ動かしていきます。\n\nhokkaido &lt;- hokkaido |&gt; \n  mutate(geometry = geometry + c(-11, -4)) |&gt; \n  st_set_crs(st_crs(pref))\n\nポイント：\n\ngeometryを上書き\n\ngeometryにc(-11, -4)のようにc(x, y)を加えることで動かすことができます。\n設定しているCRSによって動く幅が異なるので、そこは調節してください。\n\nCRSを設定\n\ngeometryを上書きするとマッピングの際に必要なCRSが失われますので、再度設定が必要です。\nst_set_crs()で設定できます。\nst_crs(pref)でprefと同じCRSを設定することが可能です。直接6668を設定することも可能です。st_crs()で設定されているCRSを確認できます。"
  },
  {
    "objectID": "pages/gis_in_r/3_adjust_map/index.html#プロット",
    "href": "pages/gis_in_r/3_adjust_map/index.html#プロット",
    "title": "地図の調整",
    "section": "プロット",
    "text": "プロット\n\nベース\nでは、これをpref_no_hokkaidoと併せてプロットしてみましょう。\n\nggplot() + \n  geom_sf(data = pref_no_hokkaido) + \n  geom_sf(data = hokkaido)\n\n\n\n\n\n\n\n図 3\n\n\n\n\n\nいい感じですね。必要に応じて表示する範囲を絞りましょう。今回は東経127度から143度、北緯30度から上は自動調節にしましょう（外れた範囲の地域の方、申し訳ございません…）。\n\nggplot() + \n  geom_sf(data = pref_no_hokkaido) + \n  geom_sf(data = hokkaido) + \n  xlim(127, 143) + \n  ylim(30, NA)\n\n\n\n\n\n\n\n図 4\n\n\n\n\n\nうまい具合に絞ることができました。\nxlimとylimで調節ができます。上限や下限を特に指定しない場合はNAを設定すればよいです。\n\n\nセグメントの追加\n北海道と本州の間に線を引いて、区切りを入れていきます。\n\nggplot() + \n  geom_sf(data = pref_no_hokkaido) + \n  geom_sf(data = hokkaido) + \n  xlim(127, 143) + \n  ylim(30, NA) + \n  annotate(\"segment\", x = 128, xend = 133, \n           y = 37, color = \"gray50\") + \n  annotate(\"segment\", x = 133, xend = 139, \n           y = 37, yend = 41, color = \"gray50\")\n\n\n\n\n\n\n\n図 5\n\n\n\n\n\nannotate(\"segment\", ...)で線を追加できます。Xの開始点と終点、Yの開始点と終点をそれぞれ指定することができます。終点の方を指定しなければ、垂直線あるいは水平線になります。2本の線をつなげたい場合は、1本の終点が2本目の開始点になるように調節してください。\nannotate()については以下のページもご覧ください。\n\n\n\n\n\n\nggplot2ガイド\n\n\n\n\n\n調整\n最後に図の調整を行います。ここでは地図のテーマを変えたり、軸ラベルを消したりします。\n\nggplot() + \n  geom_sf(data = pref_no_hokkaido) + \n  geom_sf(data = hokkaido) + \n  xlim(127, 143) + \n  ylim(30, NA) + \n  annotate(\"segment\", x = 128, xend = 133, \n           y = 37, color = \"gray50\") + \n  annotate(\"segment\", x = 133, xend = 139, \n           y = 37, yend = 41, color = \"gray50\") + \n  labs(x = NULL, y = NULL) + \n  theme_bw() + \n  theme(\n    axis.text = element_blank(), \n    axis.ticks = element_blank(), \n    panel.grid = element_blank()\n  )\n\n\n\n\n\n\n\n図 6\n\n\n\n\n\nポイント：\n\nlabs(x = NULL, y = NULL)で各軸のラベルを消去\ntheme_bw()で白黒テーマの適用\ntheme()\n\naxis.textで軸のテキスト（今回は緯度経度）を消去\naxis.ticksで軸の目盛りを消去\npanel.gridで図内の罫線を消去\nelement_blank()は要素を消去する関数\n\n\nこれである程度きれいなプロットができました。\nもし地図の塗りつぶしの色を変えたければ、geom_sf()内でfill = \"white\"などを追加すれば変更することができます。"
  },
  {
    "objectID": "pages/tips/250622_rstudio_server/index.html#はじめに",
    "href": "pages/tips/250622_rstudio_server/index.html#はじめに",
    "title": "RStudio Serverをインストールする",
    "section": "はじめに",
    "text": "はじめに\nRStudio Serverのインストール方法や使い方についてまとめます。\nRStudio Serverを使えば各OSの違いに左右されず、どの端末からでも同じ環境で作業を継続できるのが特徴です。複数人での分析や大規模データ処理にも適しており、環境構築の一元化と省力化が図れます。\n僕は最近仕事でRStudio Serverを使うかも…みたいな流れがあったので、改めてまとめてみることにしました。"
  },
  {
    "objectID": "pages/tips/250622_rstudio_server/index.html#環境",
    "href": "pages/tips/250622_rstudio_server/index.html#環境",
    "title": "RStudio Serverをインストールする",
    "section": "環境",
    "text": "環境\n\nWindows 11\nPowerShell 7がインストール済み\n\nPowerShellはこちらからインストールできますが、よくわからない場合は標準インストールされているターミナルでも大丈夫です。"
  },
  {
    "objectID": "pages/tips/250622_rstudio_server/index.html#インストール",
    "href": "pages/tips/250622_rstudio_server/index.html#インストール",
    "title": "RStudio Serverをインストールする",
    "section": "インストール",
    "text": "インストール\n\nWSL\nまずはWSLからインストールします。WSLはWindows Subsystem for Linuxの略であり、Windows上でネイティブにLinux環境を動作させる機能で、開発やデータ分析をLinux向けツールで行える柔軟な作業環境を提供してくれます。\nまずはPowerShellを管理者権限で開きます。\n\n\n\n管理者権限で開きます\n\n\n次に以下のコマンドを入力し、実行します。\nwsl --install\nインストールが終わると、Linuxディストリビューションのユーザー名とパスワードの作成を求められます1。\nユーザー名は何でも大丈夫です。パスワードもめちゃくちゃ簡単で問題ありません。パスワードは画面上には表示されませんが、ちゃんと入力されています。慌てて何回も入力しないようにしてください。\nまた、ユーザー名とパスワードは後ほど使うので忘れないようにしてください。\n\n\nRとRStudio Server\n設定まで終わったら、アプリの一覧からUbuntu（これがLinuxのディストリビューションです）を開いてください。\n\n\n\n\n\n\nUbuntuのバージョンについて\n\n\n\n本ページではUbuntu 22を前提に進めています。もしインストールしたバージョンが他のバージョンであった場合は若干コードが変わる可能性がありますので、このページでバージョンを該当するものに変更したうえで都度コードをコピーし、実行してみてください。\nバージョンを確認するためには以下をUbuntu上で実行してください。\nlsb_release -a\n\n\nするとコンソール画面が出てきますので、以下のコードを順々に入力、実行していきます。\nsudo apt update\nsudo apt upgrade -y\n続いてRをインストールします。こちらのページからの転用です。\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the repo from CRAN -- lsb_release adjusts to 'noble' or 'jammy' or ... as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n# install R itself\nsudo apt install --no-install-recommends r-base\n次にRStudio Serverをインストールします。Posit社のガイドからの転用です。\nsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/server/focal/amd64/rstudio-server-2025.05.1-513-amd64.deb\nsudo gdebi rstudio-server-2025.05.1-513-amd64.deb\nこれでインストールは完了です。続いて次のコマンドを実行し、RStudio Serverを立ち上げます。\nsudo rstudio-server start"
  },
  {
    "objectID": "pages/tips/250622_rstudio_server/index.html#rstudio-serverを立ち上げる",
    "href": "pages/tips/250622_rstudio_server/index.html#rstudio-serverを立ち上げる",
    "title": "RStudio Serverをインストールする",
    "section": "RStudio Serverを立ち上げる",
    "text": "RStudio Serverを立ち上げる\nそれではRStudio Serverを立ち上げていきましょう。上のコマンドで起動までできているので、ブラウザ上で立ち上げていきます。\nPC上の任意のブラウザを開き、アドレスバーにlocalhost:8787と入力し、開きます。\nすると以下のような画面が出てきます。\n\n\n\n\n\nユーザー名とパスワードを求められますので、先ほどUbuntuで設定したものを入力してください。\nそうしてサインインすることで、RStudioの画面に入ることができます。\n\n\n\n\n\nここからは通常のRと同様に作業を進めることができます。"
  },
  {
    "objectID": "pages/tips/250622_rstudio_server/index.html#ファイルの扱いについて",
    "href": "pages/tips/250622_rstudio_server/index.html#ファイルの扱いについて",
    "title": "RStudio Serverをインストールする",
    "section": "ファイルの扱いについて",
    "text": "ファイルの扱いについて\nどのようにしてデータを入れたりファイルを追加したりすればよいかについて説明します。\nRStudio上でできることはデスクトップ版とほとんど同じで、さらにエクスプローラー上の動作も通常と同じようにすることができます。\nエクスプローラーを開いて左のサイドバーを一番下までスクロールすると、Linuxが作成されていることがわかります。\n\n\n\nサイドバーの一番下です\n\n\nするとUbuntuが中に作成されていますので、ダブルクリックで入っていきます。home/[設定したユーザー名]があると思うので、その中に入ると、そこがWindowsでいうところのC:\\Users\\ユーザー\\に該当します。ベースとなるディレクトリです。\nこの中にプロジェクトのフォルダを作成していけば、RStudio Server上でも見ることができますし、入れたファイルを操作することが可能になります。\nまあまあ面倒なところにあるので、クイックアクセスにピン留めしたりデスクトップにショートカットを作ったりして置くのが便利だと思います。\nここまでの操作で個人の作業はできるようになりました！続いては、ホストとなるPCで環境を作成し、それを別のデバイスからアクセスできるようにする方法についてまとめていきます！"
  },
  {
    "objectID": "pages/tips/250622_rstudio_server/index.html#リモートデスクトップを活用する",
    "href": "pages/tips/250622_rstudio_server/index.html#リモートデスクトップを活用する",
    "title": "RStudio Serverをインストールする",
    "section": "リモートデスクトップを活用する",
    "text": "リモートデスクトップを活用する\n例えば扱うデータが大きすぎて個々のノートパソコンでは扱いきれず、1台高スペックのデスクトップを用意してそこにアクセスして作業をしたい、というようなケースを考えます。\nここで個々のPCからデスクトップにアクセスして作業をするのですが、この作業はあくまでもデスクトップ上で行われるので、各PCがハイスペックである必要はありません。デスクトップの画面を自分のPCに投影しているようなイメージです。\n\n環境\n\n無線LAN（Wi-Fi）を使用\nホストと各PCは同じネットワーク（Wi-Fi）を使用\n\n\n\nデスクトップの環境構築\nまずすべきことは、上で書いたような環境構築を、デスクトップPC（ホスト）で実行することです。RStudio Serverを使えるようにしておいてください。\n\nIPアドレスを確認\n【ホストのPC】\n他のPC（クライアント）からアクセスできるようにするには、まずホストのIPアドレスを確認しておく必要があります。PowerShellを開いたら、以下のコマンドを実行します。\nipconfig\n実行すると、なにやら長々と表示されるはずです。「Windows IP 構成」の下に例えば「イーサネット アダプター vEthernet (Default Switch):」や、「イーサネット アダプター vEthernet (WSL (Hyper-V firewall)):」などいろいろ出てきます。\nその中の下の方に「Wireless LAN adapter Wi-Fi:」があります。この中に「IPv4 アドレス」があり、その右に数字が書かれています（例：192.xxx.x.xx）。これを後ほど使うので、画面を開いておいてください。\n【ホストPCのWSL】\n次にWindowsのアプリ一覧からUbuntuを開きます。\n\n\nWindowsファイアウォールでポート8787を開放\nPowerShellを再び管理者権限で開き、以下のコマンドを実行します。\nNew-NetFirewallRule -DisplayName \"Allow RStudio Server\" -Direction Inbound -LocalPort 8787 -Protocol TCP -Action Allow\nファイアウォールやポートについて耳馴染みがない方も多いと思いますが、RStudio Serverに他のPCからアクセスできるようにするためのおまじないだと思ってください。\n変な設定が不安だなと思う方は、後から以下のコマンドでこの設定を削除することができますのでご安心ください。\nRemove-NetFirewallRule -DisplayName \"Allow RStudio Server\"\n\n\nWSL側でRStudio Serverの動作を確認\nUbuntuを再度開き、以下のコマンドを実行してRStudio Serverが起動しているかどうかを再確認します。\nsudo systemctl status rstudio-server\nsudoで始まるコマンドはパスワードを求められますので適宜入力して進んでください。\nここでactive (running)が記載されていればOKです。もしinactive (dead)となっていたら、以下のコマンドから起動してください。\nsudo systemctl start rstudio-server\n\n\nブラウザでアクセスを確認する\nそれではホスト上で動作確認をしてみましょう。\nブラウザを立ち上げlocalhost:8787を入力し開きます。先ほどと同様のサインイン画面が出てくれば問題ありません。\n\n\n別端末（クライアント）からのアクセス確認\nクライアントからは先ほど確認したIPアドレスをlocalhostの代わりに使用します。例えば192.xxx.x.xx:8787といった具合です。\nこれが開けてサインイン画面に移行できれば成功です。自分のPCのスペックに依存せず、ホストのPCにアクセスしてRStudioから作業を行うことができます。\n繰り返しになりますが、実行しているのはホストのデスクトップです。ブラウザであれば何でもよいので、同じネットワークに接続しているのであればスマホのブラウザからアクセスすることもできます。"
  },
  {
    "objectID": "pages/tips/250622_rstudio_server/index.html#footnotes",
    "href": "pages/tips/250622_rstudio_server/index.html#footnotes",
    "title": "RStudio Serverをインストールする",
    "section": "注",
    "text": "注\n\n\n求められない場合は、続けてwslとだけ入力して実行してください。↩︎"
  },
  {
    "objectID": "pages/tips/250715_rstudio_server/index.html#はじめに",
    "href": "pages/tips/250715_rstudio_server/index.html#はじめに",
    "title": "RStudio Serverをインストールする【リモートデスクトップも】",
    "section": "はじめに",
    "text": "はじめに\nRStudio Serverのインストール方法や使い方についてまとめます。\nRStudio Serverを使えば各OSの違いに左右されず、どの端末からでも同じ環境で作業を継続できるのが特徴です。複数人での分析や大規模データ処理にも適しており、環境構築の一元化と省力化が図れます。\n僕は最近仕事でRStudio Serverを使うかも…みたいな流れがあったので、改めてまとめてみることにしました。"
  },
  {
    "objectID": "pages/tips/250715_rstudio_server/index.html#環境",
    "href": "pages/tips/250715_rstudio_server/index.html#環境",
    "title": "RStudio Serverをインストールする【リモートデスクトップも】",
    "section": "環境",
    "text": "環境\n\nWindows 11\nPowerShell 7がインストール済み\n\nPowerShellはこちらからインストールできますが、よくわからない場合は標準インストールされている「ターミナル」でも大丈夫です。"
  },
  {
    "objectID": "pages/tips/250715_rstudio_server/index.html#インストール",
    "href": "pages/tips/250715_rstudio_server/index.html#インストール",
    "title": "RStudio Serverをインストールする【リモートデスクトップも】",
    "section": "インストール",
    "text": "インストール\n\nWSL\nまずはWSLからインストールします。WSLはWindows Subsystem for Linuxの略であり、Windows上でネイティブにLinux環境を動作させる機能で、開発やデータ分析をLinux向けツールで行える柔軟な作業環境を提供してくれます。\nまずはPowerShellを管理者権限で開きます。\n\n\n\n管理者権限で開きます\n\n\n次に以下のコマンドを入力し、実行します。\nwsl --install\nインストールが終わると、Linuxディストリビューションのユーザー名とパスワードの作成を求められます1。\nユーザー名は何でも大丈夫です。パスワードもめちゃくちゃ簡単で問題ありません。パスワードは画面上には表示されませんが、ちゃんと入力されています。慌てて何回も入力しないようにしてください。\nまた、ユーザー名とパスワードは後ほど使うので忘れないようにしてください。\n\n\nRとRStudio Server\n設定まで終わったら、アプリの一覧からUbuntu（これがLinuxのディストリビューションです）を開いてください。\n\n\n\n\n\n\nUbuntuのバージョンについて\n\n\n\n本ページではUbuntu 22を前提に進めています。もしインストールしたバージョンが他のバージョンであった場合は若干コードが変わる可能性がありますので、このページでバージョンを該当するものに変更したうえで都度コードをコピーし、実行してみてください。\nバージョンを確認するためには以下をUbuntu上で実行してください。\nlsb_release -a\n\n\nするとコンソール画面が出てきますので、以下のコードを順々に入力、実行していきます。\nsudo apt update\nsudo apt upgrade -y\n続いてRをインストールします。こちらのページからの転用です。\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the repo from CRAN -- lsb_release adjusts to 'noble' or 'jammy' or ... as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n# install R itself\nsudo apt install --no-install-recommends r-base\n次にRStudio Serverをインストールします。Posit社のガイドからの転用です。\nsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/server/focal/amd64/rstudio-server-2025.05.1-513-amd64.deb\nsudo gdebi rstudio-server-2025.05.1-513-amd64.deb\nこれでインストールは完了です。続いて次のコマンドを実行し、RStudio Serverを立ち上げます。\nsudo rstudio-server start"
  },
  {
    "objectID": "pages/tips/250715_rstudio_server/index.html#rstudio-serverを立ち上げる",
    "href": "pages/tips/250715_rstudio_server/index.html#rstudio-serverを立ち上げる",
    "title": "RStudio Serverをインストールする【リモートデスクトップも】",
    "section": "RStudio Serverを立ち上げる",
    "text": "RStudio Serverを立ち上げる\nそれではRStudio Serverを立ち上げていきましょう。上のコマンドで起動までできているので、ブラウザ上で立ち上げていきます。\nPC上の任意のブラウザを開き、アドレスバーにlocalhost:8787と入力し、開きます。\nすると以下のような画面が出てきます。\n\n\n\n\n\nユーザー名とパスワードを求められますので、先ほどUbuntuで設定したものを入力してください。\nそうしてサインインすることで、RStudioの画面に入ることができます。\n\n\n\n\n\nここからは通常のRと同様に作業を進めることができます。"
  },
  {
    "objectID": "pages/tips/250715_rstudio_server/index.html#ファイルの扱いについて",
    "href": "pages/tips/250715_rstudio_server/index.html#ファイルの扱いについて",
    "title": "RStudio Serverをインストールする【リモートデスクトップも】",
    "section": "ファイルの扱いについて",
    "text": "ファイルの扱いについて\nどのようにしてデータを入れたりファイルを追加したりすればよいかについて説明します。\nRStudio上でできることはデスクトップ版とほとんど同じで、さらにエクスプローラー上の動作も通常と同じようにすることができます。\nエクスプローラーを開いて左のサイドバーを一番下までスクロールすると、Linuxが作成されていることがわかります。\n\n\n\nサイドバーの一番下です\n\n\nするとUbuntuが中に作成されていますので、ダブルクリックで入っていきます。home/[設定したユーザー名]があると思うので、その中に入ると、そこがWindowsでいうところのC:\\Users\\ユーザー\\に該当します。ベースとなるディレクトリです。\nこの中にプロジェクトのフォルダを作成していけば、RStudio Server上でも見ることができますし、入れたファイルを操作することが可能になります。\nまあまあ面倒なところにあるので、クイックアクセスにピン留めしたりデスクトップにショートカットを作ったりして置くのが便利だと思います。\nここまでの操作で個人の作業はできるようになりました！続いては、ホストとなるPCで環境を作成し、それを別のデバイスからアクセスできるようにする方法についてまとめていきます！"
  },
  {
    "objectID": "pages/tips/250715_rstudio_server/index.html#リモートデスクトップを活用する",
    "href": "pages/tips/250715_rstudio_server/index.html#リモートデスクトップを活用する",
    "title": "RStudio Serverをインストールする【リモートデスクトップも】",
    "section": "リモートデスクトップを活用する",
    "text": "リモートデスクトップを活用する\n例えば扱うデータが大きすぎて個々のノートパソコンでは扱いきれず、1台高スペックのデスクトップを用意してそこにアクセスして作業をしたい、というようなケースを考えます。\nここで個々のPCからデスクトップにアクセスして作業をするのですが、この作業はあくまでもデスクトップ上で行われるので、各PCがハイスペックである必要はありません。デスクトップの画面を自分のPCに投影しているようなイメージです。\n\n環境\n\n無線LAN（Wi-Fi）を使用\nホストと各PCは同じネットワーク（Wi-Fi）を使用\n\n\n\nデスクトップの環境構築\nまずすべきことは、上で書いたような環境構築を、デスクトップPC（ホスト）で実行することです。RStudio Serverを使えるようにしておいてください。\n\nIPアドレスを確認\n【ホストのPC】\n他のPC（クライアント）からアクセスできるようにするには、まずホストのIPアドレスを確認しておく必要があります。PowerShellを開いたら、以下のコマンドを実行します。\nipconfig\n実行すると、なにやら長々と表示されるはずです。「Windows IP 構成」の下に例えば「イーサネット アダプター vEthernet (Default Switch):」や、「イーサネット アダプター vEthernet (WSL (Hyper-V firewall)):」などいろいろ出てきます。\nその中の下の方に「Wireless LAN adapter Wi-Fi:」があります。この中に「IPv4 アドレス」があり、その右に数字が書かれています（例：192.xxx.x.xx）。これを後ほど使うので、押さえておいてください。\nまた、もう一度PowerShellは使うので、画面も開いておいてください。\n【ホストPCのWSL】\n次にWindowsのアプリ一覧からUbuntu  を開きます。\n開けたら次のコマンドを実行してください。\nip addr\nこれも同様に2種類出てくると思いますが、下にあるeth0が必要な方です。「inet 172.xxx.xx.xx」のような形で表示されていると思いますので、これを押さえておきます。スラッシュの前までで大丈夫です。\n\n\nポートの設定\n今押さえたWSLの方のIPアドレスを使用します（後で確認した方です）。\nPowerShellに戻って次のコマンドを実行します。\nnetsh interface portproxy add v4tov4 listenport=8787 listen address=0.0.0.0 connectport=8787 connectaddress=[WSLのIPアドレス]\n最後の部分を四角括弧ごとWSLのIPアドレスに置き換えて下さい。\n\n\nホストPCでファイアウォールの設定\n次に引き続きホストのPC上で、ファイアウォールの設定を行います。\n設定を開き、検索窓から「ファイアウォール」と検索し、「Windows Defender ファイアウォール」をクリックして開きます。\n\n\n\n下から2番目のです\n\n\n開いたウィンドウの左側に「詳細設定」という項目があるのでクリックして進みます。\n「受信の規則」→右側から「新しい規則」→「ポート」を選択して次へ進み、TCP、特定のローカルポートに「8787」を入力して次へ進み、「接続を許可する」でさらに次へ進み、すべてのチェックボックスにチェックが入った状態で次へ進みます。\n名前を付ける必要がありますが、何でもよいと思います。RStudio Serverを使っていることがわかる名前が良いと思います。入力したら完了で終わりです。\n\n\n\n\n\n\nコマンドで一発\n\n\n\n以下のコマンドをPowerShellで入力すれば同じことができます。こっちの方が楽かもですね。\nNew-NetFirewallRule -DisplayName \"RStudio Server\" -Direction Inbound -LocalPort 8787 -Protocol TCP -Action Allow\n\n\n\n\nWSL側でRStudio Serverの動作を確認\nUbuntuを再度開き、以下のコマンドを実行してRStudio Serverが起動しているかどうかを再確認します。\nsudo rstudio-server status\nsudoで始まるコマンドはパスワードを求められますので適宜入力して進んでください。\nここでactive (running)が記載されていればOKです。もしinactive (dead)となっていたら、以下のコマンドから起動してください。\nsudo rstudio-server start\n\n\nブラウザでアクセスを確認する\nそれではホスト上で動作確認をしてみましょう。\nブラウザを立ち上げlocalhost:8787を入力し開きます。先ほどと同様のサインイン画面が出てくれば問題ありません。\n\n\n別端末（クライアント）からのアクセス確認\nクライアントからは先ほど確認したローカルのIPアドレスをlocalhostの代わりに使用します。例えば192.xxx.x.xx:8787といった具合です。\nこれが開けてサインイン画面に移行できれば成功です。自分のPCのスペックに依存せず、ホストのPCにアクセスしてRStudioから作業を行うことができます。\n繰り返しになりますが、実行しているのはホストのデスクトップです。ブラウザであれば何でもよいので、同じネットワークに接続しているのであればスマホのブラウザからアクセスすることもできます。"
  },
  {
    "objectID": "pages/tips/250715_rstudio_server/index.html#終わり",
    "href": "pages/tips/250715_rstudio_server/index.html#終わり",
    "title": "RStudio Serverをインストールする【リモートデスクトップも】",
    "section": "終わり！",
    "text": "終わり！\n特にリモートデスクトップの説明で長くなってしまいましたが、これでRStudio Serverを使えるようになるはずです。\n用途に合わせて、いろいろ試してみてください！"
  },
  {
    "objectID": "pages/tips/250715_rstudio_server/index.html#footnotes",
    "href": "pages/tips/250715_rstudio_server/index.html#footnotes",
    "title": "RStudio Serverをインストールする【リモートデスクトップも】",
    "section": "注",
    "text": "注\n\n\n求められない場合は、続けてwslとだけ入力して実行してください。↩︎"
  }
]