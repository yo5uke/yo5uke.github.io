[
  {
    "objectID": "gis_in_r/1_intro/index.html",
    "href": "gis_in_r/1_intro/index.html",
    "title": "導入 + ハンドリング",
    "section": "",
    "text": "このページでは、R で GIS を使う上での基本について説明します。\nR 言語では主に sf パッケージを使って GIS を扱います。また、tidyverse パッケージ群を使うことで、データの前処理や可視化を行うことができます。\nまた、R Project を使っていることを前提とします1。"
  },
  {
    "objectID": "gis_in_r/1_intro/index.html#データの抽出",
    "href": "gis_in_r/1_intro/index.html#データの抽出",
    "title": "導入 + ハンドリング",
    "section": "データの抽出",
    "text": "データの抽出\n\nデータの読み込み\nsf パッケージの read_sf() 関数を用います。\nShift_JIS で書かれたような変なデータがたまにあるので、そのようなときはオプションで指定しましょう。options = \"ENCODING=Shift_JIS\" を追加してください。\n\n\n\n\n\n\n読み込みに使う関数について\n\n\n\n\n\nread_sf() は、st_read() の細かい設定を省いてくれた関数、というイメージです。\n具体的には、\nread_sf(dsn)\n\nst_read(dsn, quiet = TRUE, stringsAsFactors = FALSE, as_tibble = TRUE)\nこの2つが同じです2。詳しくは ?st_read() をコンソールに打ち込みドキュメントを読んでみてください。\n基本的には read_sf() で十分だと思います。\n\n\n\nまた、公園のデータは CRS が設定されていないようです。その設定も行います。CRS については後の回で説明します。\n\nfukushima &lt;- read_sf(here(\"data/N03-20240101_07_GML/N03-20240101_07.shp\"))\n\npark &lt;- read_sf(here(\"data/P13-11_07_GML/P13-11_07.shp\"), \n                options = \"ENCODING=Shift_JIS\") |&gt; \n    st_set_crs(st_crs(4612)) |&gt;  # JGD2000/(B, L) データ本来のCRS\n    st_transform(st_crs(6668))  # JGD2011/(B, L) 変換したいCRS\n\n\n\nデータを見てみる\n公園のデータを見てみます。\n\n\n\n\n\n\n\n\n図 1: 公園のポイントデータ\n\n\n\n\n\n\n\n\n表 1: 公園データの中身（一部）\n\n\n\n\n\n\n\n\n\nP13_001\nP13_002\nP13_003\nP13_004\nP13_005\nP13_006\nP13_007\nP13_008\nP13_009\nP13_010\ngeometry\n\n\n\n\n福島県\nNA\n福島空港公園\n6\n福島県\n須賀川市\n1993\n520900\n1\nNA\nc(140.42020783, 37.24667066)\n\n\n福島県\nNA\nあづま総合運動公園\n6\n福島県\n福島市\n1980\n982000\n1\nNA\nc(140.3619751, 37.7220006)\n\n\n福島県\nNA\n逢瀬公園\n4\n福島県\n郡山市\n1979\n346000\n1\nNA\nc(140.27387039, 37.41233912)\n\n\n福島県\nNA\n会津レクリエーション公園\n6\n福島県\n会津若松市\n1998\n426000\n1\nNA\nc(140.01659489, 37.51642757)\n\n\n福島県\nNA\n東ヶ丘公園\n6\n福島県\n南相馬市\n1995\n212000\n1\nNA\nc(140.96713139, 37.63259542)\n\n\n福島県\nNA\nいわき公園\n6\n福島県\nいわき市\n1987\n713000\n1\nNA\nc(140.92164642, 37.01329096)\n\n\n\n\n\n\n\n\n\n\n国土数値情報ダウンロードサイトの説明を見てみると、各列は以下のようになっています。\n\n\n\nP13_001：管理都道府県・整備局\nP13_002：管理市区町村\nP13_003：公園名\nP13_004：公園種別\nP13_005：所在地都道府県名\n\n\n\nP13_006：所在地市区町村名\nP13_007：供用開始年\nP13_008：供用済面積\nP13_009：都市計画決定\nP13_010：備考\n\n\n\n\n\n抽出\n今回は公園名、所在地都道府県、所在地市区町村、そしてポイントを表す geometry の列だけが必要だとします。\ndplyr::select() 関数を使って列を抽出し、同時に名前も変更します。\nselect() 内で変換後と変換前をイコールで結ぶことにより、列名を変更できます。\n\npark_s &lt;- park |&gt; \n    select(\n        name_park = P13_003, \n        name_pref = P13_005, \n        name_muni = P13_006, \n        geometry\n    )\n\n\n\n\n\n表 2: 列抽出済みのデータ\n\n\n\n\n\n\n\n\n\nname_park\nname_pref\nname_muni\ngeometry\n\n\n\n\n福島空港公園\n福島県\n須賀川市\nc(140.42020783, 37.24667066)\n\n\nあづま総合運動公園\n福島県\n福島市\nc(140.3619751, 37.7220006)\n\n\n逢瀬公園\n福島県\n郡山市\nc(140.27387039, 37.41233912)\n\n\n会津レクリエーション公園\n福島県\n会津若松市\nc(140.01659489, 37.51642757)\n\n\n東ヶ丘公園\n福島県\n南相馬市\nc(140.96713139, 37.63259542)\n\n\nいわき公園\n福島県\nいわき市\nc(140.92164642, 37.01329096)\n\n\n\n\n\n\n\n\n\n\nこのように tidyverse の強みを活かしてデータハンドリングを行えます3。"
  },
  {
    "objectID": "gis_in_r/1_intro/index.html#可視化",
    "href": "gis_in_r/1_intro/index.html#可視化",
    "title": "導入 + ハンドリング",
    "section": "可視化",
    "text": "可視化\ntidyverse に含まれる ggplot2 を使って、ここまでのデータをプロットしていきます。\n基本的な書き方は以下の通りです。データフレームから ggplot() を繋いで記述していきます。\n\npark_s |&gt; \n    ggplot() + \n    geom_sf()  # GIS用のコマンド\n\n\n\n\n\n\n\n図 2: シンプルなプロット\n\n\n\n\n\nこれだとやや分かりにくいので、背景を消しましょう。theme_void() や theme_bw()、theme_classic() などがよいと思います。\n\npark_s |&gt; \n    ggplot() + \n    geom_sf() + \n    theme_void()\n\n\n\n\n\n\n\n図 3: 背景を削除\n\n\n\n\n\nこれだけだとどこなのかわからないので、先ほどダウンロードした福島県の行政区域を重ねてプロットします。\n\n\n\n\n\n\nプロットするとき\n\n\n\nggplot を使うときは、記述した順に上に重なっていくので、場合によっては順番を意識しないとポイントなどが見えなくなることがあります。\n今回は行政区域をベースとするので、先にこちらをプロットします。\n\n\n\n\n\n\n\n\ngeom_sf() の注意点\n\n\n\ngeom_sf() でデータを指定する引数は data であり、これは第2引数なので、シンプルに geom_sf(fukushima) と書くとプロットがうまくいきません4。geom_sf(data = fukushima) と書く必要がある点にご注意ください。\n\n\n\nggplot() + \n    geom_sf(data = fukushima) + \n    geom_sf(data = park_s, color = \"orange\") +  # 点の色も指定\n    theme_void()\n\n\n\n\n\n\n\n図 4: 行政区域と公園ポイントのプロット\n\n\n\n\n\nここまでがプロットの方法です。\n今後も可視化の際に ggplot2 を使いますので、その都度紹介します。"
  },
  {
    "objectID": "gis_in_r/1_intro/index.html#ファイルの出力",
    "href": "gis_in_r/1_intro/index.html#ファイルの出力",
    "title": "導入 + ハンドリング",
    "section": "ファイルの出力",
    "text": "ファイルの出力\n先ほど作成した park_s を Shapefile として出力します。\nGIS データは重いものが多いので、いちいち生データを読み込んで処理をすると時間がかかります。\n# フォルダがない場合に作成する\nif (!dir.exists(here(\"data/output/1_intro\"))) {\n  dir.create(here(\"data/output/1_intro\"), recursive = TRUE)\n}\n\nwrite_sf(park_s, here(\"data/output/1_intro/Park_selected.shp\"), \n         layer_options = \"ENCODING=UTF-8\")\n次回以降は Park_selected.shp を読み込めばここから作業を開始できます。"
  },
  {
    "objectID": "gis_in_r/1_intro/index.html#footnotes",
    "href": "gis_in_r/1_intro/index.html#footnotes",
    "title": "導入 + ハンドリング",
    "section": "注",
    "text": "注\n\n\nR Project と後述の here についてはこちらを参照して下さい。↩︎\ndsn のところがデータです。↩︎\nデータハンドリングの基礎的な知識を身に付けるには、私たちのRがおすすめです。↩︎\n「○○ =」を省略できるのは、第1引数であるとき、もしくは引数順に書いている場合のみです。↩︎"
  },
  {
    "objectID": "tips/240829_local_r/index.html",
    "href": "tips/240829_local_r/index.html",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "",
    "text": "ローカルへのRのインストール方法についてまとめます。これまでの記事でご紹介した開発コンテナとは違い、特に事前準備はいりません。\nこんなニッチなサイトを見てくれている方には必要ない気もしますが、Stata出身の方々や実証が初めての方々に向けて…\nあと、シンプルにリンク探すの面倒ですよね、まとめます。"
  },
  {
    "objectID": "tips/240829_local_r/index.html#はじめに",
    "href": "tips/240829_local_r/index.html#はじめに",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "",
    "text": "ローカルへのRのインストール方法についてまとめます。これまでの記事でご紹介した開発コンテナとは違い、特に事前準備はいりません。\nこんなニッチなサイトを見てくれている方には必要ない気もしますが、Stata出身の方々や実証が初めての方々に向けて…\nあと、シンプルにリンク探すの面倒ですよね、まとめます。"
  },
  {
    "objectID": "tips/240829_local_r/index.html#結論",
    "href": "tips/240829_local_r/index.html#結論",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "結論",
    "text": "結論\n以下のリンクに書いてあるものがすべてです。\nhttps://posit.co/download/rstudio-desktop/"
  },
  {
    "objectID": "tips/240829_local_r/index.html#さすがに",
    "href": "tips/240829_local_r/index.html#さすがに",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "さすがに…",
    "text": "さすがに…\nこんなんで説明になるわけがないので、設定なども含めてもう少し説明します。\nまず、Rを使うには、「R」と、「RStudio」が必要です1。\nRは調理用具で、RStudioはキッチンだと思ってもらえればよいのではないでしょうか。Rという用具だけでも料理はできるけど、RStudioという環境が整っているほうが料理が効率的にスムーズに行えると思います。\nこの観点からすれば、RStudioは必ずしも要るわけではないのかもしれませんが、わざわざキッチン以外で料理する人はいませんよね…笑"
  },
  {
    "objectID": "tips/240829_local_r/index.html#rをインストール",
    "href": "tips/240829_local_r/index.html#rをインストール",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "1. Rをインストール",
    "text": "1. Rをインストール\n以下のリンクを開き、自分の環境に合わせて「Download R for…」を選びます。\nhttps://cran.rstudio.com/\n進んだら、上部に出てくる「base」をクリックして次に行きます。\n次に「Download R-4.4.1 for Windows」のように出てくるので、そこをクリックするとインストーラーがダウンロードできます。\n\n\n\n\n\nダウンロードできたらそのファイルを開き、インストールを開始します。\n\n言語を決めて次へ\n情報を読んで次へ\nインストール先はデフォルトのまま次へ\nコンポーネントもデフォルトのまま次へ\n起動時オプションもデフォルトのまま次へ\nスタートメニューフォルダーもデフォルトのまま次へ\n追加タスクもデフォルトのまま次へ\n\n先ほども言った通り作業はRStudioでするので、デスクトップにアイコンを置いたところで使うことはないため、必要なければそのチェックを外してください。\n\nインストール完了\n\n以上でインストールができました。"
  },
  {
    "objectID": "tips/240829_local_r/index.html#rstudioのインストール",
    "href": "tips/240829_local_r/index.html#rstudioのインストール",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "2. RStudioのインストール",
    "text": "2. RStudioのインストール\n次にキッチンであるRStudioをインストールします。\n以下のリンクの「DOWNLOAD RSTUDIO DESKTOP FOR…」をクリックするとインストーラーをダウンロードできます。\nhttps://posit.co/download/rstudio-desktop/\n先ほどと同様ダウンロードできたファイルを開いてインストールを開始します。\nRほどいろいろ考えることはなく、デフォルトのまま進んでインストールすれば完了です。\nこれでRStudioをインストールできました。開いて作業を進めましょう！"
  },
  {
    "objectID": "tips/240829_local_r/index.html#rstudioの設定",
    "href": "tips/240829_local_r/index.html#rstudioの設定",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "3. RStudioの設定",
    "text": "3. RStudioの設定\nそのまま作業を始めてもよいのですが、少し設定を覗いてみましょう。\n画面上部のToolsからGlobal Options…へ進みます。\n\n\n\n\n\nいろいろな項目がありますが、ここでは簡潔に関係ありそうなところを説明します。\n\nデフォルトのワーキングディレクトリ\n1番上のGeneralの中にDefault working directoryという項目があります。ワーキングディレクトリの説明は長くなるので端折りますが、ここで設定が可能です。\nデフォルトでは「~」ですが2、必要に応じて変えてください。\n\n\n\nC:/Users/yo5ukにデフォルトを変更しました。\n\n\n\n\nパイプ演算子\nもはやRユーザーにはおなじみのパイプ演算子ですが、Tidyverseが提供する%&gt;%と、base Rが提供する|&gt;3の2種類があり、キーボードショートカットでどちらを使うか決められます。デフォルトは%&gt;%です。\n正直どちらを使うのかはお好みというか、厳密に違いはあるのですが、普段使っていてどちらかでないと困るようなことには遭遇しませんので、変えても変えなくても問題ありません。\n上から2番目のCodeの中にある「Use native pipe operator, |&gt;」にチェックを入れるとショートカットで|&gt;が出るようになります。\n\n\n\n\n\nちなみに、ショートカットはCtrl (Macなら⌘) + Shift + Mです。\n\n\nテーマやフォント\n上から4番目のAppearanceではRStudioのテーマやフォントを変更できます。\n特にEditor fontとEditor themeが主な変更点になると思います。\nいろいろ試してみるとよいと思います。\n\n\n\nフォントをCascadia Code Lightに、テーマをTomorrow Nightに変更しました。\n\n\n\n\nレイアウトの変更\nRStudioのデフォルトでは左上にスクリプト、左下にコンソール、右上に変数等、右下にファイル等が表示されるようになっています。\n例えば僕は、スクリプトの表示割合を増やしたく、さらにコンソールも並べて見たいと思っているので、パネルの配置を変更しています。\n上から5番目のPane Layoutで変更します。\n僕の変更後の配置は次の通りです。\n\n\n\nSource（スクリプト）とConsoleが横に並ぶように設定を変えています。\n\n\n確認時以外は変数は表示しなくてよいので、Sourceパネル右上にあるで左半分をスクリプトにしています。\n\n\nSweaveの設定\nそのうちTinyTeXを使ってRStudio上で文書作成などをすることになることもあるかと思います。そんなときのための設定です。\n中央下あたりのSweaveから「Typeset LaTeX into PDF using: 」をXeLaTeXに設定、その下の「Use tinytex when compiling .tex files」にチェックを入れます。\nこれでいつしかTinyTeXを使う時でも問題なしです。\n\n\n\n\n\n設定はこんなところではないでしょうか。\n1番下のCopilot、これはGitHub Copilotでめんどくさい申請をしてでも使うべきだと思っているのですが、RStudioとは相性最悪なのでおすすめしません。VSCodeのために申請するのはとても良いと思います。"
  },
  {
    "objectID": "tips/240829_local_r/index.html#最後に",
    "href": "tips/240829_local_r/index.html#最後に",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "最後に",
    "text": "最後に\n最近はリモート環境について学んでいたので、記事もそちらに偏りがちだったのですが、些細な業務はやっぱりローカルの方が楽でいいですね。\nうまく使い分けていきたいなと思っているところです。\nこれからRを使っていく方の少しでも役に立てれば幸いです。"
  },
  {
    "objectID": "tips/240829_local_r/index.html#footnotes",
    "href": "tips/240829_local_r/index.html#footnotes",
    "title": "【RStudio】ローカルへのインストールまとめ",
    "section": "注",
    "text": "注\n\n\n最近はPositronなどもあるようですね。今はまだプレリリース状態なので、RStudioを推奨します。↩︎\nWindowsだとOneDriveのフォルダとかになっているかもしれません。↩︎\nページのフォントの問題で大変恐縮なのですが、|&gt; は| と&gt; で構成されています。右向きの三角形ではございません。笑↩︎"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html",
    "href": "tips/240622_census_cleansing/index.html",
    "title": "国勢調査データのクレンジング",
    "section": "",
    "text": "国勢調査のデータを使う際、そのままではR等で使えない場合が多いので、分析用にデータをクレンジングするコードをご紹介します。\n応用が利くと思うので、ぜひ。"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html#はじめに",
    "href": "tips/240622_census_cleansing/index.html#はじめに",
    "title": "国勢調査データのクレンジング",
    "section": "",
    "text": "国勢調査のデータを使う際、そのままではR等で使えない場合が多いので、分析用にデータをクレンジングするコードをご紹介します。\n応用が利くと思うので、ぜひ。"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html#使用するデータ",
    "href": "tips/240622_census_cleansing/index.html#使用するデータ",
    "title": "国勢調査データのクレンジング",
    "section": "使用するデータ",
    "text": "使用するデータ\n\n2020年国勢調査\n\n4次メッシュ（500m四方メッシュ）データ\n人口及び世帯（JGD2011）\nデータ：Googleドライブ\n出典：e-Stat"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html#データの読み込み",
    "href": "tips/240622_census_cleansing/index.html#データの読み込み",
    "title": "国勢調査データのクレンジング",
    "section": "データの読み込み",
    "text": "データの読み込み\nデータを読み込みます。ダウンロードした時点では大量のテキストファイルがある状態なので、それを一括で読み込んで処理していきます。\n\nパッケージ\n\nlibrary(tidyverse)  # データハンドリングのため\nlibrary(here)  # 相対パスを使うため\n\n\n\n読み込み\n前提：\n\nワーキングディレクトリを指定してあること1。\nワーキングディレクトリ内のdata/census_2020にテキストファイルが入っていること。\n\n\n確認\nまずはじめに、ファイルの中身がどのようになっているのか、一つのファイルを読み込んで確かめてみます。\nちなみにファイルはShift_JISなので、ロケールも設定します。\n\ntest &lt;- read_csv(here(\"data/census_2020/tblT001141H3622.txt\"), \n                 locale = locale(encoding = \"Shift_JIS\"))\n\n\nhead(test)\n\n\n\n\n\n表 1: 生データ\n\n\n\n\n\n\n\n\n\nKEY_CODE\nHTKSYORI\nHTKSAKI\nGASSAN\nT001141001\nT001141002\nT001141003\nT001141004\nT001141005\nT001141006\nT001141007\nT001141008\nT001141009\nT001141010\nT001141011\nT001141012\nT001141013\nT001141014\nT001141015\nT001141016\nT001141017\nT001141018\nT001141019\nT001141020\nT001141021\nT001141022\nT001141023\nT001141024\nT001141025\nT001141026\nT001141027\nT001141028\nT001141029\nT001141030\nT001141031\nT001141032\nT001141033\nT001141034\nT001141035\nT001141036\nT001141037\nT001141038\nT001141039\nT001141040\nT001141041\nT001141042\nT001141043\nT001141044\nT001141045\nT001141046\nT001141047\nT001141048\nT001141049\nT001141050\n\n\n\n\nNA\nNA\nNA\nNA\n　人口（総数）\n　人口（総数）　男\n　人口（総数）　女\n　０〜１４歳人口　総数\n　０〜１４歳人口　男\n　０〜１４歳人口　女\n　１５歳以上人口　総数\n　１５歳以上人口　男\n　１５歳以上人口　女\n　１５〜６４歳人口　総数\n　１５〜６４歳人口　男\n　１５〜６４歳人口　女\n　１８歳以上人口　総数\n　１８歳以上人口　男\n　１８歳以上人口　女\n　２０歳以上人口　総数\n　２０歳以上人口　男\n　２０歳以上人口　女\n　６５歳以上人口　総数\n　６５歳以上人口　男\n　６５歳以上人口　女\n　７５歳以上人口　総数\n　７５歳以上人口　男\n　７５歳以上人口　女\n　８５歳以上人口　総数\n　８５歳以上人口　男\n　８５歳以上人口　女\n　９５歳以上人口　総数\n　９５歳以上人口　男\n　９５歳以上人口　女\n　外国人人口　総数\n　外国人人口　男\n　外国人人口　女\n　世帯総数\n　一般世帯数\n　１人世帯数　一般世帯数\n　２人世帯数　一般世帯数\n　３人世帯数　一般世帯数\n　４人世帯数　一般世帯数\n　５人世帯数　一般世帯数\n　６人世帯数　一般世帯数\n　７人以上世帯数　一般世帯数\n　親族のみの世帯数　一般世帯数\n　核家族世帯数　一般世帯数\n　核家族以外の世帯数　一般世帯数\n　６歳未満世帯員のいる世帯数　一般世帯数\n　６５歳以上世帯員のいる世帯数　一般世帯数\n　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\n　高齢単身世帯数　一般世帯数\n　高齢夫婦世帯数　一般世帯数\n\n\n362257353\n0\nNA\nNA\n29\n15\n14\n5\n2\n3\n24\n13\n11\n19\n11\n8\n23\n12\n11\n23\n12\n11\n5\n2\n3\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n16\n16\n10\n1\n4\n0\n1\n0\n0\n6\n4\n2\n1\n4\n1\n1\n0\n\n\n362257354\n0\nNA\nNA\n96\n91\n5\n0\n0\n0\n96\n91\n5\n96\n91\n5\n96\n91\n5\n96\n91\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n362257381\n0\nNA\nNA\n101\n46\n55\n24\n9\n15\n77\n37\n40\n54\n27\n27\n76\n36\n40\n76\n36\n40\n23\n10\n13\n5\n1\n4\n4\n1\n3\n1\n0\n1\n0\n0\n0\n39\n39\n11\n8\n8\n10\n2\n0\n0\n28\n24\n4\n8\n16\n1\n4\n3\n\n\n362257382\n0\nNA\nNA\n28\n16\n12\n1\n0\n1\n27\n16\n11\n19\n13\n6\n27\n16\n11\n27\n16\n11\n8\n3\n5\n6\n3\n3\n0\n0\n0\n0\n0\n0\n2\n1\n1\n18\n18\n11\n4\n3\n0\n0\n0\n0\n7\n6\n1\n0\n5\n1\n1\n2\n\n\n362257451\n0\nNA\nNA\n117\n59\n58\n20\n13\n7\n97\n46\n51\n70\n34\n36\n96\n46\n50\n96\n46\n50\n27\n12\n15\n14\n4\n10\n5\n0\n5\n0\n0\n0\n0\n0\n0\n58\n58\n25\n18\n10\n1\n2\n2\n0\n32\n25\n7\n3\n22\n0\n7\n4\n\n\n\n\n\n\n\n\n\n\nこれを見てみると、1行目には特に意味がなく、2行目が列名になっていることが分かります。\nそこで、1行目をスキップして読み込むために、read_csv()内でskipを指定します。\n\ntest_skip1 &lt;- read_csv(here(\"data/census_2020/tblT001141H3622.txt\"), skip = 1, \n                       locale = locale(encoding = \"Shift_JIS\"))\n\n\nhead(test_skip1)\n\n\n\n\n\n表 2: 1行目をスキップ\n\n\n\n\n\n\n\n\n\n...1\n...2\n...3\n...4\n　人口（総数）\n　人口（総数）　男\n　人口（総数）　女\n　０〜１４歳人口　総数\n　０〜１４歳人口　男\n　０〜１４歳人口　女\n　１５歳以上人口　総数\n　１５歳以上人口　男\n　１５歳以上人口　女\n　１５〜６４歳人口　総数\n　１５〜６４歳人口　男\n　１５〜６４歳人口　女\n　１８歳以上人口　総数\n　１８歳以上人口　男\n　１８歳以上人口　女\n　２０歳以上人口　総数\n　２０歳以上人口　男\n　２０歳以上人口　女\n　６５歳以上人口　総数\n　６５歳以上人口　男\n　６５歳以上人口　女\n　７５歳以上人口　総数\n　７５歳以上人口　男\n　７５歳以上人口　女\n　８５歳以上人口　総数\n　８５歳以上人口　男\n　８５歳以上人口　女\n　９５歳以上人口　総数\n　９５歳以上人口　男\n　９５歳以上人口　女\n　外国人人口　総数\n　外国人人口　男\n　外国人人口　女\n　世帯総数\n　一般世帯数\n　１人世帯数　一般世帯数\n　２人世帯数　一般世帯数\n　３人世帯数　一般世帯数\n　４人世帯数　一般世帯数\n　５人世帯数　一般世帯数\n　６人世帯数　一般世帯数\n　７人以上世帯数　一般世帯数\n　親族のみの世帯数　一般世帯数\n　核家族世帯数　一般世帯数\n　核家族以外の世帯数　一般世帯数\n　６歳未満世帯員のいる世帯数　一般世帯数\n　６５歳以上世帯員のいる世帯数　一般世帯数\n　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\n　高齢単身世帯数　一般世帯数\n　高齢夫婦世帯数　一般世帯数\n\n\n\n\n362257353\n0\nNA\nNA\n29\n15\n14\n5\n2\n3\n24\n13\n11\n19\n11\n8\n23\n12\n11\n23\n12\n11\n5\n2\n3\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n16\n16\n10\n1\n4\n0\n1\n0\n0\n6\n4\n2\n1\n4\n1\n1\n0\n\n\n362257354\n0\nNA\nNA\n96\n91\n5\n0\n0\n0\n96\n91\n5\n96\n91\n5\n96\n91\n5\n96\n91\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n362257381\n0\nNA\nNA\n101\n46\n55\n24\n9\n15\n77\n37\n40\n54\n27\n27\n76\n36\n40\n76\n36\n40\n23\n10\n13\n5\n1\n4\n4\n1\n3\n1\n0\n1\n0\n0\n0\n39\n39\n11\n8\n8\n10\n2\n0\n0\n28\n24\n4\n8\n16\n1\n4\n3\n\n\n362257382\n0\nNA\nNA\n28\n16\n12\n1\n0\n1\n27\n16\n11\n19\n13\n6\n27\n16\n11\n27\n16\n11\n8\n3\n5\n6\n3\n3\n0\n0\n0\n0\n0\n0\n2\n1\n1\n18\n18\n11\n4\n3\n0\n0\n0\n0\n7\n6\n1\n0\n5\n1\n1\n2\n\n\n362257451\n0\nNA\nNA\n117\n59\n58\n20\n13\n7\n97\n46\n51\n70\n34\n36\n96\n46\n50\n96\n46\n50\n27\n12\n15\n14\n4\n10\n5\n0\n5\n0\n0\n0\n0\n0\n0\n58\n58\n25\n18\n10\n1\n2\n2\n0\n32\n25\n7\n3\n22\n0\n7\n4\n\n\n362257452\n1\nNA\n362257454\n348\n182\n166\n85\n41\n44\n273\n149\n124\n214\n118\n96\n271\n148\n123\n269\n148\n121\n59\n31\n28\n23\n10\n13\n11\n3\n8\n0\n0\n0\n0\n0\n0\n162\n162\n86\n34\n19\n15\n10\n5\n1\n80\n72\n8\n26\n43\n12\n18\n9\n\n\n\n\n\n\n\n\n\n\nこの後必要な列をセレクトして名前を付け直すので、ここで一旦列名を確認してみましょう。\n\ncolnames(test_skip1)\n\n [1] \"...1\"                                                \n [2] \"...2\"                                                \n [3] \"...3\"                                                \n [4] \"...4\"                                                \n [5] \"　人口（総数）\"                                      \n [6] \"　人口（総数）　男\"                                  \n [7] \"　人口（総数）　女\"                                  \n [8] \"　０〜１４歳人口　総数\"                              \n [9] \"　０〜１４歳人口　男\"                                \n[10] \"　０〜１４歳人口　女\"                                \n[11] \"　１５歳以上人口　総数\"                              \n[12] \"　１５歳以上人口　男\"                                \n[13] \"　１５歳以上人口　女\"                                \n[14] \"　１５〜６４歳人口　総数\"                            \n[15] \"　１５〜６４歳人口　男\"                              \n[16] \"　１５〜６４歳人口　女\"                              \n[17] \"　１８歳以上人口　総数\"                              \n[18] \"　１８歳以上人口　男\"                                \n[19] \"　１８歳以上人口　女\"                                \n[20] \"　２０歳以上人口　総数\"                              \n[21] \"　２０歳以上人口　男\"                                \n[22] \"　２０歳以上人口　女\"                                \n[23] \"　６５歳以上人口　総数\"                              \n[24] \"　６５歳以上人口　男\"                                \n[25] \"　６５歳以上人口　女\"                                \n[26] \"　７５歳以上人口　総数\"                              \n[27] \"　７５歳以上人口　男\"                                \n[28] \"　７５歳以上人口　女\"                                \n[29] \"　８５歳以上人口　総数\"                              \n[30] \"　８５歳以上人口　男\"                                \n[31] \"　８５歳以上人口　女\"                                \n[32] \"　９５歳以上人口　総数\"                              \n[33] \"　９５歳以上人口　男\"                                \n[34] \"　９５歳以上人口　女\"                                \n[35] \"　外国人人口　総数\"                                  \n[36] \"　外国人人口　男\"                                    \n[37] \"　外国人人口　女\"                                    \n[38] \"　世帯総数\"                                          \n[39] \"　一般世帯数\"                                        \n[40] \"　１人世帯数　一般世帯数\"                            \n[41] \"　２人世帯数　一般世帯数\"                            \n[42] \"　３人世帯数　一般世帯数\"                            \n[43] \"　４人世帯数　一般世帯数\"                            \n[44] \"　５人世帯数　一般世帯数\"                            \n[45] \"　６人世帯数　一般世帯数\"                            \n[46] \"　７人以上世帯数　一般世帯数\"                        \n[47] \"　親族のみの世帯数　一般世帯数\"                      \n[48] \"　核家族世帯数　一般世帯数\"                          \n[49] \"　核家族以外の世帯数　一般世帯数\"                    \n[50] \"　６歳未満世帯員のいる世帯数　一般世帯数\"            \n[51] \"　６５歳以上世帯員のいる世帯数　一般世帯数\"          \n[52] \"　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\"\n[53] \"　高齢単身世帯数　一般世帯数\"                        \n[54] \"　高齢夫婦世帯数　一般世帯数\"                        \n\n\nこれはトラップで、よく見ると変数名の前に全角スペースが空いています。列名を変更するときはここに注意しないと、謎のエラーに苛まれます。\n\n\n\nまとめて読み込む\nではファイルの中身を確認できたところで、ファイルをまとめて読み込みます。\n結論から言うと、コードは以下です。\n\n# 指定されたディレクトリ内のファイル名の文字ベクトルを生成\ncensus_files &lt;- list.files(here(\"data/census_2020\"),  # ファイルが入っているフォルダのパス\n                           pattern = \"\\\\.txt$\", full.names = TRUE)\n\n# lapplyで、ファイル一覧に対して読み込む関数を適用\ncensus_objects &lt;- lapply(\n  census_files, \n  function(file) {\n    census_obj &lt;- read_csv(file, locale = locale(encoding = \"Shift_JIS\"), skip = 1) |&gt; \n      # 使いたい列をセレクトする\n      select(1:4, \"　人口（総数）\", \"　０〜１４歳人口　総数\", \n             \"　１５〜６４歳人口　総数\", \"　６５歳以上人口　総数\") |&gt; \n      # 2列目が0であればデータがあり、1であれば他メッシュにデータを合算\n      filter(...2 == 0 | ...2 == 1) |&gt; \n      # 2, 3, 4列目はもう使わないので除く\n      select(-c(...2, ...3, ...4)) |&gt; \n      # 変数名は任意\n      rename(\n        KEY_CODE = ...1, \n        pop_total = \"　人口（総数）\", \n        pop_young = \"　０〜１４歳人口　総数\", \n        pop_working = \"　１５〜６４歳人口　総数\", \n        pop_old = \"　６５歳以上人口　総数\"\n      ) |&gt; \n      # 変数のクラスを指定\n      mutate(\n        KEY_CODE = as.character(KEY_CODE), \n        pop_total = as.numeric(pop_total), \n        pop_young = as.numeric(pop_young), \n        pop_working = as.numeric(pop_working), \n        pop_old = as.numeric(pop_old)\n      )\n  }\n) |&gt; \n  # 読み込んだデータをバインドする\n  bind_rows()\n\nポイントをいくつか挙げます。\nポイント\n\nlist.files()\n\n指定したフォルダ内の.txtで終わるファイルを取得しています。\n\nlapply()\n\n第1引数（1で取得したファイル）に対し、第2引数（function）を適用します。\nfunctionでは、ファイルの読み込みや変数名の変更など、いくつかの作業をして結果を返すよう指示しています。\n\nfilter(...2 == 0 | ...2 == 1)\n\n...2はもともとHTKSYORI（秘匿処理）という列名でした。これが0であると秘匿対象外（秘匿になっていない）であり、データが存在します。1だと合算先地域メッシュで、そのメッシュにはデータがないものの、ルールに基づいていずれかのメッシュにデータが合算されており、これを抜くと総数が減る場合があります。2。\n逆に秘匿対象だと 表 3 のようになります。\nフィルターをかけてデータがあるところを抽出します。\n\n\n\n\n\n\n表 3: データがアスタリスクで置き換えられています。\n\n\n\n\n\n\n\n\n\n...1\n...2\n...3\n...4\n　人口（総数）\n　人口（総数）　男\n　人口（総数）　女\n　０〜１４歳人口　総数\n　０〜１４歳人口　男\n　０〜１４歳人口　女\n　１５歳以上人口　総数\n　１５歳以上人口　男\n　１５歳以上人口　女\n　１５〜６４歳人口　総数\n　１５〜６４歳人口　男\n　１５〜６４歳人口　女\n　１８歳以上人口　総数\n　１８歳以上人口　男\n　１８歳以上人口　女\n　２０歳以上人口　総数\n　２０歳以上人口　男\n　２０歳以上人口　女\n　６５歳以上人口　総数\n　６５歳以上人口　男\n　６５歳以上人口　女\n　７５歳以上人口　総数\n　７５歳以上人口　男\n　７５歳以上人口　女\n　８５歳以上人口　総数\n　８５歳以上人口　男\n　８５歳以上人口　女\n　９５歳以上人口　総数\n　９５歳以上人口　男\n　９５歳以上人口　女\n　外国人人口　総数\n　外国人人口　男\n　外国人人口　女\n　世帯総数\n　一般世帯数\n　１人世帯数　一般世帯数\n　２人世帯数　一般世帯数\n　３人世帯数　一般世帯数\n　４人世帯数　一般世帯数\n　５人世帯数　一般世帯数\n　６人世帯数　一般世帯数\n　７人以上世帯数　一般世帯数\n　親族のみの世帯数　一般世帯数\n　核家族世帯数　一般世帯数\n　核家族以外の世帯数　一般世帯数\n　６歳未満世帯員のいる世帯数　一般世帯数\n　６５歳以上世帯員のいる世帯数　一般世帯数\n　世帯主の年齢が２０〜２９歳の１人世帯数　一般世帯数\n　高齢単身世帯数　一般世帯数\n　高齢夫婦世帯数　一般世帯数\n\n\n\n\n372501694\n1\nNA\n372501594\n6\n3\n3\n0\n0\n0\n11\n4\n7\n4\n1\n3\n11\n4\n7\n11\n4\n7\n7\n3\n4\n7\n3\n4\n5\n2\n3\n1\n0\n1\n0\n0\n0\n3\n3\n1\n5\n0\n0\n0\n0\n0\n5\n5\n0\n0\n4\n0\n0\n3\n\n\n372502544\n0\nNA\nNA\n14\n7\n7\n2\n1\n1\n12\n6\n6\n2\n1\n1\n12\n6\n6\n12\n6\n6\n10\n5\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n6\n0\n5\n0\n1\n0\n0\n0\n6\n6\n0\n1\n5\n0\n0\n5\n\n\n372502553\n0\nNA\nNA\n14\n5\n9\n1\n0\n1\n13\n5\n8\n7\n3\n4\n12\n5\n7\n12\n5\n7\n6\n2\n4\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n6\n2\n1\n2\n1\n0\n0\n0\n4\n2\n2\n1\n4\n0\n1\n1\n\n\n372502603\n1\nNA\n372502503;372502701\n114\n50\n64\n9\n3\n6\n118\n56\n62\n53\n25\n28\n117\n56\n61\n117\n56\n61\n65\n31\n34\n42\n17\n25\n16\n3\n13\n5\n0\n5\n7\n1\n6\n62\n61\n33\n24\n8\n1\n2\n0\n0\n34\n31\n3\n2\n41\n1\n18\n11\n\n\n372502641\n0\nNA\nNA\n12\n8\n4\n0\n0\n0\n12\n8\n4\n4\n3\n1\n12\n8\n4\n12\n8\n4\n8\n5\n3\n2\n2\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n7\n7\n3\n3\n1\n0\n0\n0\n0\n4\n2\n2\n0\n4\n0\n1\n1\n\n\n372502643\n0\nNA\nNA\n93\n48\n45\n2\n0\n2\n91\n48\n43\n55\n30\n25\n88\n45\n43\n88\n45\n43\n36\n18\n18\n18\n8\n10\n7\n4\n3\n0\n0\n0\n1\n0\n1\n42\n42\n12\n18\n7\n1\n4\n0\n0\n30\n25\n5\n1\n25\n1\n6\n9\n\n\n\n\n\n\n\n\n\n\n\nrename()\n\n変数名を変更するときは、colnames()などで変数名を確認し、おかしなところはないか確認してから変えることをおすすめします（特に日本語列名の場合）。\n\nmutate()\n\nKEY_CODEは文字列にしたくて、その他は数値にしたいので、as.character()とas.numeric()で変換します。\nデータによっては、この手順を踏まなくても問題ないかもしれません。\n\nbind_rows()\n\nlapply()でそれぞれのファイルを読み込んだので、最後にすべてのデータを結合します。\n列名もそろえてあるので、問題なく結合できます。\n\n\nデータは次のようになります。\n\nhead(census_objects)\n\n\n\n\n\n表 4: クレンジング後\n\n\n\n\n\n\n\n\n\nKEY_CODE\npop_total\npop_young\npop_working\npop_old\n\n\n\n\n362257353\n29\n5\n19\n5\n\n\n362257354\n96\n0\n96\n0\n\n\n362257381\n101\n24\n54\n23\n\n\n362257382\n28\n1\n19\n8\n\n\n362257451\n117\n20\n70\n27\n\n\n362257452\n348\n85\n214\n59"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html#まとめ",
    "href": "tips/240622_census_cleansing/index.html#まとめ",
    "title": "国勢調査データのクレンジング",
    "section": "まとめ",
    "text": "まとめ\n今回は国勢調査のメッシュデータを使って、Rでデータクレンジングを行う方法をご紹介しました。\n複数年分のデータをまとめなければならないときなど、繰り返し作業をするときには特に重宝します。\n様々な場合で使えると思いますので、list.files()やlapply()をうまく使いながら効率的にデータをまとめていきましょう。"
  },
  {
    "objectID": "tips/240622_census_cleansing/index.html#footnotes",
    "href": "tips/240622_census_cleansing/index.html#footnotes",
    "title": "国勢調査データのクレンジング",
    "section": "注",
    "text": "注\n\n\nRプロジェクトを使用している場合は問題ありません。Rプロジェクトについてはこちらをご参照ください。↩︎\n2だと秘匿対象地域メッシュです。詳しくはe-Statの定義書から確認してください。↩︎"
  },
  {
    "objectID": "tips/240508_jupyter/index.html",
    "href": "tips/240508_jupyter/index.html",
    "title": "Quarto で Python を使ってみよう！",
    "section": "",
    "text": "注意\n\n\n\nこの記事は Windows ユーザー向けです。ただ、事前準備が異なるだけで、それ以降は Mac ユーザーの方でも参考になると思います。\n\n\nPython の環境構築って初心者にはなんだかめんどくさいですよね。私も Python はあまり使わないので、環境構築には苦労しています。\n今回はR Markdown に似ているでおなじみ（？）の Quarto を用いた、Python の環境構築の方法をご紹介します。\nAnaconda をインストールして Jupiter Notebook を使っている方も多いと思いますが、今回は Anaconda ではなく Quarto で Python を使ってみましょう。"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#はじめに",
    "href": "tips/240508_jupyter/index.html#はじめに",
    "title": "Quarto で Python を使ってみよう！",
    "section": "",
    "text": "注意\n\n\n\nこの記事は Windows ユーザー向けです。ただ、事前準備が異なるだけで、それ以降は Mac ユーザーの方でも参考になると思います。\n\n\nPython の環境構築って初心者にはなんだかめんどくさいですよね。私も Python はあまり使わないので、環境構築には苦労しています。\n今回はR Markdown に似ているでおなじみ（？）の Quarto を用いた、Python の環境構築の方法をご紹介します。\nAnaconda をインストールして Jupiter Notebook を使っている方も多いと思いますが、今回は Anaconda ではなく Quarto で Python を使ってみましょう。"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#quarto-とは",
    "href": "tips/240508_jupyter/index.html#quarto-とは",
    "title": "Quarto で Python を使ってみよう！",
    "section": "Quarto とは",
    "text": "Quarto とは\nQuarto は、RStudio のチームが開発している、R Markdown に似たドキュメント作成ツールです。R Markdown は R のためのドキュメント作成ツールですが、Quarto は Python や Julia など他の言語でも使えるようになっています。\nQuarto は、RStudio のチームが開発しているため、RStudio との親和性が高いです。RStudio と Quarto を組み合わせて使うことで、R と Python の両方を使ったドキュメント作成が可能になります1。"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#事前準備",
    "href": "tips/240508_jupyter/index.html#事前準備",
    "title": "Quarto で Python を使ってみよう！",
    "section": "事前準備",
    "text": "事前準備\n以前の記事で、Docker を使って環境構築する方法をご紹介しましたが、この記事を最初に読んでいる方に向けて、より簡単な手順で環境構築する方法をご紹介します。\n\n前提\n\nVSCode をインストールしていること\nWSL2, Ubuntu をインストールしていること\n\nUbuntu はデフォルトで Python がインストールされています。\n\n\nここまではそれほど難しくありませんので、まだの方はこちらの記事をご覧ください。\n\n\nWSL2 に接続\nVSCode を起動して、画面左下の &gt;&lt; マークをクリックして、「WSL への接続」を選択します。\n\n\n\nWSL2 に接続\n\n\n\n\nQuarto のインストール\n\n画面上部「ターミナル」から「新しいターミナル」を選択2し、ターミナルを開く\n以下のコマンドを入力して実行\n\nURL の部分は最新のものに変えてください。\nQuarto ホームページからプラットフォームが Ubuntu 18+/Debian 10+ であるダウンロードリンクを使用してください。\n\n\n\n\nbash\n\n# Quartoパッケージをダウンロード（URL は適宜更新）\nwget https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.554/quarto-1.4.554-linux-amd64.deb\n\n# パッケージをインストール（バージョン部分は適宜変更）\nsudo dpkg -i quarto-1.4.554-linux-amd64.deb\n\n\n\n\n\n\n\nDocker を使う場合\n\n\n\n\n\nDocker を使っている場合は、Dockerfile に以下のコマンドを追加してください。\n\n\nDockerfile\n\nRUN wget -O quarto.deb \"https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.553/quarto-1.4.553-linux-amd64.deb\" && \\\n    dpkg -i quarto.deb && \\\n    rm quarto.deb\n\nちなみに、私の記事で紹介しているテンプレートを使用される場合は、既にこのコマンドが追加されているので、追加する必要はありません。\n\n\n\nこれで Quarto のインストールは完了です。\n\n\n拡張機能の準備\n拡張機能の検索窓から、次の拡張機能をインストールしてください。\n\nquarto.quarto（Quarto）\nms-python.python（Python）\nms-toolsai.jupyter（Jupyter）"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#使ってみる",
    "href": "tips/240508_jupyter/index.html#使ってみる",
    "title": "Quarto で Python を使ってみよう！",
    "section": "使ってみる",
    "text": "使ってみる\n\n新しい Quarto ファイルを作成\n\n画面左上の「ファイル」から「新しいファイル」を選択、「Quarto Document」を選んで新規ファイルを作成します。\n\nCtrl + S でファイルを保存できます。保存する際に任意のフォルダに test.qmd などの名前で保存してください。\n\nyaml ヘッダーを次のように編集します。\n\n\n\nYAML ヘッダー\n\n---\ntitle: \"タイトル\"\nauthor: \"著者\"\nformat: html\njupyter: python3\n---\n\n\n以下のようにコードを書いてみましょう。\n\n\n\nQuarto\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n\nパッケージのインストール\n\n今回、numpy と matplotlib を使っているので、はじめにこれらをインストールしないとエラーが出ます。\nまた、実行する際に ModuleNotFoundError: が出たら、そのモジュールもインストールする必要があります3。\nターミナルから以下のコマンドを実行してください。\n\n\n\n\nbash\n\npip install numpy matplotlib nbformat nbclient\n\n\n実行\n\n画面右上のボタンの中から「Preview」を選択して、ファイルをレンダリングします。\n\n\n\n\n\n実行結果\n\n\nR を使うときと同様に、Python のコードを書いて実行することができました。"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#ちなみに",
    "href": "tips/240508_jupyter/index.html#ちなみに",
    "title": "Quarto で Python を使ってみよう！",
    "section": "ちなみに",
    "text": "ちなみに\nR ユーザーの私としては、エンジンは R Markdown と同じ Knitr を使っているので、基本的に R 環境に Python を混ぜるということになります。\nそのままでは R と Python が混在したコードは出力できません4が、reticulate パッケージを使うことで R を使っていても Python が混ざったコードを出力できます。\n例えばこの記事は R 環境で書いていますのでこのままでは Python を使えません。そこで reticulate パッケージをインストールします。\n\n\nR\n\ninstall.packages('reticulate')\n\nライブラリで読み込む必要はありません。\n先ほどのコードを書いてみると、\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n図 1: A line plot on a polar axis\n\n\n\n\n\n無事 図 1 が出力できました。\nこのように R と Python が混在していても出力できますので、必要に応じて使ってみてください。"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#まとめ",
    "href": "tips/240508_jupyter/index.html#まとめ",
    "title": "Quarto で Python を使ってみよう！",
    "section": "まとめ",
    "text": "まとめ\n今回は Quarto を使って Python の環境構築を行いました。\nAnaconda と比べると、Quarto はより柔軟で、R でも Python でも使えるのがメリットです。\nまた、書き方はほぼ R Markdown と同じなので、普段 R を使っている方にはすぐに慣れると思います。\nただし、R と Python を1つのファイルで併用する際には追加でパッケージのインストールが必要です。\n以上です。お疲れ様でした！"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#追記",
    "href": "tips/240508_jupyter/index.html#追記",
    "title": "Quarto で Python を使ってみよう！",
    "section": "追記",
    "text": "追記\n2024年5月16日：R と Python が混在したコードの出力について追加"
  },
  {
    "objectID": "tips/240508_jupyter/index.html#footnotes",
    "href": "tips/240508_jupyter/index.html#footnotes",
    "title": "Quarto で Python を使ってみよう！",
    "section": "注",
    "text": "注\n\n\n今回は Python がメインなので RStudio は使いませんが、普段 R を使う方はぜひ RStudio でも使ってみてください。↩︎\nショートカット：Ctrl + Shift + @↩︎\n今回は nbformat と nbclient が出ると思います。↩︎\nR では Knitr を使って Python では Jupyter を使うためです。↩︎"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html",
    "href": "tips/240802_quarto_markdown/index.html",
    "title": "【Quarto】マークダウンでできること！",
    "section": "",
    "text": "Quarto（別にR Markdownでも同じですが）ではマークダウン記法を使います。\n僕もRAブートキャンプでR Markdownと衝撃の出会い()を果たしてから早1年、途中Quartoに浮気しながらマークダウンについて勉強してきました（経済の勉強をしろ）。\nそこで、今回はマークダウンについてまとめます。これまでちょこちょこと紹介を挟みながらやってきましたが、今回は論文とかHTMLとか出力にこだわらず、ひたすらマークダウンについてまとめます。\n基本はQuarto公式ガイドに沿っていますが、なるべく使う順にまとめます。\n大前提として、改行したいときは1行空行を入れます。コード上で改行しても出力には反映されません。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#はじめに",
    "href": "tips/240802_quarto_markdown/index.html#はじめに",
    "title": "【Quarto】マークダウンでできること！",
    "section": "",
    "text": "Quarto（別にR Markdownでも同じですが）ではマークダウン記法を使います。\n僕もRAブートキャンプでR Markdownと衝撃の出会い()を果たしてから早1年、途中Quartoに浮気しながらマークダウンについて勉強してきました（経済の勉強をしろ）。\nそこで、今回はマークダウンについてまとめます。これまでちょこちょこと紹介を挟みながらやってきましたが、今回は論文とかHTMLとか出力にこだわらず、ひたすらマークダウンについてまとめます。\n基本はQuarto公式ガイドに沿っていますが、なるべく使う順にまとめます。\n大前提として、改行したいときは1行空行を入れます。コード上で改行しても出力には反映されません。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#見出し",
    "href": "tips/240802_quarto_markdown/index.html#見出し",
    "title": "【Quarto】マークダウンでできること！",
    "section": "見出し",
    "text": "見出し\nコード\n# Heading 1\n\n## Heading 2\n\n### Heading 3\n#の数によって見出しのレベルが決まります。基本は3段くらい使えば事足りると思いますが、それ以降もいけます。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#箇条書き",
    "href": "tips/240802_quarto_markdown/index.html#箇条書き",
    "title": "【Quarto】マークダウンでできること！",
    "section": "箇条書き",
    "text": "箇条書き\n2種類あります。順序なしリストと順序付きリストです。基本的には以下の書き方です。\n\n\n\n\n\n\n\nコード\n出力\n\n\n\n\n- 順序なし1\n    - スペース4つで2段目\n- 順序なし2\n    1. 2段目に順序付きを入れることも可\n\n順序なし1\n\nスペース4つで2段目\n\n順序なし2\n\n2段目に順序付きを入れることも可\n\n\n\n\n1. 順序付き1\n    1. 同様にスペース4つで2段目\n1. 順序付き2\n    - 2段目に順序なしを入れることも可\n\n順序付き1\n\n同様にスペース4つで2段目\n\n順序付き2\n\n2段目に順序なしを入れることも可\n\n\n\n\n\n本文では改行するのに空行が必要でしたが、箇条書きの場合空行は要りません1。順序付きリストの場合、全ての行頭を1.で揃えることで、自動的に番号を振ってくれます。0から始めたければ全て0.で書けば大丈夫です。\n間にコード等を挟む場合は空行を入れた方が見やすいかもですね。また、間にコードや図などを挟むと連続番号がリセットされるので、その場合は手動で振る方が簡単かもしれません。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#図",
    "href": "tips/240802_quarto_markdown/index.html#図",
    "title": "【Quarto】マークダウンでできること！",
    "section": "図",
    "text": "図\n![パソコンを笑顔でいじっている人](computer_man4_laugh.png)\n\n\n\nパソコンを笑顔でいじっている人\n\n\nご覧の通り、[ ]の中は図のキャプションで、( )の中はファイル名です。ファイル名のところは、必要に応じてパスを追加してください2。例えば、今コードがあるところにimageというフォルダがあって、その中にcomputer_man4_laugh.pngがある場合は、(image/computer_man4_laugh.png)とする必要があります。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#数式",
    "href": "tips/240802_quarto_markdown/index.html#数式",
    "title": "【Quarto】マークダウンでできること！",
    "section": "数式",
    "text": "数式\n基本的には\\(\\LaTeX\\)表記です。$$で数式を挟むことで数式を挿入できます。\n$$\nY_{it} = \\beta (Treat \\times Post)_{it} + \\gamma_i + \\delta_t + \\varepsilon_{it}\n$$\n\\[\nY_{it} = \\beta (Treat \\times Post)_{it} + \\gamma_i + \\delta_t + \\varepsilon_{it}\n\\]\n文中に\\(Y = 5X\\)のように式を入れたい場合は、ドルマーク1つで$Y = 5X$とすればOKです。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#リンク",
    "href": "tips/240802_quarto_markdown/index.html#リンク",
    "title": "【Quarto】マークダウンでできること！",
    "section": "リンク",
    "text": "リンク\n[Yosuke Abe](https://yo5uke.github.io/)\nYosuke Abe\n[ ]でタイトルを囲んで( )内にリンクを記述します。\nURLをそのまま表示したいときは次のようにします。\n&lt;https://yo5uke.github.io/&gt;\nhttps://yo5uke.github.io/"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#脚注",
    "href": "tips/240802_quarto_markdown/index.html#脚注",
    "title": "【Quarto】マークダウンでできること！",
    "section": "脚注",
    "text": "脚注\nこれは本文^[これは脚注]\nこれは本文3\n脚注にもいろいろな書き方はあるのですが、これは脚注番号を自動で振ってくれるので、番号を気にせず書けておすすめです。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#コード",
    "href": "tips/240802_quarto_markdown/index.html#コード",
    "title": "【Quarto】マークダウンでできること！",
    "section": "コード",
    "text": "コード\n普通に実行する場合は通常のチャンクで問題ありませんが、実行はせずコードだけ示したいこともあるかと思います。その場合は次の書き方でできます。\n``` r\nplot(cars)\n```\n通常のチャンクではrの部分は{r}となっていると思いますが、{ }を外すことで言語を指定しつつコードのみを提示できます。また、\n\n\nここがfilename\n\nplot(cars)\n\nこのようにfilenameを付けたい場合は、\n``` {.r filename=\"ここがfilename\"}\nplot(cars)\n```\nとすることで可能です。{.r}はrと同じです。コードのみを表示します。\n文中にコードを入れる場合は、`で挟むとできます。`plot(cars)`のように書きます。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#改ページ",
    "href": "tips/240802_quarto_markdown/index.html#改ページ",
    "title": "【Quarto】マークダウンでできること！",
    "section": "改ページ",
    "text": "改ページ\nページ1\n\n{{&lt; pagebreak &gt;}}\n\nページ2\nまたは、\\(\\LaTeX\\)を使っている場合は\\newpageでもできます。\\pagebreakでもできます。二つは微妙に異なるので、違いはググってみてください。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#calloutブロック",
    "href": "tips/240802_quarto_markdown/index.html#calloutブロック",
    "title": "【Quarto】マークダウンでできること！",
    "section": "Calloutブロック",
    "text": "Calloutブロック\n\n\n\n\n\n\nこれがcalloutブロック\n\n\n\nこれを入れるためには、以下のように書きます。\n\n\n::: {.callout-note}\n## ここがキャプションです。\n\n`note`の他に、`tip`、`warning`、`caution`、そして`important`があります。\n:::\n{.callout-note}の部分を{.callout-note collapse=true}にすると折りたたみ可能なブロックになります。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#参考文献",
    "href": "tips/240802_quarto_markdown/index.html#参考文献",
    "title": "【Quarto】マークダウンでできること！",
    "section": "参考文献",
    "text": "参考文献\nZotero等を使ってreferences.bibファイル4を作成し、コードと同じディレクトリに置いてあるとします。\nYAMLヘッダーで次のように設定します。\n---\ntitle: \"Title\"\nauthor: \"Author\"\nformat: pdf\nbibliography: references.bib\n---\n.bibファイルの中身は次のようになっているので、本文中で@lamport1994latexと書けば本文内で参照できます。\n@article{lamport1994latex,\n  title={LaTeX: A Document Preparation System},\n  author={Lamport, Leslie},\n  journal={Addison-Wesley},\n  year={1994},\n  volume={2}\n}"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#おわりに",
    "href": "tips/240802_quarto_markdown/index.html#おわりに",
    "title": "【Quarto】マークダウンでできること！",
    "section": "おわりに",
    "text": "おわりに\nここまで個人的によく使うマークダウン記法についてまとめました。\n僕自身もいろいろ書いていく中で使うものが出てくると思うので、適宜追記していきます。"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#参考",
    "href": "tips/240802_quarto_markdown/index.html#参考",
    "title": "【Quarto】マークダウンでできること！",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nQuarto公式ガイド"
  },
  {
    "objectID": "tips/240802_quarto_markdown/index.html#footnotes",
    "href": "tips/240802_quarto_markdown/index.html#footnotes",
    "title": "【Quarto】マークダウンでできること！",
    "section": "注",
    "text": "注\n\n\nもちろん入れても大丈夫です。↩︎\nパスの説明は文面で書くにはやや長くなりそうなので、こちらなどを参考にしてください。↩︎\nこれは脚注↩︎\nファイル名は何でも大丈夫ですよ。↩︎"
  },
  {
    "objectID": "tips/240917_pivot/index.html",
    "href": "tips/240917_pivot/index.html",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る",
    "section": "",
    "text": "今回はtidyrのpivot_longer()を使ってワイド形式のデータをロング形式にする方法をご紹介します。"
  },
  {
    "objectID": "tips/240917_pivot/index.html#はじめに",
    "href": "tips/240917_pivot/index.html#はじめに",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る",
    "section": "",
    "text": "今回はtidyrのpivot_longer()を使ってワイド形式のデータをロング形式にする方法をご紹介します。"
  },
  {
    "objectID": "tips/240917_pivot/index.html#使用するパッケージ",
    "href": "tips/240917_pivot/index.html#使用するパッケージ",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る",
    "section": "使用するパッケージ",
    "text": "使用するパッケージ\ntidyverseを使用します。tidyverseにはdplyrやtidyrをはじめとした諸パッケージが含まれているので、一括でやるのが便利で僕は好きです。\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "tips/240917_pivot/index.html#データの準備",
    "href": "tips/240917_pivot/index.html#データの準備",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る",
    "section": "データの準備",
    "text": "データの準備\n今回は適当に作成していきます。\n\ndf &lt;- tibble(\n  Region_id = 1:2, \n  Region = c(\"Region1\", \"Region2\"),\n  Income_2000 = c(40000, 35000),\n  Income_2005 = c(42000, 37000),\n  Income_2010 = c(45000, 39000),\n  Population_2000 = c(500000, 450000),\n  Population_2005 = c(520000, 460000),\n  Population_2010 = c(540000, 470000)\n)\n\n\n\n\n\n表 1: ワイド形式のパネルデータ\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Region_id\n                Region\n                Income_2000\n                Income_2005\n                Income_2010\n                Population_2000\n                Population_2005\n                Population_2010\n              \n        \n        \n        \n                \n                  1\n                  Region1\n                  40000\n                  42000\n                  45000\n                  500000\n                  520000\n                  540000\n                \n                \n                  2\n                  Region2\n                  35000\n                  37000\n                  39000\n                  450000\n                  460000\n                  470000\n                \n        \n      \n    \n\n\n\n\n\n\n2つの地域について収入と人口のデータを作りました。\nポイントは、主要なデータにおいて変数名_年となっていることです。"
  },
  {
    "objectID": "tips/240917_pivot/index.html#pivot_longerを使う",
    "href": "tips/240917_pivot/index.html#pivot_longerを使う",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る",
    "section": "pivot_longer()を使う",
    "text": "pivot_longer()を使う\n一番ベーシックなやり方は次の通りです。\n\ndf_long &lt;- df |&gt; \n  pivot_longer(\n    cols = starts_with(c(\"Income_\", \"Population_\")), \n    names_to = c(\".value\", \"Year\"), \n    names_sep = \"_\"\n  )\n\ncolsではロング形式に変換したい変数を指定しています。dplyrのstarts_with()を使えば、複数年分の変数を一括で指定することができます。今回はIncome_とPopulation_で始まる変数という意味です。\nnames_toは新しい列名をどうするかを指定しています。names_sepで分割の区切りを指定しているのですが（この場合はアンダースコア）、その区切り前なら.value（すなわち、もとの名前のまま1）、区切り後はYearという列に格納するという意味です。\nできたデータフレームは次のようになります。\n\n\n\n\n表 2: ロング形式のパネルデータ\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Region_id\n                Region\n                Year\n                Income\n                Population\n              \n        \n        \n        \n                \n                  1\n                  Region1\n                  2000\n                  40000\n                  500000\n                \n                \n                  1\n                  Region1\n                  2005\n                  42000\n                  520000\n                \n                \n                  1\n                  Region1\n                  2010\n                  45000\n                  540000\n                \n                \n                  2\n                  Region2\n                  2000\n                  35000\n                  450000\n                \n                \n                  2\n                  Region2\n                  2005\n                  37000\n                  460000\n                \n                \n                  2\n                  Region2\n                  2010\n                  39000\n                  470000\n                \n        \n      \n    \n\n\n\n\n\n\nもし仮に、ロング形式に変換したい変数がすべてアンダースコアで区切られている場合2、cols = contain(\"_\")とすれば、変数が多くても一気に指定することができます。ただ今回の場合、Region_idがありますからうまくいきませんね。使える場面は限られそうです。"
  },
  {
    "objectID": "tips/240917_pivot/index.html#おわりに",
    "href": "tips/240917_pivot/index.html#おわりに",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る",
    "section": "おわりに",
    "text": "おわりに\n今回はワイド形式のデータフレームをロング形式に変換する方法をご紹介しました。\n僕自身pivot_longer()を使う時いつも何を指定すればいいんだっけ？となるので、備忘録的な意味合いが強いです😅\nご参考まで。"
  },
  {
    "objectID": "tips/240917_pivot/index.html#footnotes",
    "href": "tips/240917_pivot/index.html#footnotes",
    "title": "【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る",
    "section": "注",
    "text": "注\n\n\nこの場合ならIncomeやPopulation↩︎\n逆に言うと、ほかの変数はアンダースコアが用いられていない場合↩︎"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html",
    "href": "tips/240516_archived_pkg/index.html",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "",
    "text": "因果推論を勉強している人にはおなじみの Mixtape ですが、昨年勉強中にこの中の合成コントロール法の章でパッケージがインストールできない問題に直面しました。\nよく調べてみると、当時1 SCtools パッケージはアーカイブされてしまっており、install.packages('SCtools') ではインストールができないことが判明しました。\n現在2では復活してインストールできるようになっていますが、そんなときに備えて対処法をまとめます。"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html#はじめに",
    "href": "tips/240516_archived_pkg/index.html#はじめに",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "",
    "text": "因果推論を勉強している人にはおなじみの Mixtape ですが、昨年勉強中にこの中の合成コントロール法の章でパッケージがインストールできない問題に直面しました。\nよく調べてみると、当時1 SCtools パッケージはアーカイブされてしまっており、install.packages('SCtools') ではインストールができないことが判明しました。\n現在2では復活してインストールできるようになっていますが、そんなときに備えて対処法をまとめます。"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html#作業の流れ",
    "href": "tips/240516_archived_pkg/index.html#作業の流れ",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "作業の流れ",
    "text": "作業の流れ\n\nアーカイブされたパッケージを探す\nCRAN のアーカイブにアクセスして、アーカイブされたパッケージを探します。\n例えば当時アーカイブされていた SCtools を探すと、次のようになります。\n\nこの中で最新のものを右クリックし、リンクをコピーしてください。\n\n\nRStudio を開く\n続いて RStudio を開き、スクリプトに次のコードを入力してください。\n\n\nR\n\nurl &lt;- \"https://cran.r-project.org/src/contrib/Archive/SCtools/SCtools_0.3.2.tar.gz\"\npkgFile &lt;- \"SCtools_0.3.2.tar.gz\"\ndownload.file(url = url, destfile = pkgFile)\n\nここで URL はコピーしたものに変え、pkgFile は URL の最後の .tar.gz 部分をコピペしてください。\n実行するとエラーが出るかもしれませんが、それは依存しているパッケージがインストールされていないということです。エラーを読んでみて、足りなそうなパッケージを以下のコードの c() にまとめて入れて実行し、 改めて download.file() を実行してみてください。\n\n\nR\n\ninstall.packages(c(\"xxx\", \"yyy\", \"zzz\"))\n\nそしてパッケージをインストールします。次のコードを実行してください。\n\n\nR\n\ninstall.packages(pkgs=pkgFile, type=\"source\", repos=NULL)\n\n最後に以下を実行して下さい。\n\n\nR\n\nunlink(pkgFile)\n\n以上です。インストール出来たのではないでしょうか。"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html#おわりに",
    "href": "tips/240516_archived_pkg/index.html#おわりに",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "おわりに",
    "text": "おわりに\n備忘録的にアーカイブされたパッケージのインストール方法をまとめました。\n出会ってしまった際にはご活用ください。"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html#参考",
    "href": "tips/240516_archived_pkg/index.html#参考",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nstackoverflow\n\n\n\n\n\n\n\n\n\nCRANから消えた”Archived R package”をインストールしたい"
  },
  {
    "objectID": "tips/240516_archived_pkg/index.html#footnotes",
    "href": "tips/240516_archived_pkg/index.html#footnotes",
    "title": "【R】アーカイブされたパッケージを使う",
    "section": "注",
    "text": "注\n\n\n2023年秋↩︎\n2024年5月16日↩︎"
  },
  {
    "objectID": "tips/240515_rproj/index.html",
    "href": "tips/240515_rproj/index.html",
    "title": "【R】プロジェクトを使う",
    "section": "",
    "text": "R プロジェクトは、RStudio で作成できるプロジェクトです。プロジェクトを作成すると、プロジェクトのためのディレクトリが作成され、そのディレクトリ内で作業することになります。\nプロジェクトを作成すると、プロジェクトのための .Rproj ファイルが作成され、RStudio でそのファイルを開くことで、プロジェクトが開かれます。"
  },
  {
    "objectID": "tips/240515_rproj/index.html#r-プロジェクトについて",
    "href": "tips/240515_rproj/index.html#r-プロジェクトについて",
    "title": "【R】プロジェクトを使う",
    "section": "",
    "text": "R プロジェクトは、RStudio で作成できるプロジェクトです。プロジェクトを作成すると、プロジェクトのためのディレクトリが作成され、そのディレクトリ内で作業することになります。\nプロジェクトを作成すると、プロジェクトのための .Rproj ファイルが作成され、RStudio でそのファイルを開くことで、プロジェクトが開かれます。"
  },
  {
    "objectID": "tips/240515_rproj/index.html#作り方",
    "href": "tips/240515_rproj/index.html#作り方",
    "title": "【R】プロジェクトを使う",
    "section": "作り方",
    "text": "作り方\n\nRStudio を開く\n画面右上の  をクリックし、「New Project…」を選択\n\nここで、新しいディレクトリを作るか、既存のディレクトリに作るかを選択できます。\n新しくフォルダを作って作業をしたい場合は新しいディレクトリを、既にデータフォルダなどを含む作業ディレクトリがある場合は既存のディレクトリを選択します。\n新規ディレクトリの場合、特に目的が決まっていなければ「New Project」を選んでもらって大丈夫です。\n「Browse」より、プロジェクトを作成するディレクトリを選択します。\n既存のディレクトリを選択した場合、そのディレクトリ内に .Rproj ファイルが作成されます。\n\n\n\n自動でプロジェクトが開く\n\n右上を見てもらうと、プロジェクト名になっていることが分かると思います。\n\n\n2回目以降開くときは、同様に右上から「Open Project」を選ぶか、エクスプローラーもしくは Finder から .Rproj ファイルをダブルクリックして開くことができます。"
  },
  {
    "objectID": "tips/240515_rproj/index.html#プロジェクトの強みを活かす",
    "href": "tips/240515_rproj/index.html#プロジェクトの強みを活かす",
    "title": "【R】プロジェクトを使う",
    "section": "プロジェクトの強みを活かす",
    "text": "プロジェクトの強みを活かす\n\n強み\nプロジェクトの強みとして、そのディレクトリ内で作業が完結することが挙げられます。\nデータやソースコードは、プロジェクトのディレクトリ内に保存しておきましょう。その上で強みを発揮するのが、here パッケージを使った相対パスの指定です。\n例えば、次のようなディレクトリであるとします。\nproject-root/\n├── proj.Rproj\n├── code/\n│   ├── script1.R\n│   ├── script2.R\n│   └── utils/\n│       ├── helper1.R\n│       └── helper2.R\n└── data/\n    ├── raw/\n    │   ├── dataset1.csv\n    │   └── dataset2.csv\n    └── processed/\n        ├── processed1.csv\n        └── processed2.csv\nこのもとで話を進めます。\n\n\nhere パッケージ\nhere パッケージを使うと、.Rproj ファイルがあるディレクトリを基準として、相対パスを指定することができます。\nまずはインストールしましょう。\n\n\nR\n\ninstall.packages(\"here\")\n\n次に読み込みます。\n\n\nR\n\nlibrary(here)\n\n例えばここで、processed1.csv を使いたいとします。\nC: から始まるパスを指定していたのでは長いですし、setwd() でワーキングディレクトリを設定していたとしても、その都度設定するのも非効率です1。\nパッケージの主要関数である here() は、.Rproj があるディレクトリ起点とした相対パスを使用可能です。\n百聞は一見に如かずということで、次のコードをご覧ください。\n\n\nR\n\ndf &lt;- readr::read_csv(here(\"data/processed/processed1.csv\"))\n\n&lt;ポイント&gt;\n\n引数がデータのところで here() を使う\n.Rproj があるディレクトリからのパスを書く\nhere() 内ではダブルクォーテーションでパスを囲む\n\nこのようにすれば、フォルダの位置が PC 内で変わるなどの環境の変化に対応しながらコーディングができます。"
  },
  {
    "objectID": "tips/240515_rproj/index.html#おわりに",
    "href": "tips/240515_rproj/index.html#おわりに",
    "title": "【R】プロジェクトを使う",
    "section": "おわりに",
    "text": "おわりに\n今回はプロジェクトを使った環境のメリットと、here() パッケージをご紹介しました。ぜひ論文などのプロジェクトでは、R にもプロジェクトを作って作業してみてください。"
  },
  {
    "objectID": "tips/240515_rproj/index.html#footnotes",
    "href": "tips/240515_rproj/index.html#footnotes",
    "title": "【R】プロジェクトを使う",
    "section": "注",
    "text": "注\n\n\n共同研究を行うなら PC ごとに環境が異なりますから、なおさら非効率的です。↩︎"
  },
  {
    "objectID": "tips/240901_tex_live/index.html",
    "href": "tips/240901_tex_live/index.html",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "",
    "text": "LaTeX環境でまず思い浮かぶのがTeX Liveを用いたローカル環境です。\n本記事では設定方法を解説します。\nなかなかややこしいと思いますが、これできっとローカルでもTeXファイルをコンパイル（PDF化）できるはずです！\n現段階ではWindowsに対応した記事になっています。Mac版は今後更新します。\n基本的な内容は以下のページを参考にしています。\n\n\n\n\n\n\n【大学生向け】LaTeX完全導入ガイド Windows編 (2022年)\n\n\n\n簡潔に、かつ自分が設定して困った点を追記しています。\nまた、VSCodeはインストールしてある前提で進めます。"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#これぞ王道",
    "href": "tips/240901_tex_live/index.html#これぞ王道",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "",
    "text": "LaTeX環境でまず思い浮かぶのがTeX Liveを用いたローカル環境です。\n本記事では設定方法を解説します。\nなかなかややこしいと思いますが、これできっとローカルでもTeXファイルをコンパイル（PDF化）できるはずです！\n現段階ではWindowsに対応した記事になっています。Mac版は今後更新します。\n基本的な内容は以下のページを参考にしています。\n\n\n\n\n\n\n【大学生向け】LaTeX完全導入ガイド Windows編 (2022年)\n\n\n\n簡潔に、かつ自分が設定して困った点を追記しています。\nまた、VSCodeはインストールしてある前提で進めます。"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#インストーラーをダウンロード",
    "href": "tips/240901_tex_live/index.html#インストーラーをダウンロード",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "インストーラーをダウンロード",
    "text": "インストーラーをダウンロード\n以下のリンクよりインストーラーをダウンロードします。\nWindows：https://www.tug.org/texlive/acquire-netinstall.html\n開いたら最初に出てくるリンクのinstall-tl-windows.exeをクリックしてダウンロードします。\nダウンロードできたら開いてください。"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#インストールする",
    "href": "tips/240901_tex_live/index.html#インストールする",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "インストールする",
    "text": "インストールする\n開くと以下のようなメッセージが出るかもしれません。\n\n\n\n\n\nその場合、詳細情報＞実行で進むことができます。進めて問題ありません。\n\nInstallが選択された状態でNext&gt;\nInstallを選択\n\n数秒待つと新たなウィンドウが登場し、さらに待機すると以下の画面が出てくると思います。\n\n\n\n\n\nここで、一番下の「TeXworksをインストール」はとりあえず要らないので、チェックを外してください。\nさらに、左下の「高度な設定」に進みます。\n\n\n\n\n\nここでやることは2つです。\n\n「スキーム」を変更し、「basicスキーム（plainおよびlatex）」を選択します。\nその下の「追加コレクションの数」をカスタマイズし、言語で日本語と英語・米語を追加、さらに右列にある「LaTeX推奨パッケージ」を追加します。\n\nOKを押して戻るとスキームがまたカスタムスキームに戻っていますが、問題ありません。\nインストールを押してインストールしましょう。\nめちゃくちゃ時間がかかりますが、辛抱強く待ちましょう。不安になって中止とか押さないように！\nインストール画面のInstalling [001/399, ...]を見てもらえればわかると思いますが、約400個のパッケージをインストールしています。時間がかかるわけですね…。\n以下の画面になれば終わりなので、閉じるを押してください。"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#tex-live-managerを開く",
    "href": "tips/240901_tex_live/index.html#tex-live-managerを開く",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "TeX Live Managerを開く",
    "text": "TeX Live Managerを開く\nアプリ一覧からTeX Live Managerを開いてください。\n\n\n\n下から2番目のやつです。\n\n\n開いたら、「パッケージリスト」の中にある「未インストール」を選択します。選択すると別ウィンドウが出てきますので、読み込みが完了するまで待機し、完了したら閉じてください。\n検索窓でlatexmkを入力します。\n\n\n\n\n\nすると下に2つ候補が出てくるので、左側の丸をクリックして両方ともにチェックを入れます。\nウィンドウの真ん中右に「選択項目をインストール」があると思うので、チェックしたのちクリックしてください。"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#sumatra-pdfのダウンロード任意",
    "href": "tips/240901_tex_live/index.html#sumatra-pdfのダウンロード任意",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "Sumatra PDFのダウンロード（任意）",
    "text": "Sumatra PDFのダウンロード（任意）\n推奨する方：既定のPDFビュワーがAdobeの方\nTeXファイルを一度コンパイルするとPDFビュワーで開くことになるのですが、AdobeではPDFを開いたまま再度コンパイルをすることができません。一度コンパイルた後に修正したい場合、PDFファイルを一度閉じて再度コンパイルする必要があります。\nこの面倒さを回避するためには、Sumatra PDFのようなPDFビュワーをしようするのがよいです。このビュワーではPDFファイルを開いたまま追加のコンパイルをすることができます。\n以下のリンクからダウンロードページに行ってください。\nhttps://www.sumatrapdfreader.org/download-free-pdf-viewer\n自分の環境にあった（おそらくほとんどの人にとって一番上の）.exeファイルをダウンロードします。\nダウンロードしたファイルを開くとカラフルなウィンドウが開きますので、インストールしてください。とりあえずこれでOKです。\n既定にするかどうかはお任せします（僕はしてないです笑）。"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#諸々の設定",
    "href": "tips/240901_tex_live/index.html#諸々の設定",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "諸々の設定",
    "text": "諸々の設定\n\n.latexmkrc\n\n\n\n\n\n\n拡張子の表示\n\n\n\nエクスプローラーで拡張子（.pdfや.docsなど）が非表示になっている場合、表示する設定にしてください。エクスプローラー上部にある「表示」からさらに1番下の「表示」に進むと、「ファイル名拡張子」という項目があります。この項目にチェックを入れてください。\n\n\n\n\n\n\n\n次に、エクスプローラーを開いてください。\n開いたら左にあるバーの下部からPC&gt;Windows (C:)と進み、さらにユーザー&gt;[自分のユーザー名]と進みます1。\n左上の「新規作成」からテキストドキュメントを作成し、ファイル名は.txtもすべて消したうえで.latexmkrc.としてエンターを押します。最初と最後に.があるのを確認してください。\n作成の際には最初と最後にドットを入れますが、作成されたファイルでは最後のドットは消えています。\n\n\n\nできたファイルは`.latexmkrc`となっています。\n\n\n作成できたら開きます。何で開くか聞かれると思いますが、（何で開いてもよいのですが）VSCodeでよいと思います。\n開いたら以下の内容をコピペして保存し、閉じてください。\n\n\n.latexmkrc\n\n# 通常の LaTeX ドキュメントのビルドコマンド\n$latex = 'uplatex %O -kanji=utf8 -no-guess-input-enc -synctex=1 -interaction=nonstopmode %S';\n# pdfLaTeX のビルドコマンド\n$pdflatex = 'pdflatex %O -synctex=1 -interaction=nonstopmode %S';\n# LuaLaTeX のビルドコマンド\n$lualatex = 'lualatex %O -synctex=1 -interaction=nonstopmode %S';\n# XeLaTeX のビルドコマンド\n$xelatex = 'xelatex %O -no-pdf -synctex=1 -shell-escape -interaction=nonstopmode %S';\n# Biber, BibTeX のビルドコマンド\n$biber = 'biber %O --bblencoding=utf8 -u -U --output_safechars %B';\n$bibtex = 'upbibtex %O %B';\n# makeindex のビルドコマンド\n$makeindex = 'upmendex %O -o %D %S';\n# dvipdf のビルドコマンド\n$dvipdf = 'dvipdfmx %O -o %D %S';\n# dvipd のビルドコマンド\n$dvips = 'dvips %O -z -f %S | convbkmk -u &gt; %D';\n$ps2pdf = 'ps2pdf.exe %O %S %D';\n\n# PDF の作成方法を指定するオプション\n## $pdf_mode = 0; PDF を作成しない。\n## $pdf_mode = 1; $pdflatex を利用して PDF を作成。\n## $pdf_mode = 2; $ps2pdf を利用して .ps ファイルから PDF を作成。\n## pdf_mode = 3; $dvipdf を利用して .dvi ファイルから PDF を作成。\n## $pdf_mode = 4; $lualatex を利用して .dvi ファイルから PDF を作成。\n## $pdf_mode = 5; xdvipdfmx を利用して .xdv ファイルから PDF を作成。\n$pdf_mode = 4;\n\n# PDF viewer の設定\n$pdf_previewer = \"start %S\";  # \"start %S\": .pdf に関連付けられた既存のソフトウェアで表示する。\n\nここでは$pdf_previewer = \"start %S\"となっていますが、これは既定のPDFビュワーで開くという設定です。\n次に、先ほどインストールしたSumatra PDFで開く設定方法です。\n\n\n.latexmkec（Sumatra PDF ver.）\n\n\n\n\n\n\n隠しファイルの表示\n\n\n\n以下の設定をする場合は隠しファイルを表示する設定にする必要があります。先ほどの拡張子を表示する設定の下に「隠しファイル」という項目がありますので、そこにチェックを入れてください2。\n\n\n内容は上のとほとんど同じです。Sumatra PDFで開くために、次のことを確認してください。\n\nエクスプローラーを開く\n先ほど.latexmkrcファイルを作成したディレクトリの上の方にAppDataがあるのでダブルクリック\nLocal&gt;SumatraPDFと進む\nSumatraPDF.exeを右クリックし、パスのコピーを選択\n一番最後のイコールの後にペースト\n\n# 通常の LaTeX ドキュメントのビルドコマンド\n$latex = 'uplatex %O -kanji=utf8 -no-guess-input-enc -synctex=1 -interaction=nonstopmode %S';\n# pdfLaTeX のビルドコマンド\n$pdflatex = 'pdflatex %O -synctex=1 -interaction=nonstopmode %S';\n# LuaLaTeX のビルドコマンド\n$lualatex = 'lualatex %O -synctex=1 -interaction=nonstopmode %S';\n# XeLaTeX のビルドコマンド\n$xelatex = 'xelatex %O -no-pdf -synctex=1 -shell-escape -interaction=nonstopmode %S';\n# Biber, BibTeX のビルドコマンド\n$biber = 'biber %O --bblencoding=utf8 -u -U --output_safechars %B';\n$bibtex = 'upbibtex %O %B';\n# makeindex のビルドコマンド\n$makeindex = 'upmendex %O -o %D %S';\n# dvipdf のビルドコマンド\n$dvipdf = 'dvipdfmx %O -o %D %S';\n# dvipd のビルドコマンド\n$dvips = 'dvips %O -z -f %S | convbkmk -u &gt; %D';\n$ps2pdf = 'ps2pdf.exe %O %S %D';\n\n# PDF の作成方法を指定するオプション\n## $pdf_mode = 0; PDF を作成しない。\n## $pdf_mode = 1; $pdflatex を利用して PDF を作成。\n## $pdf_mode = 2; $ps2pdf を利用して .ps ファイルから PDF を作成。\n## pdf_mode = 3; $dvipdf を利用して .dvi ファイルから PDF を作成。\n## $pdf_mode = 4; $lualatex を利用して .dvi ファイルから PDF を作成。\n## $pdf_mode = 5; xdvipdfmx を利用して .xdv ファイルから PDF を作成。\n$pdf_mode = 4;\n\n# PDF viewer の設定\n$pdf_previewer = \n次のようになるはずです。\n$pdf_previewer = \"C:\\Users\\ユーザー名\\AppData\\Local\\SumatraPDF\\SumatraPDF.exe\"\nしかしこれで終わりではありません。最後に、パス内のバックスラッシュを二重にする必要があります！\n最終的には次のようになります。\n$pdf_previewer = \"C:\\\\Users\\\\ユーザー名\\\\AppData\\\\Local\\\\SumatraPDF\\\\SumatraPDF.exe\"\nこのコードをコピペしてユーザー名のところを自分のものに変えれば解決な気もしますね…笑\nこれでPDF出力の際にSumatra PDFで開かれるようになり、コンパイルのストレスが軽減されます。"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#vscodeでコンパイル",
    "href": "tips/240901_tex_live/index.html#vscodeでコンパイル",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "VSCodeでコンパイル",
    "text": "VSCodeでコンパイル\n\n\n\n\n\n\nはじめに\n\n\n\nまず、VSCodeを既に開いている場合、一度閉じて再度開いてください。TeX Liveの設定を反映させるためです。\n\n\n\n設定\n画面左の拡張機能アイコンを開き、検索窓にJames-Yu.latex-workshopを入力します。これがLaTeX用の拡張機能です。\nインストールしたら、VSCodeを再起動して設定を反映させます。\nここからの設定は以下の手順です。\n\n左下の「管理」（設定アイコン）から「設定」をクリック\n右上の「設定を開く」をクリック\n{ } の中に以下の内容をペースト、保存3\n\n\n\nsettings.json\n\n// 日本語文書で単語移動を使うため、助詞や読点、括弧を区切り文字として指定する\n    \"editor.wordSeparators\": \"./\\\\()\\\"'-:,.;&lt;&gt;~!@#$%^&*|+=[]{}`~?　、。「」【】『』（）！？てにをはがのともへでや\",\n\n    // 設定: LaTeX Workshop\n\n    // LaTeX Workshop ではビルド設定を「Tool」と「Recipe」という2つで考える\n    //   Tool: 実行される1つのコマンド。コマンド (command) と引数 (args) で構成される\n    //   Recipe: Tool の組み合わわせを定義する。Tool の組み合わせ (tools) で構成される。\n    //           tools の中で利用される Tool は \"latex-workshop.latex.tools\" で定義されている必要がある。\n    \n    // latex-workshop.latex.tools: Tool の定義\n    \"latex-workshop.latex.tools\": [\n      \n        // latexmk を利用した lualatex によるビルドコマンド\n        {\n          \"name\": \"Latexmk (LuaLaTeX)\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-f\", \"-gg\", \"-pv\", \"-lualatex\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n          ]\n        },\n        // latexmk を利用した xelatex によるビルドコマンド\n        {\n          \"name\": \"Latexmk (XeLaTeX)\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-f\", \"-gg\", \"-pv\", \"-xelatex\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n          ]\n        },\n        // latexmk を利用した uplatex によるビルドコマンド\n        {\n          \"name\": \"Latexmk (upLaTeX)\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-f\", \"-gg\", \"-pv\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n          ]\n        },\n        // latexmk を利用した platex によるビルドコマンド\n        // 古い LaTeX のテンプレートを使いまわしている (ドキュメントクラスが jreport や jsreport ) 場合のため\n        {\n          \"name\": \"Latexmk (pLaTeX)\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-f\", \"-gg\", \"-pv\", \"-latex='platex'\", \"-latexoption='-kanji=utf8 -no-guess-input-env'\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n          ]\n        }\n    ],\n\n    // latex-workshop.latex.recipes: Recipe の定義\n    \"latex-workshop.latex.recipes\": [\n        // LuaLaTeX で書かれた文書のビルドレシピ\n        {\n          \"name\": \"LuaLaTeX\",\n          \"tools\": [\n            \"Latexmk (LuaLaTeX)\"\n          ]\n        },\n        // XeLaTeX で書かれた文書のビルドレシピ\n        {\n          \n          \"name\": \"XeLaTeX\",\n          \"tools\": [\n            \"Latexmk (XeLaTeX)\"\n          ]\n        },\n        // LaTeX(upLaTeX) で書かれた文書のビルドレシピ\n        {\n          \"name\": \"upLaTeX\",\n          \"tools\": [\n            \"Latexmk (upLaTeX)\"\n          ]\n        },\n        // LaTeX(pLaTeX) で書かれた文書のビルドレシピ\n        {\n          \"name\": \"pLaTeX\",\n          \"tools\": [\n            \"Latexmk (pLaTeX)\"\n          ]\n        },\n    ],\n\n    // latex-workshop.latex.magic.args: マジックコメント付きの LaTeX ドキュメントをビルドする設定\n    // '%!TEX' で始まる行はマジックコメントと呼ばれ、LaTeX のビルド時にビルドプログラムに解釈され、\n    // プログラムの挙動を制御する事ができる。\n    // 参考リンク: https://blog.miz-ar.info/2016/11/magic-comments-in-tex/\n    \"latex-workshop.latex.magic.args\": [\n      \"-f\", \"-gg\", \"-pv\", \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\"\n    ],\n\n    // latex-workshop.latex.clean.fileTypes: クリーンアップ時に削除されるファイルの拡張子\n    // LaTeX 文書はビルド時に一時ファイルとしていくつかのファイルを生成するが、最終的に必要となるのは\n    // PDF ファイルのみである場合などが多い。また、LaTeX のビルド時に失敗した場合、失敗時に生成された\n    // 一時ファイルの影響で、修正後のビルドに失敗してしまう事がよくある。そのため、一時的なファイルを\n    // 削除する機能 (クリーンアップ) が LaTeX Workshop には備わっている。\n    \"latex-workshop.latex.clean.fileTypes\": [\n        \"*.aux\", \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \"*.acr\", \"*.alg\", \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\", \"*.synctex.gz\",\n        // for Beamer files\n        \"_minted*\", \"*.nav\", \"*.snm\", \"*.vrb\",\n    ],\n\n    // latex-workshop.latex.autoClean.run: ビルド失敗時に一時ファイルのクリーンアップを行うかどうか\n    // 上記説明にもあったように、ビルド失敗時に生成された一時ファイルが悪影響を及ぼす事があるため、自動で\n    // クリーンアップがかかるようにしておく。\n\n    \"latex-workshop.latex.autoClean.run\": \"onBuilt\",\n\n    // latex-workshop.view.pdf.viewer: PDF ビューアの開き方\n    // VSCode 自体には PDF ファイルを閲覧する機能が備わっていないが、\n    // LaTeX Workshop にはその機能が備わっている。\n    // \"tab\" オプションを指定すると、今開いているエディタを左右に分割し、右側に生成されたPDFを表示するようにしてくれる\n    // この PDF ビュアーは LaTeX のビルドによって更新されると同期して内容を更新してくれる。\n    \"latex-workshop.view.pdf.viewer\": \"tab\",\n\n    // latex-workshop.latex.autoBuild.run: .tex ファイルの保存時に自動的にビルドを行うかどうか\n    // LaTeX ファイルは .tex ファイルを変更後にビルドしないと、PDF ファイル上に変更結果が反映されないため、\n    // .tex ファイルの保存と同時に自動的にビルドを実行する設定があるが、文書が大きくなるに連れてビルドにも\n    // 時間がかかってしまい、ビルドプログラムの負荷がエディタに影響するため、無効化しておく。\n    \"latex-workshop.latex.autoBuild.run\": \"never\",\n\n    \"[tex]\": {\n        // スニペット補完中にも補完を使えるようにする\n        \"editor.suggest.snippetsPreventQuickSuggestions\": false,\n        // インデント幅を2にする\n        \"editor.tabSize\": 2\n    },\n\n    \"[latex]\": {\n        // スニペット補完中にも補完を使えるようにする\n        \"editor.suggest.snippetsPreventQuickSuggestions\": false,\n        // インデント幅を2にする\n        \"editor.tabSize\": 2\n    },\n\n    \"[bibtex]\": {\n        // インデント幅を2にする\n        \"editor.tabSize\": 2\n    },\n\n\n    // ---------- LaTeX Workshop ----------\n\n    // 使用パッケージのコマンドや環境の補完を有効にする\n    \"latex-workshop.intellisense.package.enabled\": true,\n\n\n\nいよいよコンパイル\nエクスプローラー上で好きな場所にフォルダーを作っておきます。\nお試しなのでtestとかでよいと思います。\nVSCode上でウィンドウ左上の「ファイル」から「フォルダーを開く」をクリック、今作成したフォルダをクリックし、「選択」をクリックします。\n左上のTESTの右にある「ファイルを作成」をクリックし、test.texのような.texファイルを作成します。\n作成できたら、以下のようなサンプルコードを書いてみます。\n\\documentclass{ltjsarticle}\n\n\\title{日本語のLaTeX入門}\n\\author{あなたの名前}\n\\date{\\today}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{はじめに}\nLaTeXは、高品質な文書を作成するための強力なツールです。日本語でも簡単に利用することができます。\n\n\\section{基本的な書き方}\nLaTeXでは、文章をセクションやパラグラフに分けることができます。また、数式や図表の挿入も簡単に行えます。\n\n\\section{結論}\nLaTeXを使えば、美しい日本語の文書を作成することができます。ぜひ活用してみてください。\n\n\\end{document}\nファイルをCtrl + Sで保存したら、右上の緑の▷、ビルドボタンをクリックしてコンパイルしましょう！\nすると以下のようなSumatra PDFのウィンドウが出てくるのではないでしょうか。\n\n\n\n\n\nいい感じですね。そしたらSumatra PDFの魅力を感じるために、適当に内容を変え、再度コンパイルしてみてください。\nSumatra PDFを一度閉じなくても、修正されたPDFが出てくるのではないでしょうか。Adobeではこれができません。\n先ほど別にいっかーと思ってインストールしてなかった方、してみてはいかがでしょうか笑"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#エラーパッケージ不足",
    "href": "tips/240901_tex_live/index.html#エラーパッケージ不足",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "エラー：パッケージ不足",
    "text": "エラー：パッケージ不足\nいつかパッケージが足りなくてコンパイルできなくなることがあるかもしれません。\n次のようなエラーが出てきた場合、「Open compiler log」をクリックします。\n\n\n\n\n\nログを少し上に遡ると、例えば次のような文言が目に入ります。\n! LaTeX Error: File `type1cm.sty' not found.\nこれはtype1cmパッケージが足りていないことを指しています。\nそしたら最初の方で開いたTeX Live Managerを開き、latexmkの時と同様に未インストールを選択したうえで検索窓にtype1cmと入力します。\n出てきた項目にチェックを入れ、「選択項目をインストール」をクリックしてインストールしてください。\nこれでパッケージを補い、コンパイルできるはずです。まだ足りなかったら、同様の方法でインストールすることで対処できます。"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#最後に",
    "href": "tips/240901_tex_live/index.html#最後に",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "最後に",
    "text": "最後に\nこれで基本的なLaTeX環境の構築ができました。\n冒頭に紹介したサイトにかなり頼る形にはなりましたが、自分が詰まったところは改善して追記してあります。\n不明点があれば元サイトを参照していただくか、コメントをお願いします。"
  },
  {
    "objectID": "tips/240901_tex_live/index.html#footnotes",
    "href": "tips/240901_tex_live/index.html#footnotes",
    "title": "【王道】TeX Liveを使ってLaTeX環境を構築する",
    "section": "注",
    "text": "注\n\n\nOneDriveフォルダやダウンロードフォルダ、ビデオフォルダなどがあるところです。↩︎\n先ほどの画像を確認していただくと、「隠しファイル」にチェックが入っているのが確認できると思います。↩︎\n{ }は消さないでください。また、既に何か書き込まれている場合、前の内容の最後をカンマで区切り、改行したうえで貼り付けてください。↩︎"
  },
  {
    "objectID": "tips/240531_wsl_memory/index.html",
    "href": "tips/240531_wsl_memory/index.html",
    "title": "【WSL】割り当てるメモリを増やす方法",
    "section": "",
    "text": "WSL & Docker を使用していて、使えるメモリを増やしたい、そんな時にどうすればよいのか解説します。\n上にも書いてあるように、デフォルトでは PC の半分のメモリが WSL には割り当てられています。\nすなわちメモリが 8GB の PC であれば 4GB が、16GB の PC であれば 8GB が割り当てられています。\nプロジェクトによってはより多くのメモリを使いたいこともあると思うので、以下の方法を実行してみて下さい。\nちなみに Mac では Docker Desktop の設定から Resources で変更できます。"
  },
  {
    "objectID": "tips/240531_wsl_memory/index.html#はじめに",
    "href": "tips/240531_wsl_memory/index.html#はじめに",
    "title": "【WSL】割り当てるメモリを増やす方法",
    "section": "",
    "text": "WSL & Docker を使用していて、使えるメモリを増やしたい、そんな時にどうすればよいのか解説します。\n上にも書いてあるように、デフォルトでは PC の半分のメモリが WSL には割り当てられています。\nすなわちメモリが 8GB の PC であれば 4GB が、16GB の PC であれば 8GB が割り当てられています。\nプロジェクトによってはより多くのメモリを使いたいこともあると思うので、以下の方法を実行してみて下さい。\nちなみに Mac では Docker Desktop の設定から Resources で変更できます。"
  },
  {
    "objectID": "tips/240531_wsl_memory/index.html#手順",
    "href": "tips/240531_wsl_memory/index.html#手順",
    "title": "【WSL】割り当てるメモリを増やす方法",
    "section": "手順",
    "text": "手順\n\nエクスプローラーを開く\nc: → ユーザー → 自分のユーザー と進む\n\n僕の場合だったら C:\\Users\\yo5uk\n\n左上の「新規作成」から「テキストドキュメント」を選び、ファイル名を .wslconfig とする\n\n拡張子も全て消して名前を付けてください。.wslconfig.txt ではだめです。\nもし拡張子がデフォルトで表示されない設定の場合は、表示されるよう設定を変更してから行って下さい。\nエクスプローラー右上の「表示」→「表示」→「ファイル名拡張子」をオンにします。\n\nメモ帳など任意のテキストエディタで開く\n中身を以下のように記述\n\nGB の部分は好きに置き換えてください。\n8GB のPC を使っている場合には、もちろん 12GB は割り当てられません。\n\n\n[wsl2]\nmemory=12GB\nswap=8GB\n\n保存して閉じる\n\n以上です。これで WSL に割り当てられるメモリが増えました。\nちなみに memory は読んで字のごとくメモリを表しますが、ここでの swap は、WSL2 が使用するスワップファイルのサイズを設定することを意味します。スワップファイルを適切に設定することで、物理メモリが不足した場合でもシステムの安定性を維持することができます。"
  },
  {
    "objectID": "tips/240531_wsl_memory/index.html#おわりに",
    "href": "tips/240531_wsl_memory/index.html#おわりに",
    "title": "【WSL】割り当てるメモリを増やす方法",
    "section": "おわりに",
    "text": "おわりに\nWSL に割り当てるメモリを増やす方法をご紹介しました。\nプロジェクトによっては必要になることもあると思うので、ご参考まで。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html",
    "href": "tips/240629_write_thesis/index.html",
    "title": "【PDF】Quarto で論文を書く",
    "section": "",
    "text": "これまでの記事で R Markdown や Quarto を使って \\(\\LaTeX\\) 経由で PDF 出力する方法や、それらで使えるチャンクオプションについてご紹介してきました。\n\n\n\n\n\n\nR MarkdownでPDF出力【LaTeX】\n\n\n\n\n\n\n\n\n\n【Quarto】チャンクオプションまとめてみた【R Markdown】\n\n\n\n今回は、Quarto を使って論文を書く方法について包括的にまとめてみました。\nぜひ参考にしてみてください。\nまた、環境として RStudio を使用していると仮定します。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#はじめに",
    "href": "tips/240629_write_thesis/index.html#はじめに",
    "title": "【PDF】Quarto で論文を書く",
    "section": "",
    "text": "これまでの記事で R Markdown や Quarto を使って \\(\\LaTeX\\) 経由で PDF 出力する方法や、それらで使えるチャンクオプションについてご紹介してきました。\n\n\n\n\n\n\nR MarkdownでPDF出力【LaTeX】\n\n\n\n\n\n\n\n\n\n【Quarto】チャンクオプションまとめてみた【R Markdown】\n\n\n\n今回は、Quarto を使って論文を書く方法について包括的にまとめてみました。\nぜひ参考にしてみてください。\nまた、環境として RStudio を使用していると仮定します。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#準備",
    "href": "tips/240629_write_thesis/index.html#準備",
    "title": "【PDF】Quarto で論文を書く",
    "section": "準備",
    "text": "準備\nQuarto は R Markdown の亜種、と考えてもらえればと思います。マークダウン形式で記述することができ、\\(\\LaTeX\\) 記法を必ずしも用いる必要がないのが特徴です1。\\(\\LaTeX\\) を深く学ばなくてもスタイリッシュな論文が書けるのではないでしょうか。\nここからは、書くのに最低限必要な使い方を紹介します。\n\nプロジェクトの作成\n必須ではありませんが推奨します。プロジェクトを作成することで、ファイルの管理がしやすくなります。\nプロジェクトの作成については以下の記事で紹介しています。\\(\\LaTeX\\) との差別化点として、分析結果をそのまま埋め込めることがあげられ、プロジェクトを作成することで、その恩恵を最大限受けられると考えています。\n\n\n\n\n\n\n【R】プロジェクトを使う\n\n\n\n\n\nファイルの作成\nQuarto で論文を書くには、拡張子が .qmd のファイルを作成します。これは Quarto Markdown の略です。\nRStudio 画面左上の  をクリックし、「Quarto Document…」を選択します。\n以下のようにタイトルと著者名、PDF を選択し、Create をクリックします。“Use visual markdown editor” はオフにしてください2。\n\n作成出来たら、 でファイルを任意の場所に保存します3。\nもし Quarto や R Markdown を使うのが初めての場合、上部に “Package rmarkdown required but not installed. Install Don’t show again” というメッセージが表示されるかもしれません。その場合、“Install” をクリックしてインストールしてください。\n\n\nGlobal Options の設定\nRStudio 上部のメニューから “Tools” &gt; “Global Options…” を選択します。\nその中の “Sweave” を選択し、“Typeset LaTeX into PDF using:” で “XeLaTeX” を選択します。また、その下にある “Use tinytex when compiling .tex files” にチェックを入れます。\n最後に OK を押して閉じてください。\n\n\nヘッダーの記述\nファイルを作成すると、ドキュメントの上部に---で囲まれた部分があります。これを YAML ヘッダーと呼び、ここで文書の設定を行います。\n以下は、基本的なYAMLヘッダーの設定です。\n---\ntitle: \"【PDF】Quarto で論文を書く\"\nauthor: \"阿部洋輔\"\ndate: 2024-07-08  # todayで今日の日付にできます\ndate-format: \"YYYY年M月D日\" \nformat: \n  pdf: \n    documentclass: article\n    number-sections: true\n    include-in-header: \n      - text: |\n          \\usepackage{zxjatype}\n          \\usepackage[ipaex]{zxjafont} \n          # これらは日本語フォントの設定のために記述しています\nexecute: \n  echo: false  # コードを表示しない\n  warning: false # 警告とメッセージを表示しない\nlanguage: \n  crossref-fig-title: \"図\"\n  crossref-tbl-title: \"表\"\n  crossref-eq-prefix: \"式\"\n---\n分析コードや実行の際に表示されるメッセージ・警告は出力しなくてよいので false にしてあります。\nまた、デフォルトだと英語設定でキャプションが Table 1 や Figure 1 と表示されてしまうので、それを日本語に直すために language を追加しています。他にも自動で英語出力されてしまって困る際はこちらから該当するものを探し、下に追加していってください4。\nもちろん英語論文を執筆する際に日本語設定は不要です。\ndate-format についてはこちらを参考にしてください。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#本文の書き方マークダウン編",
    "href": "tips/240629_write_thesis/index.html#本文の書き方マークダウン編",
    "title": "【PDF】Quarto で論文を書く",
    "section": "本文の書き方（マークダウン編）",
    "text": "本文の書き方（マークダウン編）\n本文は Markdown で記述します。\\(\\LaTeX\\) 記法を使うこともできますが、必ずしも使う必要はありません。もちろん、数式などは \\(\\LaTeX\\) 記法を使うことができます。\n以下のコードは、基本的な書き方の例です。\n# 見出し1\n\n## 見出し2\n\n### 見出し3\n\n本文です。セクションに応じて見出しをつけることができます。基本的には3段階までの見出しを使います。\n\n- 箇条書き1\n\n    - 箇条書き2\n\n        - 箇条書き3\n\n箇条書きを使うときは、ハイフンとスペースを入れてください。2段階目、3段階目を使用するときは、半角スペース4つを入れてください。\n\n1. 番号付きリスト1\n\n    - 箇条書き\n\n2. 番号付きリスト2\n\n番号付きリストを使うときは、数字とピリオドとスペースを入れてください。\n\nまた、改行するときは空行を入れなければなりません。\n\n文中で数式を使いたいときは、`$` で囲んでください。例えば、$y = ax + b$ のように記述します。\n\n数式を別行で書きたいときは、`$$` で囲んでください。例えば、\n\n$$\ny = ax + b\n$$ {#eq-equation-name}\n\nのように記述します。数式にラベルをつけることもできます。`#eq-` の後にラベル名を記述します。\n\n数式を引用するときは、`@eq-equation-name` のように記述します。\n以上が基本的な書き方です。\nコードチャンクを使うときは、上記のように記述します。コードは YAML ヘッダーで echo: false としているので、出力されません。結果は出力されます5。\n出力された PDF はこちらから確認してください。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#本文の書き方テーブル編",
    "href": "tips/240629_write_thesis/index.html#本文の書き方テーブル編",
    "title": "【PDF】Quarto で論文を書く",
    "section": "本文の書き方（テーブル編）",
    "text": "本文の書き方（テーブル編）\nQuarto で論文を書くことの醍醐味ともいえる、コードとその出力について説明します。\nここではデフォルトで使用できる iris というデータセットを利用して分析、表の出力をしてみたいと思います。\n例えば以下のコードを実行すると 表 1 のように出力されます。\n#| label: tbl-regression\n#| tbl-cap: \"iris を使用した回帰分析\"\n\nlibrary(tidyverse)\nlibrary(fixest)\nlibrary(modelsummary)\nlibrary(tinytable)\n\n# リスト形式で保存すると複数の分析結果を1つの表に表示可能\nregression &lt;- list(\n  \"(1)\" = iris |&gt; \n    feols(Sepal.Length ~ Sepal.Width, se = \"hetero\"), \n  \"(2)\" = iris |&gt; \n    feols(Sepal.Length ~ Sepal.Width + Petal.Length, se = \"hetero\"), \n  \"(3)\" = iris |&gt; \n    feols(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, se = \"hetero\")\n)\n\n# ここで変数名の表記を変更\ncm &lt;- c(\n  \"Sepal.Width\" = \"がく片の幅（cm）\", \n  \"Petal.Length\" = \"花弁の長さ（cm）\", \n  \"Petal.Width\" =  \"花弁の幅（cm）\", \n  \"Species\" = \"アイリスの種類\"\n)\n\n# 表に加える統計量を整理\ngm &lt;- tibble(\n  \"raw\" = c(\"nobs\", \"r.squared\"), \n  \"clean\" = c(\"Observations\", \"R\\u00B2\"), \n  \"fmt\" = c(0, 2)\n)\n\n# フットノートを書く\nfn &lt;- \"注：標準誤差は括弧内に記載。+p &lt; 10%, *p &lt; 5%, **p &lt; 1%\"\n\nmsummary(regression, estimate = \"{estimate}{stars}\", \n         notes = fn, coef_map = cm, gof_map = gm, \n         stars = c(\"+\" = .1, \"*\" = .05, \"**\" = .01)) |&gt; \n  group_tt(j = list(\"がく片の長さ（cm）\" = 2:4))\n\n\n\n\n表 1: iris を使用した回帰分析\n\n\n\n \n\n  \n    \n    \n    tinytable_n7rgk1st5g9t2itiksmv\n    \n    \n    \n    \n  \n\n  \n    \n      \n        \n\n \nがく片の長さ（cm）\n\n        \n              \n                 \n                (1)\n                (2)\n                (3)\n              \n        \n        注：標準誤差は括弧内に記載。+p &lt; 10%, *p &lt; 5%, **p &lt; 1%\n        \n                \n                  がく片の幅（cm）\n                  -0.223 \n                  0.596**\n                  0.651** \n                \n                \n                                  \n                  (0.141)\n                  (0.065)\n                  (0.060) \n                \n                \n                  花弁の長さ（cm）\n                         \n                  0.472**\n                  0.709** \n                \n                \n                                  \n                         \n                  (0.017)\n                  (0.062) \n                \n                \n                  花弁の幅（cm）  \n                         \n                         \n                  -0.556**\n                \n                \n                                  \n                         \n                         \n                  (0.144) \n                \n                \n                  観測数          \n                  150    \n                  150    \n                  150     \n                \n                \n                  R²              \n                  0.01   \n                  0.84   \n                  0.86    \n                \n        \n      \n    \n\n    \n\n  \n\n\n\n\n\n\n\n出力された PDF はこちらから確認してください。\nまた、このサイトのフォント的に &lt;- や |&gt; と表示されていますが、それぞれ &lt; と -、| と &gt; になります。ご了承ください。\nここからは、表作成におけるポイントを説明します。\nテーブルにおけるポイント\n\nチャンクオプション\n\n#| で始まっている部分です。\nlabel は tbl- で始めることでテーブルにおけるラベルを付けられます。論文内で参照するときに必要です。@tbl-regression という書き方で論文内で参照できます。\ntbl-cap で表のキャプションを付けられます。\n\nライブラリ\n\ntidyverse：データハンドリングのために使用します。\nfixest：分析のために使用します。いろいろな分析用パッケージがありますが、とりあえずこれを使えば事足りることが多いと思います。あと速い。\nmodelsummary：分析結果を表示するために使用します。様々な分析用パッケージに対応しています。\ntinytable：modelsummary で作成した表をより細かく設定するために使います。\n\n分析モデルを格納\n\nリスト形式で保存します。こうすることによって複数の分析結果を modelsummary で1つの表に起こせます。\n\ncoef_map と gof_map 用の cm & gm\n\ncm6 は、分析で使用した変数名を書き換えて表に出すためのものです。\"Sepal.Width\" = \"がく片の幅（cm）\" は、 “Sepal.Width” という変数名を “がく片の幅（cm）” と表示することを意味します。\ngm は少し複雑です。コンソールで gof_map と打ってみると、raw, clean, fmt, omit の4列が出てきます。raw が表示する統計量、clean がそれらを表示するテキスト、fmt は小数点以下の桁数で、これらを gm で編集するということです7。\n“R\\u00B2” はユニコード文字で、2乗を \\(\\TeX\\) 上で表すために使用しています。\nfn はフットノートを書くためのものです。ここでは標準誤差の説明をしています。\n\n\n\n\n\ngof_map を実行するとこのように出てきます。\n\n\n\nmsummary\n\n分析結果を表示するための関数です。msummary は modelsummary の関数です8。ここでは、regression に格納した分析結果を表示しています。\nestimate で “{estimate}{stars}” と指定しています。これは推定値とその有意性を表示するためのものです。入れたパターンと入れないパターンで試してもらいたいのですが、有意性について別に脚注が入ってしまい、上で書いた脚注と合わせて2行になってしまうので、わざわざこの設定をしています。下の表を確認してください。\nnotes , coef_map , gof_map は上で設定したものを反映させています。\nstars は有意性の表示を設定しています。ここでは、+p &lt; 10%, *p &lt; 5%, **p &lt; 1% としています。\ngroup_tt は表のグルーピングを行うためのものです。ここでは、被説明変数が全て “がく片の長さ（cm）” なので、それをグルーピングしています。1列目は変数名にあたるので、2:4 としています。\ngroup_tt の引数 j は列のグルーピングで、i 引数は行のグルーピングに対応しています。\n\n\n\n\n\nestimate を指定しないとこのように脚注が2行になります。\n\n\n以上がテーブル作成のポイントです。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#本文の書き方フィギュア編",
    "href": "tips/240629_write_thesis/index.html#本文の書き方フィギュア編",
    "title": "【PDF】Quarto で論文を書く",
    "section": "本文の書き方（フィギュア編）",
    "text": "本文の書き方（フィギュア編）\n次に、フィギュアの出力について説明します。\nここでも iris データセットを使用してプロットしてみます。\n次のコードを実行すると、図 1 のような図が作成されます。\nlibrary(tidyverse)\n\np &lt;- iris |&gt; \n  ggplot(aes(x = Sepal.Length, y = Petal.Length)) + \n  geom_point() + \n  labs(x = \"がく片の長さ（cm）\", \n       y = \"花弁の長さ（cm）\") + \n  theme_minimal()\n\nggsave(\"iris_plot.pdf\", p, device = cairo_pdf)\n![iris を使用したプロット](iris_plot.pdf){#fig-iris}\n\n\n\n\n\n\n\n\n図 1: iris を使用したプロット\n\n\n\n\n\n出力された PDF はこちらから確認してください。\nここでもポイントを説明します。\nフィギュアにおけるポイント\n\nパイプを使用してプロット\n\nデータセットをパイプ（|&gt;）で ggplot に渡しています。これによって、変数が予測変換で出てくるので、作業がしやすくなります9。\n\nggplot\n\nggplot 内の aes で x 軸と y 軸を指定しています。\nggplot は + で繋げていくことでプロットを作成していきます。\n今回は散布図を作成したいので、geom_point() を繋げています。他にも折れ線の場合は geom_line() などを使います。\n\nlabs\n\nlabs で x 軸と y 軸のラベルを設定しています。\n\ntheme_minimal\n\ntheme_minimal は背景が白で、軸の線が薄いテーマです。他にも theme_bw, theme_classic などがあります。\n\n\n\n\n\n\n\n\nテーマについて\n\n\n\n\n\ntheme_minimal でテーマを大方設定できますが、それに加えて細かい設定をしたいこともあると思います。その場合は、 + で theme を繋げていくことで設定できます。ここでは theme の詳細については説明しませんが、繋げる際は、theme_minimal() + theme() という順番で繋げていくことをおすすめします。\n順番は逆でも構いませんが、theme() で設定したものが theme_minimal() で上書きされることがあるので、想定していたものと違う結果になることがあります。\n\n\n\n\nggsave\n\nggsave でプロットを保存しています。ここでは iris_plot.pdf という名前で保存しています。“iris_plot.pdf” の部分は任意の名前で構いません。また、パスを指定して保存することももちろんできます。here を使っている場合は、here(\"output/iris_plot.pdf\") などとして保存することができます10。\ndevice を cairo_pdf にしています。.png など他の形式でも出力できますが、環境によっては文字化けなどに大変苦しめられるので11、cairo_pdf がおすすめです。僕の環境では一番安定しました。\nちなみに、画像の解像度が上がるので、とりあえず一度保存するのがいいと思います。\n\nマークダウン表記で図を出力\n\n![iris を使用したプロット](iris_plot.pdf){#fig-iris} で図を出力しています。iris_plot.pdf の部分は保存したファイル名になります。{#fig-iris} はラベルを付けるためのものです。論文内で参照するときに必要です。@fig-iris という書き方で論文内で参照できます。\n\n\n\n\n\n\n\n\nパスの指定\n\n\n\n\n\n例えば画像を output というフォルダに保存しており、書いているコードは code フォルダにあるとします。すなわち以下のような形です。\nmain_directory/\n├── output/\n│   └── iris_plot.pdf\n└── code/\n    └── code.qmd\nこの場合、![iris を使用したプロット](iris_plot.pdf){#fig-iris} としても図が表示されません。その場合は、コードファイルからの相対パスを使用しなければなりません。すなわち ![iris を使用したプロット](../output/iris_plot.pdf){#fig-iris} としてください。../ は一つ上の階層を示しています。\n\n\n\nもちろん、既に所有している画像もマークダウン記法で出力することができます。その場合は、![画像の説明](画像のパス){#fig-label} のように記述します。キャプションは抜かせるので、![](画像のパス){#fig-label} としても構いません。\n以上がフィギュア作成のポイントです。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#まとめ",
    "href": "tips/240629_write_thesis/index.html#まとめ",
    "title": "【PDF】Quarto で論文を書く",
    "section": "まとめ",
    "text": "まとめ\nQuarto を使って論文を書く方法について説明しました。\n長くなってしまいましたが、現在 M2 の私自身も Quarto を使用して修士論文を書こうと思っているので、その際に必要な情報をまとめてみました。\nぜひ参考にしてみてください。"
  },
  {
    "objectID": "tips/240629_write_thesis/index.html#footnotes",
    "href": "tips/240629_write_thesis/index.html#footnotes",
    "title": "【PDF】Quarto で論文を書く",
    "section": "注",
    "text": "注\n\n\n直接 LaTeX コードを埋め込むこともできます。↩︎\n僕は使い方が分かりません。↩︎\n僕は基本的に code フォルダを作ってそこに保存しています。↩︎\n本当は lang: ja を設定するだけで万事解決のはずなのですが、パッケージのインストールでトラブるので、このような場当たり的な対処になっています。↩︎\n結果も隠したいときは、代わりに include: false を指定します。チャンクオプションについてはこちら↩︎\ngm もそうですが、名前は何でもよいです。↩︎\n“nobs”, “r.squared” の2つの項目を表示し、その表記を “観測数”, “\\(R^2\\)” とし、小数点以下は観測数がなし、\\(R^2\\) は第2位までにしています。↩︎\nmsummary でも modelsummary でも使用できます。↩︎\nggplot(iris, aes(~)) の形でも図は作れますが、変数名は予測変換で出てきません。↩︎\nhere についてはこちら↩︎\n僕の場合は Linux で苦労しました。↩︎"
  },
  {
    "objectID": "tips/240831_google_cloud_project/index.html",
    "href": "tips/240831_google_cloud_project/index.html",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "",
    "text": "以下の記事で紹介した開発コンテナですが、そのままやるとDVCの認証プロセスでエラーが出ます。\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\n\n\n\n認証を進めるとこのように出てきます。\n\n\nもしかすると今後対応されて何の問題もなく使えるようになるかもしれませんが、公式で推奨されているGoogle Cloud Projectを使えばこの問題に対処できるため、今回はその方法についてまとめていきます。"
  },
  {
    "objectID": "tips/240831_google_cloud_project/index.html#はじめに",
    "href": "tips/240831_google_cloud_project/index.html#はじめに",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "",
    "text": "以下の記事で紹介した開発コンテナですが、そのままやるとDVCの認証プロセスでエラーが出ます。\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\n\n\n\n認証を進めるとこのように出てきます。\n\n\nもしかすると今後対応されて何の問題もなく使えるようになるかもしれませんが、公式で推奨されているGoogle Cloud Projectを使えばこの問題に対処できるため、今回はその方法についてまとめていきます。"
  },
  {
    "objectID": "tips/240831_google_cloud_project/index.html#手順",
    "href": "tips/240831_google_cloud_project/index.html#手順",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "手順",
    "text": "手順\nまず前提として、以下のコマンドまでは問題なく行えます。\n\n\nTerminal\n\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\nここからさらにdvc pushやdvc pullを行おうとするときに先ほどの画面が出てきます。\n先述の通りGoogle Cloud Projectを使えば対処できますので、その設定を行います。\n\n次のリンクからGoogle API Consoleにアクセス\n\nhttps://console.developers.google.com/\nなにやら同意を求められた場合は同意して進めて下さい。\n使いたいGoogleアカウントでログインしていることを確認してください。\n\n「プロジェクトを作成」を選択\n\n\n\n\n初めてであれば画面右に出てきます。\n\n\n\nプロジェクト名を設定し、作成する\n\nこだわりがなければそのままで大丈夫です。\n場所も無視して下さい。\n\n「APIとサービスを有効にする」を選択\n\n3の手順を踏むと「APIとサービス」の右に出てきます。\n\n\n\n\n\n\n\n\nGoogle Drive APIに入り、「有効にする」をクリック\n\n少し下にあります。\n\n\n\n\n\n有効にします\n\n\n\nOAuth同意画面\n\n画面左の「OAuth 同意画面」に入り、外部を選択して作成します。\nアプリ名は何でもいいです（例：DVC remote storage）。\nユーザーサポートメールとデベロッパーの連絡先情報は自分のメールアドレスを入れ、その他は空欄でよいです。\n保存して次へ、その次は無視して保存して次へ、最後にAdd usersで自分のメールアドレス（使っているGoogleアカウントのGmailアドレス）を入れて追加し、保存して次へを押して下さい。\n\n認証情報を作成\n\n画面左の「認証情報」に入り、上部に出てくる「認証情報を作成」から「OAuth クライアント ID」を選択して下さい。\nアプリケーションの種類は、「デスクトップ アプリ」、名前はそのままでよいので、作成して下さい。\n\n\n\n\n\n\n\nここまでが第1段階です。クライアントIDとクライアントシークレットが表示されていると思いますが、これは後から確認できるのでOKで閉じても大丈夫です。\n一応どこかにコピーして控えておくと楽かもしれません。"
  },
  {
    "objectID": "tips/240831_google_cloud_project/index.html#vscode",
    "href": "tips/240831_google_cloud_project/index.html#vscode",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "@VSCode",
    "text": "@VSCode\nVSCodeに戻ります。\nCtrl ＋ J1でターミナルを開き、次のコードを入力します。\ndvc remote modify --local myremote gdrive_client_id 'client-id'\ndvc remote modify --local myremote gdrive_client_secret 'client-secret'\nここで、client-idとclient-secretは先ほどのクライアントIDとクライアントシークレットに置き換えて、それぞれ実行してください（シングルクォーテーションは残してください）。\nこれで第2段階も終了しました。\ndvc pushやdvc pullを実行すると、今度はブロックされずに進められるのではないでしょうか。途中「続行」を選ぶところがあれば、選んで進めてください。\n認証が成功したら、VSCodeに戻るとプッシュやプルが進められているはずです。"
  },
  {
    "objectID": "tips/240831_google_cloud_project/index.html#おわりに",
    "href": "tips/240831_google_cloud_project/index.html#おわりに",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "おわりに",
    "text": "おわりに\nなにやら面倒な設定でしたが、今のところこれが（多分）唯一の解決策っぽいです。\nそもそもDVCを使わずにデータもGitHubで実行すればという話でもあるのですが、データサイズの制約もありますので、自分のプロジェクトに合わせて使ってもらえればと思います。\nGoogle Cloud Projectは普段あまり使うことがないと思うので、お役に立てれば幸いです。\nうまくいかないことがあればコメントください。\n追記（2024年9月21日）：dvc pushをしたときにさらにエラーが出たので、それについてトラブルシューティングのページに加えました。"
  },
  {
    "objectID": "tips/240831_google_cloud_project/index.html#footnotes",
    "href": "tips/240831_google_cloud_project/index.html#footnotes",
    "title": "DVCのためのGoogle Cloud Project",
    "section": "注",
    "text": "注\n\n\nMacなら⌘ ＋ J↩︎"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html",
    "href": "tips/240509_cross_reference/index.html",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "",
    "text": "R Markdown や Quarto で文書を書いているとき、相互参照をどうしようと思ったことはありませんか？僕はありました。\n手書きで「図1：Hogehoge」と書くとなんだかスマートさに欠けるし、前に図を挿入したくなった時に数字を書き換えなければならず不便ですよね。\n今回は R Markdown ＆ Quarto における相互参照の使い方をご紹介します。\nR Markdown と Quarto で設定が異なりますので、それぞれ見ていきましょう。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#はじめに",
    "href": "tips/240509_cross_reference/index.html#はじめに",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "",
    "text": "R Markdown や Quarto で文書を書いているとき、相互参照をどうしようと思ったことはありませんか？僕はありました。\n手書きで「図1：Hogehoge」と書くとなんだかスマートさに欠けるし、前に図を挿入したくなった時に数字を書き換えなければならず不便ですよね。\n今回は R Markdown ＆ Quarto における相互参照の使い方をご紹介します。\nR Markdown と Quarto で設定が異なりますので、それぞれ見ていきましょう。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#r-markdown",
    "href": "tips/240509_cross_reference/index.html#r-markdown",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "R Markdown",
    "text": "R Markdown\n\nYAML ヘッダー\nまず、新しいファイルを開くと出てくる --- で囲まれた部分を、YAML ヘッダーと呼びます。\n\n\n\nR Markdown ファイルを開くとこれが出てきますよね\n\n\nR Markdown はデフォルトでは相互参照が使えません（私調べ）（そんな馬鹿な）。そのため、パッケージを使って設定します。\nデフォルトの設定はこのような感じになっています。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nauthor: \"Yosuke Abe\"\ndate: \"2024-08-03\"\noutput: html_document\n---\n\nこれを bookdown パッケージを用いて変更します。\nまずはインストール。\n\n\nR\n\ninstall.packages(\"bookdown\")\n\n次にヘッダーを次のように変更。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nauthor: \"Yosuke Abe\"\ndate: \"2024-08-03\"\noutput:\n  bookdown::html_document2: default\n---\n\nこれで準備が整いました。\n\n\n相互参照\nでは何かプロットして、それを参照してみましょう。例えば次の図をプロットしたいとします。\n\n\n\n\n\n\n\n\n\nこれを参照するために R Markdown 内で入力すると次のようになります。\n\n\nR Markdown\n\n```{r pressure, fig.cap=\"図のキャプションです。\"}\nplot(pressure)\n```\n\nここでのポイントは、{r pressure} の部分です。デフォルトでは {r} だけだと思いますが、スペースを空けることでチャンク1に名前を付けることができ、このチャンク名を使って参照します。また、カンマで区切った後の fig.cap は図のキャプションです。\n文中で参照したいときは、次のように書きます。\n\n\nR Markdown\n\n表 \\@ref(fig:pressure) を参照する。\n\nすると…\n\nこのように、文中での参照ができます。前に新たに図が入っても、自動で番号を振り直してくれます。\n\n\n\n\n\n\n図以外の場合\n\n\n\n\n\nもちろん、表や数式の場合にも使えます。\n\n表の場合\n\n様々な表の関数がありますが、R Markdown では基本的に関数内でキャプションを付けます。\n図の場合とは違い、参照の際には tab:を使います。\n\n\n\n\nQuarto\n\n```{r mtcars}\nknitr::kable(mtcars[1:5, 1:5], caption = \"mtcars データ\")\n```\n\n表 \\@ref(tab:mtcars) を参照する。\n\n\n数式の場合\n\n\\(\\LaTeX\\) 形式で書きます。HTML 出力でも、この書き方が可能です。\n$ で挟む方法もありますが、これだと参照ができません2。\n参照の際には、eq: を使います。\n\n\n\n\nQuarto\n\n\\begin{equation}\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n} (\\#eq:mean)\n\\end{equation}\n\n式 \\@ref(eq:mean) を参照する。\n\n以上のやり方で表や数式の参照にも対応しています。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#quarto",
    "href": "tips/240509_cross_reference/index.html#quarto",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "Quarto",
    "text": "Quarto\nQuarto もほとんど同じ方法で参照が可能ですが、書き方はもっとシンプルです。\n\nYAML ヘッダー\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nformat: html\n---\n\nデフォルトでは著者も日付もないのでめちゃくちゃシンプルですね3。\nQuarto では、相互参照のためにこれをいじる必要はありません（素晴らしい！）。\nその代わり、チャンクの方をいろいろいじっていきます。\n\n\nチャンクオプション\n改めてになりますが、``` で囲まれたコード部分をチャンクと言います。\nR Markdown では、{r}の中にチャンク名を書きましたが、Quarto ではチャンクの中に書いていきます4。\n\n\nR Markdown\n\n```{r}\n#| label: fig-pressure\n#| fig-cap: \"図のキャプションです。\"\n\nplot(pressure)\n```\n\nポイントは以下の2つです。\n\n#| の後ろにオプションを指定して書くことができます。\nlabel は fig- で始めないと参照できません。\n\n\n\n相互参照\n文中では以下のように書いていきます。\n\n\nQuarto\n\n@fig-pressure を参照する。\n\n@ だけだなんて、なんてシンプルなのでしょう。以下のように出力されます。\n\nとても簡単に引用できました。よく見ると、図 @fig-pressure とは書かずとも Figure 1 となっています。図～とは書かなくてよいということですね。英語になっているのが気になる方は、後のセクションで解説しているのでご覧ください。\n\n\n\n\n\n\n図以外の場合\n\n\n\n\n\nもちろん、表や数式の場合にも使えます。\n\n表の場合\n\nQuarto では、表もチャンクオプションを使ってキャプションがつけられます。\nR Markdown では、参照の際に tab: を使っていたのに対し、Quarto では tbl- となります。ややこしい！\n\n\n\n\nQuarto\n\n```{r}\n#| label: tbl-mtcars\n#| tbl-cap: \"mtcars データ\"\n\nknitr::kable(mtcars[1:5, 1:5])\n```\n\n@tbl-mtcars を参照する。\n\n\n数式の場合\n\n\\(\\LaTeX\\) 形式でも書けますが、$$ で囲む方法が便利です。\n数式自体は \\(\\LaTeX\\) 表記です。\n自分で打ってみるとわかりますが、プレビューできるのもいい点です。\n\n\n\n\nQuarto\n\n$$\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n}\n$$ {#eq-mean}\n\n@eq-mean を参照する。\n\n以上のやり方で表や数式も参照できます。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#sec-lang-setting",
    "href": "tips/240509_cross_reference/index.html#sec-lang-setting",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "言語の設定について",
    "text": "言語の設定について\n特に Quarto で、@fig- で参照すると Figure ~ となってしまう問題について、気になる方は次の設定で修正できます。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nformat: html\nlang: ja\n---\n\nlang: ja を追加しました。これが日本語設定です。\nこれを設定したうえで実行すると、\n\n無事日本語にできました。表や式もこれでいけます。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#おわりに",
    "href": "tips/240509_cross_reference/index.html#おわりに",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "おわりに",
    "text": "おわりに\n今回は R Markdown と Quarto で相互参照を使う方法をご紹介しました。\n相互参照が簡単にできるだけで、かなり Markdown を使う魅力が増すと思います。修士学生の私としては、Quarto で修論を書き上げるのが目標です^^\nご参考になれば幸いです。それでは。"
  },
  {
    "objectID": "tips/240509_cross_reference/index.html#footnotes",
    "href": "tips/240509_cross_reference/index.html#footnotes",
    "title": "【R Markdown】相互参照を使いこなす【Quarto】",
    "section": "注",
    "text": "注\n\n\n``` で囲まれているコード部分↩︎\nする方法をご存じの方がいらっしゃいましたら、是非コメントください。↩︎\nもちろん author: \"著者\" や date: 2024-05-09 などで入力できますよ。↩︎\nR Markdown と同様の書き方もできるのですが、私は今回紹介している方法の方がすっきりしていて好みです。↩︎"
  },
  {
    "objectID": "tips/index.html",
    "href": "tips/index.html",
    "title": "Tips",
    "section": "",
    "text": "おすすめ記事\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\n\n\n\n\n【王道】TeX Liveを使ってLaTeX環境を構築する\n\n\n\n\n\n\n\n【PDF】Quarto で論文を書く\n\n\n\n\n\n\n\nQuarto & R MarkdownでPDF出力【LaTeX】\n\n\n\n\n\nPrevoius\n\n\n\nNext\n\n\n\n\n\n\n\n\n\n\n開発環境\n\n\n\n最終更新日：2024年10月04日\n\nUbuntu 22.04\nRStudio 2024.04.2+764 (Chocolate Cosmos) for Ubuntu Jammy\nR version 4.4.1 (2024-06-14)\nPython 3.10.12\njulia version 1.10.5\nQuarto 1.5.57\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る\n\n\n\nR\n\n\nデータ処理\n\n\n\nワイドからロングへ、データを変換します。\n\n\n\n\n\n\n2024/09/17\n\n\n\n\n\n\n\n\n\n\n\n\n市町村合併を反映させる\n\n\n\nR\n\n\nデータ処理\n\n\n\n古いデータに市町村合併を反映させる方法をご紹介します。\n\n\n\n\n\n\n2024/09/06\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【王道】TeX Liveを使ってLaTeX環境を構築する\n\n\n\nLaTeX\n\n\nVSCode\n\n\n\n王道ともいえるTeX Liveを用いたLaTeX環境の構築を解説します。とりあえずWindows版。\n\n\n\n\n\n\n2024/09/01\n\n\n\n\n\n\n\n\n\n\n\n\nDVCのためのGoogle Cloud Project\n\n\n\nDVC\n\n\n備忘録\n\n\n\nDVCにおける設定のエラーへの対処です（2024年8月31日）\n\n\n\n\n\n\n2024/08/31\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【RStudio】ローカルへのインストールまとめ\n\n\n\nR\n\n\nRStudio\n\n\n\nRが初めての方へ。～リンクも添えて～\n\n\n\n\n\n\n2024/08/29\n\n\n\n\n\n\n\n\n\n\n\n\n【Quarto】マークダウンでできること！\n\n\n\nQuarto\n\n\n\nマークダウンでできることは意外と奥が深い。独断と偏見で使う順にまとめます！\n\n\n\n\n\n\n2024/08/02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【Quarto】論文の体裁を整える\n\n\n\nQuarto\n\n\nLaTeX\n\n\n\nQuarto × \\(\\LaTeX\\) で論文の体裁を整える方法について考えます。随時更新予定です。\n\n\n\n\n\n\n2024/07/22\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【PDF】Quarto で論文を書く\n\n\n\nQuarto\n\n\nR\n\n\nLaTeX\n\n\n\nQuarto を使って論文を書く方法（マークダウン、表、図）をまとめました。\n\n\n\n\n\n\n2024/06/29\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n国勢調査データのクレンジング\n\n\n\nR\n\n\nデータ処理\n\n\n\n人口データのファイルを一括で読み込んで、分析で使いやすくするためのクレンジングコードです。\n\n\n\n\n\n\n2024/06/22\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython のための開発コンテナ\n\n\n\nPython\n\n\nVSCode\n\n\nDocker\n\n\nUbuntu\n\n\n\nPython のための開発コンテナを作成する手順を紹介します。\n\n\n\n\n\n\n2024/06/21\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n環境構築におけるトラブルシューティング\n\n\n\n備忘録\n\n\n\n環境構築において直面したエラー等を随時まとめていきます。\n\n\n\n\n\n\n2024/06/19\n\n\n\n\n\n\n\n\n\n\n\n\n【WSL】割り当てるメモリを増やす方法\n\n\n\nWSL\n\n\nWindows\n\n\n備忘録\n\n\n\nWSL はデフォルトで PC の半分のメモリが割り当てられています。\n\n\n\n\n\n\n2024/05/31\n\n\n\n\n\n\n\n\n\n\n\n\n【ワークフロー】VSCode で GitHub を使う\n\n\n\nVSCode\n\n\nGitHub\n\n\n\nVSCode で GitHub を使った作業の流れを紹介します。\n\n\n\n\n\n\n2024/05/25\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeX Live を使わずに LaTeX 環境を作る！\n\n\n\nWindows\n\n\nMac\n\n\nUbuntu\n\n\nLaTeX\n\n\n\nTinyTeX を使って R 環境以外でも \\(\\LaTeX\\) を使えるようにしよう！\n\n\n\n\n\n\n2024/05/20\n\n\n\n\n\n\n\n\n\n\n\n\n【R】アーカイブされたパッケージを使う\n\n\n\nR\n\n\n\nパッケージがインストールできない？\n\n\n\n\n\n\n2024/05/16\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【R】プロジェクトを使う\n\n\n\nR\n\n\n\nR プロジェクトを使って作業環境を整えよう！\n\n\n\n\n\n\n2024/05/15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【日本語版】クリーンなスライドを Quarto で作る！\n\n\n\nQuarto\n\n\nR\n\n\n\n日本語でも使えるスライドをご紹介！\n\n\n\n\n\n\n2024/05/14\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい\n\n\n\nQuarto\n\n\nReveal.js\n\n\nR\n\n\n\nQuarto 経由で Beamer 風のスライドを作ろう！\n\n\n\n\n\n\n2024/05/12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【Quarto】使い方解説！Reveal.js でスライドを作ろう\n\n\n\nQuarto\n\n\nReveal.js\n\n\nR\n\n\n\nスライドも Quarto で作れる！\n\n\n\n\n\n\n2024/05/12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【Quarto】チャンクオプションまとめてみた【R Markdown】\n\n\n\nR\n\n\nQuarto\n\n\nR Markdown\n\n\n備忘録\n\n\n\nチャンクオプションは忘れやすい！\n\n\n\n\n\n\n2024/05/09\n\n\n\n\n\n\n\n\n\n\n\n\n【R Markdown】相互参照を使いこなす【Quarto】\n\n\n\nR Markdown\n\n\nQuarto\n\n\nR\n\n\n\n図や表に自動で番号を振りたい！\n\n\n\n\n\n\n2024/05/09\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto で Python を使ってみよう！\n\n\n\nQuarto\n\n\nPython\n\n\nUbuntu\n\n\nVSCode\n\n\nR\n\n\n\nR ユーザーはこれでよくない？\n\n\n\n\n\n\n2024/05/08\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n【R パッケージ】インストールも読み込みも一撃で？【pacman】\n\n\n\nR\n\n\n\ninstall.packages() はもう不要！\n\n\n\n\n\n\n2024/05/07\n\n\n\n\n\n\n\n\n\n\n\n\nR でGIS を動かす【ハンドリング】\n\n\n\nR\n\n\nGIS\n\n\n\nR で GIS を動かそう！\n\n\n\n\n\n\n2024/05/06\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\nR\n\n\nDocker\n\n\nWindows\n\n\nMac\n\n\nUbuntu\n\n\nVSCode\n\n\nGitHub\n\n\n\nローカル環境から卒業！\n\n\n\n\n\n\n2024/05/04\n\n\n\n\n\n\n\n\n\n\n\n\n政令指定都市・中核市の整理\n\n\n\nR\n\n\n備忘録\n\n\n\nRで市区町村データを整理するための政令指定都市・中核市をまとめたコードです。\n\n\n\n\n\n\n2024/04/14\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto & R MarkdownでPDF出力【LaTeX】\n\n\n\nR\n\n\nR Markdown\n\n\nQuarto\n\n\nLaTeX\n\n\n\nレポートでR Markdown、使ってますか？\n\n\n\n\n\n\n2024/03/29\n\n\n\n\n\n\n\n\n一致なし"
  },
  {
    "objectID": "blog/240824_dvc/index.html",
    "href": "blog/240824_dvc/index.html",
    "title": "DVCが使えない…？",
    "section": "",
    "text": "なんかDVCが使えなくなった。\ndvc pushやdvc pullをしようとするとはじめは認証が必要になると思うのだが、認証しようとするとこんなものが出る。\n\n\n\n\n\nえー、という感じ。\nDVCの公式を覗いてみたら、やっぱりこれは問題らしい。\n\n\n\n\n\n\n\nDVC公式ドキュメント\n\n\nちょっと読んでみると、Google Cloudプロジェクトを使えば何とかなるような感じがする。\nしばらくして治らなかったら、このやり方もまとめるとしようかなー。"
  },
  {
    "objectID": "blog/240824_dvc/index.html#データはdvcで管理しているのだが",
    "href": "blog/240824_dvc/index.html#データはdvcで管理しているのだが",
    "title": "DVCが使えない…？",
    "section": "",
    "text": "なんかDVCが使えなくなった。\ndvc pushやdvc pullをしようとするとはじめは認証が必要になると思うのだが、認証しようとするとこんなものが出る。\n\n\n\n\n\nえー、という感じ。\nDVCの公式を覗いてみたら、やっぱりこれは問題らしい。\n\n\n\n\n\n\n\nDVC公式ドキュメント\n\n\nちょっと読んでみると、Google Cloudプロジェクトを使えば何とかなるような感じがする。\nしばらくして治らなかったら、このやり方もまとめるとしようかなー。"
  },
  {
    "objectID": "blog/240824_dvc/index.html#結論",
    "href": "blog/240824_dvc/index.html#結論",
    "title": "DVCが使えない…？",
    "section": "結論",
    "text": "結論\nこれまでのが楽でよかった。"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "【学生は申し込め】GitHub Copilotを申請しよう\n\n\n\n\n\n\nGitHub\n\n\nAI\n\n\n\n\n\n\n\n\n\n2024/09/18\n\n\n\n\n\n\n\n\n\n\n\n\nDVCが使えない…？\n\n\n\n\n\n\nDVC\n\n\n\n\n\n\n\n\n\n2024/08/24\n\n\n\n\n\n\n\n\n\n\n\n\nもはや TinyTeX も要らないのか…？\n\n\n\n\n\n\nTypst\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n2024/07/23\n\n\n\n\n\n\n\n\n\n\n\n\nPositron は何者？\n\n\n\n\n\n\nR\n\n\nPositron\n\n\n\nPosit社が出した新たなIDE！ \n\n\n\n\n\n2024/07/08\n\n\n\n\n\n\n一致なし"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yosuke Abe",
    "section": "",
    "text": "こんにちは！ 経済学系の大学院生です。\n学んだTipsなどをまとめていきます。\n\n\nプロフィールへ \nTipsへ"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "阿部洋輔",
    "section": "",
    "text": "福島県立福島高等学校\n\n2016年4月 - 2019年3月\n\n千葉大学 法政経学部 法政経学科\n\n2019年4月 - 2023年3月\n\n大阪大学大学院 国際公共政策研究科\n\n2023年4月 - （博士前期課程在学中）"
  },
  {
    "objectID": "about.html#学歴",
    "href": "about.html#学歴",
    "title": "阿部洋輔",
    "section": "",
    "text": "福島県立福島高等学校\n\n2016年4月 - 2019年3月\n\n千葉大学 法政経学部 法政経学科\n\n2019年4月 - 2023年3月\n\n大阪大学大学院 国際公共政策研究科\n\n2023年4月 - （博士前期課程在学中）"
  },
  {
    "objectID": "gis_in_r.html",
    "href": "gis_in_r.html",
    "title": "R で GIS",
    "section": "",
    "text": "R で GIS を使う方法についてまとめています。\n\n\n\n\n   \n     \n     \n       並び替え\n       デフォルト\n         \n          公開日 - 日付（昇順）\n        \n         \n          公開日 - 日付（降順）\n        \n         \n          トピック\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nトピック\n\n\n公開日\n\n\n\n\n\n\n導入 + ハンドリング\n\n\n2024/05/16\n\n\n\n\n\n一致なし"
  },
  {
    "objectID": "blog/240708_positron/index.html",
    "href": "blog/240708_positron/index.html",
    "title": "Positron は何者？",
    "section": "",
    "text": "先日後輩に教えられて「Positron」なるものの存在を知りました。\nどうやら RStudio に次ぐ IDE（統合開発環境）のようで、R には RStudio しか勝たんだろうと思っていた僕としては少し驚きました。\nというのも、VSCode での R 操作も試していたことがあり、その際に不便を感じることが多かったからです。特にキーボードショートカットで、は万能な VSCode であるがゆえに他の言語や機能と干渉してしまい、設定も面倒でした。その後は開発コンテナを使用している場合も RStudio Server を使用してきました。\nしかし今度は RStudio を提供する Posit 社が直々に新たな IDE を提供してきたと聞いて、大変興味を惹かれさっそくインストールすることにしました。\nとりあえず、R と Python のどちらとも親和性が高いことが売りみたいです！"
  },
  {
    "objectID": "blog/240708_positron/index.html#positron",
    "href": "blog/240708_positron/index.html#positron",
    "title": "Positron は何者？",
    "section": "",
    "text": "先日後輩に教えられて「Positron」なるものの存在を知りました。\nどうやら RStudio に次ぐ IDE（統合開発環境）のようで、R には RStudio しか勝たんだろうと思っていた僕としては少し驚きました。\nというのも、VSCode での R 操作も試していたことがあり、その際に不便を感じることが多かったからです。特にキーボードショートカットで、は万能な VSCode であるがゆえに他の言語や機能と干渉してしまい、設定も面倒でした。その後は開発コンテナを使用している場合も RStudio Server を使用してきました。\nしかし今度は RStudio を提供する Posit 社が直々に新たな IDE を提供してきたと聞いて、大変興味を惹かれさっそくインストールすることにしました。\nとりあえず、R と Python のどちらとも親和性が高いことが売りみたいです！"
  },
  {
    "objectID": "blog/240708_positron/index.html#インストール",
    "href": "blog/240708_positron/index.html#インストール",
    "title": "Positron は何者？",
    "section": "インストール！",
    "text": "インストール！\nまだ正式リリースはされていないようです。\nGitHub からリリースページに飛んでインストールをしてみます。ここからインストールできます。\nインストールに難しいことはなく、サクサクと進みました。"
  },
  {
    "objectID": "blog/240708_positron/index.html#開いてみる",
    "href": "blog/240708_positron/index.html#開いてみる",
    "title": "Positron は何者？",
    "section": "開いてみる",
    "text": "開いてみる\n画面はこんな感じです。\n\nこれを開くまで知らなかったのですが、これは VSCode をフォークして作られているっぽいですね。\nVSCode での R に挫折した僕としては、少し不穏なスタートです😅"
  },
  {
    "objectID": "blog/240708_positron/index.html#コードを実行してみる",
    "href": "blog/240708_positron/index.html#コードを実行してみる",
    "title": "Positron は何者？",
    "section": "コードを実行してみる",
    "text": "コードを実行してみる\n試しに ggplot2::ggplot() を使ってプロットしてみることにします。\n\nうーん、現段階では課題が多そうですね。プレリリース版なので仕方なしです。\n\nショートカットが違う\n\nVSCode ベースの時点でなんとなく察していましたが、いろいろと違います。設定の必要あり。\n例えばチャンクの挿入は RStudio では Ctrl + Alt + I でしたが、Positron では Alt ではなく Shift。\nパイプも Ctrl + Shift + M では入れられない。など…。\n\nインライン出力未対応\n\nRStudio ではコードの下に実行結果が出ていましたが、Positron では対応していないようです。\n後で触れますが、今後対応していくみたい。\n\nggplot() で日本語を使うと文字化けする\n\nRStudio では文字化けしないので、今後修正されるのかな？\n\n\n\n\n\nRStudio"
  },
  {
    "objectID": "blog/240708_positron/index.html#レンダリングしてみる",
    "href": "blog/240708_positron/index.html#レンダリングしてみる",
    "title": "Positron は何者？",
    "section": "レンダリングしてみる",
    "text": "レンダリングしてみる\nではレンダリング（R Markdown で言うところの Knit）してみます。\n\nあれ、なんか普通に日本語出力できてますね…笑\n\nでも PDF だといつも通り文字化けします。ここは YAML ヘッダーの設定で対応できそうです。"
  },
  {
    "objectID": "blog/240708_positron/index.html#感想",
    "href": "blog/240708_positron/index.html#感想",
    "title": "Positron は何者？",
    "section": "感想",
    "text": "感想\n\n今後の期待が高まる\n現時点では VSCode の時の不便さを解消しきれておらず、まだ乗り換えられないなというのが正直なところです。\nしかし、他ではコンソールで予測変換が使えるようになってて、それが結構いい感じです。install.packages() と書く時間が短縮できます(^^)（他にもっとないのか()）\n次の課題を乗り越えてきたら、僕は Positron に移行するかもしれません。\n\nインライン出力\n\n実行結果がコードの下に出てほしいです。\n\n拡張機能の充実\n\n現時点では主要な拡張機能が使えません。Microsoft が提供する拡張機能は純正 VSCode でしか使えないようです。\n\nリモート開発機能への対応\n\nTips でも紹介している通り、開発コンテナを使用した環境構築をしているので、ここへの対応は必須です。\n\n\nちなみに、Posit 公式が言っているように、現在は多くの課題を抱えていて、データサイエンティストにとってすぐに最適なものになるとは考えていないようです。\nまた、今後のビジョンも示されており、上に挙げたような課題も克服されると思います。\nこれからのアップデートに期待しましょう！"
  },
  {
    "objectID": "blog/240723_typst/index.html",
    "href": "blog/240723_typst/index.html",
    "title": "もはや TinyTeX も要らないのか…？",
    "section": "",
    "text": "これまで PDF 出力は Quarto × TinyTeX でやってきたけど、たまたま Typst なるものを見つけた。\n疲れたら Quarto 公式ドキュメントを読んでいるのだけど、PDF 出力 = \\(\\LaTeX\\) との先入観があったので、Typst に気が付かなかったのだ。\nどうやら \\(\\LaTeX\\) 出力よりは速いらしい。早速使ってみる。"
  },
  {
    "objectID": "blog/240723_typst/index.html#typst",
    "href": "blog/240723_typst/index.html#typst",
    "title": "もはや TinyTeX も要らないのか…？",
    "section": "",
    "text": "これまで PDF 出力は Quarto × TinyTeX でやってきたけど、たまたま Typst なるものを見つけた。\n疲れたら Quarto 公式ドキュメントを読んでいるのだけど、PDF 出力 = \\(\\LaTeX\\) との先入観があったので、Typst に気が付かなかったのだ。\nどうやら \\(\\LaTeX\\) 出力よりは速いらしい。早速使ってみる。"
  },
  {
    "objectID": "blog/240723_typst/index.html#確かに早いし楽",
    "href": "blog/240723_typst/index.html#確かに早いし楽",
    "title": "もはや TinyTeX も要らないのか…？",
    "section": "確かに早いし、楽。",
    "text": "確かに早いし、楽。\nとりあえず、以下のようにして書き始めてみる。\nYAML ヘッダーに keywords の項目あるのにPDFには出力できないのはなぜなんだろうか…。公式見ると HTML とかではいけそうなんだけどね。\n---\ntitle: Typst demo\nauthor: \n  - name: Yosuke Abe\n    affiliation: OSIPP\nabstract: |\n  Here is an abstract.\ndate: today\ndate-format: long\nlang: en\nformat: \n  typst: \n    keep-typ: true\n---\nそんで出力できたのがこちら\n結構いい感じですねー。そんなに \\(\\LaTeX\\) と比べても遜色ない。\nこれはもう少し丁寧にまとめて Tips に追加したい。\nそれでは。"
  },
  {
    "objectID": "blog/240918_github_copilot/index.html",
    "href": "blog/240918_github_copilot/index.html",
    "title": "【学生は申し込め】GitHub Copilotを申請しよう",
    "section": "",
    "text": "最近はAIの時代といっても過言じゃないほどスマホにもパソコンにもAIが搭載されるのが普通になっている。\n僕はM1の頃にGitHub Copilotの存在を知り、それを使い続けているのだが、結構すごくて役に立つ。特にVSCodeで作業するときに重宝している（RStudioでも使えるのだが、RStudioの良さが消えてしまうのであまり使っていない。）\n本来GitHub Copilotは有料だが、学生は無料で使えるため全大学院生が申請して損はないと思う。今回は申請方法をまとめてくれている記事の紹介とどんな感じで使えるのかを紹介したい。"
  },
  {
    "objectID": "blog/240918_github_copilot/index.html#copilotは強い",
    "href": "blog/240918_github_copilot/index.html#copilotは強い",
    "title": "【学生は申し込め】GitHub Copilotを申請しよう",
    "section": "",
    "text": "最近はAIの時代といっても過言じゃないほどスマホにもパソコンにもAIが搭載されるのが普通になっている。\n僕はM1の頃にGitHub Copilotの存在を知り、それを使い続けているのだが、結構すごくて役に立つ。特にVSCodeで作業するときに重宝している（RStudioでも使えるのだが、RStudioの良さが消えてしまうのであまり使っていない。）\n本来GitHub Copilotは有料だが、学生は無料で使えるため全大学院生が申請して損はないと思う。今回は申請方法をまとめてくれている記事の紹介とどんな感じで使えるのかを紹介したい。"
  },
  {
    "objectID": "blog/240918_github_copilot/index.html#申請方法",
    "href": "blog/240918_github_copilot/index.html#申請方法",
    "title": "【学生は申し込め】GitHub Copilotを申請しよう",
    "section": "申請方法",
    "text": "申請方法\n申請方法については、以下の記事がわかりやすくまとめてくれている。\n\n\n\n\n\n\n【GitHub】学生申請をして無料でGitHub Copilotを使う\n\n\n\n特に難しいところはない。学生証を英語にして書き直すところが面倒なくらいかと。\n後半に書いてあるように、VSCodeでGitHub Copilotの拡張機能を入れ、GitHubでログインすればVSCode上で使うことができる。"
  },
  {
    "objectID": "blog/240918_github_copilot/index.html#使い方のイメージ",
    "href": "blog/240918_github_copilot/index.html#使い方のイメージ",
    "title": "【学生は申し込め】GitHub Copilotを申請しよう",
    "section": "使い方のイメージ",
    "text": "使い方のイメージ\nVSCodeで空ファイルを作ると、以下のように出てくる。\n\n\n\n「何らかの操作を依頼」することができるようだ。\n\n\n早速Ctrl + Iを押して依頼してみる。\n\n\n\n\n\nこんな感じで依頼してみると、\n\n\n\n\n\nこんな感じで書いてくれた。「同意する」を押すと、コードが入力される。\nもっと丁寧に指示すれば、細かいコードも書いてくれる。\nまた、ChatGPTのように、チャット形式で依頼することも可能。GitHub Copilot Chatの拡張機能を入れると、左側のバーにチャットのアイコンが出てくるので、そこをクリック。\nチャットで聞くと、回答を出してくれる。\n\n\n\n\n\nいい感じに出してくれた。出してくれたコードにカーソルを合わせると星マークのようなものが出てくるが、それは「エディターで適用します」であり、クリックすれば書いていた文書にそのコードを適用してくれる。\nさらに、Copilotは書いている文章の候補も自動で提示してくれる。\n先ほどのコードの「はじめに」の部分を少しいじってみると、\n\n\n\n\n\n初めまして、と打ったら続けてグレーの文字で続きを提示してくれている。\nTabキーで一括採用できるし、Ctrl + →で一部採用もできる。文章によっては、超絶長い提示もしてくれることがあって、すげえな…と思うこともある。\n全然そういうことじゃないんだけどなーということもあれば、的を射た提示をしてくれることもある。場合にはよるが、結構頼りになる。"
  },
  {
    "objectID": "blog/240918_github_copilot/index.html#まとめ",
    "href": "blog/240918_github_copilot/index.html#まとめ",
    "title": "【学生は申し込め】GitHub Copilotを申請しよう",
    "section": "まとめ",
    "text": "まとめ\n入れておいて損はなかったなと、1年使ってみて思う。\nもちろん文章だけでなくRやPython、LaTeXなどなどにも使えるし、むしろそっちが本業だと思う。\nぜひ紹介したサイトを参考にしながら、申請してみてほしい。"
  },
  {
    "objectID": "tips/240722_quarto_latex_setting/index.html",
    "href": "tips/240722_quarto_latex_setting/index.html",
    "title": "【Quarto】論文の体裁を整える",
    "section": "",
    "text": "以下の記事で、Quarto × \\(\\LaTeX\\) で論文を書く方法についてまとめました。\n\n\n\n\n\n\n【PDF】Quarto で論文を書く\n\n\n\n今回はもう少し踏み込んで、論文の体裁を整える設定について考えます1。"
  },
  {
    "objectID": "tips/240722_quarto_latex_setting/index.html#はじめに",
    "href": "tips/240722_quarto_latex_setting/index.html#はじめに",
    "title": "【Quarto】論文の体裁を整える",
    "section": "",
    "text": "以下の記事で、Quarto × \\(\\LaTeX\\) で論文を書く方法についてまとめました。\n\n\n\n\n\n\n【PDF】Quarto で論文を書く\n\n\n\n今回はもう少し踏み込んで、論文の体裁を整える設定について考えます1。"
  },
  {
    "objectID": "tips/240722_quarto_latex_setting/index.html#yaml-ヘッダーをいじる",
    "href": "tips/240722_quarto_latex_setting/index.html#yaml-ヘッダーをいじる",
    "title": "【Quarto】論文の体裁を整える",
    "section": "YAML ヘッダーをいじる",
    "text": "YAML ヘッダーをいじる\nQuarto や R Markdown でお馴染みの YAML ヘッダーですが、以前の記事での設定は以下の通りでした。\n---\ntitle: \"【PDF】Quarto で論文を書く\"\nauthor: \"阿部洋輔\"\ndate: 2024-07-08  # todayで今日の日付にできます\ndate-format: \"YYYY年M月D日\" \nformat: \n  pdf: \n    documentclass: article\n    number-sections: true\n    include-in-header: \n      - text: |\n          \\usepackage{zxjatype}\n          \\usepackage[ipaex]{zxjafont} \n          # これらは日本語フォントの設定のために記述しています\nexecute: \n  echo: false  # コードを表示しない\n  warning: false # 警告とメッセージを表示しない\nlanguage: \n  crossref-fig-title: \"図\"\n  crossref-tbl-title: \"表\"\n  crossref-eq-prefix: \"式\"\n---\n今回は簡単化のため英語で設定していきますが、さっそく今回の結論は次の通りです。\n---\ntitle: \"Title\"\nauthor: \n  - \"Yosuke Abe\\\\thanks{Osaka School of International Public Policy}\"\n  - \"Author 2\\\\thanks{Osaka School of International Public Policy}\"\ndate: 2024-07-22\ndate-format: long\nlang: en\nabstract: &gt;\n  Here is the abstract.\nformat: \n  pdf: \n    documentclass: article\n    papersize: a4paper\n    geometry: \n      - top=2.5cm\n      - bottom=2.5cm\n      - left=2.5cm\n      - right=2.5cm\n    keep-tex: true\n# bibliography: bibliography.bib\n# 必要に応じて入れる\n---\n\n**JEL classification:** C12, D24, E31\n\n**keywords:** Keyword 1, Keyword 2...\n\n\\newpage\n# Section 1\n\nWrite the text here.\n\n# Section 2\n\n@fig-cars is a plot of CARS data.\n今回発見したのは、abstract が書けるところです。これは助かります。\nkeyword と JEL classification の部分はもう少し工夫が必要そうです。\n出力するとこのような感じになります。\nとりあえず、ポイントとしては\n\nauthor に \\\\thanks{} を使って所属を書くことができる\nabstract が書ける\n\n&gt; で改行を入れ、2スペース分インデントして書き始めるとよい。\n\nformat で pdf の設定を変更できる\n\ndocumentclass で文書クラスを指定できる。article で十分だと思う。\npapersize で用紙サイズを指定できる。\ngeometry で余白を設定できる。\nkeep-tex: true で .tex ファイルを残すことができる。\n\nbibliography で参考文献を指定できる\n\nZotero など使用して文献管理をしましょう。\n\n\nといったところでしょうか。"
  },
  {
    "objectID": "tips/240722_quarto_latex_setting/index.html#おわりに",
    "href": "tips/240722_quarto_latex_setting/index.html#おわりに",
    "title": "【Quarto】論文の体裁を整える",
    "section": "おわりに",
    "text": "おわりに\nQuarto で論文を書く際の体裁について考えてみました。\n自分でも論文を書いていくうちに、また新しい発見があれば追記していきたいと思います。"
  },
  {
    "objectID": "tips/240722_quarto_latex_setting/index.html#footnotes",
    "href": "tips/240722_quarto_latex_setting/index.html#footnotes",
    "title": "【Quarto】論文の体裁を整える",
    "section": "注",
    "text": "注\n\n\n僕自身も試行錯誤中です。↩︎"
  },
  {
    "objectID": "tips/240621_python_container/index.html",
    "href": "tips/240621_python_container/index.html",
    "title": "Python のための開発コンテナ",
    "section": "",
    "text": "以前の記事で、Docker & VSCode を用いた R 環境の構築方法をご紹介しました。\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\n今回は同じく Docker & VSCode で使える Python の環境テンプレートを作成しましたので、そちらをご紹介します。\n以前の R 環境でも Python は使えましたが、特に R や Julia 等が不要である方は、ぜひ参考にしてみてください。\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub を使用されたことがあり、上の記事を読んでいただいた方は開発環境の構築まで飛んでいただいて大丈夫だと思います。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#はじめに",
    "href": "tips/240621_python_container/index.html#はじめに",
    "title": "Python のための開発コンテナ",
    "section": "",
    "text": "以前の記事で、Docker & VSCode を用いた R 環境の構築方法をご紹介しました。\n\n\n\n\n\n\n開発コンテナを使って R 環境を構築！\n\n\n\n今回は同じく Docker & VSCode で使える Python の環境テンプレートを作成しましたので、そちらをご紹介します。\n以前の R 環境でも Python は使えましたが、特に R や Julia 等が不要である方は、ぜひ参考にしてみてください。\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub を使用されたことがあり、上の記事を読んでいただいた方は開発環境の構築まで飛んでいただいて大丈夫だと思います。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#事前準備",
    "href": "tips/240621_python_container/index.html#事前準備",
    "title": "Python のための開発コンテナ",
    "section": "事前準備",
    "text": "事前準備\n\n1から手順を説明していきますが、既に Docker や Ubuntu 等をインストールしている場合は適宜飛ばしてください。\n\n\nWSL2（Windows ユーザーのみ）\n\nアプリ一覧から PowerShell または Windows コマンドプロンプトを管理者権限で開く\n\n右クリックで管理者権限を使えます。\n\n\n\n\n\n\n\n\n以下のコマンドを入力して実行\n\nこれでインストールはできるはずですが、詳しくはこちらのサイトを参照してください。\n\n\n\n\nPowerShell\n\nwsl --install\n\n\nユーザー名とパスワードを設定\n\nインストールが終わると、Linux ディストリビューションのユーザー名とパスワードの作成を求められます1。\nユーザー名は何でも大丈夫です。パスワードもめちゃくちゃ簡単で問題ありません。\nパスワードは画面上には表示されませんが、ちゃんと入力されています。慌てて何回も入力しないようにしてください。\n\n\nエクスプローラーから Linux に入り、\\Ubuntu\\home\\ユーザー名 がメインとなるディレクトリです。\n\n\nHomebrew（Mac ユーザーのみ）\nMac ユーザーは Homebrew を使って諸々インストールしていくので、まだの方はここでインストールしてください。\n\nターミナルを開く\n\nアプリ一覧から「ターミナル」を探してください。\n\n以下のコマンドを入力して実行\n\nパスワードを求められるので、入力してください。\n\n\n\n\nTerminal\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\n\nVSCode\n\nVSCode のダウンロードサイトからダウンロード、インストール\n\nDownload for Windows2 をクリックしてダウンロードできます。\nインストールができたら、VSCode を開いてください。\n\n（任意）日本語の拡張機能をインストール\n\n画面左側に拡張機能のアイコン  があります。ここの検索ボックスに japanese と入力し、1番上に出てきたものをインストールします。\nインストール後、VSCode を再起動すれば日本語が反映されていると思います。\n\n\n\n\n拡張機能のインストール\n\n拡張機能の検索ボックスで、次の ID を入力し、インストールします。\nms-vscode-remote.remote-containers (Dev Containers)\nms-vscode-remote.remote-wsl (WSL, Windows ユーザーのみ)\n\nWSL に接続（Windows ユーザーのみ）\n\nVSCode から先ほどインストールした WSL に接続します。\n画面左下の &gt;&lt; アイコンをクリックして、「WSL への接続」をクリックします。\n\n\n\n\n\nDocker\nDocker をインストールします。\n\nWindows の方はここから Docker Desktop for Windows を、Mac の方はこちらからダウンロード＆インストール\n設定の確認（Windows のみ）\n\nインストール出来たら、画面上部の設定ボタンから Resources、WSL integration と進み、チェックボックスにチェック、Ubuntu がオンになっていることを確認してください。\nたまに、何もしていないのにここがオフになっていて、トラブることがあります。\n詳しくはこちらをご覧ください。日本語で書いてあります。\n\n\n\n\n画面左側の Volumes に進み、Create からボリュームを作成\n\npip という名前で作成します。\nR の開発コンテナを作成したことがある方で、もし pip を作成 & 使用している場合、名前を変える必要があります。\n以前紹介した R 環境の中にある Python とはバージョンが異なるので、同じボリュームを使うとエラーが出る可能性があります。\n\n\n\n\nGit\n\nWindows\n\nUbuntu で git をインストール\n\nWindows のアプリ一覧から Ubuntu を探し、開いてください。開いたら、以下のコマンドを入力して実行します。\n\n\n\n\nUbuntu\n\nsudo apt-get install git\n\n\n\n\nUbuntu\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\n\n\n\n\nUbuntu\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\nMac\n\nHomebrew で git をインストール\n\nターミナルを開いて、以下のコマンドを入力して実行します。\n\n\n\n\nTerminal\n\nbrew install git\n\n\n\n\nこの Mac では2回目なので git is already installed と表示されてます…。\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\nここに限らずですが、[] ごと置き換えてくださいね。\n\n\n\n\nTerminal\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\n\nGitHub アカウントの作成\nファイルは基本的に GitHub で管理するので、ここからアカウントを作成してください。\n\nポイント\nGitHub アカウントを作成したら、VSCode にログインしておきましょう。\n\nVSCode を開く\n画面左下のアイコンをクリック\n\nGitHub でサインインを行う\n\n\nGitHub にログインすることで、その後の作業がスムーズに進みます。\n事前準備は以上です！"
  },
  {
    "objectID": "tips/240621_python_container/index.html#sec-build-env",
    "href": "tips/240621_python_container/index.html#sec-build-env",
    "title": "Python のための開発コンテナ",
    "section": "開発環境の構築",
    "text": "開発環境の構築\n1人でプロジェクトを進めると仮定して説明します。\n共同プロジェクトの場合は、こちらの記事を参考にして進めてみて下さい。\n\nGitHub リポジトリを作成\n\nテンプレートの GitHub リポジトリ にアクセス\n画面右の「Use this template」から「Create a new repository」を選択\nRepository name を記入\nPrivate を選択\n\n通常のプロジェクトなら Private で OK\n\n「Create repository」をクリック\n\n\n\nリポジトリをクローン\n\nVSCode を開く\n画面左側のアイコンから「ソース管理」3を開く\n「リポジトリの複製」を選択し、さらに「GitHub から複製」を選ぶ\nリポジトリを選択し、クローン\n\nリポジトリは、「ユーザー名/リポジトリ名」の形式で表示されます。\nクローンしたリポジトリを開くか問われるので、開いてください。\n\n画面右下に「コンテナーで再度開く」と出たらクリック\n\n出ない場合、画面左下「WSL: Ubuntu」4をクリックし、「コンテナーで再度開く」を選択してください。\n初めて環境を構築する場合、ここでかなり時間がかかるので辛抱強く待ちましょう。\n\n\n\n\n\n「コンテナーで再度開く」をクリック\n\n\nエクスプローラーを開き、\\\\wsl.localhost\\Ubuntu\\home\\ユーザー名 を確認してみてください。リポジトリ名と同じフォルダができていると思います。\nMac の場合は、ユーザー名の下にできているはずです。\n\n\nPython の設定\nこの環境では、pip を使用してパッケージをインストールし、requirements.txt でパッケージを管理します。\n\nDVC のインストール\nまず初めに、データを管理するための dvc をインストールしてみます。\nGoogle ドライブを使用してデータを管理するので、ドライブ上の任意の場所にデータを保存するためのフォルダを作っておいてください。\n\nVSCode を開く\n画面上「ターミナル」から「新しいターミナル」を開く\n以下のコマンドを入力して実行\n\n\n\nTerminal\n\npip install dvc dvc-gdrive\n\n\n次のコマンドを入力しておく\n\n最後の四角括弧で囲まれた部分を置き換えるので、まだ実行しないでください！\n\n\n\n\nTerminal\n\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\n\nGoogle ドライブで作成したフォルダの ID をコピー\n\nID は、ドライブでフォルダを開いたときの URL で、最後のスラッシュ（~/folders/）より右側の部分です。\n\n[Google DriveのフォルダID]を置き換えて実行\n\n以上で DVC の設定ができました。\n次に、今使った DVC パッケージを記録しておきましょう5。\n以下のコマンドを実行してください。\n\n\nTerminal\n\npip freeze &gt; requirements.txt\n\nこれで requirements.txt というファイルが生成され、その中にインストールしたパッケージの情報が保存されます。\n新たなパッケージをインストールしたら、適宜実行して保存していってください。\n\n\n\n\n\n\nちなみに\n\n\n\nパッケージは Docker にキャッシュされるので、1度インストールしてしまえば、別のプロジェクトではインストールしなくても使えます。\nこれはこのテンプレートの設定を使っていればの話なので、ローカルの Python であれば話は変わりますが…。\n\n\n違う PC など、環境を作成した環境とは異なる環境で作業に移るときは、リポジトリをクローンした後、以下のコマンドで必要なパッケージをインストールできます。\n\n\nTerminal\n\npip install -r requirements.txt\n\n作業の流れについては後ほど詳述します。\n\n\n\nデータの管理\nデータは今インストールした DVC で管理します。データは Google ドライブ上で保管されます。\n\nワーキングディレクトリに、data というフォルダを作成\nデータが入ったら、以下のコードを実行\n\ndata フォルダごとドライブに追加します。\ndata フォルダは .gitignore に記載されているため、GitHub にはアップロードされません。\n\n\n\n\nTerminal\n\ndvc add data/\n\n\n\n\n\n\n\nデータの入れ方\n\n\n\nデータは、Windows のエクスプローラーや Mac の Finder から直接フォルダに入れて大丈夫です（通常の Windows や Mac での作業のように）。\nデータをプッシュした後に Google ドライブを見てもらえれば分かりますが、よくわからない形で保存されています。DVC の仕組みがそのような保存形式になっているからなので、決してファイルが破損しているわけではありません。\nちなみに Windows ユーザーの方で、一回ローカルに落としてから Linux にデータ等を入れたら Zone.Identifier というファイルができることがありますが、これは無視して大丈夫です。邪魔であればまとめて消してください。\n\n\n\nデータをアップロード\n\n以下のコードでデータをプッシュします。\n\n\n\n\nTerminal\n\ndvc push\n\n最初は add と push をする過程でアカウントの認証が必要になりますが、表示に従って認証を進めてください6。\n\nデータのダウンロード\n\nパッケージと同様、別環境でデータをダウンロードするためには以下のコードを実行して下さい。\n\n\n\n\nTerminal\n\ndvc pull\n\nこれでデータが管理できます。\n\n\n作業終了時\n一連の作業を終えたら、GitHub にコミット、プッシュしましょう。\n\n作業内容をコミット\n\n画面左側の「ソース管理」をクリックします。\nファイルにカーソルを当てると、右側に「+」が表示されます。これをクリックしてステージングします7。\n画面上部の「メッセージを入力」にコミットメッセージ8を入力し、「✓コミット」をクリックしてください。\n\nプッシュ\n\n「ソース管理」の右側にある「…」をクリックし、「プッシュ」を選択してください。\nこれで、作業内容が GitHub にアップロードされます。\n\n\nプッシュをするのは最後で良いと思います。例えば作業を3つのファイルで行ったとしたら、それぞれのファイルでコミットメッセージを書いてコミットし、最後にプッシュすれば OK です。\n毎度毎度プッシュを行うより効率的ですね。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#作業の流れ",
    "href": "tips/240621_python_container/index.html#作業の流れ",
    "title": "Python のための開発コンテナ",
    "section": "作業の流れ",
    "text": "作業の流れ\n少し流れがごちゃごちゃしてしまったので整理します。\n\n作業手順\n\n事前準備を行う\nリポジトリのクローン\n\nVSCode 内で行います。\nクローン出来たら、「コンテナーで再度開く」をクリックし開発コンテナに移動します。\n\nDVC の設定をする（データを使わない場合は5にスキップ）\n\npip install dvc dvc-gdrive\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\nデータの保存\n\nワーキングディレクトリに data フォルダを作成します。\ndata 内にデータを追加していきます。\n一通りデータを追加したら、dvc add data/ を実行します。\n\n作業をする\nパッケージを記録\n\npip freeze &gt; requirements.txt\nパッケージを追加したら適宜実行して下さい。\nパッケージごとに逐一実行する必要はありません。最後にまとめて、で大丈夫です。\n\ngit にコミット＆プッシュ\n\nVSCode 上でデータをコミット、プッシュします。\n\nデータをプッシュする\n\ndvc push\nこれを実行することでドライブにデータが送られます。\n\n\n\n\n別の環境で再現する\n環境を変えた場合は、次の流れで環境を再現します。\n\n事前準備\nリポジトリのクローン\n\n開発コンテナに入ります。\n\nターミナルで以下を実行\n\nPython のパッケージがインストールされ、データもダウンロードされます。\n\n\n\n\nTerminal\n\npip install -r requirements.txt\ndvc pull\n\nあとは上の流れと同じです。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#おわりに",
    "href": "tips/240621_python_container/index.html#おわりに",
    "title": "Python のための開発コンテナ",
    "section": "おわりに",
    "text": "おわりに\n私自身はあまり Python に詳しくないのですが、少々使う機会があったので、これを機にと思いまとめてみました。\nより効率的な環境構築方法があると思いますので、勉強し次第更新しようと思います。\n間違いや書き漏れ、よりよい構築案がありましたらコメントいただけると幸いです。"
  },
  {
    "objectID": "tips/240621_python_container/index.html#追記",
    "href": "tips/240621_python_container/index.html#追記",
    "title": "Python のための開発コンテナ",
    "section": "追記",
    "text": "追記\n2024/06/24：Docker のボリュームに関する説明を変更"
  },
  {
    "objectID": "tips/240621_python_container/index.html#footnotes",
    "href": "tips/240621_python_container/index.html#footnotes",
    "title": "Python のための開発コンテナ",
    "section": "注",
    "text": "注\n\n\n求められない場合は、続けて wsl とだけ入力して実行してください。↩︎\nもしくは Mac↩︎\n上から3番目↩︎\nMac なら &gt;&lt;↩︎\n記録しておくことで、違う PC に変えたり共同研究をしたりするなど違う環境で実行するときに、必要なパッケージを指定したバージョンで簡単にインストールすることができます。↩︎\n私の場合認証の読み込みが終わらない問題によく直面するので、その際にはターミナルを消し、再度新しいターミナルで実行するようにしています。↩︎\nステージしていないとコミットできません。↩︎\nどのような作業をしたのか↩︎"
  },
  {
    "objectID": "tips/240906_municipality_converter/index.html",
    "href": "tips/240906_municipality_converter/index.html",
    "title": "市町村合併を反映させる",
    "section": "",
    "text": "市町村合併（平成の大合併）前のデータを使わなければならない場合に、うまく市町村コードを新使いながらパネルデータを作成する方法についてご紹介します。\nこの記事では近藤恵介先生（RIETI、神戸大学）が作成された市町村コンバーターを使用します。\n以下のGitHubリポジトリよりダウンロードが可能です。\nhttps://github.com/keisukekondokk/municipality-converter"
  },
  {
    "objectID": "tips/240906_municipality_converter/index.html#はじめに",
    "href": "tips/240906_municipality_converter/index.html#はじめに",
    "title": "市町村合併を反映させる",
    "section": "",
    "text": "市町村合併（平成の大合併）前のデータを使わなければならない場合に、うまく市町村コードを新使いながらパネルデータを作成する方法についてご紹介します。\nこの記事では近藤恵介先生（RIETI、神戸大学）が作成された市町村コンバーターを使用します。\n以下のGitHubリポジトリよりダウンロードが可能です。\nhttps://github.com/keisukekondokk/municipality-converter"
  },
  {
    "objectID": "tips/240906_municipality_converter/index.html#方法",
    "href": "tips/240906_municipality_converter/index.html#方法",
    "title": "市町村合併を反映させる",
    "section": "方法",
    "text": "方法\n\nコンバーターファイルのダウンロードと読み込み\nGitHubリポジトリのdata_converter内にあるmunicipality_converter_jp.csvを開きます1。次のリンクから直接飛ぶことも可能です。\nhttps://github.com/keisukekondokk/municipality-converter/blob/master/data_converter/municipality_converter_jp.csv\nmunicipality_converter_jp.csvを開くと、コード右上にあるダウンロードアイコン2より任意の場所にダウンロードが可能です。\nダウンロードできたら、Rで読み込みます。\n\nlibrary(tidyverse)\nlibrary(here)\n\nconverter &lt;- read_csv(here(\"data/240906_municipality_converter/municipality_converter_jp.csv\"))\n\n\n\nパネル化したいデータの準備\n\n\n\n\n\n\n使用するデータ\n\n\n\n今回使用するデータはこちらからダウンロードできます。\n\n\n例えば人口データをパネル化したいとします。今回は例として、2000年から2005年の人口データ3を、2020年の市町村区分になるようにくっつけます。例なので、総人口のみを扱います。\n今回使用するデータは次のようなファイルになっています。\n\n\n\n\n\nまずはこれらのファイル（自分がパネル化したいデータがあればそれらのファイル）をRで読み込んでください。.xlsファイルであればreadxlパッケージのread_xls()を僕は使っています。以下は5年分まとめて読み込むときの例です。\nlibrary(readxl)\n\nfor (year in 2000:2005) {\n  obj &lt;- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), \n                  skip = 4) |&gt; \n    select(1:3, 6)\n  \n  colnames(obj) &lt;- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  obj &lt;- obj |&gt; \n    mutate(code = as.numeric(code) %/% 10)\n  \n  assign(paste0(\"pop_\", year), obj)\n}\nforループやassign()についての説明は行いませんが、これで2000年から2005年までを一括で読み込むことができます。ポイントは、今回使用するコンバーターはキーとなるコードが整数かつ下1桁を落としているため、mutate(code = as.numeric(code) %/% 10)で処理しているところです。\nとりあえずここで重要なことは、select()で必要な列のみ取り出しているのですが、団体コードと人口の列は必ず取り出すことです。市町村名も一応取り出していますが、別になくてもよいです。\n\n\n2020年の自治体コードを付与\n合併前のデータに、合併後の自治体コードを付与します。具体的には、人口データのcodeとコンバーターのmerge_id_muniをキーにしてleft_join()し、id_muni2020を付与します。\nこれもまとめて6年分やりたいので、先ほどのコードに追記します。\nfor (year in 2000:2005) {\n  obj &lt;- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), skip = 4) |&gt; \n    select(1:3, 6)\n  \n  colnames(obj) &lt;- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  obj &lt;- obj |&gt; \n    mutate(code = as.numeric(code) %/% 10) |&gt; \n    left_join(converter, by = c(\"code\" = \"merge_id_muni\")) |&gt; \n    select(code, prefecture, municipality, population, id_muni2020)\n  \n  assign(paste0(\"pop_\", year), obj)\n}\n試しにpop_2020の変数名をcolnames(pop_2020)などで確認してみると、code, prefecture, municipality, population, id_muni2020となっていることがわかります。\n\n\nid_muni2020を使ってサマライズ\n例えばB市とC市がA市に合併した場合、Aはもとから2020年基準の自治体コードを持っていますが、B市とC市は古い自治体コードを持っていて、新しく2020年の自治体コードを付与されています。\nすなわち、id_muni2020の列を見ると、A市と同じ自治体コードをB市とC市は持っていることになります。\nこれを使うと、各自治体コードで人口を足し算すれば、現在の自治体区分における人口総数を算出することができます。これを実行するのがsummarise()関数です。\n\nfor (year in 2000:2005) {\n  df &lt;- get(paste0(\"pop_\", year))\n  \n  summarised_df &lt;- df |&gt; \n    summarise(population = sum(population, na.rm = TRUE), \n              .by = id_muni2020)\n  \n  assign(paste0(\"summarised_pop_\", year), summarised_df)\n}\n\nforループの中でデータフレーム名を取得するのは少々ややこしいですが、以上のような書き方で可能です。\nsummarise()内では.byで指定したid_muni2020ごとにpopulationをsum()するようになっています。na.rm = TRUEは、NAがあった場合に計算結果がNAにならないようにするために必要です。\n以上を実行すると、summarised_pop_2000～summarised_pop_2005までが出来上がります。\nちなみにここで使っている変数がid_muni2020とpopulationだけなので、出来上がったデータフレームもこの2つの変数しか入っていません。市町村名も残したい場合は、.byでprefectureとmunicipalityも追加で指定すれば残すことができます。\n\n\nleft_join()でくっつける\n2000年のデータフレームをベースとして2001～2005年を結合するので、最初に2000年のデータをfinal_dfとして格納しておきます。その際に変数名も2000年のものであることを明記します。\n\nfinal_df &lt;- summarised_pop_2000 |&gt; \n  rename(population_2000 = population)\n\nfor (year in 2001:2005) {\n  df_to_join &lt;- get(paste0(\"summarised_pop_\", year)) |&gt; \n    rename_with(~ paste0(., \"_\", year), population)\n  \n  \n  final_df &lt;- left_join(final_df, df_to_join, \n                        by = c(\"id_muni2020\"))\n}\n\npopulationの列が複数出てくるので、それらの後が_20xxとなるようにrename_with()で設定しています。\nfinal_dfが最終的なデータフレームです。確認してみてください。\n以上の作業で合併前のデータを最新の市町村区分を基準として結合することができました。\nこれを応用して変数を追加したりロング形式に変換することが可能です。"
  },
  {
    "objectID": "tips/240906_municipality_converter/index.html#まとめ",
    "href": "tips/240906_municipality_converter/index.html#まとめ",
    "title": "市町村合併を反映させる",
    "section": "まとめ",
    "text": "まとめ\n今回紹介したコードをまとめると以下の通りです。\nlibrary(tidyverse)\nlibrary(here)\nlibrary(readxl)\n\nfor (year in 2000:2005) {\n  obj &lt;- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), skip = 4) |&gt; \n    select(1:3, 6)\n  \n  colnames(obj) &lt;- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  obj &lt;- obj |&gt; \n    mutate(code = as.numeric(code) %/% 10) |&gt; \n    left_join(converter, by = c(\"code\" = \"merge_id_muni\")) |&gt; \n    select(code, prefecture, municipality, population, id_muni2020)\n  \n  assign(paste0(\"pop_\", year), obj)\n}\n\nfor (year in 2000:2005) {\n  df &lt;- get(paste0(\"pop_\", year))\n  \n  summarised_df &lt;- df |&gt; \n    summarise(population = sum(population, na.rm = TRUE), \n              .by = id_muni2020)\n  \n  assign(paste0(\"summarised_pop_\", year), summarised_df)\n}\n\nfinal_df &lt;- summarised_pop_2000 |&gt; \n  rename(population_2000 = population)\n\nfor (year in 2001:2005) {\n  df_to_join &lt;- get(paste0(\"summarised_pop_\", year)) |&gt; \n    rename_with(~ paste0(., \"_\", year), population)\n  \n  \n  final_df &lt;- left_join(final_df, df_to_join, \n                        by = c(\"id_muni2020\"))\n}\nさらに1つのコードで完結させる場合は次のようになります。\nlibrary(tidyverse)\nlibrary(here)\nlibrary(readxl)\n\nfor (year in 2000:2005) {\n  obj &lt;- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), skip = 4) |&gt; \n    select(1:3, 6)\n  \n  colnames(obj) &lt;- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  summarised_df &lt;- obj |&gt; \n    mutate(code = as.numeric(code) %/% 10) |&gt; \n    left_join(converter, by = c(\"code\" = \"merge_id_muni\")) |&gt; \n    select(code, prefecture, municipality, population, id_muni2020) |&gt; \n    summarise(population = sum(population, na.rm = TRUE), .by = id_muni2020)\n  \n  if (year == 2000) {\n    final_df &lt;- summarised_df |&gt; \n      rename(population_2000 = population)\n  } else {\n    summarised_df &lt;- summarised_df |&gt; \n      rename_with(~ paste0(\"population_\", year), population)\n    \n    final_df &lt;- left_join(final_df, summarised_df, by = \"id_muni2020\")\n  }\n}\n以上です。合併処理はめんどくさいので、少しでもお役に立てれば幸いです。"
  },
  {
    "objectID": "tips/240906_municipality_converter/index.html#footnotes",
    "href": "tips/240906_municipality_converter/index.html#footnotes",
    "title": "市町村合併を反映させる",
    "section": "注",
    "text": "注\n\n\n別に英語版でもよいです。↩︎\nカーソルを合わせると「Download raw file」と出てきます。↩︎\n住民基本台帳より↩︎"
  },
  {
    "objectID": "tips/240512_revealjs/index.html",
    "href": "tips/240512_revealjs/index.html",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "",
    "text": "皆さん、スライドを作るときに何を使っていますか？PowerPoint ですか？\\(\\LaTeX\\) の Beamer ですか？\nこちらの記事で Reveal.js を使ったスライドをご紹介しましたが、今回はスライドを作る上での tips をご紹介します。\n今回は Quarto の使い方と併せて、スライドの作り方を書いていこうと思います。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#はじめに",
    "href": "tips/240512_revealjs/index.html#はじめに",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "",
    "text": "皆さん、スライドを作るときに何を使っていますか？PowerPoint ですか？\\(\\LaTeX\\) の Beamer ですか？\nこちらの記事で Reveal.js を使ったスライドをご紹介しましたが、今回はスライドを作る上での tips をご紹介します。\n今回は Quarto の使い方と併せて、スライドの作り方を書いていこうと思います。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#準備",
    "href": "tips/240512_revealjs/index.html#準備",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "準備",
    "text": "準備\n\n\n\n\n\n\nNote\n\n\n\nこの記事は R ユーザーをターゲットに書いています。しかし、Quarto は多言語でも使えるのがメリットなので、もちろん Python などでも使うことができます。\n今回は RStudio で使うことを前提としますが、Python でも使いたいという方はこちらの記事を参考に VSCode で始めてみてください。コードの書き方はこの記事と同じです。\n\n\n細かいことは、Quarto の公式ガイドをお読みください。この記事では、とりあえずこれができればいいかな、というところをピックアップして解説します。\n\nドキュメントを開く\nRStudio を開き、任意のディレクトリをワーキングディレクトリとして設定します。\nRStudio 左上の  より、「Quarto Document」を選択してください。\nさらに「Presentation」を選び、タイトル、著者名を必要に応じて付け、Reveal JS を選びます。エンジンは Knitr1、Use visual markdown editor はオフにしておいてください。\n最後に Create を押します。\nすると、次のようなヘッダーだけがある文書が出てくると思います。\n\n\nQuarto\n\n---\ntitle: \"[任意のタイトル]\"\nformat: revealjs\n---\n\nこれでドキュメントは無事開けました。そしたら  を押して、任意のフォルダに保存してください。\n\n\nテーマ\nこのままでもスライドは作れますが、味気ないスライドになってしまいますので、テーマを設定します。\nテーマは、先ほどのヘッダーを次のように書き加えることで使うことができます。\n\n\nQuarto\n\n---\ntitle: \"[任意のタイトル]\"\nformat: \n  revealjs: \n    theme: night  # この部分を変える\n---\n\nもとのヘッダーと変えた時のヘッダーでそれぞれ  Render してみてください。\nちなみに、Quarto 公式では、以下のようなテーマが紹介されています。\n\n\n\nbeige\nblood\ndark\ndefault\nleague\nmoon\n\n\n\nnight\nserif\nsimple\nsky\nsolarized\n\n\n\nそれぞれ特徴があるので、いろいろ試してみてください。\n今回は、私が作成した Reveal.js のテンプレートを使っていきます。現状英語にしか対応していないのが難点ですが、いずれ日本語に対応したものも作る予定です。\nGitHub リポジトリにアクセスし、クローンするか、&lt;&gt; Code より ZIP ファイルをダウンロードしてください2。使うのは modern_theme.scss です。このファイルを準備し、先ほどのドキュメントを保存したフォルダと同じフォルダに移しておいてください。\nそしたらヘッダーを次のように修正してください。\n\n\nQuarto\n\n---\ntitle: \"[任意のタイトル]\"\nformat: \n  revealjs: \n    theme: \n      - default\n      - modern_theme.scss\n    slide-number: true  # スライド番号を付ける\n    date-format: long   # 日付のフォーマットを整える\n---\n\nこれでテーマの設定もできました。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#quarto-での書き方",
    "href": "tips/240512_revealjs/index.html#quarto-での書き方",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "Quarto での書き方",
    "text": "Quarto での書き方\n\n表紙\n表紙はヘッダーに書いた要素で構成されます。title の他には、author（著者）や date（日付）、 institute（所属組織） を追加することを想定しています3。\n\n\n本スライド\nスライドでは、## を使ってページを区切っていきます4。\n例えば次のように書きます。\n\n\nQuarto\n\n---\ntitle: \"Title\"\nsubtitle: \nformat: \n  revealjs: \n    theme: \n      - default\n      - modern_theme.scss\n    slide-number: true  # スライド番号を付ける\n    date-format: long   # 日付のフォーマットを整える\n---\n\n## First page\n\n\"First page\" is the headline text. Note that a half-width space is required before the heading.\n\n## Second page\n\nYou can break a line by leaving one line blank.\n\nLike this.\n\n\"First page\" is ~ と You can break ~ が本文です。\n通常の Markdown と基本的な使い方は一緒ですが、改行するには空行を入れる必要があります。1回改行しただけでは、スライド上では改行されません。見出し部分にも適用されますので、1行空けてから ## 見出し と書くようにしてください。\n\n\n\n\n\n色遣い\nこのテーマは基本的に派手なデザインではありませんが、2色を文字に使えます。alert と、accent です。\nこれらの色にしたい文字や文を [] で囲んだ後、{.alert} および {.accent} と入力します。[alert]{.alert} といった感じです。\n基本的には alert があれば概ね大丈夫な気がしますが、accent も入れておきました。\n\n\ncallout\ncallout ブロックを紹介します。\n\n\n\n\n\n\nNote\n\n\n\nこれは Note\n\n\n\n\n\n\n\n\nTip\n\n\n\nこれは Tip\n\n\n\n\n\n\n\n\nWarning\n\n\n\nこれは Warning\n\n\n\n\n\n\n\n\nImportant\n\n\n\nこれは Important\n\n\n\n\n\n\n\n\nCaution\n\n\n\nこれは Caution\n\n\nこれらのことです。\n要点をまとめたいときや、断り事を書きたいときなどに重宝します。\n書き方は、\n\n\nQuarto\n\n::: {.callout-note}\nこれは Note\n:::\n\n::: {.callout-tip}\nこれは Tip\n:::\n\n::: {.callout-warning}\nこれは Warning\n:::\n\n::: {.callout-important}\nこれは Important\n:::\n\n::: {.callout-caution}\nこれは Caution\n:::\n\nこうです。\nちなみに、ブロックのタイトルを変えたいときや、長いので折りたたみたいときは、\n\n\nQuarto\n\n::: {.callout-note collapse=true}\n## ここがタイトル\n\ncollapse=true で折りたためる Note\n:::\n\nと書くことで、\n\n\n\n\n\n\nここがタイトル\n\n\n\n\n\ncollapse=true で折りたためる Note\n\n\n\nとできます。\n\n\nリスト\n箇条書きなどのリスト形式が使えます。書き方はシンプルで、\n\n\nMarkdon\n\n箇条書きリスト\n\n- Item 1\n\n    - Item 1-1\n    \n- Item2\n\n順序付きリスト\n\n1. Item 1\n\n2. Item 2\n\n箇条書きリストでは2段階を、順序付きリストでは1段階の利用を想定しています。\nアイテムの前には半角スペースを忘れないでください。また、2段階目を使うときには4つ分のスペースが必要です。\n\n\n列を分ける\n箇条書きを10個も書くと、2列にしたいことがありますよね。そんなときは次のようにしてください。\n\n\nQuarto\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n- Item 1\n\n- Item 2\n:::\n\n:::{.column width=\"50%\"}\n- Item 3\n\n- Item 4\n:::\n::::\n\nこのように書くと、\n\n\n\nこのように\nなります。\n\n\n\nwidth を変えれば\n列の幅を調節できます。\n\n\n\n\n\nコード\nR や Python のコードも書けます。\n特筆すべきは、コードをハイライトできることです。\n例えば、次のコードをご覧ください。\n\n\n\n上のコードでは select() と filter() の行がハイライトされています。\nまた、スライド上で右に進んでみてください。順にハイライトされています。\nこれらのコードは、次のように書いています。\n\n\nQuarto\n\n```{.r code-line-numbers=\"5-6\"}\nlibrary(tidyverse)\nlibrary(gt)\n\ndf &lt;- mtcars |&gt; \n  select(1:5) |&gt; \n  filter(disp &gt;= 400)\n\ngt(df)\n```\n\n```{.r code-line-numbers=\"|5|6\"}\nlibrary(tidyverse)\nlibrary(gt)\n\ndf &lt;- mtcars |&gt; \n  select(1:5) |&gt; \n  filter(disp &gt;= 400)\n\ngt(df)\n```\n\nこのように code-line-numbers で指定することができます。|5|6 は5行目と6行目が順にハイライトされるということですね。\n他にも細やかな設定ができるので、Quarto の公式ガイドをご覧ください。\n\n\n図や表\n図や表がどのように表示されるのか見てみましょう。\nデフォルトでは図のキャプションが左寄りになっていますが、中央になるように修正しています。\nまた、ここでは例としてコードを載せていますが、デフォルトではコード表示はオフです。表示したい場合はチャンク内で echo: true を設定してください5。"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#おわりに",
    "href": "tips/240512_revealjs/index.html#おわりに",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "おわりに",
    "text": "おわりに\nここまで基本的な Quarto でのスライド作成についてご紹介しました。\nここを押さえておけばスライドを作る分には困らないのではないかと…思います。\n他に使う要素があれば適宜追加していきます！"
  },
  {
    "objectID": "tips/240512_revealjs/index.html#footnotes",
    "href": "tips/240512_revealjs/index.html#footnotes",
    "title": "【Quarto】使い方解説！Reveal.js でスライドを作ろう",
    "section": "注",
    "text": "注\n\n\nPython の場合は Jupyter↩︎\nクローンするほどでもないので、ダウンロードでいいと思います。リポジトリ整えてなくてすみません^^;↩︎\n私のテーマの場合↩︎\n# も使えるのですが、今回のテーマでの使用は想定していません。↩︎\nチャンクオプションについて、詳しくはこちら↩︎"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html",
    "href": "tips/240414_benri_seirei/index.html",
    "title": "政令指定都市・中核市の整理",
    "section": "",
    "text": "これを作ったきっかけは、政令指定都市ダミーや中核市ダミーをサクサクッと作りたかったからです。\nまた、データによっては\n\n\n\n\n\n\n\n\n都道府県\n市区町村\nID\n\n\n\n\n北海道\n札幌市中央区\n01101\n\n\n北海道\n札幌市北区\n01102\n\n\n北海道\n札幌市東区\n01103\n\n\n\n\n\n\n\nと、政令指定都市が市単位ではなく区単位でしかなかったりします。要は、「札幌市」だけのような行が欲しいということです。\nデータによってはもう少しいじらなければならないものの、dplyr::bind_rows()を使って市のデータを追加できたりします。"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html#はじめに",
    "href": "tips/240414_benri_seirei/index.html#はじめに",
    "title": "政令指定都市・中核市の整理",
    "section": "",
    "text": "これを作ったきっかけは、政令指定都市ダミーや中核市ダミーをサクサクッと作りたかったからです。\nまた、データによっては\n\n\n\n\n\n\n\n\n都道府県\n市区町村\nID\n\n\n\n\n北海道\n札幌市中央区\n01101\n\n\n北海道\n札幌市北区\n01102\n\n\n北海道\n札幌市東区\n01103\n\n\n\n\n\n\n\nと、政令指定都市が市単位ではなく区単位でしかなかったりします。要は、「札幌市」だけのような行が欲しいということです。\nデータによってはもう少しいじらなければならないものの、dplyr::bind_rows()を使って市のデータを追加できたりします。"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html#コード",
    "href": "tips/240414_benri_seirei/index.html#コード",
    "title": "政令指定都市・中核市の整理",
    "section": "コード",
    "text": "コード\nまとめたコードは以下です1。\n\n# 政令指定都市一覧\nname_seirei = c(\"札幌市\", \"仙台市\", \"さいたま市\", \"千葉市\", \"横浜市\", \"川崎市\", \n                \"相模原市\", \"新潟市\", \"静岡市\", \"浜松市\", \"名古屋市\", \"京都市\", \n                \"大阪市\", \"堺市\", \"神戸市\", \"岡山市\", \"広島市\", \"北九州市\", \n                \"福岡市\", \"熊本市\")\n\n# 政令指定都市（特別区含む）の市町村コード\nseirei_city &lt;- tibble::tibble(\n  name_pref = c(\"北海道\", \"宮城県\", \"埼玉県\", \"千葉県\", \"東京都\", \"神奈川\", \n                \"神奈川\", \"神奈川\", \"新潟県\", \"静岡県\", \"静岡県\", \"愛知県\", \n                \"京都府\", \"大阪府\", \"大阪府\", \"兵庫県\", \"岡山県\", \"広島県\", \n                \"福岡県\", \"福岡県\", \"熊本県\"), \n  name_mun  = c(\"札幌市\", \"仙台市\", \"さいたま市\", \"千葉市\", \"特別区\", \"横浜市\", \n                \"川崎市\", \"相模原市\", \"新潟市\", \"静岡市\", \"浜松市\", \"名古屋市\", \n                \"京都市\", \"大阪市\", \"堺市\", \"神戸市\", \"岡山市\", \"広島市\", \n                \"北九州市\", \"福岡市\", \"熊本市\"), \n  id_mun    = c(\"01100\", \"04100\", \"11100\", \"12100\", \"13100\", \"14100\", \"14130\", \n                \"14150\", \"15100\", \"22100\", \"22130\", \"23100\", \"26100\", \"27100\", \n                \"27140\", \"28100\", \"33100\", \"34100\", \"40100\", \"40130\", \"43100\")\n)\n\n# 中核市一覧\nchukaku &lt;- c(\"宇都宮市\", \"金沢市\", \"岐阜市\", \"姫路市\", \"鹿児島市\", \"秋田市\", \"郡山市\", \n             \"和歌山市\", \"長崎市\", \"大分市\", \"豊田市\", \"福山市\", \"高知市\", \"宮崎市\", \n             \"いわき市\", \"長野市\", \"豊橋市\", \"高松市\", \"旭川市\", \"松山市\", \"横須賀市\", \n             \"奈良市\", \"倉敷市\", \"川越市\", \"船橋市\", \"岡崎市\", \"高槻市\", \"東大阪市\", \n             \"富山市\", \"函館市\", \"下関市\", \"青森市\", \"盛岡市\", \"柏市\", \"西宮市\", \n             \"久留米市\", \"前橋市\", \"大津市\", \"尼崎市\", \"高崎市\", \"豊中市\", \"那覇市\", \n             \"枚方市\", \"八王子市\", \"越谷市\", \"呉市\", \"佐世保市\", \"八戸市\", \"福島市\", \n             \"川口市\", \"八尾市\", \"明石市\", \"鳥取市\", \"松江市\", \"山形市\", \"福井市\", \n             \"甲府市\", \"寝屋川市\", \"水戸市\", \"吹田市\", \"松本市\", \"一宮市\")\n\n市区町村 という列に市区町村名が入っているとして、dplyr::filter(市区町村 %in% name_seirei) のようにすれば、政令指定都市だけをとりだすことができます。\nまた、dplyr::if_else(市区町村 %in% name_seirei, 1, 0) のようにすれば、ダミーも簡単に作れます。\ndplyr::bind_rows() |&gt; dplyr::arrange() をすれば、市レベルのデータを追加できます（ついでに昇順に並べ替えもしています）。\nこんな感じになります。\n\n\n\n\n\n\n\n\n都道府県\n市区町村\nID\n\n\n\n\n北海道\n札幌市\n01100\n\n\n北海道\n札幌市中央区\n01101\n\n\n北海道\n札幌市北区\n01102\n\n\n北海道\n札幌市東区\n01103"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html#まとめ",
    "href": "tips/240414_benri_seirei/index.html#まとめ",
    "title": "政令指定都市・中核市の整理",
    "section": "まとめ",
    "text": "まとめ\n持ってて損は無し！また何かあれば更新します。"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html#追記",
    "href": "tips/240414_benri_seirei/index.html#追記",
    "title": "政令指定都市・中核市の整理",
    "section": "追記",
    "text": "追記\n2024年5月3日：コード微修正"
  },
  {
    "objectID": "tips/240414_benri_seirei/index.html#footnotes",
    "href": "tips/240414_benri_seirei/index.html#footnotes",
    "title": "政令指定都市・中核市の整理",
    "section": "注",
    "text": "注\n\n\n2024年4月現在↩︎"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html",
    "href": "tips/240514_clean_slide/index.html",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "",
    "text": "別記事で、Beamer 風の Reveal.js スライドをご紹介しましたが、英語にしか対応していませんでした。というのも、あのフォントと釣り合う日本語のフォントが思いつかなかったからです。\n今回は、別のデザインで日本語にも対応したスライドのテンプレートをご紹介します。デザインに困っている方はぜひ使ってみてください！"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html#はじめに",
    "href": "tips/240514_clean_slide/index.html#はじめに",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "",
    "text": "別記事で、Beamer 風の Reveal.js スライドをご紹介しましたが、英語にしか対応していませんでした。というのも、あのフォントと釣り合う日本語のフォントが思いつかなかったからです。\n今回は、別のデザインで日本語にも対応したスライドのテンプレートをご紹介します。デザインに困っている方はぜひ使ってみてください！"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html#テーマ",
    "href": "tips/240514_clean_slide/index.html#テーマ",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "テーマ",
    "text": "テーマ\nテーマは、Quarto 公式でも紹介されている clean-revealjs をアレンジしたものです。\n\n\n\nclean-revealjs （GitHub リポジトリより）\n\n\nそして、今回ご紹介するスライドはこちらです。\n\n\n\nタイトルやヘッダーなどのフォントは、Google Fonts から、Zen Maru Gothic を使っています。\nまた、サブヘッダーも追加しています。サブヘッダーが水色っていうのがいいですよね、なんか。"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html#ポイント",
    "href": "tips/240514_clean_slide/index.html#ポイント",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "ポイント",
    "text": "ポイント\n\nとりあえず見てみよう\nこのスライドは、結構嬉しいポイントとして、移動ボタンが準備されているということがあります。\nこれはどういうことか、こちらをご覧ください。\n\n\n\n結構すごくないですか？PDF だと図や表に飛べたりしますが、自分でスライドを作っていて戻るのめんどいな、と思うことがあったので、結構重宝しています。\n\n\n使い方\n使い方はデモスライドに書いた通り、[[図へ]{.button}](#sec-cars) です。これをする上で必要な準備があるので、それをまとめます。\n\nスライドにラベルを付ける\nこの機能、個人的には便利だなと思うのですが、図には直接飛べないのが玉に瑕です。要は図に飛ぶのではなく、図があるスライドに飛ぶ必要があるということです1。\nラベルを付けるには、次のようにします。\n\n\nQuarto\n\n## ヘッダー\n\n### サブヘッダー {#sec-hogehoge}\n\nhogehoge の部分は適宜変更してください。波括弧で囲み、#sec- で始めることでラベルを付けることができます。セクションの場合は必ず #sec- で始める必要があるので注意してください。\n\n\nボタンを作る\n先述の通り、ボタンを作るには、任意の場所で次のように書きます。\n\n\nQuarto\n\n[[図へ]{.button}](#sec-hogehoge)\n\n中の [] は表示したいテキストで、() の中はラベル名です。ラベル名はセクションのラベル名を指定してください。\n\n\n帰れないと意味がない\n図（があるセクション）へ飛ぶボタンを作ったら、図から戻るボタンも作りましょう。せっかく何ページも飛んでいったのに、戻るのに1スライドずつ戻っていたのでは意味がありません。\n例えば、次のようにします。\n\n\nQuarto\n\n[[戻る]{.button}](#sec-hogehoge)\n\nこれで、図から戻るボタンが作れます。1つの図を複数の箇所から参照する場合、「○○へ戻る」2として、複数のボタンを作るとよいでしょう。\n横に並べたいときは Quarto の機能を活かして、\n\n\nQuarto\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n[[セクション1へ戻る]{.button}](#sec-hogehoge)\n:::\n\n::: {.column width=\"50%\"}\n[[セクション2へ戻る]{.button}](#sec-fugafuga)\n:::\n::::\n\nとすれば、横に並べてボタンを配置できます3。\n\n\nscss ファイルをゲット\nこのスライドを使うには、こちらをクローンするか、ZIP ファイルダウンロードするかして、clean-slide.scss を入手してください4。\nこれを Quarto ファイルと同じディレクトリに置いてください。\n重ねてになりますが、詳しいスライドの作り方はこちらを参照してください。"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html#おわりに",
    "href": "tips/240514_clean_slide/index.html#おわりに",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "おわりに",
    "text": "おわりに\n今回は、日本語にも対忘したスライドのテンプレートをご紹介しました。\nQuarto などの Markdown でスライドを作るのは、パワポより体裁が整うし5、個人的に Beamer よりは簡単に作れると思います。\nぜひ、Quarto でスライドを作ってみてください！"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html#参考",
    "href": "tips/240514_clean_slide/index.html#参考",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nQuarto Extensions: clean-revealjs\n\n\n\n\n\n\n\n\n\nGitHub: clean-revealjs"
  },
  {
    "objectID": "tips/240514_clean_slide/index.html#footnotes",
    "href": "tips/240514_clean_slide/index.html#footnotes",
    "title": "【日本語版】クリーンなスライドを Quarto で作る！",
    "section": "注",
    "text": "注\n\n\n図の参照自体はもちろんできます。Quarto での相互参照の仕方についてはこちら↩︎\n○○はセクションやサブセクションの名前など↩︎\nこの書き方の詳細や Quarto の機能についてはこちら↩︎\nもはや新しい scss ファイルを手動で作って、中身をコピーするでもいいですよ。↩︎\nスライド作成に自信がある方はすみません…↩︎"
  },
  {
    "objectID": "tips/240512_beamer/index.html",
    "href": "tips/240512_beamer/index.html",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "",
    "text": "\\(\\LaTeX\\) の Beamer で使える Metropolis テーマがおしゃれだと思ったので使ってみたい！というモチベーションです。\n普段は Reveal.js を使っているので、Metropolis テーマを Reveal.js で再現したいと思い、できる限り頑張ってみました。\n\n\n\nMetropolis テーマはこんな感じです（GitHub リポジトリより）"
  },
  {
    "objectID": "tips/240512_beamer/index.html#metropolis-との出会い",
    "href": "tips/240512_beamer/index.html#metropolis-との出会い",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "",
    "text": "\\(\\LaTeX\\) の Beamer で使える Metropolis テーマがおしゃれだと思ったので使ってみたい！というモチベーションです。\n普段は Reveal.js を使っているので、Metropolis テーマを Reveal.js で再現したいと思い、できる限り頑張ってみました。\n\n\n\nMetropolis テーマはこんな感じです（GitHub リポジトリより）"
  },
  {
    "objectID": "tips/240512_beamer/index.html#reveal.js-で再現",
    "href": "tips/240512_beamer/index.html#reveal.js-で再現",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "Reveal.js で再現",
    "text": "Reveal.js で再現\n\n\n\n\n\n\nNote\n\n\n\nReveal.js で、と書いていますが、Quarto 経由で使用することを想定しています。\nQuarto での使い方についてはこちら、Reveal.js についてはこちらを参照してください。\n\n\nこちらの GitHub リポジトリに、Metropolis テーマをもとに作成した scss ファイルがあります。\n私もよくわからずに作成しましたが、scss ファイルはデザインを指定しているファイル、みたいな理解で良いと思います（笑）"
  },
  {
    "objectID": "tips/240512_beamer/index.html#使い方",
    "href": "tips/240512_beamer/index.html#使い方",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "使い方",
    "text": "使い方\n\nこのリポジトリをクローン、もしくは scss ファイルをダウンロード\n\nリポジトリ自体は整えてないので、クローンしなくても scss ファイルがダウンロードできれば大丈夫です。\n\nQuarto コードがあるディレクトリに scss ファイルを配置\n\n要は .qmd ファイルと .scss ファイルが同じフォルダに入っていれば大丈夫です。\n\n.qmd ファイルに以下のように記述\n\n\n\nQuarto\n\n---\ntitle: \"Title\"\nauthor: \"Author\"\ninstitute: \"Institute\"\ndate: \"2024-05-12\"\nformat: \n    revealjs:\n        theme: \n            - default\n            - metropolis.scss\n        slide-number: true\n        date-format: long\n---\n\n\n.qmd ファイルをレンダリング\n\nR Markdown で言うところの Knit です。"
  },
  {
    "objectID": "tips/240512_beamer/index.html#デモ",
    "href": "tips/240512_beamer/index.html#デモ",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "デモ",
    "text": "デモ\n\n\n\nMetropolis からヘッダー部分をアレンジしています1。"
  },
  {
    "objectID": "tips/240512_beamer/index.html#まとめ",
    "href": "tips/240512_beamer/index.html#まとめ",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "まとめ",
    "text": "まとめ\nReveal.js はシンプルでデザイン性も高く、コードの実行結果もそのまま表示できるというメリットがあります。\nぜひ試しに使ってみてください。\nちなみに、Quarto では Beamer も使えますので、普通に Metropolitan 本家を使うこともできます。単に普段使っている Reveal.js で使いたかったから作ったというだけです。笑"
  },
  {
    "objectID": "tips/240512_beamer/index.html#参考",
    "href": "tips/240512_beamer/index.html#参考",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nMetropolis テーマ"
  },
  {
    "objectID": "tips/240512_beamer/index.html#追記",
    "href": "tips/240512_beamer/index.html#追記",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "追記",
    "text": "追記\n2024/5/13：このテーマをもとに、Quarto でスライドを作る方法を紹介しました。こちらも併せてご覧ください。"
  },
  {
    "objectID": "tips/240512_beamer/index.html#footnotes",
    "href": "tips/240512_beamer/index.html#footnotes",
    "title": "【スライド】Beamer の Metropolis テーマを Reveal.js で再現したい",
    "section": "注",
    "text": "注\n\n\n塗りつぶしがうまくいかなかっただけです。↩︎"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html",
    "href": "tips/240525_vscode_github/index.html",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "",
    "text": "以前 VSCode を用いた R 環境の構築方法についてご紹介しました。\nその中で GitHub についても触れましたが、今回は VSCode で GitHub を使った作業の流れを詳しく紹介します。\n基本的に共同研究を想定していますが、個人で使う場合も同様の流れで作業を進めることができます。\n具体的な違いとして、個人作業の場合はブランチを作成したりしなくてもよいと思いますが、共同研究の場合はブランチを作成して作業を進めることが一般的です。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#はじめに",
    "href": "tips/240525_vscode_github/index.html#はじめに",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "",
    "text": "以前 VSCode を用いた R 環境の構築方法についてご紹介しました。\nその中で GitHub についても触れましたが、今回は VSCode で GitHub を使った作業の流れを詳しく紹介します。\n基本的に共同研究を想定していますが、個人で使う場合も同様の流れで作業を進めることができます。\n具体的な違いとして、個人作業の場合はブランチを作成したりしなくてもよいと思いますが、共同研究の場合はブランチを作成して作業を進めることが一般的です。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#事前準備",
    "href": "tips/240525_vscode_github/index.html#事前準備",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "事前準備",
    "text": "事前準備\nこちらの記事の手順は踏んでいるとします。\n\nGitHub アカウントを作成している\nVSCode で GitHub にログインする\nコラボレーターとして登録する\n\n招待の詳細については記事をご覧ください。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#ワークフロー",
    "href": "tips/240525_vscode_github/index.html#ワークフロー",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "ワークフロー",
    "text": "ワークフロー\n\n1. リポジトリをクローンする\n\nVSCode を開き、WSL に接続\n画面左のアイコンで上から3つ目の「ソース管理」を選択\n「リポジトリを複製」、「GitHub から複製」を順に選択\nクローンしたいリポジトリを選択しOK をクリック1\n\nリポジトリが表示されない場合は「ユーザー名/リポジトリ名」の書き方でクローンできます。\n\nクローンするディレクトリを選択\n\n特に理由がなければそのまま OK をクリックして下さい。\n\nクローンされる\n\n自動でクローンしたリポジトリが開かれます。\n開発コンテナを使用する場合は「開発コンテナで再度開く」と出るので、選択してください。\n\n\n\n\n2. ブランチを作成する\n作業ブランチを作成します。デフォルトでは main ブランチになっているので、作業ブランチを作成して作業を進めます。\nブランチは、イメージで言うと「自分の作業用のコピー」です。そっくりそのままファイル等をコピーして作業を行い、完成したら main にくっつけてあげるという感じです。\nmain ブランチは基本的に完成品を置いておくイメージなので、各自でブランチを作成して作業を進めてください。\n\n画面左下の「main」をクリック\n「新しいブランチを作成」を選択\nブランチ名を入力し、Enter キーを押す\n\nブランチ名は、作業内容がわかるように命名するとよいと思います。\nしかし何でも大丈夫です。\n\nブランチが作成される\n\n画面左下に作成したブランチ名が表示されます。\n\n\nこれでブランチが作成されました。作業を進めていきましょう。\n\n\n3. ファイルを編集する\n作業を進めます。コードを書いたりデータを追加したり、何らかの作業が行われたとします。\n\n\n4. 変更をコミットする\n作業が終わったら、変更をコミットします。\n\n画面左のアイコンで上から3つ目の「ソース管理」を選択\nコミットするファイルを選択\n\nカーソルをファイルに当てると「+」が表示されるので、クリックしてステージングします。\nすべてのファイルをステージングする場合は「変更」の右側にある「+」をクリックすれば OK です。\n\nコミットメッセージを入力\n\nコミットメッセージは、変更内容がわかるように簡潔に書くとよいと思います。\n例: Add new data\n\n「✓コミット」をクリック\n\nコミットが完了します。\n\n\n\n\n5. プッシュする\nコミットした内容をリモートリポジトリに反映させます。\n\n「ソース管理」の右にある「…」をクリック\n\nカーソルを当てると出てきます。\n\n「プッシュ」を選択\n\nブランチを公開するか聞かれたら、OK をクリックしてください。\nプッシュが完了します。\n\n\n\n\n\n\n\nこれでリモートリポジトリに変更が反映されました。\nコミットしてすぐプッシュしたい場合は、コミットメッセージを入力した後に「✓コミット」の右側にある下矢印から「コミットしてプッシュ」を選択することで一括で行えます。\n\n\n6. プルリクエストを作成する\n作業が終わったら、プルリクエストを作成します。\n現段階では、自分のブランチに反映させただけなので、これを main ブランチに反映させる必要があります。\n\n\n\n\n\n\nこの手続きを踏む理由\n\n\n\nプルリクエストを作成する理由は、他の人に自分の作業内容を確認してもらうためです。\nプルリクエストを作成することで、他の人が自分の作業内容を確認し、問題がなければ main ブランチに反映させることができます。\nもし全員が main ブランチに直接コミットしてしまうと、他の人の作業とコンフリクトする場合があったり、誤って動かないコードで上書きされてしまったりなど、問題が発生する可能性があります。\nそのため、プルリクエストを作成して他の人に確認してもらいながら、問題がなければ main ブランチに反映させるという手順を踏むことが一般的です。\n\n\n\nGitHub にアクセスし、リポジトリを開く\n「Compare & pull request」を選択\n\n以下のようなバナーが表示されるので、クリックしてください。\n\n\n\n\n\n\n\n\nプルリクエストの内容を入力\n\n「Add a title」にはコミットメッセージが入力されていると思います。\n「Add a description」には、必要に応じて作業内容や変更点などを詳しく書くとよいと思います。\n\n「Create pull request」をクリック\n\nプルリクエストが作成されます。\n\n\nこれでプルリクエストが作成されました。他の人に確認してもらいましょう。\n\n\n7. プルリクエストをマージする\nプルリクエストを作成したら、他の人に確認してもらい、問題がなければマージします。\n\nリポジトリのページにアクセスし、「Pull requests」を開く\nリクエストを選択して開く\n問題がなければ「Merge pull request」をクリック\n\n問題ない場合「This branch has no conflicts with the base branch」と表示されます。\n\n\n\n\n「Confirm merge」をクリック\n\nマージが完了します。\n\n\n\n\n8. ブランチを削除する\nプルリクエストがマージされたら、作業ブランチを削除します。ちなみにブランチは作業ごとに新しいものを作り、プルリクエストがマージされたら削除するという流れが推奨されるようです。\n\nVSCode でリポジトリを開く\n画面左側のアイコンから「ソース管理」を選択\n「ソース管理」の右にある「…」をクリック\n「ブランチ」から「ブランチを削除」を選択\n削除するブランチを選択\n\n削除するブランチを選択して OK をクリック\n\nブランチが削除される\n\n画面左下のブランチ名が main になっていることを確認してください。\n\n\nこれで作業ブランチが削除されました。次回別の作業を行うときは、新しいブランチを作成して作業を進めてください。\n\n\n9. ローカルリポジトリを更新する\nリモートリポジトリに変更が反映されたので、他の人はローカルリポジトリを更新します。\n\nVSCode でリポジトリを開く\n画面左下のブランチが main であれば自分の作業ブランチに切り替える\n\n画面左下のブランチ名をクリックして、切り替えてください。\n\n画面左のアイコンから「ソース管理」を選択\n「変更の同期」と出ていたらそれを、出ていなければ「…」をクリックして「プル」を選択\n\nプルすることでリモートリポジトリの変更をローカルリポジトリに反映させます。\nプルが完了します。ファイルを見てみてください。\n\n\nこれで他の人の変更が反映されたローカルリポジトリが得られました。\nここからは再び作業を進め、作業をサイクルさせていきます。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#まとめ",
    "href": "tips/240525_vscode_github/index.html#まとめ",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "まとめ",
    "text": "まとめ\nVSCode で GitHub を使った作業の流れを紹介しました。\n基本的には、リポジトリをクローンして作業ブランチを作成し、作業を進め、変更をコミットしてプッシュし、プルリクエストを作成してマージするという流れです。\n共同研究を行う場合は、このような流れで作業を進めることで、コンフリクトなどを回避しながら効率的に作業を進めることができます。\nぜひ参考にしてみてください。"
  },
  {
    "objectID": "tips/240525_vscode_github/index.html#footnotes",
    "href": "tips/240525_vscode_github/index.html#footnotes",
    "title": "【ワークフロー】VSCode で GitHub を使う",
    "section": "注",
    "text": "注\n\n\nEnter キーでも OK です。↩︎"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html",
    "href": "tips/240506_gis_on_r/index.html",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "",
    "text": "R 上で GIS を操作する方法を簡単に紹介します。\nGIS を R 上で実行するメリットは、再現性が担保できることです。同じ作業を繰り返しするような場合、力を発揮すると思います。また、ggplot2 で可視化できる点も便利です。\n主に、使用するパッケージ、データの読み込み、簡単なデータハンドリング、そして交差する地物の抽出を少しご紹介します。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#はじめに",
    "href": "tips/240506_gis_on_r/index.html#はじめに",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "",
    "text": "R 上で GIS を操作する方法を簡単に紹介します。\nGIS を R 上で実行するメリットは、再現性が担保できることです。同じ作業を繰り返しするような場合、力を発揮すると思います。また、ggplot2 で可視化できる点も便利です。\n主に、使用するパッケージ、データの読み込み、簡単なデータハンドリング、そして交差する地物の抽出を少しご紹介します。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#使用するパッケージ",
    "href": "tips/240506_gis_on_r/index.html#使用するパッケージ",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "使用するパッケージ",
    "text": "使用するパッケージ\nsf パッケージを使用します。また、これらのデータを通常のデータと同様 tidyverse でハンドリングできるので、これら2つを主に使います。\nまた、ここでは詳しく紹介しませんが、私は here パッケージも使用します。こちらの記事で紹介しているような方法でプロジェクトを実行している場合、相対パスを使用すると便利です。詳しくは作業の流れで見てみてください。\n\n\n\n\n\n\nDocker で環境を構築する場合\n\n\n\n\n\nDocker を用いた環境構築の記事で紹介している方法で環境を構築する場合、1つ注意点があります。Dockerfile の1行目を以下のように変更してください。\nFROM rocker/geospatial:latest\nrocker/rstudio のままだと、GIS を扱うのに必要なパッケージを使用できません。上のように変更してファイルを保存した後、画面左下「&gt;&lt; 開発コンテナー」 をクリックし、「コンテナーのリビルド」を実行してください。\n\n\n\n\n# パッケージのインストール\ninstall.packages(\"sf\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"here\")\n\n\n# パッケージの読み込み\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(here)"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#使用するデータ",
    "href": "tips/240506_gis_on_r/index.html#使用するデータ",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "使用するデータ",
    "text": "使用するデータ\n\n鉄道データ\n今回は日本の鉄道（駅）データを使用してみます。\n\n国土数値情報ダウンロードサイトより「鉄道（ライン）」をクリック、2022年のデータをダウンロード\n\n\n\n\n一番上の2022年データを今回は使用\n\n\n\n\n行政区域データ\n後ほど鉄道データと重ねて使うために使用します。\n同様に国土数値情報ダウンロードサイトから、「行政区域」に進み、今回は福島県の2024年データをダウンロードします。\n鉄道データと同じフォルダに入れておいてください。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#データの読み込み",
    "href": "tips/240506_gis_on_r/index.html#データの読み込み",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "データの読み込み",
    "text": "データの読み込み\nダウンロードしたデータには、駅のデータと路線のデータがそれぞれ入っています。\nそれぞれ読み込みます。読み込みには、sf::read_sf() を使います。sf::st_read() もありますが、こちらは読み込む際に設定を施したい場合に使います。基本は前者で OK です。\nUTF-8 で読み込みたいので、utf8 フォルダの中のデータを使用します。読み込むのは Shapefile です。\n\nstation &lt;- read_sf(here(\"data/N02-22_GML/utf8/N02-22_Station.shp\"))\n\nrail &lt;- read_sf(here(\"data/N02-22_GML/utf8/N02-22_RailroadSection.shp\"))\n\n\n\n\n\n\n\nhere について\n\n\n\n\n\nご覧の通り、here はワーキングディレクトリをベースとして、そこからの相対パスでファイルの読み込み等を行うことができます。\nR のプロジェクトを使用している場合、.Rproj ファイルがあるところがワーキングディレクトリです。今回はその中の data フォルダにデータを入れているので、このような書き方になっています。here() の中はダブルクォーテーションで囲んでください。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#データの可視化",
    "href": "tips/240506_gis_on_r/index.html#データの可視化",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "データの可視化",
    "text": "データの可視化\n\nggplot2\nおなじみ ggplot2 パッケージを使ってこれらの路線を可視化します1。\n\nstation |&gt; \n  ggplot() + \n  geom_sf() + # GIS 用\n  theme_void() # 背景や罫線を除去\n\n\n\n\n\n\n\n図 1: 日本の駅\n\n\n\n\n\nなんとなく日本が形作られましたね。東京と大阪に特に駅が多いことも一目瞭然です。\n同様に路線もプロットします。\n\nrail |&gt; \n  ggplot() + \n  geom_sf() + \n  theme_void()\n\n\n\n\n\n\n\n図 2: 日本の鉄道路線\n\n\n\n\n\nこうして見るとなんか面白いですよね。北海道の北東部は線路がないみたいです。\nここまでシンプルに可視化する方法をご紹介しました。次のセクションでもう少し地域にフォーカスして見ていきます。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#データハンドリング",
    "href": "tips/240506_gis_on_r/index.html#データハンドリング",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "データハンドリング",
    "text": "データハンドリング\n\nデータの抽出\n例えば、新幹線の駅だけデータとして使いたいとします。\n先ほどのダウンロードサイトの属性情報の部分をご覧ください。そこから事業者種別コード（変数名：N02-002）を確認してみると、1が新幹線に該当することが分かります。\nここで、tidyverse パッケージを使用しながら、東北新幹線の駅だけを抽出してみましょう。また、列名を変更しながら必要な変数のみ抽出します。\n\nsta_tohoku &lt;- station |&gt; \n  filter(N02_002 == 1, N02_003 == \"東北新幹線\") |&gt; \n  select(\"路線名\" = N02_003, \"駅名\" = N02_005, geometry)\n\n\n\n\n\n表 1: 東北新幹線の駅情報（上から6行を表示）\n\n\n\n\n\n\n\n\n\n路線名\n駅名\ngeometry\n\n\n\n\n東北新幹線\n二戸\nc(141.28627, 141.28491, 40.26107, 40.25848)\n\n\n東北新幹線\nいわて沼宮内\nc(141.21742, 141.21742, 39.96114, 39.96009)\n\n\n東北新幹線\n八戸\nc(141.42981, 141.43206, 40.50822, 40.51043)\n\n\n東北新幹線\n盛岡\nc(141.13807, 141.13499, 39.70015, 39.70295)\n\n\n東北新幹線\n北上\nc(141.12356, 141.12285, 141.12234, 141.12168, 39.28386, 39.28272, 39.28188, 39.28054)\n\n\n東北新幹線\n水沢江刺\nc(141.18919, 141.18822, 39.14381, 39.14651)\n\n\n\n\n\n\n\n\n\n\n表 1 をご覧いただくと分かる通り、東北新幹線の駅のみを抽出できています。また、geometry 変数が地理情報を示しています。\n\n\nラインデータをポイントデータ化する\n駅はラインデータになっています。駅は幅を持っているためです。そこで、これをポイントデータ化し、駅の位置を1点で特定します。\nまず、ラインデータがどうなっているか確認しましょう。地図を拡大して見てみると、線状になっていることが分かります。\n\n\n\n\n\n\n\nこれをポイント化するために使用するのが、sf::st_centroid() です。地物の重心を求めてくれます。\nコードは以下です。\n\nsta_tohoku_c &lt;- sta_tohoku |&gt; \n  st_centroid(geometry)\n\n改めて見てみると、ポイントになっていることが分かります。\n\n\n\n\n\n\n\nポイントデータ化するメリットとしては、距離の算出に使えることなどがあります。ある地点から駅までの距離を算出したい場合、駅が幅を持っていると距離算出の基準が曖昧になってしまうので、そこでポイント化すればその基準を明確化できるというわけです。\n以上、sf::st_centroid() を用いてポイントデータ化する方法をご紹介しました。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#交差する地物の抽出",
    "href": "tips/240506_gis_on_r/index.html#交差する地物の抽出",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "交差する地物の抽出",
    "text": "交差する地物の抽出\n先ほど福島県のデータをダウンロードしました。ここで、福島県に含まれる新幹線駅を抽出したいとします2。\n\n行政区域データ\nまず、福島県の行政区域データを読み込み、可視化しましょう。\n\nfukushima &lt;- read_sf(here(\"data/N03-20240101_07_GML/N03-20240101_07.shp\"))\n\n\nfukushima |&gt; \n  ggplot() + \n  geom_sf() + \n  theme_void()\n\n\n\n\n\n\n\n図 3: 福島県\n\n\n\n\n\n\n\n抽出\n次に、sta_tohoku_c を用いて、福島県と交差する（含まれる）駅を抽出します。\n交差する地物を抽出するためには、sf::st_intersects() もしくは sf::st_intersection() を用います。\n正直後者の方がシンプルなのですが、両者には次のような違いがあります。\n\nst_intersects(): 2つのジオメトリが交差するかどうかの論理判定（TRUE/FALSEやインデックスのリスト）を返す\nst_intersection(): 交差部分のジオメトリそのものを新しいオブジェクトとして返します。\n\n何やら難しいので、わかんなくて困ったら後者を使っておけばよいのではないでしょうか3。\nコードは以下のようになります。\n\nsta_07_a &lt;- sta_tohoku_c |&gt; \n  filter(\n    row_number() %in% \n      st_intersects(fukushima, sta_tohoku_c) |&gt; \n      unlist()\n  )\n\n\nsta_07_b &lt;- st_intersection(fukushima, sta_tohoku_c)\n\n\n\n\n\n\n\n1つ目の方法について\n\n\n\n\n\n1つ目は大変複雑ですね。プロセスを紐解くと次のようになります。\n\nsta_tohoku_c から抽出するので、sta_tohoku_c からスタート\n抽出するので dplyr::filter() を使用\nsf::st_intersects() で、fukushima と重なる sta_tohoku_cを抽出\nsf::st_intersects() はリスト形式で結果を返すので、unlist() を用いてリスト形式を解除\nsta_tohoku_c の行番号と照らし合わせ、返ってきた結果と同じもののみ抽出\n\n\n\n\n結果は次のようになります。\n\n\n\n\n表 2: st_intersects() を用いた場合\n\n\n\n\n\n\n\n\n\n路線名\n駅名\ngeometry\n\n\n\n\n東北新幹線\n福島\nc(140.458612067603, 37.7540599673619)\n\n\n東北新幹線\n郡山\nc(140.388619989856, 37.3986200007428)\n\n\n東北新幹線\n新白河\nc(140.188827537169, 37.1233084742238)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n表 3: st_intersection() を用いた場合\n\n\n\n\n\n\n\n\n\nN03_001\nN03_002\nN03_003\nN03_004\nN03_005\nN03_007\n路線名\n駅名\ngeometry\n\n\n\n\n福島県\nNA\nNA\n福島市\nNA\n07201\n東北新幹線\n福島\nc(140.458612067603, 37.7540599673619)\n\n\n福島県\nNA\nNA\n郡山市\nNA\n07203\n東北新幹線\n郡山\nc(140.388619989856, 37.3986200007428)\n\n\n福島県\nNA\n西白河郡\n西郷村\nNA\n07461\n東北新幹線\n新白河\nc(140.188827537169, 37.1233084742238)\n\n\n\n\n\n\n\n\n\n\n2つ目のやり方の方が少しごちゃっとしたデータとして返ってきました。\nめんどくさいけどクリーンな方か、簡単だけど煩雑な方か、お好みで使ってみてください。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#おわりに",
    "href": "tips/240506_gis_on_r/index.html#おわりに",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "おわりに",
    "text": "おわりに\n今回は GIS を R で動かす基礎的な内容をご紹介しました。\n交差する地物の抽出にも触れましたが、これだけではまだ分析に使える内容ではないので、距離計算などはまた別記事で書こうと思います。\n間違いや効率的なコーディング等ございましたら、コメントにご記入ください。"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#参考文献",
    "href": "tips/240506_gis_on_r/index.html#参考文献",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "参考文献",
    "text": "参考文献\n\n\n\n\n\n\n事例で学ぶ経済・政策分析のためのGIS入門\n\n\n\n\n\n\n\n\n\nその無茶振り，（Rで）GISが解決します"
  },
  {
    "objectID": "tips/240506_gis_on_r/index.html#footnotes",
    "href": "tips/240506_gis_on_r/index.html#footnotes",
    "title": "R でGIS を動かす【ハンドリング】",
    "section": "注",
    "text": "注\n\n\nあまりなじみのない方に向けて言っておくと、tidyverse パッケージの中に ggplot2 も含まれています。↩︎\n正直この程度であればこんなことするまでもないですが、例ということで悪しからず。いろいろ応用は利きますよ！↩︎\nしかし後者の方が時間はかかりますし、2つのデータをもとに新しいデータを作るので、できたデータは2つのデータフレームの情報を含みます。つまり、ちょっと煩雑なデータが出来上がります。↩︎"
  },
  {
    "objectID": "tips/240520_latex/index.html",
    "href": "tips/240520_latex/index.html",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "",
    "text": "こんにちは、Windows ユーザーです。\nTeX Live はインストールするのが面倒だし、使い方もよくわからないので1、別の方法で\\(\\LaTeX\\) を使えるようにしました。\nまた、Mac での方法も併せてご紹介します。\nこれまで TeX Live に苦労していた方や Overleaf を使っていた方は、ぜひ試してみてください。"
  },
  {
    "objectID": "tips/240520_latex/index.html#はじめに",
    "href": "tips/240520_latex/index.html#はじめに",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "",
    "text": "こんにちは、Windows ユーザーです。\nTeX Live はインストールするのが面倒だし、使い方もよくわからないので1、別の方法で\\(\\LaTeX\\) を使えるようにしました。\nまた、Mac での方法も併せてご紹介します。\nこれまで TeX Live に苦労していた方や Overleaf を使っていた方は、ぜひ試してみてください。"
  },
  {
    "objectID": "tips/240520_latex/index.html#作業手順",
    "href": "tips/240520_latex/index.html#作業手順",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "作業手順",
    "text": "作業手順\n前提として、VSCodeはインストールされているとします。もしまだの方はこちらを参考にインストールしてください2。\n\n0. WSL, Ubuntu と Homebrew の準備\nWindows のローカルでもできるとは思うのですが、Ubuntu でやる方が楽なので、WSL2 を使って Ubuntu でやります。何言ってるかわからない方は、気にしないでください。僕もよくわかりません。\n事前準備は少し面倒だけど、一度やってしまえば楽、みたいなイメージで使っています。とりあえず使えればよいと思っている一大学院生なので、そのあたりは許してください。\nMac の方は、Homebrew を使って TinyTeX をインストールしていきます。\n既にこれらの準備が出来ている方は、飛ばしてください。\n\n0-1. WSL と Ubuntu のインストール（Windows）\nまずは Windows Subsystem for Linux（WSL）をインストールします3。\nPowerShell を管理者権限で起動4し、以下のコマンドを実行します。\nwsl --install\nもし再起動を求められたら、再起動してください。インストールはこれだけです。\nインストールができたらユーザー名とパスワードの設定が求められるので、設定します。\nこれは何でも構いません。sudo コマンドを使う際にパスワードが必要になりますが、本当に簡単なもので大丈夫です5。\nまた、パスワード入力の際に、入力しても画面上には表示されませんが、きちんと入力されていますので慌てず続けてください。\n\n\n0-2. Homebrew のインストール（Mac）\nMac ユーザーは Homebrew を使って諸々インストールしていくので、まだの方はここでインストールしてください。\n\nターミナルを開く\n\nアプリ一覧から「ターミナル」を探してください。\n\n以下のコマンドを入力して実行\n\nパスワードを求められるので、入力してください。\n\n\n\n\nTerminal\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\n\n\n1. TinyTeX のインストール\nTeX Live はインストールが面倒なので、TinyTeX という軽量な \\(\\LaTeX\\) ディストリビューションを使います。R Markdown でもよく使われているので、馴染みがある方も多いかもしれません。\nしかし今回は、R は使いません。目標とするのは TeX Live の代替として、簡潔に \\(\\LaTeX\\) を使えるようにすることです。\n\n1-1. Windows でのインストール\nWindows では、Ubuntu を開いて以下のコマンドを実行します。\nwget -qO- \"https://yihui.org/tinytex/install-bin-unix.sh\" | sh\nこれで TinyTeX のインストールは完了です。簡単ですね。\n\n\n1-2. Mac でのインストール\nMac の方は、ターミナルを開いて以下のコマンドを実行してください。\ncurl -sL \"https://yihui.org/tinytex/install-bin-unix.sh\" | sh\n\n\n\n2. VSCode での設定\n\n2-1. 拡張機能のインストール\nVSCode で LaTeX を使うためには、拡張機能をインストールする必要があります。\n画面左の拡張機能アイコン  をクリックし、検索バーに「LaTeX」と入力します。すると、LaTeX および LaTeX Workshop という拡張機能が表示されるので、2つをインストールします6。\n\n\n2-2. 設定の変更\n拡張機能をインストールしたら、設定を変更します。\n画面左下の管理ボタンから「設定」で設定画面を開き7、右上にある  をクリックして settings.json を開きます。\n以下の {} の中身を設定に追加します。もし既に何か設定がある場合は、最後をカンマで区切り、改行して追加してください。\n{\n    \"latex-workshop.latex.tools\": [\n        {\n          \"name\": \"latexmk\",\n          \"command\": \"latexmk\",\n          \"args\": [\n            \"-synctex=1\",\n            \"-interaction=nonstopmode\",\n            \"-file-line-error\",\n            \"-xelatex\",\n            \"%DOC%\"\n          ]\n        }\n    ],\n    \"latex-workshop.latex.recipes\": [\n        {\n          \"name\": \"latexmk (xelatex)\",\n          \"tools\": [\n            \"latexmk\"\n          ]\n        }\n    ],\n    \"latex-workshop.view.pdf.viewer\": \"tab\",\n    \"latex-workshop.latex.clean.fileTypes\": [\n        \"*.aux\", \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \n        \"*.acr\", \"*.alg\", \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\", \"*.synctex.gz\",\n        // for Beamer files\n        \"_minted*\", \"*.nav\", \"*.snm\", \"*.vrb\",\n    ],\n    \"latex-workshop.latex.autoBuild.run\": \"onBuilt\",\n}\n\nこれで設定は完了です。\n\n\n\n3. 動作確認\nここからは Windows も Mac も共通です。\nはじめに今回使うフォントをインストールしましょう。VSCode のターミナルで以下のコマンドを実行してください。\ntlmgr install ipaex\n次に、VSCode で新しいファイルを作成し、GitHub Copilot が作ってくれた以下のコードを回してみます8。\n\\documentclass{article}\n\\usepackage{bookmark} \n\\usepackage{fontspec} \n\\usepackage{zxjatype} \n\\usepackage[ipaex]{zxjafont}\n\n\\title{サンプルドキュメント}\n\\author{あなたの名前}\n\\date{今日の日付}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{導入}\n\nこれはサンプルのセクションです。\n\n\\subsection{サブセクション}\n\nこれはサンプルのサブセクションです。\n\n\\end{document}\nこれを保存し、右上の緑の三角ボタン  をクリックすると、PDF ファイルが生成されます。\nしかし、おそらくここでエラーに直面するでしょう。次のセクションでエラーの解決法について説明します。\n\n\n4. エラーの解決\nこの段階のエラーのほとんどは、パッケージがインストールされていないことが原因です。\nコンパイルすると右下にエラーの表記とともに「Open compiler log」と出ると思うので、それをクリックしてエラーログを開きます。\n\n\n\nこれを押します。\n\n\nエラーログを少し遡ってみると、どのパッケージがインストールされていないかがわかります。例えば、「! LaTeX Error: File ‘xltxtra.sty’ not found.」と出た場合、xltxtra パッケージがインストールされていないことがわかります。\nその場合、ターミナルに戻り以下のコマンドを実行してください。\ntlmgr install xltxtra\nこれでインストールできますが、使い始めのうちは何度か似たようなエラーが出るかもしれません。エラーが出たらエラーログを見て、同様の方法で必要なパッケージをインストールしてください。\n\n\n\n\n\n\nエラーのトラップ\n\n\n\n先ほどのサンプルコードを実行しようとすると、\n! LaTeX Error: File `xeCJK.sty’ not found.\nというエラーが途中で出てきます。しかし、tlmgr install xeCJK としてもインストールできません。これは、xeCJK というパッケージが存在しないためです。\n代わりに、ctex パッケージをインストールすることで解決できます。ctex パッケージが xeCJK を含んでいるためです。\nややこしいですが、これで試してみてください。\n\n\n\n\n5. 再び動作確認\nエラーを解消するうちに、足りないパッケージがインストールでき、最終的には問題なくコンパイルできるようになるはずです。\n日本語で使う場合、フォントをインストールしていないミスが多いので、気を付けてください。\n最終的に次のように出力できました。"
  },
  {
    "objectID": "tips/240520_latex/index.html#おわりに",
    "href": "tips/240520_latex/index.html#おわりに",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "おわりに",
    "text": "おわりに\n以上で、TeX Live を使わずに \\(\\LaTeX\\) 環境を作る方法を紹介しました。\nTinyTeX は、R 上だと必要なパッケージが自動でインストールされる9ので、それに比べるとやや不便ですが、簡潔に \\(\\LaTeX\\) を使えるようになるので、一度試してみる価値はあると思います。\nTeX Live や VSCode の設定に苦心している方は、ぜひ試してみてください。\nまた、何かエラー等ありましたらコメントでお知らせください。"
  },
  {
    "objectID": "tips/240520_latex/index.html#参考",
    "href": "tips/240520_latex/index.html#参考",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nTinyTeX\n\n\n\n\n\n\n\n\n\nTinyTeX 非公式日本語版ドキュメント"
  },
  {
    "objectID": "tips/240520_latex/index.html#footnotes",
    "href": "tips/240520_latex/index.html#footnotes",
    "title": "TeX Live を使わずに LaTeX 環境を作る！",
    "section": "注",
    "text": "注\n\n\n実際には少し使っていたので、並程度には使えます（笑）↩︎\n日本語設定などもしておくと便利かもしれません↩︎\nWindows における WSL のインストールについてはこちらでも触れています。↩︎\nアプリ一覧から右クリックすれば「詳細」→「管理者として実行」で使えます。↩︎\nこちらの動画の 4:42~ あたりを見てみてください。パスワードは「a」です。a。↩︎\n怪しかったら、mathematic.vscode-latex と James-Yu.latex-workshop をそれぞれ入力すれば確実です。↩︎\nWindowsなら Ctrl ＋ , で、Mac ならcommand ＋ , でもいけます。↩︎\n少し日本語フォントなどの設定を加えています。↩︎\nその割によく手動でインストールさせられる気がしますが…↩︎"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html",
    "href": "tips/240329_rmarkdown_pdf/index.html",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "",
    "text": "こんにちは。\n大学生、大学院生の方で、R を使う授業のレポートを作ったりする方は R Markdown 使うことが多いかもしれません。\nしかし、私の周りでは PDF 出力で結構困っている人がいたのでここでまとめます。\n環境構築、\\(\\LaTeX\\) については詳しく書かないので、そこは他のサイトなどを参照してください。\n目標はとりあえず PDF で出力することです。\n\nターゲット\n\nRの経験が浅く R Markdown や Quarto に馴染みがない方\nR Markdown を使っているが、PDF 出力の仕方に困っている方"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#はじめに",
    "href": "tips/240329_rmarkdown_pdf/index.html#はじめに",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "",
    "text": "こんにちは。\n大学生、大学院生の方で、R を使う授業のレポートを作ったりする方は R Markdown 使うことが多いかもしれません。\nしかし、私の周りでは PDF 出力で結構困っている人がいたのでここでまとめます。\n環境構築、\\(\\LaTeX\\) については詳しく書かないので、そこは他のサイトなどを参照してください。\n目標はとりあえず PDF で出力することです。\n\nターゲット\n\nRの経験が浅く R Markdown や Quarto に馴染みがない方\nR Markdown を使っているが、PDF 出力の仕方に困っている方"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#結論r-markdown",
    "href": "tips/240329_rmarkdown_pdf/index.html#結論r-markdown",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "結論（R Markdown）",
    "text": "結論（R Markdown）\n\n事前準備\n以下を R のコンソールで実行してください。\n\n\nTinyTeXパッケージをインストール\n\n# インストール済みの方は省略\ninstall.packages(\"tinytex\")\n\n\n\nTinyTeXのインストール\n\ntinytex::install_tinytex()\n\n\n\nbookdownパッケージのインストール\n\n# インストール済みの方は省略\ninstall.packages(\"bookdown\")\n\n\n\nYAMLヘッダの設定\nヘッダの部分を以下のように変更してください。\n---\ntitle: \"タイトル\"\nauthor: \"筆者\"\ndate: 2024-08-03\noutput: \n  bookdown::pdf_document2:\n    latex_engine: xelatex\n    toc: false\n    number_section: true\n    keep_tex: true\nheader-includes: \n  - \\usepackage{bookmark} \n  - \\usepackage{xltxtra} \n  - \\usepackage{zxjatype} \n  - \\usepackage[ipaex]{zxjafont}\n---\nbookdown::pdf_document2 の部分は pdf_document でもいけます（後述）。 以上を設定出来たら、knit してください。 無事 PDF ファイルが出力されるはずです！"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#結論quarto",
    "href": "tips/240329_rmarkdown_pdf/index.html#結論quarto",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "結論（Quarto）",
    "text": "結論（Quarto）\n\n事前準備\nR Markdown と同じです。\n\n\nYAML ヘッダ\n---\ntitle: \"タイトル\"\nauthor: \"著者\"\ndate: 2024-07-08\ndate-format: \"YYYY年M月D日\" \nformat: \n  pdf: \n    documentclass: article\n    number-sections: true\n    include-in-header: \n      - text: |\n          \\usepackage{zxjatype}\n          \\usepackage[ipaex]{zxjafont}\nexecute: \n  echo: false\n  warning: false\nlanguage: \n  crossref-fig-title: \"図\"\n  crossref-tbl-title: \"表\"\n  crossref-eq-prefix: \"式\"\n---\nやっていることはほとんど R Markdown の場合と同じですが、書き方は異なります。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#詳細",
    "href": "tips/240329_rmarkdown_pdf/index.html#詳細",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "詳細",
    "text": "詳細\n\nGlobal Options\n後々困らないよう設定を行います。\n\n上部にある Tools から Global Options... → Sweave と進む\nTypeset LaTeX into PDF using を XeLaTeX に変更\nUse tinytex when compiling .tex files にチェック\n\nこれで前述の設定と整合的になります。また、プロジェクトオプションの方も変更を求められるかもしれません。それにも従って、ここでの設定と整合的になるよう変更してください。\n\n\nbookdown::pdf_document2\nR Markdown のヘッダにおいて、pdf_document ではなく bookdown::pdf_document2 を使用するのには理由があります。\nそれは相互参照を使うためです。\n例えば、\n\nplot(cars)\n\n\n\n\n\n\n\n図 1: データのプロット\n\n\n\n\n\nこのプロットを、文中で引用したいとします。\n「図1：データのプロット」などと書き、「図1から～」と引用していたとすると、その前に別の図を入れる必要が出てきた場合に、全て1つずつ変更していくのは手間がかかります。\nそこで相互参照を用いれば、自動で番号を振って、自由に引用できるようになるわけです。\n以下はR Markdown クックブックから引用したサンプルコードです。\n図 \\@ref(fig:cars-plot) を見よ.\n\n```{r cars-plot, fig.cap=\"自動車のデータ\", echo=FALSE}\npar(mar = c(4, 4, .2, .1))\nplot(cars)  # a scatterplot\n```\n\n次に数式\\@ref(eq:mean) を見よ.\n\n\\begin{equation}\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n} (\\#eq:mean)\n\\end{equation}\n\nさらに表 \\@ref(tab:mtcars) を見よ.\n\n```{r mtcars, echo=FALSE}\nknitr::kable(mtcars[1:5, 1:5], caption = \"mtcars データ\")\n```\n{r cars-plot, fig.cap=\"自動車のデータ\", echo=FALSE} の cars-plot の部分がチャンク名です1。 同様に mtcars もチャンク名なわけですが、\\@ref() を用いれば該当する図や表、数式を引用できます。\n先ほどのプロットを \\@ref() を使って引用してみると、図 1 となるわけです2。\n注意点は、\\@ref()の中で図ならfig:、表ならtab:、数式ならeq:と始めないと引用できない点です。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#よくあるエラーについて",
    "href": "tips/240329_rmarkdown_pdf/index.html#よくあるエラーについて",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "よくあるエラーについて",
    "text": "よくあるエラーについて\nTinyTeX はコンパイルに必要なパッケージを自動でインストールしてくれるのが魅力ですが、よくエラーに直面します。\nここではよくあるエラーとして、「パッケージ見つからないエラー」を取り上げます。\n\nパッケージが見つからないエラー\n多分これがエラーの中で一番多いと思います。私自身も何回も遭遇しました。\n例えば以下のようなエラーです。\nfinding package for bookmark.sty\nERROR: \ncompilation failed- no matching packages\nLaTeX Error: File `bookmark.sty' not found.\nnot found です。あるはずなんですけどね…。\n&lt;対処法&gt;\n\ntinytex::tlmgr_install(\"パッケージ名\") で見つからないパッケージのみ別でインストール\n\n上の例で言えば、bookmark.sty のみをインストールするということです。\nこの際注意点として、.sty は抜いてください。tinytex::tlmgr_install(\"bookmark\") とする、ということです。\n\ntinytex::tlmgr_update() を実行\n\n既存のパッケージをアップデートする方法です。\n\nTinyTeX の再インストール\n\n現状最有力の方法です。\ntinytex::tlmgr_update() を実行した際、コンソールに tinytex::reinstall_tinytex(repository=\"illinois\")3 を試してみろと出る場合があります。これに従って、TinyTeX を再インストールしてください。\n時間は少しかかりますが、最新のバージョンにアップデート可能です。\nTinyTeX を初インストールした直後でも効果があった例があるので、1と2でできなかった場合はぜひ再インストールしてみてください。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#おわりに",
    "href": "tips/240329_rmarkdown_pdf/index.html#おわりに",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "おわりに",
    "text": "おわりに\nレポートでしたら相互参照はそこまで使用頻度が高くないかもしれませんが、卒論や修論では役に立つと思います。\nとりあえずPDF出力したい方、ご参考まで！\n間違いや新たなエラー等ありましたら、コメントもよろしくお願いいたします。"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#参考",
    "href": "tips/240329_rmarkdown_pdf/index.html#参考",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\nR Markdown クックブック\n\n\n\n\n\n\n\n\n\nQuarto 公式ガイド\n\n\n\n\n\n\n\n\n\n私たちのR"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#追記",
    "href": "tips/240329_rmarkdown_pdf/index.html#追記",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "追記",
    "text": "追記\n2024/5/6：「よくあるエラーについて」を追加\n2024/7/8：Quarto における YAML ヘッダを更新"
  },
  {
    "objectID": "tips/240329_rmarkdown_pdf/index.html#footnotes",
    "href": "tips/240329_rmarkdown_pdf/index.html#footnotes",
    "title": "Quarto & R MarkdownでPDF出力【LaTeX】",
    "section": "注",
    "text": "注\n\n\n他の部分はチャンクオプションと呼ばれるものですが、今回は触れません。チャンクオプションについてはこちらをご覧ください。↩︎\nちなみに Quarto では、チャンク名を fig-hogehoge や tbl-hogehoge などにすれば、@fig-hogehoge や @tbl-hogehoge だけで簡単に引用できます。Quarto での相互参照についてはこちらをご覧ください。↩︎\nillinois の部分は異なるかもしれません。↩︎"
  },
  {
    "objectID": "tips/240507_pacman/index.html",
    "href": "tips/240507_pacman/index.html",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "",
    "text": "何か新しいプロジェクトを始める際に、新しいパッケージをいちいちインストールして読み込むのは面倒ですよね。\nそんな時に便利な pacman パッケージのご紹介です。"
  },
  {
    "objectID": "tips/240507_pacman/index.html#はじめに",
    "href": "tips/240507_pacman/index.html#はじめに",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "",
    "text": "何か新しいプロジェクトを始める際に、新しいパッケージをいちいちインストールして読み込むのは面倒ですよね。\nそんな時に便利な pacman パッケージのご紹介です。"
  },
  {
    "objectID": "tips/240507_pacman/index.html#pacman-とは",
    "href": "tips/240507_pacman/index.html#pacman-とは",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "pacman とは",
    "text": "pacman とは\nざっくり言うと、パッケージのマネジメントツールです。このパッケージには p_ で始まる様々な関数が含まれています。\n特に便利なのが p_load() で、パッケージのインストールと読み込みを両方してくれます。もちろんインストール済みのパッケージは、読み込むだけです。\nさらに便利なのは、複数のパッケージをまとめて書けるということです。install.packages() は一度に複数のパッケージをインストールできるものの、library() はパッケージごとにしなくてはなりません。その点 pacman::p_load() は、括弧内にパッケージを並べて書くことで、複数のパッケージを一度にインストール、読み込みまでしてくれます（しかもダブルクォーテーションで囲まなくてよい！）。"
  },
  {
    "objectID": "tips/240507_pacman/index.html#使ってみる",
    "href": "tips/240507_pacman/index.html#使ってみる",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "使ってみる",
    "text": "使ってみる\n早速使ってみます。今回は、tidyverse, sf, here の3つを使いたいとして、まだインストールもしていないとします。\n\nlibrary()\nまず、インストールします。\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"sf\")\ninstall.packages(\"here\")\n\n次に、読み込みます。\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sf)\n\nLinking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE\n\nlibrary(here)\n\nhere() starts at /home/rstudio/work\n\n\nこれで使えるようになりました。\n\n\np_load()\npacman::p_load() はこれで一発です。\n\npacman::p_load(tidyverse, sf, here)\n\nこの場合、上に出てきたような読み込みに付随するメッセージは出てきません。"
  },
  {
    "objectID": "tips/240507_pacman/index.html#使うにあたって",
    "href": "tips/240507_pacman/index.html#使うにあたって",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "使うにあたって",
    "text": "使うにあたって\npacman がパッケージである以上、はじめに install.packages(\"pacman\") はしなければなりません。それ以降は install.packages() とはおさらばできます。\npackman:: の書き方を使って、library(pacman)も省略しましょう1。\nまた、Docker を用いて環境構築する場合、Dockerfile にインストールすることを指示しておけば、それすら要らなくなります2。\nDockerfile に以下を追加します。\n\n\nDockerfile\n\nRUN R -e \"install.packages('pacman')\"\n\nこれでビルドすれば、RStudio でインストールせずとも pacman が使えます。"
  },
  {
    "objectID": "tips/240507_pacman/index.html#おまけ",
    "href": "tips/240507_pacman/index.html#おまけ",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "おまけ",
    "text": "おまけ\nパッケージを全部アップデートしたい、なんてこともありますよね。RStudio から一括でやる方法もありますが、せっかくなので pacman を使ってやってみましょう。\n\npacman::p_update()\n\nこれでいけます。"
  },
  {
    "objectID": "tips/240507_pacman/index.html#まとめ",
    "href": "tips/240507_pacman/index.html#まとめ",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "まとめ",
    "text": "まとめ\npacman パッケージをご紹介しました。\nlibrary() とどちらを使うかはお好み次第だと思います。\n魅力を感じた方はぜひ使ってみてください！"
  },
  {
    "objectID": "tips/240507_pacman/index.html#参考",
    "href": "tips/240507_pacman/index.html#参考",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "参考",
    "text": "参考\n\n\n\n\n\n\n“install.packages()”するのはこれが最後！Rのパッケージ管理には「pacman」を使おう"
  },
  {
    "objectID": "tips/240507_pacman/index.html#footnotes",
    "href": "tips/240507_pacman/index.html#footnotes",
    "title": "【R パッケージ】インストールも読み込みも一撃で？【pacman】",
    "section": "注",
    "text": "注\n\n\nこの書き方では、library() を使わずともパッケージ内の関数が使えます。一度だけ使いたい！というときに便利です。また、どのパッケージに属しているかが明確になるというメリットもあります。↩︎\nこちらを参照↩︎"
  },
  {
    "objectID": "tips/240504_container/index.html",
    "href": "tips/240504_container/index.html",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "",
    "text": "DVCについて\n\n\n\n2024年8月29日：DVCの認証プロセスでエラーが出るようになっています。そのうち改善されるかもしれませんが、エラーが出る場合はデータもGitHubで管理するようにするのが良いかもしれません。データサイズの制限はあるのですが、そこまで大きなデータを使わなければ問題ないと思います。\n2024年8月31日：Google Cloud Projectを用いた解決策について別記事でまとめましたので、その案内を追加しました。"
  },
  {
    "objectID": "tips/240504_container/index.html#はじめに",
    "href": "tips/240504_container/index.html#はじめに",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "はじめに",
    "text": "はじめに\nDockerとVSCodeを使ってRの環境を構築する方法を説明します。\n基本的な内容は次のページを参考にしており、個人的に使いやすいように修正を加えています。\n\n\n\n\n\n\nVSCode + Dockerでよりミニマルでポータブルな研究環境を\n\n\n\n開発コンテナを使うメリットは、環境を簡単に共有でき、他の環境に影響を受けずに作業ができることです。\nまた、最初は設定の際に結構待ち時間が生じますので、ご了承ください。"
  },
  {
    "objectID": "tips/240504_container/index.html#事前準備",
    "href": "tips/240504_container/index.html#事前準備",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "事前準備",
    "text": "事前準備\nまず、WSL2, Ubuntu, Homebrew, VSCode, Docker, Git, そしてGitHubの準備をします。WindowsとMacでの設定が異なるため、それぞれについて説明します。\nホスト側、共同作業者ともに事前準備が必要です。\n\nWSL2（Windowsユーザーのみ）\n\nPowerShellまたはWindowsコマンドプロンプトを管理者権限で開く\n\n右クリックで管理者権限を使えます。\n\n\n\n\n\n\n\n\n以下のコマンドを入力して実行\n\nこれでインストールはできるはずですが、詳しくはこちらのサイトを参照してください。\n\n\n\n\nPowerShell\n\nwsl --install\n\n\nユーザー名とパスワードを設定\n\nインストールが終わると、Linuxディストリビューションのユーザー名とパスワードの作成を求められます1。\nユーザー名は何でも大丈夫です。パスワードもめちゃくちゃ簡単で問題ありません。\nパスワードは画面上には表示されませんが、ちゃんと入力されています。慌てて何回も入力しないようにしてください。\n\n\nエクスプローラーからLinuxに入り、\\Ubuntu\\home\\ユーザー名がメインとなるディレクトリです。\n\n\nHomebrew（Macユーザーのみ）\nMacユーザーはHomebrewを使って諸々インストールしていくので、まだの方はここでインストールしてください。\n\nターミナルを開く\n\nアプリ一覧から「ターミナル」を探してください。\n\n以下のコマンドを入力して実行\n\nパスワードを求められるので、入力してください。\n\n\n\n\nTerminal\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\n\nVSCode\n\nVSCodeのダウンロードサイトからダウンロード、インストール\n\nDownload for Windows2をクリックしてダウンロードできます。\nインストールができたら、VSCodeを開いてください。\n\n（任意）日本語の拡張機能をインストール\n\n画面左側に拡張機能のアイコン  があります。ここの検索ボックスにMS-CEINTL.vscode-language-pack-jaと入力し、1番上に出てきたものをインストールします3。\nインストール後、VSCodeを再起動すれば日本語が反映されていると思います。\n\n\n\n\n拡張機能のインストール\n\n拡張機能の検索ボックスで、次のIDを入力し、インストールします。\nms-vscode-remote.remote-containers (Dev Containers)\nms-vscode-remote.remote-wsl (WSL, Windowsユーザーのみ)\n\n\nWSLに接続（Windowsユーザーのみ）\n\nVSCodeから先ほどインストールしたWSLに接続します。\n画面左下の&gt;&lt;アイコンをクリックして、「WSLへの接続」をクリックします。\n\n\n\n\n\nDocker\nDockerをインストールします。\n\nWindowsの方はここからDocker Desktop for Windowsを、Macの方はこちらからダウンロード＆インストール\n設定の確認（Windowsのみ）\n\nインストール出来たら、画面上部の設定ボタンからResources、WSL integrationと進み、チェックボックスにチェック、Ubuntuがオンになっていることを確認してください。\nたまに、何もしていないのにここがオフになっていて、トラブることがあります。\n詳しくはこちらをご覧ください。日本語で書いてあります。\n\n\n\n\n画面左側のVolumesに進み、Createからボリュームを作成\n\n次の3つを作成します（大文字小文字に注意！）。\nfonts, cache, TinyTeX\n\n\n\n\n\nMacでの画面\n\n\n\n\nGit\n\nWindows\n\nUbuntuでGitをインストール\n\nWindowsのアプリ一覧からUbuntuを探し、開いてください。開いたら、以下のコマンドを入力して実行します。\n\n\n\n\nUbuntu\n\nsudo apt-get install git\n\n\n\n\nUbuntu\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\nここに限らずですが、[]ごと置き換えてくださいね。\n\n\n\n\nUbuntu\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\nMac\n\nHomebrewでGitをインストール\n\nターミナルを開いて、以下のコマンドを入力して実行します。\n\n\n\n\nTerminal\n\nbrew install git\n\n\n\n\nこのMacでは2回目なのでgit is already installedと表示されてます…。\n\n\n\n設定\n\n以下のコマンドを入力、実行します。ユーザー名は何でも大丈夫です。\n\n\n\n\nTerminal\n\ngit config --global user.name [任意のユーザ名]\ngit config --global user.email [任意のメールアドレス]\n\n\n\n\nGitHubアカウントの作成\nファイルは基本的にGitHubで管理するので、ここからアカウントを作成してください。\n\nポイント\nGitHubアカウントを作成したら、VSCodeにログインしておきましょう。\n\nVSCodeを開く\n画面左下のアイコンをクリック\n\nGitHubでサインインを行う\n\n\nGitHubにログインすることで、その後の作業がスムーズに進みます。\n事前準備は以上です！"
  },
  {
    "objectID": "tips/240504_container/index.html#開発環境の構築",
    "href": "tips/240504_container/index.html#開発環境の構築",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "開発環境の構築",
    "text": "開発環境の構築\nDockerを用いて環境を構築するにあたり、柳本和春さんのテンプレートをベースに作成しています。詳しくは柳本さんの記事をご覧ください。\n主な変更点は以下の通りです。\n\nRStudioの設定を追加（パネルの配置など）\nそれに伴うDockerfileの加筆修正と、更なる設定の追加\n\nQuartoのインストールを追加\n個人的にエラーが生じた部分を修正\n日本語のロケール設定を追加\n\n\n\n\n\n\n\n\nRStudioで出てくる警告について\n\n\n\nRStudioでこの後作業することになりますが、コマンドを打つと以下の警告が出てくるかもしれません。\n警告メッセージ: Character set is not UTF-8; please change your locale\nしかし、警告は出るものの、実際の作業には特に問題ありません。これに対処しようと試みましたが、できませんでした…。\nもし詳しくて対処できた方は、コメントから教えていただけると幸いです。\n\n\nまずは基本設定4から説明します。\n\n基本設定\n\nGitHubリポジトリを作成\n\nテンプレートのGitHub リポジトリにアクセス\n画面右の「Use this template」から「Create a new repository」を選択\nRepository nameを記入\nPrivateを選択\n\n通常のプロジェクトならPrivateでOK\n\n「Create repository」をクリック\n\n\n\nリポジトリをクローン\n\nVSCodeを開く\n画面左側のアイコンから「ソース管理」5を開く\n「リポジトリの複製」を選択し、さらに「GitHubから複製」を選ぶ\nリポジトリを選択し、クローン\n\nリポジトリは、「ユーザー名/リポジトリ名」の形式で表示されます。\n基本的に表示されると思いますが、表示されない場合は手入力してください。\nクローンしたリポジトリを開くか問われるので、開いてください。\n\n画面右下に「コンテナーで再度開く」と出たらクリック\n\n出ない場合、画面左下「WSL: Ubuntu」6をクリックし、「コンテナーで再度開く」を選択してください。\n初めて環境を構築する場合、ここでかなり時間がかかるので辛抱強く待ちましょう。\n\n\n\n\n\n「コンテナーで再度開く」をクリック\n\n\nエクスプローラーを開き、\\\\wsl.localhost\\Ubuntu\\home\\ユーザー名を確認してみてください。リポジトリ名と同じフォルダができていると思います。\nMacの場合は、ユーザー名の下にできているはずです。\n\n\n\n\n\n\nMacでファイルが見当たらない？\n\n\n\n\n\nクローンしたフォルダを見てみると、リポジトリにはあるはずのファイルやフォルダが見当たらないかもしれません。\n\n\n\nファイルが見当たらない…？\n\n\nこのようなときは、Finderの隠しファイルを表示する設定を変更する必要があります。\n以下をターミナルで実行してください。\n\n\nTerminal\n\ndefaults write com.apple.finder AppleShowAllFiles TRUE\nkillall Finder\n\nこれで、隠しファイルも表示されるようになります。\n正直なところ、この設定は隠しファイルが邪魔であればしなくてもよいと思います7。VSCode上ではきちんと表示されますので。\n\n\n\n\n\nRStudioで開く\nここで、ブラウザを用いてRStudioを開きます。毎度この手順を踏む前に、VSCode上で開発コンテナに接続していることを確認してください。開いていないと、次のリンクは無効なものになってしまいます。\n\n任意のブラウザで、アドレスバーにlocalhost:8787と入力して開く\n右上の  をクリックし、「New Project…」を選択\n「Existing Directory」を選択\n「Browse…」より「work」を選択して「Choose」をクリック\n\n「Create project」をクリックするとプロジェクトが作成されます。\n\nコンソールに以下を入力して実行\n\nrenvはパッケージを管理するためのパッケージです。\nDockerfileでインストールすることを指示しているので、コンソールでインストールせずとも既に使用可能です8。\n\n\n\n\nR\n\nrenv::init()\n\n\n\nPythonの設定（任意）\nPythonを使う場合、以下のパッケージをインストールしておきます。\n使わない場合はスキップしてください。\n使い方としては、Quarto上でPythonのコードを書くことを想定しています。そのために必要なパッケージですが、その他のパッケージを使用する場合も同様の方法でインストールしてください。\n\nVSCodeに戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n以下のコマンドを入力して実行\n\n\n\nTerminal\n\npip install ipykernel jupyter\n\nパッケージはcacheにキャッシュがあるので、1回インストールすれば、2回目以降の環境構築では不要です。\n\n\nDVCの設定\nDVCはデータを管理するためのツールです。\n事前準備として、自分のGoogleドライブの任意の場所で、データを入れる用のフォルダを作成しておいてください。\nまた、共同プロジェクトの場合は、フォルダの共有も設定してください。\n\nVSCodeに戻る\n画面上部「ターミナル」より「新しいターミナル」を選択\n\n既に画面下部にターミナルが表示されている場合はスキップして大丈夫です。\n\n以下のコマンドを入力して実行\n\n初めて環境構築するときに1回実行しておけば、2回目以降の環境構築では不要です。\n\n\n\n\nTerminal\n\npip install dvc dvc-gdrive\n\n\nGoogleドライブで作成したフォルダのIDをコピー\n\nIDは、ドライブでフォルダを開いたときのURLで、最後のスラッシュ（~/folders/）より右側の部分です。\n\n次のコマンドを入力して実行\n\n最後の部分（四角括弧ごと）をコピーしたIDに変更してください。\n\n\n\n\nTerminal\n\ndvc init && dvc remote add -d myremote gdrive://[Google DriveのフォルダID]\n\n\n\nLaTeXの設定\nR Markdownなどで\\(\\LaTeX\\)を使用するために、TinyTeXをインストールします。\nRStudioのコンソールに以下のコマンドを入力して実行してください。\nまた、TinyTeXもキャッシュされるので、1回インストールすれば、2回目以降の環境構築では実行不要です。\n\n\nR\n\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex(dir = \"/home/rstudio/.TinyTeX\", force = TRUE)\n\nTinyTeXは、\\(\\LaTeX\\)コードをコンパイルする際に必要なパッケージを自動でダウンロードしてくれるので、ローカルに面倒な設定をしなくて良いのが魅力です。\nR MarkdownやQuartoでのPDF出力の仕方については、こちらの記事もご覧ください。\n\n\nJuliaの設定（任意）\n参考記事の設定に基づき、Juliaが使えるようになっているため、その始め方についても書いておきます。特に使う予定がなければ、スキップしてください。\n\nVSCodeに戻り、ワーキングディレクトリにProject.tomlというファイルを作成\n\n\n\n\n\n\n\nVSCode上でのファイル等の作成\n\n\n\n\n\nVSCode上でファイルやフォルダを作成するためには、左側のアイコン一番上の「エクスプローラー」をクリックし、その中の上部にあるアイコンの「新しいファイル…」や「新しいファイル…」を選択することでできます。\nここで注意点ですが、状況によっては意図せずフォルダの中に作ってしまうことがあります。\nワーキングディレクトリにファイルを作成したい場合は、まずエクスプローラーの空き部分をクリックします。すると、枠全体が青い線で囲まれると思います。\nこの状態であれば、親フォルダにファイルやフォルダが新規作成されます。下の画像の左側に注目してください。\n\n\n\nエクスプローラーの空いている部分をクリックすると、全体が青枠で囲まれます。\n\n\n一方、特定のフォルダの中に作成したい場合は、そのフォルダをクリックしてから新規作成を行ってください。\n\n\n\n特定のフォルダをクリックすると、そのフォルダが青枠で囲まれます。\n\n\n\n\n\n\nキーボードでCtrl + Shift + Pを入力9\n「Julia: Start REPL」を選択\n\n少し下の方にあると思います。検索をかけると楽かもしれません。1度使ったものは上に表示される仕組みなので、2回目以降は探しやすいと思います。\n少し時間がかかります。\n\nターミナルで、以下のコマンドを入力して実行\n\n\n\nJulia\n\nusing Pkg\nPkg.activate()\n\n以上でJuliaの事前準備ができました。\n\n\n共同プロジェクトの場合\n共同プロジェクトの場合は、GitHubで共有するため、以下の手順を踏んでおいてください。\n\nGitHubリポジトリでコラボレーターを追加\n\nリポジトリのSettingsからCollaboratorsに進み、コラボレーターを追加してください。\nAdd peopleから招待できます。\n\n\nホスト側の環境構築もここで一区切りです！\n\n\n\n共同作業者の設定\n共同作業者も事前準備は終わらせておいてください。\n\nGitHubで招待を受ける\n\nメールが届いているはずですので、そこからGitHubにログインしてください。\nリポジトリにアクセスできるようになります。\n\nリポジトリをクローン\n\nホスト側が作成したリポジトリをクローンします。\nホスト側の設定と同様にしてクローンし、開いてください。\n\n\n一旦ここまでで、共同作業者の設定は終わりです。"
  },
  {
    "objectID": "tips/240504_container/index.html#作業",
    "href": "tips/240504_container/index.html#作業",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "作業",
    "text": "作業\nワークフローについて説明します。\nGitHub関連10についてはこちらの記事で詳しめに解説しましたので、そちらも参考にしてください。\n\n\nRのパッケージ\n作業中新たにパッケージを使用した場合、それをrenv.lockファイルに記録することで、必要なパッケージを記録することができます。記録することで環境を移したときに必要なパッケージをすぐインストールできたり、共同研究者と必要なパッケージを共有することができます。\nバージョンごと記録できるので、全く同じ環境を再現することが可能です。\n新しいパッケージをインストールし、コード内で使用したら、以下のコードを実行し、lockファイルに記録してください11。\n\n\nR\n\nrenv::snapshot()\n\n異なる環境に移行した場合、以下のコードで記録したパッケージを一括インストールできます。\n\n\nR\n\nrenv::restore()\n\nこれでRの開発環境を揃えることができます。\nまた、新しいパッケージを使ったら、その作業が終わるごとにrenv::snapshot()で記録しましょう。\n\n\nPython のパッケージ\n設定ではPythonの設定も加えていますので、必要に応じてPythonも使用できます。\nまた、そもそもDVCがPythonのパッケージなので、それもrenvと同様に記録できます。\n\nPythonのパッケージを追加\n\n先ほどと同様に、新しいターミナルを開いて、以下のコードでパッケージをインストールします。\nDVC以外特に使うものがなければ、ここはスキップしてください。\n\n\n\n\nTerminal\n\npip install [パッケージ名]\n\n\nパッケージを記録\n\nRと同様に、作業が終わったら以下のコードでパッケージを記録します。\n\n\n\n\nTerminal\n\npip freeze &gt; requirements.txt\n\n\nパッケージをインストール（異なる環境に移行した場合）\n\n次のコードで、requirements.txtに記録したパッケージをインストールできます。\n\n\n\n\nTerminal\n\npip install -r requirements.txt\n\n\n\nデータの管理\n\n\n\n\n\n\nDVCの追加設定について\n\n\n\n冒頭にも書いたように、エラーの対処に関する記事を書きました。\n認証でブロックを食らった場合には、以下の記事を参照して下さい。\nDVCのためのGoogle Cloud Project\n\n\nデータはDVCで管理します。データはGoogle Drive上で保管されます。\n\nワーキングディレクトリに、dataというフォルダを作成\nデータが入ったら、以下のコードを実行\n\ndataフォルダごとドライブに追加します。\ndataフォルダは.gitignoreに記載されているため、GitHubにはアップロードされません。\n\n\n\n\nTerminal\n\ndvc add data/\n\n\n\n\n\n\n\nデータの入れ方\n\n\n\n\n\nデータは、WindowsのエクスプローラーやMacのFinderから直接フォルダに入れて大丈夫です（通常のWindowsやMacでの作業のように）。\nデータをプッシュした後にGoogle Driveを見てもらえれば分かりますが、よくわからない形で保存されています。DVCの仕組みがそうなっているからなので、決してファイルが破損しているわけではありません。\nちなみにWindowsユーザーの方で、一回ローカルに落としてからLinuxにデータ等を入れたらZone.Identifierというファイルができることがありますが、これは無視して大丈夫です。邪魔であればまとめて消してください。\n\n\n\n\nデータをアップロード\n\n以下のコードでデータをプッシュします。\n\n\n\n\nTerminal\n\ndvc push\n\n最初はaddとpushをする過程でアカウントの認証が必要になりますが、表示に従って認証を進めてください12。\n\n（共同作業者）データのダウンロード\n\n以下のコードでデータをダウンロードします。\n\n\n\n\nTerminal\n\ndvc pull\n\n\n\nJuliaのパッケージ\nJulia はパッケージが自動でProject.tomlに保存されるため、共同作業者がインストールするだけで大丈夫です。\n\n先ほどと同じ手順で環境をアクティベートする\n以下のコードでパッケージをインストール\n\n\n\nJulia\n\nPkg.instantiate()\n\n\n\nまとめ\nこれらの作業を通じて、共同作業者もホスト側と同じ環境を揃えることができます。\n環境を揃えるためには、コミット、プッシュ、プルを行い、記録したファイルを共有することが重要です。\n単独での場合は、ブランチを作成する必要はないですが、コミット、プッシュで管理を行いましょう。\n以上がワークフローです。お疲れ様でした！"
  },
  {
    "objectID": "tips/240504_container/index.html#環境構築まとめ",
    "href": "tips/240504_container/index.html#環境構築まとめ",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "環境構築まとめ",
    "text": "環境構築まとめ\n作業フローは、超適当にまとめると次のようになります。\n\nホスト\n\n必要なソフト等をインストールし、事前準備を行う。\n\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub\n\nGitHubでリポジトリをインポート、クローン\nRStudio Serverでプロジェクトを作成\n\nrenv::init() でrenvを開始\nrenv::snapshot()で適宜パッケージを記録\n\ndataフォルダを作成し、DVCで管理\n\nデータはdata内に追加\ndvc add data/とdvc pushを使用\n\nVSCode上でコミット、プッシュ\n\n\n\n共同作業者\n\n必要なソフト等をインストールし、事前準備を行う。\n\nWSL2, Ubuntu, Homebrew, VSCode, Docker, Git, GitHub\n\nGitHubでリポジトリをクローン\nRStudio Serverでプロジェクトを開く\n\nrenv::restore() でパッケージをインストール\n\nVSCode上でpip install -r requirements.txtを実行\n\nPythonパッケージをインストール\n\ndvc pullでデータをダウンロード\nVSCode上でコミット、プッシュ\n\n\n\n作業中\n\nGitHubにコミット、プッシュ、プルを繰り返す。\nデータも新たに追加した場合、DVCでadd, push, pullを行う。"
  },
  {
    "objectID": "tips/240504_container/index.html#おわりに",
    "href": "tips/240504_container/index.html#おわりに",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "おわりに",
    "text": "おわりに\n今回はDocker & VSCodeを用いた開発環境を説明しました。\n個人的な経験として、環境構築はエラーとの戦いです。できるだけエラーに遭遇しないよう丁寧に書いたつもりですが、まだまだ把握していないエラーがたくさんあると思います。\n何かエラー等ありましたら、コメントしていただけると幸いです。"
  },
  {
    "objectID": "tips/240504_container/index.html#参考文献",
    "href": "tips/240504_container/index.html#参考文献",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "参考文献",
    "text": "参考文献\n\n\n\n\n\n\nVSCode + Dockerでよりミニマルでポータブルな研究環境を\n\n\n\n\n\n\n\n\n\nUbuntuにGitをインストールする\n\n\n\n\n\n\n\n\n\ngithubを使った共同作業の手順"
  },
  {
    "objectID": "tips/240504_container/index.html#追記",
    "href": "tips/240504_container/index.html#追記",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "追記",
    "text": "追記\n2024/5/11：リポジトリ作成の手順を変更\n2024/5/22：Mac への対応と、内容の刷新\n2024/5/25：リポジトリのクローン方法を変更\n2024/6/10：テンプレートのキャッシュに関する設定を変更\n2024/9/18：GitHubの説明を簡略化"
  },
  {
    "objectID": "tips/240504_container/index.html#footnotes",
    "href": "tips/240504_container/index.html#footnotes",
    "title": "開発コンテナを使って R 環境を構築！",
    "section": "注",
    "text": "注\n\n\n求められない場合は、続けてwslとだけ入力してください。↩︎\nもしくは Mac↩︎\n単にJapaneseでも出てきます。笑↩︎\n単独研究ならここのみでOK、共同研究ならホストが行う設定。↩︎\n上から3番目↩︎\nMac なら&gt;&lt;↩︎\nTRUE のところを FALSE にして再度実行すれば消せます。↩︎\n余談ですが、renv::init()のようにパッケージ名::関数のような書き方をすれば、library(パッケージ名)をせずとも関数を使えます。1度だけ使いたいようなときに便利です。↩︎\nCtrl は Mac だと command↩︎\nコミット、プッシュやブランチなど↩︎\nインストールしただけでコード内で使用していない場合は記録できません。↩︎\n私の場合認証の読み込みが終わらない問題によく直面するので、その際にはターミナルを消し、再度新しいターミナルで実行するようにしています。↩︎"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html",
    "href": "tips/240619_trouble_shooting/index.html",
    "title": "環境構築におけるトラブルシューティング",
    "section": "",
    "text": "環境構築に関する記事をいくつかまとめてきましたが、頻繁にエラーに直面するので、その場合の対処法をまとめていきます。\n本記事は随時更新します。\n関連するエラーや不明点については一番下のコメントに書いていただけると幸いです。\n発生環境に「開発コンテナ内」とあるのは、基本的にこの記事で紹介した環境を指します。"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html#はじめに",
    "href": "tips/240619_trouble_shooting/index.html#はじめに",
    "title": "環境構築におけるトラブルシューティング",
    "section": "",
    "text": "環境構築に関する記事をいくつかまとめてきましたが、頻繁にエラーに直面するので、その場合の対処法をまとめていきます。\n本記事は随時更新します。\n関連するエラーや不明点については一番下のコメントに書いていただけると幸いです。\n発生環境に「開発コンテナ内」とあるのは、基本的にこの記事で紹介した環境を指します。"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html#python-のパス",
    "href": "tips/240619_trouble_shooting/index.html#python-のパス",
    "title": "環境構築におけるトラブルシューティング",
    "section": "Python のパス",
    "text": "Python のパス\n\n発生環境：開発コンテナ内\nエラーが発生したコマンド：\n\n\n\nTerminal\n\ndvc init\n\n\n発生したエラー：「bash: /home/rstudio/.cache/pip/bin/dvc: /usr/local/bin/python: bad interpreter: No such file or directory」\n発生タイミング：Python 環境をいじった後\n対処法：パッケージをアンインストールして再インストール\n\n\n\nTerminal\n\npip uninstall dvc\npip install dvc\n\n\n原因：\n\n別の Dockerfile でバージョンの異なる Python 環境を作成しており、R 環境と Python 環境で同じ Docker ボリュームにマウントしていた。\nその結果競合が起こり、エラーが発生したと考えられる。\n\n解決策：一時的な対処なら上の方法で十分。根本的解決のためには R 環境と Python 環境で異なるボリュームを作成し、マウントする必要がある。"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html#ファイル削除の失敗",
    "href": "tips/240619_trouble_shooting/index.html#ファイル削除の失敗",
    "title": "環境構築におけるトラブルシューティング",
    "section": "ファイル削除の失敗",
    "text": "ファイル削除の失敗\n\n発生環境：WSL（Windows 環境）\n発生タイミング：エクスプローラーからファイルを削除するとき\n発生したエラー：ファイルが削除できない（再試行やスキップしてもダメ）\n対処法：\n\nVSCode を開き、WSL に接続する。\nCtrl + J でターミナルを開いて次のコマンドを入力し、[フォルダ名] を置き換えた上で実行する1。\n\n\n\n\nTerminal\n\nsudo rm -rf [フォルダ名]"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html#古い-tinytex",
    "href": "tips/240619_trouble_shooting/index.html#古い-tinytex",
    "title": "環境構築におけるトラブルシューティング",
    "section": "古い TinyTeX",
    "text": "古い TinyTeX\n\n発生環境：開発コンテナ内2\n発生タイミング：TinyTeX を使って Quarto コードをコンパイルしようとしたとき\n発生したエラー：次の画像の通り（TinyTeX が古いと言われる）\n\n\n\n\n\n\n\n対処法：\n\nTinyTeX をアンインストール\nTinyTeX を再インストール3\n\n\n\n\nR\n\ntinytex::uninstall_tinytex()\ntinytex::install_tinytex(dir = \"/home/rstudio/.TinyTeX\", force = TRUE)"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html#vscode-で-wsl-が起動しない",
    "href": "tips/240619_trouble_shooting/index.html#vscode-で-wsl-が起動しない",
    "title": "環境構築におけるトラブルシューティング",
    "section": "VSCode で WSL が起動しない",
    "text": "VSCode で WSL が起動しない\n\n発生環境：Windows 11\n発生タイミング：VSCode で WSL を起動しようとしたとき\n発生したエラー：「VS Code Server for WSL closed unexpectedly」という表示と、「/node: not found」で終わるエラーが出力される。\n対処法：vscode-server の再インストール\n\n以下のコードを Ubuntu のターミナルで実行してください。\n\n\n\n\nUbuntu\n\nrm -rf ~/.vscode-server"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html#dvcでプッシュできない",
    "href": "tips/240619_trouble_shooting/index.html#dvcでプッシュできない",
    "title": "環境構築におけるトラブルシューティング",
    "section": "DVCでプッシュできない",
    "text": "DVCでプッシュできない\n\nPart 1\n\n発生環境：開発コンテナ内\n発生タイミング：dvc pushを打ったとき\n発生したエラー：以下の通り\n\nERROR: unexpected error - Failed to authenticate GDrive: Access token refresh failed: invalid_grant: Bad Request\n\n\n\n\n\n\n対処法：VSCode（開発コンテナ）のターミナルで次のコマンドを打って再度プッシュ\n\n\n\nTerminal\n\ndvc remote modify myremote --local \\\n      gdrive_user_credentials_file ~/.cache/myremote-credentials.json\n\n\n\nPart 2\n\n発生環境：開発コンテナ内\n発生タイミング：dvc pushを打ったとき\n発生したエラー：以下の通り\n\nトークンが切れているらしいです。\n\n\nERROR: unexpected error - Failed to authenticate GDrive: Access token refresh failed: invalid_grant: Token has been expired or revoked.\n\n対処法：VSCode（開発コンテナ）のターミナルで次のコマンドを打って再度プッシュ\n\nrm /home/rstudio/.cache/myremote-credentials.json\ndvc remote modify myremote --local \\\n      gdrive_user_credentials_file ~/.cache/myremote-credentials.json"
  },
  {
    "objectID": "tips/240619_trouble_shooting/index.html#footnotes",
    "href": "tips/240619_trouble_shooting/index.html#footnotes",
    "title": "環境構築におけるトラブルシューティング",
    "section": "注",
    "text": "注\n\n\n\\\\wsl.localhost\\Ubuntu\\home\\user 下にファイルがあると仮定している。フォルダのパスが異なる場合は、cd [your_path] でディレクトリを変更したうえで実行する。もしくは [フォルダ名] にパス含めて入力する↩︎\nこの記事で紹介した TinyTeX ボリュームを使用。↩︎\ntinytex::reinstall_tinytex() でもいけるのかもしれないけど、途中でエラーが出たので手順を踏むことにしました。↩︎"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html",
    "href": "tips/240509_chunk_option/index.html",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "",
    "text": "どうも Quarto ユーザーです。普段チャンクオプションをよく忘れるので、備忘録も兼ねてまとめます。おそらく R Markdown も同じです。\n直感的な分かりやすさ重視です。\n私が普段使うものに偏っているかもしれませんが、ご了承ください。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#はじめに",
    "href": "tips/240509_chunk_option/index.html#はじめに",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "",
    "text": "どうも Quarto ユーザーです。普段チャンクオプションをよく忘れるので、備忘録も兼ねてまとめます。おそらく R Markdown も同じです。\n直感的な分かりやすさ重視です。\n私が普段使うものに偏っているかもしれませんが、ご了承ください。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#前提",
    "href": "tips/240509_chunk_option/index.html#前提",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "前提",
    "text": "前提\nQuarto でも R Markdown と同じようなチャンクオプションの書き方ができるのですが、ここでは Quarto 独自の書き方で進めます。\n理由は単純に私が好んで使っているからです。\n\nR Markdown の書き方\n\n\nR Markdown\n\n```{r cars, echo=TRUE}\nplot(cars)\n```\n\ncars の部分がチャンクのラベル（名前）、echo=TRUE の部分がチャンクオプションです。\n\n\nQuarto の書き方\n\n\nQuarto\n\n```{r}\n#| label: fig-cars\n#| echo: true\n\nplot(cars)\n```\n\nチャンク内で #| の後に書きます。ちなみに、こちらは TRUE や FALSE が小文字で大丈夫です。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#チャンクオプション",
    "href": "tips/240509_chunk_option/index.html#チャンクオプション",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "チャンクオプション",
    "text": "チャンクオプション\n\n共通\nR Markdown と Quarto で共通のオプションをざっくり表にしました。 これを使えば普段は問題なさそうというものをピックアップしています。\n\nチャンクオプションまとめ\n\n\nオプション\nデフォルト\n効果\n\n\n\n\necho\nTRUE\n\nコードを出力に含めるか否か\nFALSE にすると、実行結果のみが表示される\n\n\n\ninclude\nTRUE\n\nコード、結果を出力に含めるか否か\nFALSE にすると、何も表示されない\nパッケージの読み込みなど重要じゃない箇所で重宝\n\n\n\nwarning\nTRUE\n\n警告を出力に表示するか否か\n基本 FALSE が多い\nグローバルに指定することが多い（後述）\n\n\n\nmessage\nTRUE\n\nメッセージを出力に表示するか否か\n結果に付随してくる文を消すために FALSE が多い\nグローバルに指定することが多い（後述）\n\n\n\ncache\nFALSE\n\n実行結果をキャッシュするか否か\nTRUE にすると、結果が保存され2回目以降の出力が高速化\n重い作業でコンパイルに時間がかかるときに使っている\n\n\n\neval\nTRUE\n\nコードを実際に評価するか否か\nコードを見せたいだけのときに FALSE にすると便利\n\n\n\n\n\n\n違うやつ\nよく使うものの中でもR Markdown と Quarto で異なるものをピックアップします。\n\nfig 系\n\nR Markdown では fig.cap\nQuarto では fig-cap\nこれ以外にも R Markdown はピリオドで、Quarto ではハイフンのものは多々あります。\n\nチャンクラベル1\n\nR Markdown は {r hogehoge}2\nQuarto はコード内で #| label: fig-hogehoge\n\nご覧の通り、Quarto の方は fig- を前に付ける必要があります3。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#sec-global",
    "href": "tips/240509_chunk_option/index.html#sec-global",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "グローバルオプション",
    "text": "グローバルオプション\n全部の警告やメッセージを消したい、なんてこともよくあると思います。\nR Markdown と Quarto でそれぞれやり方がありますのでご紹介します。\n\nR Markdown\nRStudio であれば新しい R Markdown ファイルを開くと既に出ていますが、以下の関数を使用します。\n\n\nR\n\nknitr::opts_chunk$set(echo = TRUE)\n\n括弧内に、カンマで区切りながらオプションを TRUE, FALSE などで指定していきます。echo はデフォルトで TRUE なので、これだけなら無くても大丈夫です。笑\n例えば、全てのコードについてコードは出力せず結果だけ出力し、警告やメッセージは非表示にするためには次のようにします。\n\n\nR\n\nknitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)\n\n\n\nQuarto\nQuarto では YAML ヘッダーで設定が可能です。YAML ヘッダーは Markdown ファイルを開いたときの最上部に出てくる --- で囲まれた部分です。\n次のように設定します。\n\n\nYAML ヘッダー\n\n---\ntitle: \"Untitled\"\nformat: html\nexecute: \n  echo: false\n  warning: false\n  message: false\n---\n\nexecute: で指定することができます。\n\n\nおわりに\n今回は私がよく使うチャンクオプションを中心にご紹介しました。\n今後いろいろ使いながらアップデートしていきたいと思います。\nご参考になれば幸いです。"
  },
  {
    "objectID": "tips/240509_chunk_option/index.html#footnotes",
    "href": "tips/240509_chunk_option/index.html#footnotes",
    "title": "【Quarto】チャンクオプションまとめてみた【R Markdown】",
    "section": "注",
    "text": "注\n\n\n相互参照のために使うので、必ずつけなければならないものではありません。相互参照についてはこちら↩︎\nスペースを空けてチャンクラベルを入力します。↩︎\n表なら tbl-hogehoge とします。↩︎"
  },
  {
    "objectID": "about.html#スキル",
    "href": "about.html#スキル",
    "title": "阿部洋輔",
    "section": " スキル",
    "text": "スキル\n\n (Base, Tidyverse)\n\\(\\LaTeX\\)\n Python （勉強中）"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "阿部洋輔",
    "section": "",
    "text": "University of California, San Diego | San Diego, CA PhD in Mathematics | Sept 2011 - June 2015\nMacalester College | St. Paul MA B.A in Economics | Sept 2007 - June 2011"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "阿部洋輔",
    "section": "",
    "text": "Wengo Analytics | Head Data Scientist | April 2018 - present\nGeoScynce | Chief Analyst | Sept 2012 - April 2018"
  }
]