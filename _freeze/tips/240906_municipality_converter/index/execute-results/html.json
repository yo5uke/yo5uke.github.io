{
  "hash": "a47e1bd5313431c9ed0aa6bbc39cbb16",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"市町村合併を反映させる\"\ndescription: |\n  古いデータに市町村合併を反映させる方法をご紹介します。\ndate: 2024-09-06\ncategories: \n  - R\n  - データ処理\neditor: visual\n---\n\n\n\n## はじめに\n\n市町村合併（平成の大合併）前のデータを使わなければならない場合に、うまく市町村コードを新使いながらパネルデータを作成する方法についてご紹介します。\n\nこの記事では[近藤恵介](https://keisukekondokk.github.io/)先生（RIETI、神戸大学）が作成された市町村コンバーターを使用します。\n\n以下のGitHubリポジトリよりダウンロードが可能です。\n\n<https://github.com/keisukekondokk/municipality-converter>\n\n## 方法\n\n### コンバーターファイルのダウンロードと読み込み\n\n[GitHubリポジトリ](https://github.com/keisukekondokk/municipality-converter)の`data_converter`内にある`municipality_converter_jp.csv`を開きます[^1]。次のリンクから直接飛ぶことも可能です。\n\n[^1]: 別に英語版でもよいです。\n\n<https://github.com/keisukekondokk/municipality-converter/blob/master/data_converter/municipality_converter_jp.csv>\n\n`municipality_converter_jp.csv`を開くと、コード右上にあるダウンロードアイコン[^2]より任意の場所にダウンロードが可能です。\n\n[^2]: カーソルを合わせると「Download raw file」と出てきます。\n\nダウンロードできたら、Rで読み込みます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n\nconverter <- read_csv(here(\"data/240906_municipality_converter/municipality_converter_jp.csv\"))\n```\n:::\n\n\n\n### パネル化したいデータの準備\n\n::: callout-note\n## 使用するデータ\n\n今回使用するデータは[こちら](https://drive.google.com/drive/folders/1UbZGB2yIjO9jpXuJIihU9-0INqGzLvQ5?usp=sharing)からダウンロードできます。\n:::\n\n例えば人口データをパネル化したいとします。今回は例として、2000年から2005年の人口データ[^3]を、2020年の市町村区分になるようにくっつけます。例なので、総人口のみを扱います。\n\n[^3]: 住民基本台帳より\n\n今回使用するデータは次のようなファイルになっています。\n\n![](image/population_data.png){fig-align=\"center\" width=\"80%\"}\n\nまずはこれらのファイル（自分がパネル化したいデータがあればそれらのファイル）をRで読み込んでください。`.xls`ファイルであれば`readxl`パッケージの`read_xls()`を僕は使っています。以下は5年分まとめて読み込むときの例です。\n\n``` r\nlibrary(readxl)\n\nfor (year in 2000:2005) {\n  obj <- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), \n                  skip = 4) |> \n    select(1:3, 6)\n  \n  colnames(obj) <- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  obj <- obj |> \n    mutate(code = as.numeric(code) %/% 10)\n  \n  assign(paste0(\"pop_\", year), obj)\n}\n```\n\n\n\n::: {.cell}\n\n:::\n\n\n\nforループや`assign()`についての説明は行いませんが、これで2000年から2005年までを一括で読み込むことができます。ポイントは、今回使用するコンバーターはキーとなるコードが整数かつ下1桁を落としているため、`mutate(code = as.numeric(code) %/% 10)`で処理しているところです。\n\nとりあえずここで重要なことは、`select()`で必要な列のみ取り出しているのですが、**団体コードと人口の列は必ず取り出すこと**です。市町村名も一応取り出していますが、別になくてもよいです。\n\n### 2020年の自治体コードを付与\n\n合併前のデータに、合併後の自治体コードを付与します。具体的には、人口データの`code`とコンバーターの`merge_id_muni`をキーにして`left_join()`し、`id_muni2020`を付与します。\n\nこれもまとめて6年分やりたいので、先ほどのコードに追記します。\n\n``` r\nfor (year in 2000:2005) {\n  obj <- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), skip = 4) |> \n    select(1:3, 6)\n  \n  colnames(obj) <- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  obj <- obj |> \n    mutate(code = as.numeric(code) %/% 10) |> \n    left_join(converter, by = c(\"code\" = \"merge_id_muni\")) |> \n    select(code, prefecture, municipality, population, id_muni2020)\n  \n  assign(paste0(\"pop_\", year), obj)\n}\n```\n\n\n\n::: {.cell}\n\n:::\n\n\n\n試しに`pop_2020`の変数名を`colnames(pop_2020)`などで確認してみると、code, prefecture, municipality, population, id_muni2020となっていることがわかります。\n\n### `id_muni2020`を使ってサマライズ\n\n例えばB市とC市がA市に合併した場合、Aはもとから2020年基準の自治体コードを持っていますが、B市とC市は古い自治体コードを持っていて、新しく2020年の自治体コードを付与されています。\n\nすなわち、`id_muni2020`の列を見ると、A市と同じ自治体コードをB市とC市は持っていることになります。\n\nこれを使うと、各自治体コードで人口を足し算すれば、現在の自治体区分における人口総数を算出することができます。これを実行するのが`summarise()`関数です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (year in 2000:2005) {\n  df <- get(paste0(\"pop_\", year))\n  \n  summarised_df <- df |> \n    summarise(population = sum(population, na.rm = TRUE), \n              .by = id_muni2020)\n  \n  assign(paste0(\"summarised_pop_\", year), summarised_df)\n}\n```\n:::\n\n\n\nforループの中でデータフレーム名を取得するのは少々ややこしいですが、以上のような書き方で可能です。\n\n`summarise()`内では`.by`で指定した`id_muni2020`ごとに`population`を`sum()`するようになっています。`na.rm = TRUE`は、NAがあった場合に計算結果がNAにならないようにするために必要です。\n\n以上を実行すると、`summarised_pop_2000`～`summarised_pop_2005`までが出来上がります。\n\nちなみにここで使っている変数が`id_muni2020`と`population`だけなので、出来上がったデータフレームもこの2つの変数しか入っていません。市町村名も残したい場合は、`.by`で`prefecture`と`municipality`も追加で指定すれば残すことができます。\n\n### `left_join()`でくっつける\n\n2000年のデータフレームをベースとして2001～2005年を結合するので、最初に2000年のデータを`final_df`として格納しておきます。その際に変数名も2000年のものであることを明記します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_df <- summarised_pop_2000 |> \n  rename(population_2000 = population)\n\nfor (year in 2001:2005) {\n  df_to_join <- get(paste0(\"summarised_pop_\", year)) |> \n    rename_with(~ paste0(., \"_\", year), population)\n  \n  \n  final_df <- left_join(final_df, df_to_join, \n                        by = c(\"id_muni2020\"))\n}\n```\n:::\n\n\n\n`population`の列が複数出てくるので、それらの後が`_20xx`となるように`rename_with()`で設定しています。\n\n`final_df`が最終的なデータフレームです。確認してみてください。\n\n以上の作業で合併前のデータを最新の市町村区分を基準として結合することができました。\n\nこれを応用して変数を追加したりロング形式に変換することが可能です。\n\n## まとめ\n\n今回紹介したコードをまとめると以下の通りです。\n\n``` r\nlibrary(tidyverse)\nlibrary(here)\nlibrary(readxl)\n\nfor (year in 2000:2005) {\n  obj <- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), skip = 4) |> \n    select(1:3, 6)\n  \n  colnames(obj) <- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  obj <- obj |> \n    mutate(code = as.numeric(code) %/% 10) |> \n    left_join(converter, by = c(\"code\" = \"merge_id_muni\")) |> \n    select(code, prefecture, municipality, population, id_muni2020)\n  \n  assign(paste0(\"pop_\", year), obj)\n}\n\nfor (year in 2000:2005) {\n  df <- get(paste0(\"pop_\", year))\n  \n  summarised_df <- df |> \n    summarise(population = sum(population, na.rm = TRUE), \n              .by = id_muni2020)\n  \n  assign(paste0(\"summarised_pop_\", year), summarised_df)\n}\n\nfinal_df <- summarised_pop_2000 |> \n  rename(population_2000 = population)\n\nfor (year in 2001:2005) {\n  df_to_join <- get(paste0(\"summarised_pop_\", year)) |> \n    rename_with(~ paste0(., \"_\", year), population)\n  \n  \n  final_df <- left_join(final_df, df_to_join, \n                        by = c(\"id_muni2020\"))\n}\n```\n\nさらに1つのコードで完結させる場合は次のようになります。\n\n``` r\nlibrary(tidyverse)\nlibrary(here)\nlibrary(readxl)\n\nfor (year in 2000:2005) {\n  obj <- read_xls(here(paste0(\"data/240906_municipality_converter/\", year, \"0331.xls\")), skip = 4) |> \n    select(1:3, 6)\n  \n  colnames(obj) <- c(\"code\", \"prefecture\", \"municipality\", \"population\")\n  \n  summarised_df <- obj |> \n    mutate(code = as.numeric(code) %/% 10) |> \n    left_join(converter, by = c(\"code\" = \"merge_id_muni\")) |> \n    select(code, prefecture, municipality, population, id_muni2020) |> \n    summarise(population = sum(population, na.rm = TRUE), .by = id_muni2020)\n  \n  if (year == 2000) {\n    final_df <- summarised_df |> \n      rename(population_2000 = population)\n  } else {\n    summarised_df <- summarised_df |> \n      rename_with(~ paste0(\"population_\", year), population)\n    \n    final_df <- left_join(final_df, summarised_df, by = \"id_muni2020\")\n  }\n}\n```\n\n\n\n::: {.cell}\n\n:::\n\n\n\n以上です。合併処理はめんどくさいので、少しでもお役に立てれば幸いです。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}