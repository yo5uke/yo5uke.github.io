{
  "hash": "b9bc5c6eef169338e9f9b369fb3b145b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Quarto で Python を使ってみよう！\"\ndescription: |\n  R ユーザーはこれでよくない？\ndate: 2024-05-08\ndate-modified: last-modified\ncategories: \n  - Quarto\n  - Python\n  - Ubuntu\n  - VSCode\n  - R\n---\n\n\n# はじめに\n\n::: {.callout-important title=\"注意\"}\nこの記事は Windows ユーザー向けです。ただ、事前準備が異なるだけで、それ以降は Mac ユーザーの方でも参考になると思います。\n:::\n\nPython の環境構築って初心者にはなんだかめんどくさいですよね。私も Python はあまり使わないので、環境構築には苦労しています。\n\n今回はR Markdown に似ているでおなじみ（？）の Quarto を用いた、Python の環境構築の方法をご紹介します。\n\nAnaconda をインストールして Jupiter Notebook を使っている方も多いと思いますが、今回は Anaconda ではなく Quarto で Python を使ってみましょう。\n\n# Quarto とは\n\nQuarto は、RStudio のチームが開発している、R Markdown に似たドキュメント作成ツールです。R Markdown は R のためのドキュメント作成ツールですが、Quarto は Python や Julia など他の言語でも使えるようになっています。\n\nQuarto は、RStudio のチームが開発しているため、RStudio との親和性が高いです。RStudio と Quarto を組み合わせて使うことで、R と Python の両方を使ったドキュメント作成が可能になります^[今回は Python がメインなので RStudio は使いませんが、普段 R を使う方はぜひ RStudio でも使ってみてください。]。\n\n# 事前準備\n\n[以前の記事](../240504_container/index.html)で、Docker を使って環境構築する方法をご紹介しましたが、この記事を最初に読んでいる方に向けて、より簡単な手順で環境構築する方法をご紹介します。\n\n## 前提\n\n- VSCode をインストールしていること\n\n- WSL2, Ubuntu をインストールしていること\n\n    - Ubuntu はデフォルトで Python がインストールされています。\n\nここまではそれほど難しくありませんので、まだの方は[こちらの記事](../240504_container/index.html)をご覧ください。\n\n## WSL2 に接続\n\nVSCode を起動して、画面左下の `><` マークをクリックして、「WSL への接続」を選択します。\n\n![WSL2 に接続](image/vscode-wsl.png)\n\n## Quarto のインストール\n\n1. 画面上部「ターミナル」から「新しいターミナル」を選択^[ショートカット：`Ctrl` + `Shift` + `@`]し、ターミナルを開く\n\n2. 以下のコマンドを入力して実行\n\n    - URL の部分は最新のものに変えてください。\n    \n    - [Quarto ホームページ](https://quarto.org/docs/get-started/)からプラットフォームが `Ubuntu 18+/Debian 10+` であるダウンロードリンクを使用してください。\n\n```{.bash filename=\"bash\"}\n# Quartoパッケージをダウンロード（URL は適宜更新）\nwget https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.554/quarto-1.4.554-linux-amd64.deb\n\n# パッケージをインストール（バージョン部分は適宜変更）\nsudo dpkg -i quarto-1.4.554-linux-amd64.deb\n```\n\n::: {.callout-tip title=\"Docker を使う場合\" collapse=\"true\"}\nDocker を使っている場合は、Dockerfile に以下のコマンドを追加してください。\n\n```{.bash filename=\"Dockerfile\"}\nRUN wget -O quarto.deb \"https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.553/quarto-1.4.553-linux-amd64.deb\" && \\\n    dpkg -i quarto.deb && \\\n    rm quarto.deb\n```\n\nちなみに、[私の記事](../240504_container/index.html)で紹介しているテンプレートを使用される場合は、既にこのコマンドが追加されているので、追加する必要はありません。\n:::\n\nこれで Quarto のインストールは完了です。\n\n## 拡張機能の準備\n\n拡張機能の検索窓から、次の拡張機能をインストールしてください。\n\n- `quarto.quarto`（Quarto）\n\n- `ms-python.python`（Python）\n\n- `ms-toolsai.jupyter`（Jupyter）\n\n# 使ってみる\n\n## 新しい Quarto ファイルを作成\n\n1. 画面左上の「ファイル」から「新しいファイル」を選択、「Quarto Document」を選んで新規ファイルを作成します。\n\n    - `Ctrl` + `S` でファイルを保存できます。保存する際に任意のフォルダに `test.qmd` などの名前で保存してください。\n\n2. yaml ヘッダーを次のように編集します。\n\n```{.yml filename=\"YAML ヘッダー\"}\n---\ntitle: \"タイトル\"\nauthor: \"著者\"\nformat: html\njupyter: python3\n---\n```\n\n3. 以下のようにコードを書いてみましょう。\n\n````{.markdown filename=\"Quarto\"}\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{{python}}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n````\n\n4. パッケージのインストール\n\n    - 今回、`numpy` と `matplotlib` を使っているので、はじめにこれらをインストールしないとエラーが出ます。\n\n    - また、実行する際に `ModuleNotFoundError:` が出たら、そのモジュールもインストールする必要があります^[今回は `nbformat` と `nbclient` が出ると思います。]。\n\n    - ターミナルから以下のコマンドを実行してください。\n\n```{.bash filename=\"bash\"}\npip install numpy matplotlib nbformat nbclient\n```\n\n5. 実行\n\n    - 画面右上のボタンの中から「Preview」を選択して、ファイルをレンダリングします。\n\n![実行結果](image/python.png)\n\nR を使うときと同様に、Python のコードを書いて実行することができました。\n\n# ちなみに\n\nR ユーザーの私としては、エンジンは R Markdown と同じ `Knitr` を使っているので、基本的に R 環境に Python を混ぜるということになります。\n\nそのままでは R と Python が混在したコードは出力できません^[R では `Knitr` を使って Python では `Jupyter` を使うためです。]が、`reticulate` パッケージを使うことで R を使っていても Python が混ざったコードを出力できます。\n\n例えばこの記事は R 環境で書いていますのでこのままでは Python を使えません。そこで `reticulate` パッケージをインストールします。\n\n```{.r filename=\"R\"}\ninstall.packages('reticulate')\n```\n\nライブラリで読み込む必要はありません。\n\n先ほどのコードを書いてみると、\n\n::: {#cell-fig-polar .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](index_files/figure-html/fig-polar-output-1.png){#fig-polar width=450 height=439}\n:::\n:::\n\n\n無事 @fig-polar が出力できました。\n\nこのように R と Python が混在していても出力できますので、必要に応じて使ってみてください。\n\n# まとめ\n\n今回は Quarto を使って Python の環境構築を行いました。\n\nAnaconda と比べると、Quarto はより柔軟で、R でも Python でも使えるのがメリットです。\n\nまた、書き方はほぼ R Markdown と同じなので、普段 R を使っている方にはすぐに慣れると思います。\n\nただし、R と Python を1つのファイルで併用する際には追加でパッケージのインストールが必要です。\n\n以上です。お疲れ様でした！\n\n# 追記\n\n2024年5月16日：R と Python が混在したコードの出力について追加\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}