{
  "hash": "3905bc6149ab1e73aef4fa2b6a0b6c0a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`ggplot2`ガイド\"\ndescription: |\n  ggplotを使うのに役立つコマンドを紹介します。\ndate: 2024-11-17\ndate-modified: today\ncategories:\n  - R\nimage: figure/thumbnail.png\neditor: visual\n---\n\n\n\n## はじめに\n\n皆さん、ggplot、使ってますか？多分お使いですよね。\n\n僕は数か月前ggplotのガイドブックを買いまして、いろいろと勉強しているところでございます。\n\nこんなこともできるのか！という発見が多々あり、Rユーザーの皆様にはぜひ買っていただきたい代物なのですが、いかんせんお値段が張りますので、いくつかピックアップしてご紹介します。\n\n書籍のリンクは以下です。\n\n::: {.callout-tip appearance=\"minimal\" icon=\"false\"}\n[Rグラフィックスクックブック 第2版 ―ggplot2によるグラフ作成のレシピ集](https://www.amazon.co.jp/R%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%B9%E3%82%AF%E3%83%83%E3%82%AF%E3%83%96%E3%83%83%E3%82%AF-%E7%AC%AC2%E7%89%88-%E2%80%95ggplot2%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B0%E3%83%A9%E3%83%95%E4%BD%9C%E6%88%90%E3%81%AE%E3%83%AC%E3%82%B7%E3%83%94%E9%9B%86-Winston-Chang/dp/4873118921)\n:::\n\n## `ggplot2`の基本\n\n::: callout-note\n使ったことがある方はこの辺はスキップしてください。\n\n今回使うデータは、デフォルトで用意されている`iris`と`Orange`です。\n:::\n\nひとまず主要なパッケージである`ggplot2`を読み込みます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\n\n基本的な使い方としては、`ggplot()`と`aes()`、そして図に応じて`geom_line()`や`geom_point()`を使っていきます。\n\n今回は例として、アイリスのがく片の長さ、幅をそれぞれ軸としてプロットします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![irisデータフレームを使った散布図](index_files/figure-html/fig-iris-1.png){#fig-iris width=672}\n:::\n:::\n\n\n\n1.  `ggplot(data, aes())`という形で使用するデータを指定\n2.  `aes()`内ではX軸とY軸をそれぞれ指定する。\n    -   例：`aes(x = Sepal.Length, y = Sepal.Width)`\n3.  ggplotのコマンドは`+`で繋ぐ\n4.  散布図を作るには`geom_point()`を繋げる\n    -   その他、折れ線なら`geom_line()`、ヒストグラムなら`geom_histogram()`など\n\nこれが土台です。`ggplot()`だけではプロットは表示されませんので、何かしら繋ぐ形にしてください。\n\n今回はggplotの基本というよりも、そこからの拡張を主に書きたいので、この散布図をベースに進めます。\n\n## 軸\n\n### 軸ラベル\n\nまずはX軸、Y軸のラベルを変更します。次のコマンドを追加することで変更できます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\")\n```\n\n::: {.cell-output-display}\n![軸ラベルを変更](index_files/figure-html/fig-axis-label-1.png){#fig-axis-label width=672}\n:::\n:::\n\n\n\nまた、以下のコードは同じ結果を示します。\n\n``` r\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  xlab(\"Length of Sepal\") + \n  ylab(\"Width of Sepal\")\n```\n\nすなわち、`labs()`はそれ一つでX軸もY軸もラベルを変更することができますが、`xlab()`、`ylab()`を使えば片方ずつ変更できるということです。\n\n次に、軸ラベルの体裁を変更したい場合、以下のようにします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\") + \n  theme(\n    axis.title = element_text(family = \"times\", face = \"italic\", \n                              color = \"red\", size = 20)\n  )\n```\n\n::: {.cell-output-display}\n![文字の体裁が変わっています](index_files/figure-html/fig-axis-font-1.png){#fig-axis-font width=672}\n:::\n:::\n\n\n\n1.  `theme()`内の`axis.title`で変更する\n    -   X軸Y軸のどちらかだけにしたければ、`axis.title.x`のようにします。\n2.  `element_text()`内で具体的にフォントの体裁を指定\n    -   今回はわかりやすく派手にしましたが、これらの要素を変更すれば調整できます。\n\n    -   例えば、`face = \"bold\"`にすれば太字にできます。\n\n    -   他にもありますが、おおむね使うのはこのあたりでしょう。\n\n### 軸の目盛り\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  scale_x_continuous(breaks = seq(4.5, 8, .5)) + \n  scale_y_continuous(breaks = seq(2, 4, 1))\n```\n\n::: {.cell-output-display}\n![目盛りの間隔が変わっています](index_files/figure-html/fig-axis-scale-1.png){#fig-axis-scale width=672}\n:::\n:::\n\n\n\n目盛りがX軸は0.5刻み、Y軸は1刻みになるよう変更しました。このように、X（Y）が連続値である場合、`scale_x_continuous()`（`scale_y_continuous()`）で変更できます。`seq()`は数列を作る関数で、`seq(from, to, by)`の順に指定します[^1]。\n\n[^1]: 離散値の場合は`scale_x_discrete()`などで変更できますが、今回その説明は省きます。\n\n目盛りも同様にフォントのスタイルを変更できます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(\n    axis.text = element_text(family = \"times\", face = \"bold\", \n                             color = \"red\", size = 20)\n  )\n```\n\n::: {.cell-output-display}\n![数字のフォントが変わっています](index_files/figure-html/fig-scale-font-1.png){#fig-scale-font width=672}\n:::\n:::\n\n\n\nもはや訳が分からない図ですが、このように体裁は変更可能です。要素は大体上と同じで、`axis.text.x`のようにどちらかだけ変更することも可能です。\n\n## 注釈\n\n### 文字\n\n表の中に文字を入れたいとき、どうすればよいか悩んだことが僕には何回もあります。\n\nR上ではできないものと思っていましたが、そんなことはありませんでした。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"text\", label = \"ggplot is\\nwonderful!\", x = 6.5, y = 4, \n           family = \"times\", color = \"#CC6666\", size = 10)\n```\n\n::: {.cell-output-display}\n![表内に文字を入れられました](index_files/figure-html/fig-annotate-1.png){#fig-annotate width=672}\n:::\n:::\n\n\n\n1.  `annotate(\"text\", label = \"hogehoge\")`で文字を入れることができる\n\n2.  `x`と`y`を指定しないと反映されない\n\n3.  改行したい場合、`\\n`を入れる\n\n4.  フォント、色、サイズも指定できる\n\n関数一つで意外と簡単にできます。\n\nさらに、棒線や矢印を付けることも可能です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"segment\", x = 5, xend = 7, y = 4, yend = 2.5, \n           linewidth = 2, color = \"#CC6666\")\n```\n\n::: {.cell-output-display}\n![斜めに棒線が入りました。](index_files/figure-html/fig-segment-1-1.png){#fig-segment-1 width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"segment\", x = 5, xend = 7, y = 4, yend = 2.5, \n           linewidth = 2, color = \"#CC6666\", \n           arrow = arrow(length = unit(2, units = \"cm\")))\n```\n\n::: {.cell-output-display}\n![矢印になりました。](index_files/figure-html/fig-segment-2-1.png){#fig-segment-2 width=672}\n:::\n:::\n\n\n\n1.  `\"segment\"`で棒線ができる\n2.  `x`と`xend`、`y`と`yend`を指定する必要がある\n    -   $(x, y)$から$(xend, yend)$までの2点を結ぶようにできます。\n3.  `linewidth`で線の太さを指定可\n    -   他の要素も文字と同様に指定できますが、`size`が`linewidth`に置き換わっています。\n4.  `arrow = arrow(length = unit(x, units = \"cm\"))`で矢じりが付く\n    -   `x`で矢じりのサイズ、`units`は単位で、他にmmやinchesなどがあります。\n\n以上のように、文字だけでなく線や矢印を追加することができます。\n\n## 複数のプロットと凡例\n\n### 複数のカテゴリのプロット\n\nここでは`Orange`データセットを使って複数のカテゴリのプロットと、凡例について説明します。\n\n複数のカテゴリのプロットとは、以下のデータを見ていただけると早いと思います。\n\n\n\n::: {#tbl-orange .cell tbl-cap='`Orange`の一部'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n      function styleCell_hj1e53l2fvbl253399nm(i, j, css_id) {\n        var table = document.getElementById(\"tinytable_hj1e53l2fvbl253399nm\");\n        table.rows[i].cells[j].classList.add(css_id);\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_hj1e53l2fvbl253399nm');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_hj1e53l2fvbl253399nm(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_hj1e53l2fvbl253399nm\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\nwindow.addEventListener('load', function () { styleCell_hj1e53l2fvbl253399nm(0, 0, 'tinytable_css_idjxpljjlu1j5ovb17odmb') })\nwindow.addEventListener('load', function () { styleCell_hj1e53l2fvbl253399nm(0, 1, 'tinytable_css_idjxpljjlu1j5ovb17odmb') })\nwindow.addEventListener('load', function () { styleCell_hj1e53l2fvbl253399nm(0, 2, 'tinytable_css_idjxpljjlu1j5ovb17odmb') })\n    </script>\n\n    <style>\n    .table td.tinytable_css_idjxpljjlu1j5ovb17odmb, .table th.tinytable_css_idjxpljjlu1j5ovb17odmb {  border-bottom: solid 0.1em #d3d8dc; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_hj1e53l2fvbl253399nm\" style=\"table-layout: fixed; width: 100% !important; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">Tree</th>\n                <th scope=\"col\">age</th>\n                <th scope=\"col\">circumference</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>1</td>\n                  <td> 118</td>\n                  <td> 30</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td> 484</td>\n                  <td> 58</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td> 664</td>\n                  <td> 87</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>1004</td>\n                  <td>115</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>1231</td>\n                  <td>120</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>1372</td>\n                  <td>142</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>1582</td>\n                  <td>145</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td> 118</td>\n                  <td> 33</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td> 484</td>\n                  <td> 69</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td> 664</td>\n                  <td>111</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n`Tree`は木の識別子で、1～5まであります。`age`は日齢、`circumference`は幹の周囲です。\n\nここでやりたいことは、木の種類ごとに、日齢と幹の周囲を軸にとってプロットすることです。これをただプロットしてしまうと、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![すべてのデータを放り込みました](index_files/figure-html/fig-orange-pool-1.png){#fig-orange-pool width=672}\n:::\n:::\n\n\n\nこれでは各点がどの木のものなのか判別できない状態です。これを識別するには次のようにします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![色が分かれました](index_files/figure-html/fig-orange-color-1.png){#fig-orange-color width=672}\n:::\n:::\n\n\n\nこれでとりあえずはどの点がどの木のものかわかるようになりました。`color = Tree`で、木の種類ごとに色を使うことを指定しています。\n\n今は散布図なので色を分けるだけで済みますが、折れ線グラフのような場合は、色だけでなく線の種類を変えたいかもしれません。そんな時は次のようにします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree, linetype = Tree)) + \n  geom_point() + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![折れ線の種類も分かれました](index_files/figure-html/fig-orange-linetype-1.png){#fig-orange-linetype width=672}\n:::\n:::\n\n\n\n`linetype = Tree`を追加することで線の種類も木の種類ごとに変更することができました。\n\nこのように`aes()`内で要素を追加することで種類ごとに分けることができます。\n\nまだ色遣いなどは不格好ですが、いったんこのまま進めます。\n\n### 凡例の位置\n\n次にしたいのは、凡例の設定です。凡例は現在右側に表示されていますが、まずはこれを下に表示したいとします。これは、次のコードでできます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![凡例が下に来ました](index_files/figure-html/fig-orange-legend-position-1.png){#fig-orange-legend-position width=672}\n:::\n:::\n\n\n\n`theme(legend.position = \"bottom\")`を設定することで、凡例の位置が下になりました。もちろんbottom以外にもtop, left, right（デフォルト）などを指定することができます。\n\nさらに凡例を消したい場合は次のようにします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![凡例を消しました](index_files/figure-html/fig-orange-legend-delete-1.png){#fig-orange-legend-delete width=672}\n:::\n:::\n\n\n\n`theme(legend.position = \"none\")`で凡例を消すことができました。\n\n### 凡例の調整\n\n例えば、凡例のタイトルは消したい場合が結構あると思います。@fig-orange-color の例でいえば、Treeという文字は消したいということです。\n\nそんな場合は、以下のようにします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  guides(color = guide_legend(title = NULL))\n```\n\n::: {.cell-output-display}\n![凡例のタイトルを削除](index_files/figure-html/fig-orange-legend-delte-title-1.png){#fig-orange-legend-delte-title width=672}\n:::\n:::\n\n\n\nTreeというタイトルが消えました。\n\nここでは`guides(color = guide_legend(title = NULL))`としていますが、`aes()`内で例えば`linetype`を使っている場合は、`guides()`内も`linetype =`にする必要があります。\n\n## テーマ\n\nggplotではテーマを選ぶことができます。デフォルトではこれまでの図のように背景がグレーになっていますが、ほとんどの場合で背景は白にしたいですよね。\n\n背景だけでなく、罫線等もテーマで変更することができます。\n\n### プリセットのテーマ\n\nいくつかのテーマが準備されています。代表的なものをいくつかご紹介します。\n\n::: panel-tabset\n## minimal\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![`theme_minimal()`](index_files/figure-html/fig-theme-minimal-1.png){#fig-theme-minimal width=672}\n:::\n:::\n\n\n\n## bw\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![`theme_bw()`](index_files/figure-html/fig-theme-bw-1.png){#fig-theme-bw width=672}\n:::\n:::\n\n\n\n`theme_minimal()`と比べて外枠が付いています。\n\n## classic\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![`theme_classic()`](index_files/figure-html/fig-theme-classic-1.png){#fig-theme-classic width=672}\n:::\n:::\n\n\n\n## linedraw\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![`theme_linedraw()`](index_files/figure-html/fig-theme-linedraw-1.png){#fig-theme-linedraw width=672}\n:::\n:::\n\n\n\n## light\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_light()\n```\n\n::: {.cell-output-display}\n![`theme_light()`](index_files/figure-html/fig-theme-light-1.png){#fig-theme-light width=672}\n:::\n:::\n\n\n\n## void\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![`theme_void()`](index_files/figure-html/fig-theme-void-1.png){#fig-theme-void width=672}\n:::\n:::\n\n\n\nさすがにやりすぎでは…と思うかもしれませんが、GISで地図を可視化するようなときに重宝します。\n:::\n\n### `theme()`関数\n\nここまでご紹介したものの中で`theme()`を使ったものがいくつかありました。\n\nここで`theme()`**は**`theme_xxx()`**の後に使う**ということに注意してください。\n\nこれは、`theme_xxx()`が`theme()`を上書きしてしまうためです。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(axis.title = element_text(color = \"red\")) + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![失敗例](index_files/figure-html/fig-theme-miss-1.png){#fig-theme-miss width=672}\n:::\n:::\n\n\n\n`theme(axis.title = element_text(color = \"red\"))`で軸ラベルを赤色に設定していますが、出力されたものは黒いラベルになっています。\n\n順番を逆にすれば、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal() + \n  theme(axis.title = element_text(color = \"red\"))\n```\n\n::: {.cell-output-display}\n![正しい例](index_files/figure-html/fig-theme-success-1.png){#fig-theme-success width=672}\n:::\n:::\n\n\n\nこのようにしっかり反映されます。\n\n## おわりに\n\nひとまず僕がよく使うggplotの設定をまとめてみました。ggplotを駆使して、スタイリッシュなプロットを作成していきましょう！\n\n適宜追記する予定ですので、ご参考になれば幸いです。\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}