{
  "hash": "72fbf186d3595c6970579c863938ed4f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`ggplot2`ガイド\"\ndescription: |\n  ggplotを使うのに役立つコマンドを紹介します。\ndate: 2024-11-17\ncategories:\n  - R\neditor: visual\ndraft: true\n---\n\n\n\n## はじめに\n\n皆さん、ggplot、使ってますか？多分お使いですよね。\n\n僕は数か月前ggplotのガイドブックを買いまして、いろいろと勉強しているところでございます。\n\nこんなこともできるのか！という発見が多々あり、Rユーザーの皆様にはぜひ買っていただきたい代物なのですが、いかんせんお値段が張りますので、いくつかピックアップしてご紹介します。\n\n書籍のリンクは以下です。\n\n::: {.callout-tip appearance=\"minimal\" icon=\"false\"}\n[Rグラフィックスクックブック 第2版 ―ggplot2によるグラフ作成のレシピ集](https://www.amazon.co.jp/R%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%B9%E3%82%AF%E3%83%83%E3%82%AF%E3%83%96%E3%83%83%E3%82%AF-%E7%AC%AC2%E7%89%88-%E2%80%95ggplot2%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B0%E3%83%A9%E3%83%95%E4%BD%9C%E6%88%90%E3%81%AE%E3%83%AC%E3%82%B7%E3%83%94%E9%9B%86-Winston-Chang/dp/4873118921)\n:::\n\n## `ggplot2`の基本\n\n::: callout-note\n使ったことがある方はこの辺はスキップしてください。\n\n今回使うデータは、デフォルトで用意されている`iris`です。\n:::\n\nひとまず主要なパッケージである`ggplot2`を読み込みます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\n\n基本的な使い方としては、`ggplot()`と`aes()`、そして図に応じて`geom_line()`や`geom_point()`を使っていきます。\n\n今回は例として、アイリスのがく片の長さ、幅をそれぞれ軸としてプロットします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![irisデータフレームを使った散布図](index_files/figure-html/fig-iris-1.png){#fig-iris width=672}\n:::\n:::\n\n\n\n1.  `ggplot(data, aes())`という形で使用するデータを指定\n2.  `aes()`内ではX軸とY軸をそれぞれ指定する。\n    -   例：`aes(x = Sepal.Length, y = Sepal.Width)`\n3.  ggplotのコマンドは`+`で繋ぐ\n4.  散布図を作るには`geom_point()`を繋げる\n    -   その他、折れ線なら`geom_line()`、ヒストグラムなら`geom_histogram()`など\n\nこれが土台です。`ggplot()`だけではプロットは表示されませんので、何かしら繋ぐ形にしてください。\n\n今回はggplotの基本というよりも、そこからの拡張を主に書きたいので、この散布図をベースに進めます。\n\n## 軸\n\n### 軸ラベル\n\nまずはX軸、Y軸のラベルを変更します。次のコマンドを追加することで変更できます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\")\n```\n\n::: {.cell-output-display}\n![軸ラベルを変更](index_files/figure-html/fig-axis-label-1.png){#fig-axis-label width=672}\n:::\n:::\n\n\n\nまた、以下のコードは同じ結果を示します。\n\n``` r\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  xlab(\"Length of Sepal\") + \n  ylab(\"Width of Sepal\")\n```\n\nすなわち、`labs()`はそれ一つでX軸もY軸もラベルを変更することができますが、`xlab()`、`ylab()`を使えば片方ずつ変更できるということです。\n\n次に、軸ラベルの体裁を変更したい場合、以下のようにします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\") + \n  theme(\n    axis.title = element_text(family = \"times\", face = \"italic\", \n                              color = \"red\", size = 20)\n  )\n```\n\n::: {.cell-output-display}\n![文字の体裁が変わっています](index_files/figure-html/fig-axis-font-1.png){#fig-axis-font width=672}\n:::\n:::\n\n\n\n1.  `theme()`内の`axis.title`で変更する\n    -   X軸Y軸のどちらかだけにしたければ、`axis.title.x`のようにする\n2.  `element_text()`内で具体的にフォントの体裁を指定\n    -   今回はわかりやすく派手にしましたが、これらの要素を変更すれば調整できます。\n\n    -   例えば、`face = \"bold\"`にすれば太字にできます。\n\n    -   他にもありますが、おおむね使うのはこのあたりでしょう。\n\n### 軸の目盛り\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  scale_x_continuous(breaks = seq(4.5, 8, .5)) + \n  scale_y_continuous(breaks = seq(2, 4, 1))\n```\n\n::: {.cell-output-display}\n![目盛りの間隔が変わっています](index_files/figure-html/fig-axis-scale-1.png){#fig-axis-scale width=672}\n:::\n:::\n\n\n\n目盛りがX軸は0.5刻み、Y軸は1刻みになるよう変更しました。このように、X（Y）連続値である場合、`scale_x_continuous()`（`scale_y_continuous()`）で変更できます。`seq()`は数列を作る関数で、`seq(from, to, by)`の順に指定します[^1]。\n\n[^1]: 離散値の場合は`scale_x_discrete()`などで変更できますが、今回その説明は省きます。\n\n目盛りも同様にフォントのスタイルを変更できます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(\n    axis.text = element_text(family = \"times\", face = \"bold\", \n                             color = \"red\", size = 20)\n  )\n```\n\n::: {.cell-output-display}\n![数字のフォントが変わっています](index_files/figure-html/fig-scale-font-1.png){#fig-scale-font width=672}\n:::\n:::\n\n\n\nもはや訳が分からない図ですが、このように体裁は変更可能です。要素は大体上と同じで、`axis.text.x`のようにどちらかだけ変更することも可能です。\n\n## 注釈\n\n### 文字\n\n表の中に文字を入れたいとき、どうすればよいか悩んだことが僕には何回もあります。\n\nR上ではできないものと思っていましたが、そんなことはありませんでした。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"text\", label = \"ggplot is\\nwonderful!\", x = 6.5, y = 4, \n           family = \"times\", color = \"#CC6666\", size = 10)\n```\n\n::: {.cell-output-display}\n![表内に文字を入れられました](index_files/figure-html/fig-annotate-1.png){#fig-annotate width=672}\n:::\n:::\n\n\n\n1.  `annotate(\"text\", label = \"hogehoge\")`で文字を入れることができる\n\n2.  xとyを指定しないと反映されない\n\n3.  改行したい場合、`\\n`を入れる\n\n関数一つで意外と簡単にできます。\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}