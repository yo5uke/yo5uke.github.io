{
  "hash": "c226c5dd650132dfcedf7c21d5283d79",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"【R パッケージ】インストールも読み込みも一撃で？【pacman】\"\ndescription: |\n  `install.packages()` はもう不要！\ndate: 2024-05-07\ndate-modified: last-modified\ncategories: \n  - R\nimage: image/Rlogo.png\n---\n\n\n\n# はじめに\n\n何か新しいプロジェクトを始める際に、新しいパッケージをいちいちインストールして読み込むのは面倒ですよね。\n\nそんな時に便利な `pacman` パッケージのご紹介です。\n\n# pacman とは\n\nざっくり言うと、パッケージのマネジメントツールです。このパッケージには `p_` で始まる様々な関数が含まれています。\n\n特に便利なのが `p_load()` で、パッケージのインストールと読み込みを両方してくれます。もちろんインストール済みのパッケージは、読み込むだけです。\n\nさらに便利なのは、複数のパッケージをまとめて書けるということです。`install.packages()` は一度に複数のパッケージをインストールできるものの、`library()` はパッケージごとにしなくてはなりません。その点 `pacman::p_load()` は、括弧内にパッケージを並べて書くことで、複数のパッケージを一度にインストール、読み込みまでしてくれます（しかもダブルクォーテーションで囲まなくてよい！）。\n\n# 使ってみる\n\n早速使ってみます。今回は、`tidyverse`, `sf`, `here` の3つを使いたいとして、まだインストールもしていないとします。\n\n## library()\n\nまず、インストールします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\ninstall.packages(\"sf\")\ninstall.packages(\"here\")\n```\n:::\n\n\n\n次に、読み込みます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /home/rstudio/work\n```\n\n\n:::\n:::\n\n\n\nこれで使えるようになりました。\n\n## p_load()\n\n\n\n\n\n\n\n\n`pacman::p_load()` はこれで一発です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, here)\n```\n:::\n\n\n\nこの場合、上に出てきたような読み込みに付随するメッセージは出てきません。\n\n# 使うにあたって\n\n`pacman` がパッケージである以上、はじめに `install.packages(\"pacman\")` はしなければなりません。それ以降は `install.packages()` とはおさらばできます。\n\n`packman::` の書き方を使って、`library(pacman)`も省略しましょう^[この書き方では、`library()` を使わずともパッケージ内の関数が使えます。一度だけ使いたい！というときに便利です。また、どのパッケージに属しているかが明確になるというメリットもあります。]。\n\nまた、Docker を用いて環境構築する場合、Dockerfile にインストールすることを指示しておけば、それすら要らなくなります^[[こちら](../240504_container/index.html)を参照]。\n\nDockerfile に以下を追加します。\n\n```{.dockerfile filename=\"Dockerfile\"}\nRUN R -e \"install.packages('pacman')\"\n```\n\nこれでビルドすれば、RStudio でインストールせずとも `pacman` が使えます。\n\n# おまけ\n\nパッケージを全部アップデートしたい、なんてこともありますよね。RStudio から一括でやる方法もありますが、せっかくなので `pacman` を使ってやってみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_update()\n```\n:::\n\n\n\nこれでいけます。\n\n# まとめ\n\n`pacman` パッケージをご紹介しました。\n\n`library()` とどちらを使うかはお好み次第だと思います。\n\n魅力を感じた方はぜひ使ってみてください！\n\n# 参考\n\n:::{.callout-tip appearance=\"minimal\"}\n[\"install.packages()\"するのはこれが最後！Rのパッケージ管理には「pacman」を使おう](https://qiita.com/taiyodayo/items/e69d997754d55e3d7e4c)\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}