{
  "hash": "0ec6e3d73a27331d6834785f9aa1b89a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"夜間光を可視化する\"\ndate: 2025-05-07\ndate-modified: 2025-10-23\n---\n\n:::{.callout-note}\n## データについて\n\nVIIRSの夜間光データについて、本ページで使用しているような日本のみを切り出したGeoTIFFファイルを[こちら](../../software/nighttime_lights/index.qmd)で提供しています。内容をお読みになったうえでご利用ください。\n:::\n\n## はじめに\n\n今回は夜間光について扱います。\n\n夜間光とは、人工衛星から夜間に撮影された地上の光のデータのことを指し、夜間光の強さやパターンは、都市の発展、産業の活況、電力消費量などを反映していると考えられています。\n\n例えば @martinez_how_2022 では、独裁的な政府ではGDP成長率が過大申告されているという仮説をもとに、夜間光は政府が制御できないという客観性を用いて仮説検証を行っています。結果として独裁国家では、同じ夜間光の伸びに対して報告されるGDP成長率が過大になっていることを明らかにしています。\n\nこのように夜間光は近年の研究で度々用いられており、その客観性が有用な指標になっているわけですが、今回はどのようにこの夜間光データを扱えばよいのか、説明していきます。\n\n## 使用するデータ\n\n夜間光は、NASAのSuomi NPPに搭載されたVisible/Infrared Imager and Radiometer Suite (VIIRS)という地球観測用のセンサーによって観測され、[こちら](https://eogdata.mines.edu/products/vnl/)のページからダウンロードできます。\n\n今回使用するのは[Annual VNL V2](https://eogdata.mines.edu/products/vnl/#annual_v2)という年単位のデータで、この中の、雲などのノイズを除去しつつ年間の夜間光の平均を反映したものを使っていきます。\n\nAnnual VNL V2のセクションから「Go to Download V2.2」をクリックし、ダウンロードページに飛びます。\n\n![V2.2には2022年から2024年のデータがあります](image/VIIRS_Nighttime_Light.png){fig-align=\"center\"}\n\n任意の年（今回は2024年とします）のフォルダをクリックすると、`.gz`ファイル（gzipファイル）がいくつかあります。目的にもよりますが、今回は平均のデータを使うので、`~average.dat.tif.gz`というファイルをクリックしたダウンロードします。おそらく1番上に表示されていると思います。\n\nダウンロードに際してアカウント登録が必要です。ダウンロードしたいファイルをクリックすると登録を求められると思うので表示された内容に従って登録してください。\n\n右にファイルサイズが表示されていますが、10GB近いファイルですので、ダウンロードには30分近く要します。ダウンロードできたら、通常のzipファイル同様に展開してください。\n\n## TIFFファイルについて\n\nダウンロードしたファイルは、`.tif`形式になっています。これはTIFFファイルと言って、Tagged Image File Formatの略です。TIFFファイルは画像ファイルの一種で、写真や図面、スキャン画像などを高画質・非圧縮または可逆圧縮で保存できる形式です。\n\n特に今回用いるファイルはGeoTIFFと言い、TIFFフォーマットに位置情報（地理情報）を埋め込んだ拡張版です。そのため、シェープファイル等とあわせて特定の場所におけるデータを編集したり分析したりすることができます。\n\n## ラスタデータについて\n\nこのTIFF形式のデータは、**ラスタデータ**の一種です。ラスタデータとは、格子状のセル（ピクセル）で構成されるもので、各セルに値を持つグリッドデータです。例えばExcelでシート上に地図を書いて、土地に該当するセルにデータを入れていったようなイメージです。ピクセルの大きさによってデータの大きさも異なり、もちろん細かいピクセルにしたデータの方が大きくなります。\n\nちなみに、これまで扱ってきたシェープファイルやGeoJSON、Geopackageなどの点や線、ポリゴンなどの幾何学的な形で空間情報を表現するデータを**ベクタデータ**と言います。こちらは行政区域データのような境界線を表したり、線路などの線、駅などのポイントデータが該当します。\n\n## Rで読み込み可視化する\n\nダウンロードしたファイルを読み込みます。\n\n必要となるパッケージは以下の通りです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 未インストールの場合\n# pak::pak(\"terra\")\n\nlibrary(terra)\n```\n:::\n\n\n10GBもあるファイルですが、シェープファイル等と違って読み込み自体は素早くできます。`terra`パッケージの`rast()`関数で読み込んでいきます（ファイル名はオリジナルから変更しています）。ファイルまでのパスは各々変更してください。\n\n``` r\nntl_24 <- rast(here::here(\"data/nighttime_lights/nighttime_lights_2024.tif\"))\n```\n\nTIFFファイルをプロットするには、`terra`パッケージの`plot()`関数を用います。ここで`plot()`はベースRの関数としても備わっているため、その関数と区別するために`terra::plot()`と明示して使用します。\n\n``` r\nterra::plot(ntl_24)\n```\n\n![ほぼ認識できません](image/plot_basic.png){fig-align=\"center\" width=\"100%\"}\n\nご覧の通り、ほぼ紫になってしまっており、このままではどこがどこなのかさっぱり認識できません。これは外れ値ともいえるような極端に明るいところが点在しているため、その他の光量がほぼ0のようになってしまっていることが原因です。\n\nここで、右の凡例が光量の値を示しているのですが、この値を600などの大きい値ではなく、0から10のような狭い範囲でプロットしてみましょう。`range`引数で指定することができます。\n\n``` r\nterra::plot(ntl_24, range = c(0, 10))\n```\n\n![だいぶ見やすくなりました](image/plot_0to10.png){fig-align=\"center\"}\n\n今度はどうでしょうか。10以上のところは白飛びしていますが、それでもスケール調整によって見やすくなったと思いますし、地図が浮かび上がってきました。こういうことはプロットの際にはよくあるので、うまくスケール調整をしながらプロットしてみてください。\n\n## 日本を切り出す\n\n今度はこの夜間光のファイルから日本を切り出してみます。\n\n日本を切り出すメリットとしては、プロットの際に日本にフォーカスできることはもちろん、ファイルサイズを大幅に縮小することができます。日本に切り取った場合、10GBから15MB程度までファイルサイズは小さくなります（！）。\n\nまずは切り取るための土台として日本の行政区域データを準備します。\n\n### 日本の市区町村データを準備 {#sec-read-muni}\n\n以下のファイルを使用します。国土数値情報ダウンロードサイトからとってきた行政区域データを、各自治体が1オブジェクトになるように整理したデータです。これを`muni`として読み込んでおきます。\n\n[GPKGファイル](/data/jpn_geojson/municipality_summarise.zip){download=\"municipality_summarise.zip\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(here)\n\nmuni <- read_sf(here(\"data/jpn_geojson/municipality_summarise.gpkg\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot2::ggplot(muni) +\n  ggplot2::geom_sf() +\n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![ファイルをプロットするとこんな感じです](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n**ポイント：**夜間光のラスタデータと、行政区域のベクタデータの投影座標系を揃える必要があります。これをあらかじめ設定しておかないと、後々切り取る際の基準がバラバラになってしまい、ずれが生じてしまいます。この行政区域データを、夜間光データと同じ座標系に設定しましょう。\n\n``` r\nmuni <- muni |> \n  sf::st_transform(terra::crs(ntl_24))\n```\n\nわかりやすくパッケージも明示しましたが、ラスタデータの座標系（CRS）は`terra`パッケージの`crs()`関数で取得でき、これを`sf`パッケージの`st_transform()`関数で読み込ませて座標系を上書きしています。ベクタデータの場合の座標系は、`sf::st_crs()`で取得できます^[例：`st_transform(st_crs(muni))`]。\n\n### 切り取り\n\n切り取る際には大きく分けて`crop()`関数と`mask()`関数の2つを使います。\n\n`crop()`関数はある範囲でラスタデータを切り取り、`mask()`は指定したポリゴンの形状に基づいてその形で切る関数です。今回のイメージで言えば、日本を囲む四角形で一度切り取ったうえで、日本の形に添ってさらに切り取るという流れです。一度`crop()`を挟むことで`mask()`の計算を軽量化することができます。\n\n1.  `crop()`で四角形に切り取る\n\n切り取るうえで、基準は様々あります。例えば日本の東西南北の端の緯度経度を取得してその通りに切り取るというものであったり、日本がすっぽり埋まるような緯度経度を自分で指定して切り取るといったような方法です。今回は前者を採用して進めてみます。\n\nいま、`ntl_24`という夜間光のラスタデータと、`muni`という自治体のベクタデータがあります。ここで`muni`がすっぽり収まるような四角形（**外接矩形**）に切り取るため、`terra::ext()`を用います。\n\n``` r\njapan_extent <- ext(muni)\n```\n\nこれ自体はプロットしても日本は表示されません。外接矩形を切り出しただけで、範囲のみが出てきます。\n\n![terra::plot(japan_extent)](image/japan_extent.png){fig-align=\"center\"}\n\nこれを使って、`ntl_24`を切り取ります。\n\n``` r\ncropped <- crop(ntl_24, japan_extent)\n\nterra::plot(cropped, range = c(0, 10))\n```\n\n![切り取れました](image/cropped_japan_0to10.png){fig-align=\"center\"}\n\n先ほどと同様光量の範囲を0～10に絞ってプロットしました。日本がしっかり収まっているのがわかると思います。ぴったり切っているため、北海道の頭が上辺に接していますが、最終的にプロットを載せないのであれば特に問題ないかと思います。\n\n::: {.callout-tip collapse=\"true\"}\n## 夜間光のプロットまで載せたい場合\n\n成果物にプロットまで載せたい場合は、もう少し北に幅を持たせたいかもしれません。その場合は`ext()`を使う段階で調整をします。\n\n``` r\njapan_extent <- ext(muni)\n\n# バッファを加える\njapan_extent <- ext(\n  xmin(japan_extent), \n  xmax(japan_extent), \n  ymin(japan_extent), \n  ymax(japan_extent) + 2\n)\n```\n\nこのように、`ext()`で上書きします。経度の下限上限、緯度の下限上限の順に指定し、その中でプラス（あるいはマイナス）何度余白を持たせるかを設定します^[`xmin()`は経度の下限、`ymax()`は緯度の上限を表しているといった感じです。]。これでプロットすると以下のようになります。\n\n![北に少し幅を持たせられました](image/cropped_japan_0to10_buffer.png){fig-align=\"center\"}\n:::\n\n2.  `mask()`で日本の形に沿って切り出す\n\nラスタデータの範囲を絞ることができたので、次は軽量化したこのデータから日本の形を切り出していきます。\n\n以下のコードで切り出せます。\n\n``` r\nmasked <- mask(cropped, vect(muni))\n\nterra::plot(masked, range = c(0, 10))\n```\n\n![日本の形に切り取られました](image/masked_japan_0to10.png){fig-align=\"center\"}\n\n外接矩形のデータと行政区域データを用いて、日本の領土上における夜間光をプロットすることができました。ポイントは、**ラスタデータとベクタデータでそろっておらず計算できないため、`vect()`を用いて`muni`を`mask()`で計算できる形に変更しているところ**です。\n\n以上で夜間光データから日本を切り出すことができました。\n\n## 市町村ごとに光量を計算する\n\nここからは、切り出したデータを用い、市町村の平均光量を計算していきます。なお、本ページでは計算の厳密さは重視しませんので、あくまでも計算方法の提示にとどめます^[単純平均では、面積が大きいかつごく一部のみ都市化しているような市町村は過小評価されると考えてよいと思います。]。\n\n使用するデータは今計算した`masked`です。そして計算に使用する関数は`terra::extract()`です。\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nntl_values <- terra::extract(masked, muni, fun = mean, na.rm = TRUE)\n```\n:::\n\n\n`extract()`関数を使い、`masked`と`muni`を重ね合わせながら、平均（mean）を計算しています^[ここでも`tidyr`パッケージとの競合を避けるため`terra`を明記しています。]。欠損値がある場合でも対応できるように、`na.rm = TRUE`を指定しています。このときもし\n\n```         \nWarning: [extract] transforming vector data to the CRS of the raster\n```\n\nというような警告が出てきた場合は座標系が揃っていないということなので、[前](#sec-read-muni)に戻って座標系を設定してください。\n\n計算したものの中身は以下のようになっています。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_3sh66tplm7o3gwo1orzc(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_3sh66tplm7o3gwo1orzc\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_3sh66tplm7o3gwo1orzc(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_3sh66tplm7o3gwo1orzc\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '6', j: 0 }, { i: '6', j: 1 },  ], css_id: 'tinytable_css_6qfp7z0c09571pqw901b',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 },  ], css_id: 'tinytable_css_g9kfwze5fakfddcow6si',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_3sh66tplm7o3gwo1orzc(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_6qfp7z0c09571pqw901b, .table th.tinytable_css_6qfp7z0c09571pqw901b { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_g9kfwze5fakfddcow6si, .table th.tinytable_css_g9kfwze5fakfddcow6si { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_3sh66tplm7o3gwo1orzc\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">ID</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">nighttime_lights_2024</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">1</td>\n                  <td data-row=\"1\" data-col=\"1\">10.530607</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">2</td>\n                  <td data-row=\"2\" data-col=\"1\">2.032149</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">3</td>\n                  <td data-row=\"3\" data-col=\"1\">2.897246</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">4</td>\n                  <td data-row=\"4\" data-col=\"1\">3.978741</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">5</td>\n                  <td data-row=\"5\" data-col=\"1\">6.942668</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\">6</td>\n                  <td data-row=\"6\" data-col=\"1\">1.047370</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\nこの`ID`は`muni`の行番号に対応しているので、`muni`に`bind_cols()`等すれば適切に結合できます^[`id`は`muni` のどの列にも対応しない（行番号のみ）ので、`left_join()`ではなく`bind_cols()`しています。]。\n\n例：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmuni_ntl <- muni |>\n  bind_cols(ntl_values) |>\n  select(-ID) |>\n  relocate(geom, .after = last_col())\n```\n:::\n\n\n`ID`はもはや不要なので抜いて、個人的に`geom`は最後に置きたいので移動させていますが、これらはなくても問題ありません。\n\nこれでできるのが以下です。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_k3w1cdiygwx51ewtu8m1(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_k3w1cdiygwx51ewtu8m1\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_k3w1cdiygwx51ewtu8m1(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_k3w1cdiygwx51ewtu8m1\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '6', j: 0 }, { i: '6', j: 1 }, { i: '6', j: 2 }, { i: '6', j: 3 }, { i: '6', j: 4 },  ], css_id: 'tinytable_css_91mb3xajn6udznl9oz2o',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 }, { i: '0', j: 2 }, { i: '0', j: 3 }, { i: '0', j: 4 },  ], css_id: 'tinytable_css_jpr5owma0140wzotyoui',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_k3w1cdiygwx51ewtu8m1(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_91mb3xajn6udznl9oz2o, .table th.tinytable_css_91mb3xajn6udznl9oz2o { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_jpr5owma0140wzotyoui, .table th.tinytable_css_jpr5owma0140wzotyoui { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_k3w1cdiygwx51ewtu8m1\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">name_muni</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">id_muni</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">id_pref</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">nighttime_lights_2024</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">geom</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">札幌市</td>\n                  <td data-row=\"1\" data-col=\"1\">01100</td>\n                  <td data-row=\"1\" data-col=\"2\">01</td>\n                  <td data-row=\"1\" data-col=\"3\">10.530607</td>\n                  <td data-row=\"1\" data-col=\"4\">MULTIPOLYGON (((141.2828 43...</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">函館市</td>\n                  <td data-row=\"2\" data-col=\"1\">01202</td>\n                  <td data-row=\"2\" data-col=\"2\">01</td>\n                  <td data-row=\"2\" data-col=\"3\">2.032149</td>\n                  <td data-row=\"2\" data-col=\"4\">MULTIPOLYGON (((141.1571 41...</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">小樽市</td>\n                  <td data-row=\"3\" data-col=\"1\">01203</td>\n                  <td data-row=\"3\" data-col=\"2\">01</td>\n                  <td data-row=\"3\" data-col=\"3\">2.897246</td>\n                  <td data-row=\"3\" data-col=\"4\">MULTIPOLYGON (((140.8554 43...</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">旭川市</td>\n                  <td data-row=\"4\" data-col=\"1\">01204</td>\n                  <td data-row=\"4\" data-col=\"2\">01</td>\n                  <td data-row=\"4\" data-col=\"3\">3.978741</td>\n                  <td data-row=\"4\" data-col=\"4\">MULTIPOLYGON (((142.2877 43...</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">室蘭市</td>\n                  <td data-row=\"5\" data-col=\"1\">01205</td>\n                  <td data-row=\"5\" data-col=\"2\">01</td>\n                  <td data-row=\"5\" data-col=\"3\">6.942668</td>\n                  <td data-row=\"5\" data-col=\"4\">MULTIPOLYGON (((140.941 42....</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\">釧路市</td>\n                  <td data-row=\"6\" data-col=\"1\">01206</td>\n                  <td data-row=\"6\" data-col=\"2\">01</td>\n                  <td data-row=\"6\" data-col=\"3\">1.047370</td>\n                  <td data-row=\"6\" data-col=\"4\">MULTIPOLYGON (((144.3589 42...</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n単純平均ではあるものの、札幌が大きな値をとっており、傾向はあっていそうな感じです。\n\n他の、例えばメッシュデータなどを組み合わせればもう少し詳細に計算もできると思いますが、今回はここまでとします。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}