{
  "hash": "4a14f8a42c0ffca31a57c61b3a5e5846",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"プロットの応用\"\ndate: 2024-12-16\neditor: visual\n---\n\n\n\n\n## はじめに\n\n第1回でGISデータの読み込みと簡単なハンドリング、プロットを行いました。\n\n今回は、1.5回として、プロットにフォーカスしてもう少し踏み込んでいきたいと思います。\n\n## 使用するデータ\n\n第1回と同じデータを用います。\n\n1.  福島県の行政区域データ（2024年、ポリゴン）\n\n    -   [国土数値情報ダウンロードサイト](https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-2024.html)\n\n2.  福島県の公園データ（2011年、ポイント）\n\n    -   [国土数値情報ダウンロードサイト](https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-P13.html)\n\nこれらのデータを、ワーキングディレクトリに`data`フォルダを作って入れておいてください。\n\n## 使用するパッケージ\n\n`sf`と`ggplot2`です。`ggplot2`は`tidyverse`パッケージ群に含まれていますので、後者で読み込みます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(here)\n```\n:::\n\n\n\n\n## データの読み込み\n\n前回と同様です。公園のポイントデータには座標参照系（CRS）が設定されていないので、`st_set_crs()`でデータ本来のCRSに設定し、その上でJDG2011に修正しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfukushima <- read_sf(here(\"data/N03-20240101_07_GML/N03-20240101_07.shp\"))\n\npark <- read_sf(here(\"data/P13-11_07_GML/P13-11_07.shp\"), \n                options = \"ENCODING=Shift_JIS\") |> \n  st_set_crs(st_crs(4612)) |>  # JGD2000/(B, L) データ本来のCRS\n  st_transform(st_crs(6668))   # JGD2011/(B, L) 変換したいCRS\n\n# 必要な変数を抽出＆リネーム\nfukushima <- fukushima |> \n  select(\n    name_pref = N03_001,  # 都道府県名\n    name_muni = N03_004,  # 市区町村名\n    geometry              # プロットに必要\n  )\n\npark_s <- park |> \n  select(\n    name_park = P13_003,  # 公園名\n    name_pref = P13_005,  # 都道府県名\n    name_muni = P13_006,  # 市区町村名\n    geometry\n  )\n```\n:::\n\n\n\n\n## プロットの基本\n\nまずは前回のプロットを確認します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = fukushima) + \n  geom_sf(data = park_s, color = \"orange\") +  # 点の色も指定\n  theme_void()\n```\n\n::: {.cell-output-display}\n![行政区域と公園ポイントのプロット](index_files/figure-html/fig-plot-all-1.png){#fig-plot-all width=672}\n:::\n:::\n\n\n\n\n**ポイント：**\n\n1.  `ggplot()`でプロットを開始\n2.  `geom_sf()`で各地理データをプロット\n    -   括弧内では`data =`を明記（ないとプロットできない）\n3.  コードを書いた順に上書き\n    -   公園のデータを先にプロットするとその後に書いた地図に消されてしまう\n4.  `theme_void()`でシンプルな背景に\n    -   緯度経度までプロットしたいことはあまりないと思いますが、軸も表示しつつシンプルなテーマを使いたい場合は[こちら](../../tips/241117_ggplot2/index.html#テーマ)も参考にしてください。\n\n## 地図の塗りつぶし\n\n### 全体\n\n例えば、デフォルトで市町村はグレーに塗られていますが、ここも白にしたいとします。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = fukushima, fill = \"white\") + \n  geom_sf(data = park_s, color = \"orange\") + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![白で塗りつぶしました](index_files/figure-html/fig-map-fill-1.png){#fig-map-fill width=672}\n:::\n:::\n\n\n\n\n`fill`を`geom_sf()`内で指定することにより、塗りつぶすことができます。\n\n### 一部\n\n時には一部の市町村だけ塗りつぶしたいこともあると思います。ここでは例として、公園が集中している福島市、郡山市、会津若松市、いわき市を塗りつぶしてみます。\n\nまずはデータの加工からです。\n\n`fukushima`のデータを加工し、4市のいずれかであれば「主要4市」となる変数を作ります。\n\n`cities`に該当する市の名前を格納し、`name_muni %in% cities`で`name_muni`が`cities`に入っていれば「主要4市」とラベリングされます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncities <- c(\"福島市\", \"郡山市\", \"会津若松市\", \"いわき市\")\n\nfukushima <- fukushima |> \n  mutate(is_in4cities = if_else(name_muni %in% cities, \"主要4市\", \"その他\"))\n```\n:::\n\n\n\n\n`if_else(条件, 真, 偽)`は、条件に当てはまっていれば真、そうでなければ偽の値をとるような関数です。\n\n::: {.callout-tip collapse=\"true\"}\n## ダミー変数の場合\n\nこの場合真と偽はダミー変数の1, 0でもよいのですが、プロットの際に連続変数と扱われてしまい、少々面倒です。百聞は一見に如かずということで、ダミー変数で作った場合のプロットはこちらです。\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nこれは色をいじっていないのできれいな図ではありませんが、凡例を見ていただければわかる通り、1, 0の2値ではなく連続変数扱いになってしまっています。\n\nそのため、もし2値でしたいのであれば`\"1\", \"0\"`のように文字列として変数を作成するのが良いかもしれません。\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n次に`is_in4cities`が1であれば塗りつぶすようにコードを修正します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = fukushima, aes(fill = is_in4cities)) + \n  geom_sf(data = park_s, color = \"orange\") + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![特定の市を塗りつぶしました](index_files/figure-html/fig-map-fill-4cities-1.png){#fig-map-fill-4cities width=672}\n:::\n:::\n\n\n\n\n`aes(fill = is_in4cities)`を追加したことで、色分けをすることができました。変数に対して色分けをしたい場合は`aes()`内で指定する必要があります。\n\nしかしこのままでは色が非常に見にくいので、色を修正していきます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = fukushima, aes(fill = is_in4cities)) + \n  geom_sf(data = park_s, color = \"darkgreen\") + \n  scale_fill_manual(\n    values = c(\"white\", \"lightblue\")\n  ) + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![特定の市を塗りつぶしました](index_files/figure-html/fig-map-fill-4cities-clean-1.png){#fig-map-fill-4cities-clean width=672}\n:::\n:::\n\n\n\n\nこれでより見やすいプロットになりました。`scale_fill_manual()`では、`aes(fill = )`で設定した変数に対して`values =`で色を割り当てることができます。\n\n例えば人口など連続変数をマッピングしたい場合はまた別ですが、離散値の場合は基本的にこの方法でプロット可能です。今は2種類しかないので`c(\"white\", \"lightblue\")`ですが、3種類以上でも可能です[^1]。\n\n[^1]: 変数が「政令指定都市」、「中核市」、「その他」で`scale_fill_manual( values = c(\"white\", \"lightblue\", \"blue\") )`とするなど。\n\n## 凡例の整理\n\n@fig-map-fill-4cities-clean では地図自体は整理できたものの、凡例部分が未整理です。\n\n例えば`is_in4cities`は消したいし、主要4市はその他の上にあってほしいです。\n\nその設定をするコードは以下です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = fukushima, aes(fill = is_in4cities)) + \n  geom_sf(data = park_s, color = \"darkgreen\") + \n  scale_fill_manual(\n    values = c(\"white\", \"lightblue\")\n  ) + \n  guides(fill = guide_legend(title = NULL, reverse = TRUE)) + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![凡例を整理しました](index_files/figure-html/fig-map-fill-4cities-guides-1.png){#fig-map-fill-4cities-guides width=672}\n:::\n:::\n\n\n\n\n**ポイント：**\n\n1.  `guides()`内で`fill`を指定\n    -   これは`aes()`内で`fill`を使用しているため[^2]\n2.  `guide_legend()`内で`title = NULL`を指定\n    -   文字通りタイトルを空にする\n3.  `guide_legend()`内で`reverse = TRUE`を指定\n    -   要素の順を逆転させる\n\n[^2]: 例えば折れ線グラフで`linetype`を使っていたら、ここも`linetype =`になります。\n\n## 点を色で塗り分ける\n\n今度は点に色を付ける方法です。これまではオレンジや濃い緑で統一して色を付けてきましたが、これを色分けしていきます。\n\n先ほどと同様、分け方に従って変数を追加します。先ほどと同様の4市に含まれる公園に色を付けるとします。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npark_s <- park_s |> \n  mutate(is_in4cities = if_else(name_muni %in% cities, \"主要4市内\", \"その他\"))\n```\n:::\n\n\n\n\nほとんど同じです。\n\n続いてプロットを行います。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = fukushima, fill = \"white\") + \n  geom_sf(data = park_s, aes(color = is_in4cities)) + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![点を塗り分けました](index_files/figure-html/fig-map-point-coloring-1.png){#fig-map-point-coloring width=672}\n:::\n:::\n\n\n\n\n先ほどとの違いは、`aes()`内で`fill`ではなく`color`を使っている点です。文字通り`fill`は塗りつぶしですので、点では`color`を使います。\n\nここからは塗りつぶしで行った手順をまとめて行っていきます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = fukushima, fill = \"white\") + \n  geom_sf(data = park_s, aes(color = is_in4cities)) + \n  scale_color_manual(\n    values = c(\"lightblue\", \"darkblue\")\n  ) + \n  guides(color = guide_legend(title = NULL, reverse = TRUE)) + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![点の色と凡例を整理しました](index_files/figure-html/fig-map-point-coloring-clean-1.png){#fig-map-point-coloring-clean width=672}\n:::\n:::\n\n\n\n\nこれで点の塗分けも可能になりました。\n\n**ポイント：**\n\n1.  `scale_color_manual(values = )`で色を指定\n    -   先ほどは`fill`だったが今回は`color`を使っている\n2.  `guides()`\n    -   1と同様`color =`になっている\n    -   他は塗りつぶしと同じ\n\n## 凡例の位置\n\n最後に、凡例の位置は`theme()`内で変更可能です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = fukushima, fill = \"white\") + \n  geom_sf(data = park_s, aes(color = is_in4cities)) + \n  scale_color_manual(\n    values = c(\"lightblue\", \"darkblue\")\n  ) + \n  guides(color = guide_legend(title = NULL, reverse = TRUE)) + \n  theme_void() + \n  theme(\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![凡例の位置を変更](index_files/figure-html/fig-legend-1.png){#fig-legend width=672}\n:::\n:::\n\n\n\n\n凡例については他のプロット同じなので[こちら](../../tips/241117_ggplot2/index.html#凡例の位置)も参照してください。\n\n## おわりに\n\n今回は1.5回としてR上での地図のプロットをまとめました。今後の回でまた別タイプのプロットが出てくるかもしれませんが、その都度紹介していきます。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}