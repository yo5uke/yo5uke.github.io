{
  "hash": "c1a1a561e4df2b0a9db4669394bc164a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"地図の調整\"\ndate: 2025-04-06\neditor: visual\n---\n\n\n\n## はじめに\n\n今回は地図を調整する方法を説明します。ここでいう調整というのは、日本地図で北海道を本州の左側に、沖縄を東に配置するというようなことを指します。\n\n図を挿入するスペースが限られており、通常の形で挿入すると地図が小さくなってしまうような場合に役立ちます。\n\n今回使用するデータは国土数値情報ダウンロードサイトの行政区域データから取得しています。\n\n<https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-2024.html>\n\n## ファイル・データの読み込み\n\n今回は都道府県のマップを使用します（ダウンロードした後にファイル名を変えています）。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\n\n# GISデータを保存しているフォルダ\ndata_dir <- here::here(\"data/jpn_geojson\")\n\npref <- read_sf(file.path(data_dir, \"prefecture.geojson\")) |> \n  st_transform(st_crs(6668))\n```\n:::\n\n\n\n平面にマッピングするのにCRSを6668に設定するとバランスが良いと感じるので、ついでに設定しています。\n\n今回は説明を簡単にするため、北海道のみを例にとって説明します。\n\n## データの整理\n\n今回の目標は北海道を本州の西側に配置することです。\n\nプロットに先立ち、データを北海道とそれ以外に分割する必要があります。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npref_no_hokkaido <- pref |> \n  filter(N03_001 != \"北海道\")\n\nhokkaido <- pref |> \n  filter(N03_001 == \"北海道\")\n```\n:::\n\n\n\n`N03_001`に都道府県名が格納されています。\n\n試しに北海道だけプロットしてみると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hokkaido) + \n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-hokkaido-1.png){#fig-hokkaido width=672}\n:::\n:::\n\n\n\nこのように北海道のみが抽出できています。\n\n## 北海道の移動\n\n次に北海道を移動させます。\n\n先に日本全体をマッピングしておくと、どの程度移動させるべきかイメージが付きやすいと思います。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pref) + \n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-japan-1.png){#fig-japan width=672}\n:::\n:::\n\n\n\nこれを見ると、北海道を西に11度、南に4度くらい動かせばよいのではないかなと思います。ちなみに動かす単位は緯度経度です。\n\nそれでは先ほどの`hokkaido`データの`geometry`を西と南にそれぞれ動かしていきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhokkaido <- hokkaido |> \n  mutate(geometry = geometry + c(-11, -4)) |> \n  st_set_crs(st_crs(pref))\n```\n:::\n\n\n\n**ポイント：**\n\n1.  `geometry`を上書き\n    -   `geometry`に`c(-11, -4)`のように`c(x, y)`を加えることで動かすことができます。\n    -   設定しているCRSによって動く幅が異なるので、そこは調節してください。\n2.  CRSを設定\n    -   `geometry`を上書きするとマッピングの際に必要なCRSが失われますので、再度設定が必要です。\n    -   `st_set_crs()`で設定できます。\n    -   `st_crs(pref)`で`pref`と同じCRSを設定することが可能です。直接6668を設定することも可能です。`st_crs()`で設定されているCRSを確認できます。\n\n## プロット\n\n### ベース\n\nでは、これを`pref_no_hokkaido`と併せてプロットしてみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = pref_no_hokkaido) + \n  geom_sf(data = hokkaido)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-after-move-1.png){#fig-after-move width=672}\n:::\n:::\n\n\n\nいい感じですね。必要に応じて表示する範囲を絞りましょう。今回は東経127度から143度、北緯30度から上は自動調節にしましょう（外れた範囲の地域の方、申し訳ございません…）。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = pref_no_hokkaido) + \n  geom_sf(data = hokkaido) + \n  xlim(127, 143) + \n  ylim(30, NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-change-range-1.png){#fig-change-range width=672}\n:::\n:::\n\n\n\nうまい具合に絞ることができました。\n\n`xlim`と`ylim`で調節ができます。上限や下限を特に指定しない場合はNAを設定すればよいです。\n\n### セグメントの追加\n\n北海道と本州の間に線を引いて、区切りを入れていきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = pref_no_hokkaido) + \n  geom_sf(data = hokkaido) + \n  xlim(127, 143) + \n  ylim(30, NA) + \n  annotate(\"segment\", x = 128, xend = 133, \n           y = 37, color = \"gray50\") + \n  annotate(\"segment\", x = 133, xend = 139, \n           y = 37, yend = 41, color = \"gray50\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-segment-1.png){#fig-segment width=672}\n:::\n:::\n\n\n\n`annotate(\"segment\", ...)`で線を追加できます。Xの開始点と終点、Yの開始点と終点をそれぞれ指定することができます。終点の方を指定しなければ、垂直線あるいは水平線になります。2本の線をつなげたい場合は、1本の終点が2本目の開始点になるように調節してください。\n\n`annotate()`については以下のページもご覧ください。\n\n::: {.callout-tip appearance=\"minimal\"}\n[ggplot2ガイド](../../tips/241117_ggplot2/index.qmd)\n:::\n\n### 調整\n\n最後に図の調整を行います。ここでは地図のテーマを変えたり、軸ラベルを消したりします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = pref_no_hokkaido) + \n  geom_sf(data = hokkaido) + \n  xlim(127, 143) + \n  ylim(30, NA) + \n  annotate(\"segment\", x = 128, xend = 133, \n           y = 37, color = \"gray50\") + \n  annotate(\"segment\", x = 133, xend = 139, \n           y = 37, yend = 41, color = \"gray50\") + \n  labs(x = NULL, y = NULL) + \n  theme_bw() + \n  theme(\n    axis.text = element_blank(), \n    axis.ticks = element_blank(), \n    panel.grid = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-final-1.png){#fig-final width=672}\n:::\n:::\n\n\n\n**ポイント：**\n\n1.  `labs(x = NULL, y = NULL)`で各軸のラベルを消去\n2.  `theme_bw()`で白黒テーマの適用\n3.  `theme()`\n    -   `axis.text`で軸のテキスト（今回は緯度経度）を消去\n    -   `axis.ticks`で軸の目盛りを消去\n    -   `panel.grid`で図内の罫線を消去\n    -   `element_blank()`は要素を消去する関数\n\nこれである程度きれいなプロットができました。\n\nもし地図の塗りつぶしの色を変えたければ、`geom_sf()`内で`fill = \"white\"`などを追加すれば変更することができます。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}