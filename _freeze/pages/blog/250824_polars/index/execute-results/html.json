{
  "hash": "5f75f5f5088cbd774a1c812679eb5f72",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Polarsを触ってみる\"\ndescription: |\n  Python版のTidyverseのようなものらしい。\ndate: 2025-08-25\ncategories: \n  - Python\neditor: visual\nengine: jupyter\n---\n\n## はじめに\n\n先日仕事の用事で[RAブートキャンプ](https://www.ra-bootcamp.jp/)へ行ってきた。\n\nRAブートキャンプの目的は以下。\n\n> 社会科学領域の実証研究においてリサーチアシスタント(RA)として携わるための技能を学び、またお互いとの交流を深めることを目的としています。\n\nここでは経済学をはじめとしたさまざまな分野で実証分析をしている大学学部生・院生が集い、4泊5日でデータの処理や分析方法について学んでいる。\n\n僕自身も2023年度に参加した経験があり、当時は力不足を痛感したものの、そこで得た知識をもとにその後もいろいろ学び、結果としてこのWebサイトを運営するまでに至っている。\n\nということでもしこれを見ている学生がいたら、是非次年度以降の参加をお勧めしたい。\n\nというのはさておき、ここに参加する方々は皆さん大変豊富な知識を持っているので[^1]、今回も学生オーガナイザーの方から有益な情報を得ることができた（僕が時代遅れなだけの可能性大）。\n\n[^1]: とはいえデータハンドリングの経験がない方も参加できるのでご安心を！\n\nそれはPythonのPolarsというライブラリで、これがbase RとTidyverseのように、Pandasの次世代版のようなものらしい。Quartoドキュメントのレンダリングがめっちゃ速いのも特徴とのこと。\n\n新しい物好きのミーハーな僕としては、是非とも触ってみたいと思い、今回勉強を兼ねてここで概要を見てみることにする。\n\n## Polarsとは\n\nとりあえずPolarsの[公式ページ](https://pola.rs/)を覗いてみると、\n\n> Polarsは、データ操作のためのオープンソースライブラリであり、単一マシン上で最速のデータ処理ソリューションの一つとして知られています。表現力豊かで使いやすい、構造化された型付きAPIを備えています。\n\nとのこと（Google翻訳済）。\n\nChatGPTにもPolarsについて説明してもらったところ、\n\n> Polarsは、Rust製で高速かつメモリ効率の良い列指向エンジンを持ち、遅延評価や宣言的なチェーン式APIにより、大規模データを直感的かつ効率的に処理できる次世代のデータフレームライブラリです。\n\nらしい。\n\nこれだけ見ると速さや効率性が売りなようだが、言葉で説明されてもよくわからないので、とりあえず触ってみたい。\n\n## 使ってみる\n\nとりあえずインストールから始めよう。\n\n``` bash\npip install polars\n```\n\nそしたら公式のガイドに載っているサンプルコードをちょっといじって試してみる。\n\n::: {#a2df0796 .cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\n\nq = (\n    pl.scan_csv(\"../../../data/iris.csv\")\n    .filter(pl.col(\"Sepal.Length\") > 5)\n    .group_by(\"Species\")\n    .agg(pl.all().sum())\n)\n\ndf = q.collect()\n\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (3, 5)\n┌────────────┬──────────────┬─────────────┬──────────────┬─────────────┐\n│ Species    ┆ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width │\n│ ---        ┆ ---          ┆ ---         ┆ ---          ┆ ---         │\n│ str        ┆ f64          ┆ f64         ┆ f64          ┆ f64         │\n╞════════════╪══════════════╪═════════════╪══════════════╪═════════════╡\n│ virginica  ┆ 324.5        ┆ 146.2       ┆ 273.1        ┆ 99.6        │\n│ setosa     ┆ 116.9        ┆ 81.7        ┆ 33.2         ┆ 6.1         │\n│ versicolor ┆ 281.9        ┆ 131.8       ┆ 202.9        ┆ 63.3        │\n└────────────┴──────────────┴─────────────┴──────────────┴─────────────┘\n```\n:::\n:::\n\n\nしっかり出力できている。\\\nちなみにPandas版だとこんな感じ。\n\n::: {#e87a4c38 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.read_csv(\"../../../data/iris.csv\")\n\ndf_filtered = df[df[\"Sepal.Length\"] > 5]\n\ndf_grouped = df_filtered.groupby(\"Species\").sum(numeric_only=True).reset_index()\n\nprint(df_grouped)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Species  Sepal.Length  Sepal.Width  Petal.Length  Petal.Width\n0      setosa         116.9         81.7          33.2          6.1\n1  versicolor         281.9        131.8         202.9         63.3\n2   virginica         324.5        146.2         273.1         99.6\n```\n:::\n:::\n\n\n僕はPythonがあまり使えないのでChatGPTにPandas版に変換してもらっただけなのだが、見た感じPolarsの方はRのパイプを使った書き方と似ており、個人的には使いやすそうに感じている。\n\nまた、出力結果が見やすくなっているのも特徴だろうか。Rのtibbleのように感じる。\n\n時間もあまりないのでこの程度にしておくが、いろいろと試し甲斐がありそうなので、また時間があるときにでも触ってみたい。\n\n## おわりに\n\n今回はそんなものがあるということを綴っただけなので細かい点はまだよくわかっていないが、使えそうな関数も結構あるみたいなので、データハンドリングの際には是非とも使ってみたい。\n\nもう少し知識がたまってきたらtipsの方でも何か書いていこうと思う。\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}