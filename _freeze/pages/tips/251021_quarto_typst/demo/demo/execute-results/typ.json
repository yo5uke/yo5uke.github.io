{
  "hash": "a15d0c5618bf33800b94339abd7335e5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Writing Papers with Quarto and Typst\"\nauthor: \n  - name: Your Name\n    affiliation: Your Affiliation\n    email: your-address@example.com\ndate: 2025-10-21\ndate-format: long\nabstract: |\n  {{< lipsum 1 >}}\nkeywords: [Quarto, Typst, Academic Writing, PDF Generation]\nformat:\n  econ-a4-typst:\n    toc: true\n    number-sections: true\nlang: en\nbrand: false\nbibliography: []\n---\n\n## Introduction\n\n@notsu_indirect_2025\n\n{{< lipsum 2 >}}\n\n## Insert Figures\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](demo_files/figure-typst/unnamed-chunk-1-1.svg)\n:::\n:::\n\n\n## Insert Tables\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n\n#block[ // start block\n\n  #let style-dict = (\n    // tinytable style-dict after\n  )\n\n  #let style-array = ( \n    // tinytable cell style after\n  )\n\n  // Helper function to get cell style\n  #let get-style(x, y) = {\n    let key = str(y) + \"_\" + str(x)\n    if key in style-dict { style-array.at(style-dict.at(key)) } else { none }\n  }\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, left, left, left, left, left, left, left, left, left, left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 { return it }\n    \n    let style = get-style(it.x, it.y)\n    if style == none { return it }\n    \n    let tmp = it\n    if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n    if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n    if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n    if (\"underline\" in style) { tmp = underline(tmp) }\n    if (\"italic\" in style) { tmp = emph(tmp) }\n    if (\"bold\" in style) { tmp = strong(tmp) }\n    if (\"mono\" in style) { tmp = math.mono(tmp) }\n    if (\"strikeout\" in style) { tmp = strike(tmp) }\n    if (\"smallcaps\" in style) { tmp = smallcaps(tmp) }\n    tmp\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    columns: (auto, auto, auto, auto, auto, auto, auto, auto, auto, auto, auto),\n    stroke: none,\n    rows: auto,\n    align: (x, y) => {\n      let style = get-style(x, y)\n      if style != none and \"align\" in style { style.align } else { left }\n    },\n    fill: (x, y) => {\n      let style = get-style(x, y)\n      if style != none and \"background\" in style { style.background }\n    },\n table.hline(y: 1, start: 0, end: 11, stroke: 0.05em + black),\n table.hline(y: 7, start: 0, end: 11, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 11, stroke: 0.1em + black),\n    // tinytable lines before\n\n    // tinytable header start\n    table.header(\n      repeat: true,\n[mpg], [cyl], [disp], [hp], [drat], [wt], [qsec], [vs], [am], [gear], [carb],\n    ),\n    // tinytable header end\n\n    // tinytable cell content after\n[21.0], [6], [160], [110], [3.90], [2.620], [16.46], [0], [1], [4], [4],\n[21.0], [6], [160], [110], [3.90], [2.875], [17.02], [0], [1], [4], [4],\n[22.8], [4], [108], [93], [3.85], [2.320], [18.61], [1], [1], [4], [1],\n[21.4], [6], [258], [110], [3.08], [3.215], [19.44], [1], [0], [3], [1],\n[18.7], [8], [360], [175], [3.15], [3.440], [17.02], [0], [0], [3], [2],\n[18.1], [6], [225], [105], [2.76], [3.460], [20.22], [1], [0], [3], [1],\n\n    // tinytable footer after\n\n    table.footer(\n      repeat: false,\n      // tinytable notes after\n    table.cell(align: left, colspan: 11, text([Note: This table shows the first few rows of the mtcars dataset.])),\n    ),\n    \n\n  ) // end table\n\n  ]) // end align\n\n] // end block\n```\n\n\nA simple table showing the first few rows of the mtcars dataset.\n:::\n:::\n\n\n## Mathematical Expressions\n\n$$\nE=mc^2\n$$\n\n```{=typst}\n#bibliography(\"../../../../references.bib\")\n```\n\n## Appendix {.unnumbered}\n\n{{< lipsum 3 >}}",
    "supporting": [
      "demo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}