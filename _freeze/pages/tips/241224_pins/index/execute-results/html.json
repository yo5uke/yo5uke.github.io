{
  "hash": "b5ab4dbf8fbd68b42bf4a79a6df95d1b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`pins`でデータ管理\"\ndate: 2024-12-24\ncategories:\n  - R\nexecute:\n  cache: true\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\n\n## はじめに\n\n`pins`というパッケージをご存じでしょうか。`pins`は、Rでデータやオブジェクトを簡単に共有・保存・再利用するためのパッケージです。\n\nこのパッケージでは、Google Driveなど、様々なツールと連携してデータを管理することができます。\n\nこれまでの記事[^1]ではDVCを用いた方法を紹介してきましたが、特にGoogle Cloud projectを使用しなければならなくなって以降、正直めんどくさいです。\n\n[^1]: 例えば[こちら](../241219_container/index.html)など。\n\nここではなるべく簡単にデータを管理、共有できるツールとして`pins`をご紹介します。\n\n## 設定\n\n早速設定です。インストールされていない場合、以下のコードでパッケージをインストールしてください。Tidyverseを使っている場合は、`googledrive`はインストール済みです。\n\n``` r\n# install.packages(\"pak\")\npak::pak(c(\"pins\", \"googledrive\"))\n```\n\n::: {.callout-tip collapse=\"true\"}\n余談ですが、最近はパッケージのインストールに`pak::pak()`をメインで使用しています。`pak::pak()`は\n\n> A Fresh Approach to R Package Installation\n\nであり、`install.packages()`と`devtools::install_github()`を兼ね合わせています[^2]。~~ミーハーな僕としては使わずにはいられません。~~\n:::\n\n[^2]: [pakドキュメント](https://pak.r-lib.org/)\n\n続いて以下のコードでドライブと連携します。ブラウザ上でデータを保存したいフォルダを作成し、URLをコピーしておいてください。その後、以下のコードのリンク部分を置き換えて実行します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboard <- board_gdrive(\"https://drive.google.com/drive/u/0/folders/1F3T0SUmdKBrYUvo180KqBf00yoRrzPdP\")\n```\n:::\n\n\n\nこのコマンドを実行すると、\n\n```         \nIs it OK to cache OAuth access credentials in the folder ~/.cache/gargle between R sessions?\n1: Yes\n2: No\n```\n\nと出てくると思いますが、基本的に1を打って実行でいいと思います。これでセッションが切れても（RStudioを再起動しても）認証が継続されます。共用のPCなどの場合は2になると思いますが。\n\n続けてブラウザでGoogleに認証を求められると思いますが、必要な権限を与え（チェックボックスにチェックを入れ）、次へと進んでいきます。\n\n最後に以下の画面が出てきたら、下部のコードをコピーし、RStudioのコンソールに打ち込み、実行します。\n\n![](image/gdrive_auth.png){fig-align=\"center\" width=\"60%\"}\n\nこれで認証は完了です。\n\n## データの管理\n\n### ピン留め\n\n`pins`では、パッケージ名通りデータをピン留めすることができます。例えばデフォルトで入っている`mtcars`データを例に、データをフォルダにピン留めします。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboard |> \n  pin_write(mtcars, \"mtcars\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGuessing `type = 'rds'`\nCreating new version '20241223T131135Z-418c9'\nWriting to pin 'mtcars'\n```\n\n\n:::\n:::\n\n\n\nメッセージに出ている通り、デフォルトでは`.rds`ファイルとして保存されるようです。試しに`head()`で行数を絞って、csvで保存してみます。その場合、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboard |> pin_write(head(mtcars), \"mtcars\", type = \"csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCreating new version '20241223T131142Z-6a6e3'\nWriting to pin 'mtcars'\n```\n\n\n:::\n:::\n\n\n\nと、`type`を指定してください。\n\n### 読み込み\n\n保存したデータを読み込みたい場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboard |> pin_read(\"mtcars\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n:::\n\n\n\nで可能です。\n\n### バージョン管理\n\nちなみに、バージョン管理も可能です。まずは`pin_versions()`でバージョンを確認します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboard |> pin_versions(\"mtcars\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  version                created             hash \n  <chr>                  <dttm>              <chr>\n1 20241223T131135Z-418c9 2024-12-23 22:11:35 418c9\n2 20241223T131142Z-6a6e3 2024-12-23 22:11:42 6a6e3\n```\n\n\n:::\n:::\n\n\n\n上は`mtcars`の全データ、下は`head()`を適用したデータです。\n\n現在は下のデータで上書きされている状態ですが、ここでやはり全データを読み込みたいとします。\n\nその場合、以下のようにして読み込みます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboard |> \n  pin_read(\"mtcars\", version = \"20241223T131135Z-418c9\") |> \n  tibble::as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n\n\n`version`引数に、上で出てきたバージョンをペーストしてやれば可能です。\n\n## まとめ\n\n今回は`pins`パッケージを使ったデータ管理の方法についてご紹介しました。\n\nGoogle Driveは多くの人がアカウントを所持しているため、アカウント設定に時間を割かなくてよい点が魅力的だと思います。\n\n僕が思う良い点としては、直接Google Driveにデータが保存されるため、PCの容量を食わなくていいことがあると思います。\n\nぜひ使ってみてください。\n\n## 番外編\n\nちなみに今回はGoogle Driveでご紹介しましたが、Dropbox等でも可能です。\n\n``` r\nboard <- board_folder(\"~/Dropbox\")\n```\n\nDropboxのパスは環境によって異なると思いますが、Dropboxでの共有設定をしておき、各自そのフォルダへのパスを設定しておけば、Dropboxでも`pins`を使うことができます。\n\nDropboxユーザーの方は是非お試しあれ。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}