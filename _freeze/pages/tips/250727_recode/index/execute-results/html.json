{
  "hash": "c5f043c679b1f691a5fa2d22db6b6363",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"[recode]{.fira-code}関数でデータフレームの中身を置き換える\"\ndescription: |\n  表を作るときに重宝するかも…？\ndate: 2025-07-27\ncategories:\n  - R\n  - データ処理\neditor: visual\n---\n\n## はじめに\n\n今回は`dplyr`パッケージの`recode()`関数を紹介します。\n\n例えばデータフレーム内の変数がカテゴリ変数で、便宜的に数値で表されているような場合、そのまま表に出すことはできないかもしれません。\n\nそんなときに中身を置き換える手段として使えるのが`recode()`関数で、イメージとしては`case_when()`と似ているかもしれません[^1]。\n\n[^1]: ただし、`case_when()`だと「○○以上○○以下」みたいな条件分岐に対応できるという強みがありますが、今回は想定しません。あくまでもデータフレーム内の値をある別の表記に値 = 値で置き換えるということを想定します。\n\n1度きりの変換であればcase_whenでもあまり労力は変わらないかもしれませんが、何回も繰り返し置き換えたいときは、シンプルで強みを発揮します。\n\n## 使い方\n\n### パッケージ\n\n`dplyr`に入っているので、Tidyverseを読み込んでいれば使えます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# あるいは\n# library(dplyr)\n```\n:::\n\n\n### データフレーム\n\n今回は以下のようなデータフレームを想定します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  id = 1:4, \n  sex = rep(1:2, times = 2)\n)\n```\n:::\n\n\n\n::: {#tbl-example .cell tbl-cap='テーブルの例'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_1k27pz2wyqsc47uajsm8(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_1k27pz2wyqsc47uajsm8\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_1k27pz2wyqsc47uajsm8');\n        // Find the row with data-row attribute matching i\n        var targetRow = table.querySelector(`tr [data-row=\"${i}\"]`).closest('tr');\n        var newRow = table.insertRow(targetRow.rowIndex);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        newCell.setAttribute(\"data-col\", \"0\");\n        newCell.setAttribute(\"data-row\", i - 1);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_1k27pz2wyqsc47uajsm8(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_1k27pz2wyqsc47uajsm8\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '4', j: 0 }, { i: '4', j: 1 },  ], css_id: 'tinytable_css_z2cik9hn06gcorgx97oj',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 },  ], css_id: 'tinytable_css_imyly6i9fc45prdvqb34',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_1k27pz2wyqsc47uajsm8(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_z2cik9hn06gcorgx97oj, .table th.tinytable_css_z2cik9hn06gcorgx97oj { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_imyly6i9fc45prdvqb34, .table th.tinytable_css_imyly6i9fc45prdvqb34 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_1k27pz2wyqsc47uajsm8\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">id</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">sex</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">1</td>\n                  <td data-row=\"1\" data-col=\"1\">1</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">2</td>\n                  <td data-row=\"2\" data-col=\"1\">2</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">3</td>\n                  <td data-row=\"3\" data-col=\"1\">1</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">4</td>\n                  <td data-row=\"4\" data-col=\"1\">2</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n超絶簡単なデータフレームです。4人のIDと性別が1, 2の表記で含まれているだけです。ここで1を男性、2を女性とします。\n\n### 対応表を作る\n\nこれを表に起こしたいとき、たとえばそのまま`tinytable::tt()`で表示したとしたら、 @tbl-example がそのまま出てきてしまい、数字が誰を、何を表しているのかがわかりませんよね。\n\nそこで、あらかじめ対応表を作って置きます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- c(\n  \"1\" = \"Michael\", \n  \"2\" = \"Emily\", \n  \"3\" = \"John\", \n  \"4\" = \"Jessica\"\n)\n\nsex_map <- c(\n  \"1\" = \"Male\", \n  \"2\" = \"Female\"\n)\n```\n:::\n\n\n`c()`の中に、`=`の左にデータフレーム内の表記を、右に表示したい表記を書いていきます。\n\n今回はIDと性別を両方書き換えたいので、2種類の対応関係を示したベクトルを作成しています。\n\n### `recode()`を使う\n\nこの対応表をもとに、`recode()`関数を使っていきます。使う際は、`mutate()`と組み合わせます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_recode <- df |> \n  mutate(\n    id  = recode(id, !!!id_map), \n    sex = recode(sex, !!!sex_map)\n  )\n```\n:::\n\n\n\n::: {#tbl-recode .cell tbl-cap='`recode()`を使用した表'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_glytohrcdfmuuy3ja7vk(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_glytohrcdfmuuy3ja7vk\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_glytohrcdfmuuy3ja7vk');\n        // Find the row with data-row attribute matching i\n        var targetRow = table.querySelector(`tr [data-row=\"${i}\"]`).closest('tr');\n        var newRow = table.insertRow(targetRow.rowIndex);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        newCell.setAttribute(\"data-col\", \"0\");\n        newCell.setAttribute(\"data-row\", i - 1);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_glytohrcdfmuuy3ja7vk(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_glytohrcdfmuuy3ja7vk\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '4', j: 0 }, { i: '4', j: 1 },  ], css_id: 'tinytable_css_a03qk22c2jk3kqlvb73a',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 },  ], css_id: 'tinytable_css_3kapwvvfhvkzdm063w4f',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_glytohrcdfmuuy3ja7vk(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_a03qk22c2jk3kqlvb73a, .table th.tinytable_css_a03qk22c2jk3kqlvb73a { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_3kapwvvfhvkzdm063w4f, .table th.tinytable_css_3kapwvvfhvkzdm063w4f { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_glytohrcdfmuuy3ja7vk\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">id</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">sex</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">Michael</td>\n                  <td data-row=\"1\" data-col=\"1\">Male</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">Emily</td>\n                  <td data-row=\"2\" data-col=\"1\">Female</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">John</td>\n                  <td data-row=\"3\" data-col=\"1\">Male</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">Jessica</td>\n                  <td data-row=\"4\" data-col=\"1\">Female</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\nしっかり置き換えられていますね。\n\n`!!!`という表記は見慣れないと思いますが、`id_map`や`sex_map`で作成したベクトルをバラバラにして渡すということです[^2]。`recode(sex, \"1\" = \"Male\", \"2\" = \"Female\")`と同じ働きをします。\n\n[^2]: ややこしいですが、`id_map`自体はベクトルなので、ベクトルを渡すのではなく、中身を展開して渡したいということです。\n\nあらかじめ対応関係を表すベクトルを作って置くことで、使いまわすことができ、特に何回も表を作る際に効率化が図れます。\n\n## おまけ\n\n表にするなら、列名も変えたいですよね。そんなときは`purrr`パッケージの`set_names()`関数を使います。これもTidyverseに入っていますので、特に追加でライブラリを読み込む必要はありません。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_names <- c(\"名前\", \"性別\")\n\ndf_set_names <- df_recode |> \n  set_names(col_names)\n```\n:::\n\n\n\n::: {#tbl-set-names .cell tbl-cap='列名を変更'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_s4npkmrt6co1isnj9wan(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_s4npkmrt6co1isnj9wan\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_s4npkmrt6co1isnj9wan');\n        // Find the row with data-row attribute matching i\n        var targetRow = table.querySelector(`tr [data-row=\"${i}\"]`).closest('tr');\n        var newRow = table.insertRow(targetRow.rowIndex);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        newCell.setAttribute(\"data-col\", \"0\");\n        newCell.setAttribute(\"data-row\", i - 1);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_s4npkmrt6co1isnj9wan(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_s4npkmrt6co1isnj9wan\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '4', j: 0 }, { i: '4', j: 1 },  ], css_id: 'tinytable_css_2dlvy524ugye6wnh04rs',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 },  ], css_id: 'tinytable_css_bft4w9p45d4eg5z5n6xq',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_s4npkmrt6co1isnj9wan(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_2dlvy524ugye6wnh04rs, .table th.tinytable_css_2dlvy524ugye6wnh04rs { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_bft4w9p45d4eg5z5n6xq, .table th.tinytable_css_bft4w9p45d4eg5z5n6xq { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_s4npkmrt6co1isnj9wan\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">名前</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">性別</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">Michael</td>\n                  <td data-row=\"1\" data-col=\"1\">Male</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">Emily</td>\n                  <td data-row=\"2\" data-col=\"1\">Female</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">John</td>\n                  <td data-row=\"3\" data-col=\"1\">Male</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">Jessica</td>\n                  <td data-row=\"4\" data-col=\"1\">Female</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\nあらかじめ`col_names`を作成しておきましたが、ここは任意です。`set_names()`の中に直接書くのも可能です。\n\n## おわりに\n\n今回は表を整えるための`recode()`関数とおまけの`set_names()`関数をまとめました。\n\n以前[Quartoで論文を書くという記事](../240629_write_thesis/index.qmd)を書きましたが、論文はLaTeXで書きたい！という方には表だけLaTeXコードにして出力するという方法もありますので、それもまたまとめようかと思います。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}