{
  "hash": "7dbf003be849884a36ba465ccb0102b3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"【4.0.0対応！】[ggplot2]{.fira-code}使い方ガイド\"\ndescription: |\n  ggplotを使うのに役立つコマンドを紹介します！\ndate: 2024-11-17\ndate-modified: today\ncategories:\n  - R\nimage: figure/fig-ggrepel.png\neditor: visual\n---\n\n## はじめに\n\n皆さん、ggplot、使ってますか？多分お使いですよね。\n\n僕は数か月前ggplotのガイドブックを買いまして、いろいろと勉強しているところでございます。\n\nこんなこともできるのか！という発見が多々あり、Rユーザーの皆様にはぜひ買っていただきたい代物なのですが、いかんせんお値段が張りますので、いくつかピックアップしてご紹介します。\n\n書籍のリンクは以下です。\n\n::: {.callout-tip appearance=\"minimal\" icon=\"false\"}\n[Rグラフィックスクックブック 第2版 ―ggplot2によるグラフ作成のレシピ集](https://www.amazon.co.jp/R%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%B9%E3%82%AF%E3%83%83%E3%82%AF%E3%83%96%E3%83%83%E3%82%AF-%E7%AC%AC2%E7%89%88-%E2%80%95ggplot2%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B0%E3%83%A9%E3%83%95%E4%BD%9C%E6%88%90%E3%81%AE%E3%83%AC%E3%82%B7%E3%83%94%E9%9B%86-Winston-Chang/dp/4873118921)\n:::\n\nさらに、2025年9月、ggplot2がバージョン4.0.0にアップデートされました！それを記念し、4.0.0の要素も取り入れたページにアップデートしました！🎉\n\nぜひご参考になさってください！\n\n## `ggplot2`の基本\n\n::: callout-note\n使ったことがある方はこの辺はスキップしてください。\n\n今回使うデータは、デフォルトで用意されている`iris`と`Orange`です。\n:::\n\nひとまず主要なパッケージである`ggplot2`を読み込みます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\n基本的な使い方としては、`ggplot()`と`aes()`、そして図に応じて`geom_line()`（折れ線）や`geom_point()`（散布図）などを使っていきます。\n\n今回は例として、アイリスのがく片の長さ、幅をそれぞれ軸としてプロットします。\n\n### 散布図\n\nまずは基本的な散布図を描いてみます。散布図は`geom_point()`を使うことで描画できます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![irisデータフレームを使った散布図](index_files/figure-html/fig-iris-1.png){#fig-iris width=672}\n:::\n:::\n\n\n1.  `ggplot(data, aes())`という形で使用するデータを指定\n2.  `aes()`内ではX軸とY軸をそれぞれ指定する。\n    -   例：`aes(x = Sepal.Length, y = Sepal.Width)`\n    -   第1引数がX、第2引数がYと決まっているので、`x =`や`y =`は書かなくてもよいです。\n3.  ggplotのコマンドは`+`で繋ぐ\n4.  散布図を作るために`geom_point()`を繋げる\n\nこれが土台です。`ggplot()`だけではプロットは表示されませんので、`geom_point()`など何かしら繋ぐ形にしてください。\n\n**回帰線を引きたい場合：**\n\n早速応用ではありますが、散布図を描いたら回帰線を引きたいことがありますよね。そのためには、`geom_smooth()`を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  geom_smooth(method = lm, formula = y ~ x)\n```\n\n::: {.cell-output-display}\n![回帰直線を引いた散布図](index_files/figure-html/fig-iris-lm-1.png){#fig-iris-lm width=672}\n:::\n:::\n\n\n### 折れ線グラフ\n\n## 軸\n\n### 軸ラベル\n\nまずはX軸、Y軸のラベルを変更します。次のコマンドを追加することで変更できます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\")\n```\n\n::: {.cell-output-display}\n![軸ラベルを変更](index_files/figure-html/fig-axis-label-1.png){#fig-axis-label width=672}\n:::\n:::\n\n\nまた、以下のコードは同じ結果を示します。\n\n``` r\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  xlab(\"Length of Sepal\") + \n  ylab(\"Width of Sepal\")\n```\n\nすなわち、`labs()`はそれ一つでX軸もY軸もラベルを変更することができますが、`xlab()`、`ylab()`を使えば片方ずつ変更できるということです。\n\n次に、軸ラベルの体裁を変更したい場合、以下のようにします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\") + \n  theme(\n    axis.title = element_text(family = \"times\", face = \"italic\", \n                              color = \"red\", size = 20)\n  )\n```\n\n::: {.cell-output-display}\n![文字の体裁が変わっています](index_files/figure-html/fig-axis-font-1.png){#fig-axis-font width=672}\n:::\n:::\n\n\n1.  `theme()`内の`axis.title`で変更する\n    -   X軸Y軸のどちらかだけにしたければ、`axis.title.x`のようにします。\n2.  `element_text()`内で具体的にフォントの体裁を指定\n    -   今回はわかりやすく派手にしましたが、これらの要素を変更すれば調整できます。\n\n    -   例えば、`face = \"bold\"`にすれば太字にできます。\n\n    -   他にもありますが、おおむね使うのはこのあたりでしょう。\n\n### 軸の目盛り\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  scale_x_continuous(breaks = seq(4.5, 8, .5)) + \n  scale_y_continuous(breaks = seq(2, 4, 1))\n```\n\n::: {.cell-output-display}\n![目盛りの間隔が変わっています](index_files/figure-html/fig-axis-scale-1.png){#fig-axis-scale width=672}\n:::\n:::\n\n\n目盛りがX軸は0.5刻み、Y軸は1刻みになるよう変更しました。このように、X（Y）が連続値である場合、`scale_x_continuous()`（`scale_y_continuous()`）で変更できます。`seq()`は数列を作る関数で、`seq(from, to, by)`の順に指定します[^1]。\n\n[^1]: 離散値の場合は`scale_x_discrete()`などで変更できますが、今回その説明は省きます。\n\n目盛りも同様にフォントのスタイルを変更できます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(\n    axis.text = element_text(family = \"times\", face = \"bold\", \n                             color = \"red\", size = 20)\n  )\n```\n\n::: {.cell-output-display}\n![数字のフォントが変わっています](index_files/figure-html/fig-scale-font-1.png){#fig-scale-font width=672}\n:::\n:::\n\n\nもはや訳が分からない図ですが、このように体裁は変更可能です。要素は大体上と同じで、`axis.text.x`のようにどちらかだけ変更することも可能です。\n\nまた、`axis.ticks`で目盛りを消去することも可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(\n    axis.text = element_text(family = \"times\", face = \"bold\", \n                             color = \"red\", size = 20), \n    axis.ticks = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![目盛りが消えています](index_files/figure-html/fig-delete-memori-1.png){#fig-delete-memori width=672}\n:::\n:::\n\n\nお判りいただけますか？軸の数字は残っていますが、目盛り線は消えています。@fig-scale-font と見比べてみてください。\n\n### 軸の範囲\n\nX軸とY軸の範囲を設定する方法です。これまでの図ではだいたい4から8あたりがXの範囲、2.0から4.5がYの範囲でした。`xlim(a, b)`と`ylim(a, b)`で設定できます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  xlim(5, 7) + \n  ylim(3, 4) + \n  theme(\n    axis.text = element_text(family = \"times\", face = \"bold\", \n                             color = \"red\", size = 20), \n    axis.ticks = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![範囲を変えました](index_files/figure-html/fig-change-range-1.png){#fig-change-range width=672}\n:::\n:::\n\n\n## 注釈\n\n### 文字\n\n表の中に文字を入れることができます。\n\n`annotate()`内で`\"text\"`か`\"segment\"`を指定することで挿入可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"text\", label = \"ggplot is\\nwonderful!\", x = 6.5, y = 4, \n           family = \"times\", color = \"#CC6666\", size = 10)\n```\n\n::: {.cell-output-display}\n![表内に文字を入れられました](index_files/figure-html/fig-annotate-1.png){#fig-annotate width=672}\n:::\n:::\n\n\n1.  `annotate(\"text\", label = \"hogehoge\")`で文字を入れることができる\n\n2.  `x`と`y`を指定しないと反映されない\n\n3.  改行したい場合、`\\n`を入れる\n\n4.  フォント、色、サイズも指定できる\n\n関数一つで意外と簡単にできます。\n\n### セグメント\n\n棒線や矢印を付けることも可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"segment\", x = 5, xend = 7, y = 4, yend = 2.5, \n           linewidth = 2, color = \"#CC6666\")\n```\n\n::: {.cell-output-display}\n![斜めに棒線が入りました。](index_files/figure-html/fig-segment-1-1.png){#fig-segment-1 width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"segment\", x = 5, xend = 7, y = 4, yend = 2.5, \n           linewidth = 2, color = \"#CC6666\", \n           arrow = arrow(length = unit(2, units = \"cm\")))\n```\n\n::: {.cell-output-display}\n![矢印になりました。](index_files/figure-html/fig-segment-2-1.png){#fig-segment-2 width=672}\n:::\n:::\n\n\n1.  `\"segment\"`で棒線ができる\n2.  `x`と`xend`、`y`と`yend`を指定する必要がある\n    -   $(x, y)$から$(xend, yend)$までの2点を結ぶようにできます。\n3.  `linewidth`で線の太さを指定可\n    -   他の要素も文字と同様に指定できますが、`size`が`linewidth`に置き換わっています。\n4.  `arrow = arrow(length = unit(x, units = \"cm\"))`で矢じりが付く\n    -   `x`で矢じりのサイズ、`units`は単位で、他にmmやinchesなどがあります。\n\n以上のように、文字だけでなく線や矢印を追加することができます。\n\n## 複数のプロットと凡例\n\n### 複数のカテゴリのプロット\n\nここでは`Orange`データセットを使って複数のカテゴリのプロットと、凡例について説明します。\n\n複数のカテゴリのプロットとは、以下のデータを見ていただけると早いと思います。\n\n\n::: {#tbl-orange .cell tbl-cap='`Orange`の一部'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_a7aqlm6udytjmc9bjgpf(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_a7aqlm6udytjmc9bjgpf\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_a7aqlm6udytjmc9bjgpf(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_a7aqlm6udytjmc9bjgpf\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '10', j: 0 }, { i: '10', j: 1 }, { i: '10', j: 2 },  ], css_id: 'tinytable_css_i6l0bgdvwd1rl2mhr2rh',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 }, { i: '0', j: 2 },  ], css_id: 'tinytable_css_jc030dzk9qd2mmd5om0c',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_a7aqlm6udytjmc9bjgpf(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_i6l0bgdvwd1rl2mhr2rh, .table th.tinytable_css_i6l0bgdvwd1rl2mhr2rh { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_jc030dzk9qd2mmd5om0c, .table th.tinytable_css_jc030dzk9qd2mmd5om0c { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_a7aqlm6udytjmc9bjgpf\" style=\"table-layout: fixed; width: 100% !important; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">Tree</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">age</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">circumference</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">1</td>\n                  <td data-row=\"1\" data-col=\"1\">118</td>\n                  <td data-row=\"1\" data-col=\"2\">30</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">1</td>\n                  <td data-row=\"2\" data-col=\"1\">484</td>\n                  <td data-row=\"2\" data-col=\"2\">58</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">1</td>\n                  <td data-row=\"3\" data-col=\"1\">664</td>\n                  <td data-row=\"3\" data-col=\"2\">87</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">1</td>\n                  <td data-row=\"4\" data-col=\"1\">1004</td>\n                  <td data-row=\"4\" data-col=\"2\">115</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">1</td>\n                  <td data-row=\"5\" data-col=\"1\">1231</td>\n                  <td data-row=\"5\" data-col=\"2\">120</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\">1</td>\n                  <td data-row=\"6\" data-col=\"1\">1372</td>\n                  <td data-row=\"6\" data-col=\"2\">142</td>\n                </tr>\n                <tr>\n                  <td data-row=\"7\" data-col=\"0\">1</td>\n                  <td data-row=\"7\" data-col=\"1\">1582</td>\n                  <td data-row=\"7\" data-col=\"2\">145</td>\n                </tr>\n                <tr>\n                  <td data-row=\"8\" data-col=\"0\">2</td>\n                  <td data-row=\"8\" data-col=\"1\">118</td>\n                  <td data-row=\"8\" data-col=\"2\">33</td>\n                </tr>\n                <tr>\n                  <td data-row=\"9\" data-col=\"0\">2</td>\n                  <td data-row=\"9\" data-col=\"1\">484</td>\n                  <td data-row=\"9\" data-col=\"2\">69</td>\n                </tr>\n                <tr>\n                  <td data-row=\"10\" data-col=\"0\">2</td>\n                  <td data-row=\"10\" data-col=\"1\">664</td>\n                  <td data-row=\"10\" data-col=\"2\">111</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n`Tree`は木の識別子で、1～5まであります。`age`は日齢、`circumference`は幹の周囲です。\n\nここでやりたいことは、木の種類ごとに、日齢と幹の周囲を軸にとってプロットすることです。これをただプロットしてしまうと、\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![すべてのデータを放り込みました](index_files/figure-html/fig-orange-pool-1.png){#fig-orange-pool width=672}\n:::\n:::\n\n\nこれでは各点がどの木のものなのか判別できない状態です。これを識別するには次のようにします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![色が分かれました](index_files/figure-html/fig-orange-color-1.png){#fig-orange-color width=672}\n:::\n:::\n\n\nこれでとりあえずはどの点がどの木のものかわかるようになりました。`color = Tree`で、木の種類ごとに色を使うことを指定しています。\n\n今は散布図なので色を分けるだけで済みますが、折れ線グラフのような場合は、色だけでなく線の種類を変えたいかもしれません。そんな時は次のようにします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree, linetype = Tree)) + \n  geom_point() + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![折れ線の種類も分かれました](index_files/figure-html/fig-orange-linetype-1.png){#fig-orange-linetype width=672}\n:::\n:::\n\n\n`linetype = Tree`を追加することで線の種類も木の種類ごとに変更することができました。\n\nこのように`aes()`内で要素を追加することで種類ごとに分けることができます。\n\nまだ色遣いなどは不格好ですが、いったんこのまま進めます。\n\n### 凡例の位置\n\n次にしたいのは、凡例の設定です。凡例は現在右側に表示されていますが、まずはこれを下に表示したいとします。これは、次のコードでできます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![凡例が下に来ました](index_files/figure-html/fig-orange-legend-position-1.png){#fig-orange-legend-position width=672}\n:::\n:::\n\n\n`theme(legend.position = \"bottom\")`を設定することで、凡例の位置が下になりました。もちろんbottom以外にもtop, left, right（デフォルト）などを指定することができます。\n\nさらに凡例を消したい場合は次のようにします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![凡例を消しました](index_files/figure-html/fig-orange-legend-delete-1.png){#fig-orange-legend-delete width=672}\n:::\n:::\n\n\n`theme(legend.position = \"none\")`で凡例を消すことができました。\n\n### 凡例の調整\n\n例えば、凡例のタイトルは消したい場合が結構あると思います。@fig-orange-color の例でいえば、Treeという文字は消したいということです。\n\nそんな場合は、以下のようにします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  guides(color = guide_legend(title = NULL))\n```\n\n::: {.cell-output-display}\n![凡例のタイトルを削除](index_files/figure-html/fig-orange-legend-delte-title-1.png){#fig-orange-legend-delte-title width=672}\n:::\n:::\n\n\nTreeというタイトルが消えました。\n\nここでは`guides(color = guide_legend(title = NULL))`としていますが、`aes()`内で例えば`linetype`を使っている場合は、`guides()`内も`linetype =`にする必要があります。\n\n## テーマ\n\nggplotではテーマを選ぶことができます。デフォルトではこれまでの図のように背景がグレーになっていますが、ほとんどの場合で背景は白にしたいですよね。\n\n背景だけでなく、罫線等もテーマで変更することができます。\n\n### プリセットのテーマ\n\nいくつかのテーマが準備されています。代表的なものをいくつかご紹介します。\n\n::: panel-tabset\n## minimal\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![`theme_minimal()`](index_files/figure-html/fig-theme-minimal-1.png){#fig-theme-minimal width=672}\n:::\n:::\n\n\n## bw\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![`theme_bw()`](index_files/figure-html/fig-theme-bw-1.png){#fig-theme-bw width=672}\n:::\n:::\n\n\n`theme_minimal()`と比べて外枠が付いています。\n\n## classic\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![`theme_classic()`](index_files/figure-html/fig-theme-classic-1.png){#fig-theme-classic width=672}\n:::\n:::\n\n\n## linedraw\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![`theme_linedraw()`](index_files/figure-html/fig-theme-linedraw-1.png){#fig-theme-linedraw width=672}\n:::\n:::\n\n\n## light\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_light()\n```\n\n::: {.cell-output-display}\n![`theme_light()`](index_files/figure-html/fig-theme-light-1.png){#fig-theme-light width=672}\n:::\n:::\n\n\n## void\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![`theme_void()`](index_files/figure-html/fig-theme-void-1.png){#fig-theme-void width=672}\n:::\n:::\n\n\nさすがにやりすぎでは…と思うかもしれませんが、GISで地図を可視化するようなときに重宝します。\n:::\n\n### `theme()`関数\n\nここまでご紹介したものの中で`theme()`を使ったものがいくつかありました。\n\nここで`theme()`**は**`theme_xxx()`**の後に使う**ということに注意してください。\n\nこれは、`theme_xxx()`が`theme()`を上書きしてしまうためです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(axis.title = element_text(color = \"red\")) + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![失敗例](index_files/figure-html/fig-theme-miss-1.png){#fig-theme-miss width=672}\n:::\n:::\n\n\n`theme(axis.title = element_text(color = \"red\"))`で軸ラベルを赤色に設定していますが、出力されたものは黒いラベルになっています。\n\n順番を逆にすれば、\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal() + \n  theme(axis.title = element_text(color = \"red\"))\n```\n\n::: {.cell-output-display}\n![正しい例](index_files/figure-html/fig-theme-success-1.png){#fig-theme-success width=672}\n:::\n:::\n\n\nこのようにしっかり反映されます。\n\n## 発展1：`ggrepel`\n\nここからは、`ggrepel`というパッケージを用いて折れ線グラフを発展させた例をご紹介します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# インストール\n# pak::pak(\"ggrepel\")\nlibrary(ggrepel)\n```\n:::\n\n\nまず、以下のようなデータがあるとします。`firm_id`は30まであります。\n\n\n::: {#tbl-data-prep .cell tbl-cap='データの一部'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_er2p54f3anlfh2ugjmt1(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_er2p54f3anlfh2ugjmt1\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_er2p54f3anlfh2ugjmt1(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_er2p54f3anlfh2ugjmt1\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '6', j: 0 }, { i: '6', j: 1 }, { i: '6', j: 2 }, { i: '6', j: 3 }, { i: '6', j: 4 }, { i: '6', j: 5 },  ], css_id: 'tinytable_css_m80ohasp5y8faa7rn91t',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 }, { i: '0', j: 2 }, { i: '0', j: 3 }, { i: '0', j: 4 }, { i: '0', j: 5 },  ], css_id: 'tinytable_css_lh87ju35914i9kw42kj6',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_er2p54f3anlfh2ugjmt1(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_m80ohasp5y8faa7rn91t, .table th.tinytable_css_m80ohasp5y8faa7rn91t { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_lh87ju35914i9kw42kj6, .table th.tinytable_css_lh87ju35914i9kw42kj6 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_er2p54f3anlfh2ugjmt1\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">firm_id</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">state_id</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">year</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">treated_1998</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">is_treated</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"5\">y</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">1</td>\n                  <td data-row=\"1\" data-col=\"1\">50</td>\n                  <td data-row=\"1\" data-col=\"2\">1980</td>\n                  <td data-row=\"1\" data-col=\"3\">0</td>\n                  <td data-row=\"1\" data-col=\"4\">0</td>\n                  <td data-row=\"1\" data-col=\"5\">0.6546029</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">1</td>\n                  <td data-row=\"2\" data-col=\"1\">50</td>\n                  <td data-row=\"2\" data-col=\"2\">1981</td>\n                  <td data-row=\"2\" data-col=\"3\">0</td>\n                  <td data-row=\"2\" data-col=\"4\">0</td>\n                  <td data-row=\"2\" data-col=\"5\">1.9160271</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">1</td>\n                  <td data-row=\"3\" data-col=\"1\">50</td>\n                  <td data-row=\"3\" data-col=\"2\">1982</td>\n                  <td data-row=\"3\" data-col=\"3\">0</td>\n                  <td data-row=\"3\" data-col=\"4\">0</td>\n                  <td data-row=\"3\" data-col=\"5\">2.1400894</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">1</td>\n                  <td data-row=\"4\" data-col=\"1\">50</td>\n                  <td data-row=\"4\" data-col=\"2\">1983</td>\n                  <td data-row=\"4\" data-col=\"3\">0</td>\n                  <td data-row=\"4\" data-col=\"4\">0</td>\n                  <td data-row=\"4\" data-col=\"5\">1.8364579</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">1</td>\n                  <td data-row=\"5\" data-col=\"1\">50</td>\n                  <td data-row=\"5\" data-col=\"2\">1984</td>\n                  <td data-row=\"5\" data-col=\"3\">0</td>\n                  <td data-row=\"5\" data-col=\"4\">0</td>\n                  <td data-row=\"5\" data-col=\"5\">1.7661105</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\">1</td>\n                  <td data-row=\"6\" data-col=\"1\">50</td>\n                  <td data-row=\"6\" data-col=\"2\">1985</td>\n                  <td data-row=\"6\" data-col=\"3\">0</td>\n                  <td data-row=\"6\" data-col=\"4\">0</td>\n                  <td data-row=\"6\" data-col=\"5\">1.2856041</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\nこれを使って横軸に`Year`、縦軸に`y`をとってグラフにします。\n\n詳細を書くと長くなるので、適宜メモを入れました。ご参考まで。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- df |> \n  mutate(\n    # ハイライトする群とそれ以外に分ける\n    group = if_else(treated_1998 == 1, as.factor(firm_id), \"other\"), \n    # 最後の年にだけラベルを付ける\n    group_lab = if_else(treated_1998 == 1 & year == 2015, \n                        paste0(\"Firm \", firm_id), NA_character_)\n  )\n\nggplot(\n  # まずハイライトする群だけプロット\n  df |> filter(treated_1998 == 1), \n  aes(x = year, y = y, group = firm_id)\n) + \n  theme_minimal() + \n  theme(\n    # 罫線を削除\n    panel.grid = element_blank(), \n    # 凡例を削除\n    legend.position = \"none\", \n    # 軸のタイトルと文字のフォントとサイズを調整\n    axis.title = element_text(family = \"Times\", size = 18), \n    axis.text = element_text(family = \"Times\", size = 14)\n  ) + \n  geom_vline(\n    # 垂直線を描写\n    xintercept = seq(1980, 2015, by = 5), \n    color = \"gray91\", \n    linewidth = .6\n  ) + \n  geom_segment(\n    # 水平線を描写\n    # 描写のためにデータを準備\n    data = tibble(y = seq(-2.5, 5.0, by = 2.5), x1 = 1980, x2 = 2015), \n    aes(x = x1, xend = x2, y = y, yend = y), \n    inherit.aes = FALSE, \n    color = \"gray91\", \n    linewidth = .6\n  ) + \n  geom_segment(\n    # 薄い水平線を描写\n    data = tibble(y = seq(-2.0, 4.5, by = .5), x1 = 1980, x2 = 2015), \n    aes(x = x1, xend = x2, y = y, yend = y), \n    inherit.aes = FALSE, \n    color = \"gray97\", \n    linewidth = .3\n  ) + \n  geom_segment(\n    # 縦軸が0のところに水平線を描写\n    data = tibble(y = 0, x1 = 1980, x2 = 2015), \n    aes(x = x1, xend = x2, y = y), \n    inherit.aes = FALSE, \n    linetype = \"dashed\", \n    color = \"gray40\"\n  ) + \n  geom_vline(\n    # 処置年に垂直線を描写\n    xintercept = 1998, \n    linetype = \"dashed\", \n    color = \"gray40\"\n  ) + \n  geom_line(\n    # ハイライトしない群をプロット\n    data = df |> filter(group == \"other\"), \n    color = \"gray75\", \n    alpha = .5\n  ) + \n  geom_line(\n    # ハイライトする群をプロット\n    aes(color = group)\n  ) + \n  geom_text_repel(\n    # ハイライトした線にラベルを追加\n    aes(color = group, label = group_lab), \n    family = \"Times\", \n    hjust = 0, \n    # 2017年の位置にラベルを書く\n    xlim = c(2017, NA), \n    size = 4, \n    segment.linetype = \"dotted\"\n  ) + \n  xlab(\"Year\") + \n  ylab(\"Value\") + \n  scale_x_continuous(\n    expand = c(0, 0), \n    # ラベルが見えるように図の端の2015年より広くとる\n    limits = c(1980, 2021), \n    breaks = seq(1980, 2015, by = 5)\n  ) + \n  scale_y_continuous(\n    expand = c(0, 0), \n    limits = c(-2.5, 5.0), \n    breaks = c(-2.5, 0, 2.5, 5.0)\n  )\n```\n\n::: {.cell-output-display}\n![ggrepelを使ったプロット](index_files/figure-html/fig-ggrepel-1.png){#fig-ggrepel fig-align='center' width=672}\n:::\n:::\n\n\n## おわりに\n\nひとまず僕がよく使うggplotの設定をまとめてみました。ggplotを駆使して、スタイリッシュなプロットを作成していきましょう！\n\n適宜追記する予定ですので、ご参考になれば幸いです。",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}