{
  "hash": "42818b3f41d82742d38d86607ada47c5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"【4.0.0対応！】[ggplot2]{.fira-code}使い方ガイド\"\ndescription: |\n  ggplotを使うのに役立つコマンドを紹介します！\ndate: 2024-11-17\ndate-modified: last-modified\ncategories:\n  - R\nimage: figure/fig-ggrepel.png\nformat: \n  html: \n    fig-format: png\neditor: visual\n---\n\n## はじめに\n\n皆さん、ggplot、使ってますか？多分お使いですよね。\n\n僕は数か月前ggplotのガイドブックを買いまして、いろいろと勉強しているところでございます。\n\nこんなこともできるのか！という発見が多々あり、Rユーザーの皆様にはぜひ買っていただきたい代物なのですが、いかんせんお値段が張りますので、いくつかピックアップしてご紹介します。\n\n書籍のリンクは以下です。\n\n::: {.callout-tip appearance=\"minimal\" icon=\"false\"}\n[Rグラフィックスクックブック 第2版 ―ggplot2によるグラフ作成のレシピ集](https://www.amazon.co.jp/R%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%B9%E3%82%AF%E3%83%83%E3%82%AF%E3%83%96%E3%83%83%E3%82%AF-%E7%AC%AC2%E7%89%88-%E2%80%95ggplot2%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B0%E3%83%A9%E3%83%95%E4%BD%9C%E6%88%90%E3%81%AE%E3%83%AC%E3%82%B7%E3%83%94%E9%9B%86-Winston-Chang/dp/4873118921)\n:::\n\nさらに、2025年9月、ggplot2がバージョン4.0.0にアップデートされました！それを記念し、4.0.0の要素も取り入れたページにアップデートしました！🎉\n\nぜひご参考になさってください！\n\n## `ggplot2`の基本\n\n::: callout-note\n使ったことがある方はこの辺はスキップしてください。\n\n今回使うデータは、デフォルトで用意されている`iris`と`Orange`です。\n:::\n\nひとまず主要なパッケージである`ggplot2`を読み込みます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(family = \"Times New Roman\")\n```\n:::\n\n\n\n基本的な使い方としては、`ggplot()`と`aes()`、そして図に応じて`geom_line()`（折れ線）や`geom_point()`（散布図）などを使っていきます。\n\n今回は例として、アイリスのがく片の長さ、幅をそれぞれ軸としてプロットします。\n\n### 散布図\n\nまずは基本的な散布図を描いてみます。散布図は`geom_point()`を使うことで描画できます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![irisデータフレームを使った散布図](index_files/figure-html/fig-iris-1.png){#fig-iris}\n:::\n:::\n\n\n1.  `ggplot(data, aes())`という形で使用するデータを指定\n2.  `aes()`内ではX軸とY軸をそれぞれ指定する。\n    -   例：`aes(x = Sepal.Length, y = Sepal.Width)`\n    -   第1引数がX、第2引数がYと決まっているので、`x =`や`y =`は書かなくてもよいです。\n3.  ggplotのコマンドは`+`で繋ぐ\n4.  散布図を作るために`geom_point()`を繋げる\n\nこれが土台です。`ggplot()`だけではプロットは表示されませんので、`geom_point()`など何かしら繋ぐ形にしてください。\n\n**回帰線を引きたい場合：**\n\n早速応用ではありますが、散布図を描いたら回帰線を引きたいことがありますよね。そのためには、`geom_smooth()`を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  geom_smooth(method = lm)\n```\n\n::: {.cell-output-display}\n![回帰直線を引いた散布図](index_files/figure-html/fig-iris-lm-1.png){#fig-iris-lm}\n:::\n:::\n\n\n`method = lm`で回帰直線を引くオプションを付けることができ、デフォルトではYをXに回帰する直線が引かれます。式を変えたい場合は`formula = y ~ log(x)`などと式を追加してください。\n\nまた、デフォルトでは信頼区間がプロットされます。要らない場合は、`se = FALSE`を追加します。\n\nまた、lm以外にも、`method = \"loess\"`などもあります。`?geom_smooth`で確認してみてください。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  geom_smooth(method = \"loess\", se = FALSE)\n```\n\n::: {.cell-output-display}\n![loessを使った散布図](index_files/figure-html/fig-iris-loess-1.png){#fig-iris-loess}\n:::\n:::\n\n\n### 折れ線グラフ\n\n折れ線グラフは`geom_line()`を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tibble::tibble(\n  a = 1:4, \n  b = c(5, 3, 4, 2)\n)\n\nggplot(d, aes(x = a, y = b)) + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![折れ線グラフ](index_files/figure-html/fig-iris-line-1.png){#fig-iris-line}\n:::\n:::\n\n\n今回は`d`という何のひねりもないデータフレームを作成して、それを用いて折れ線グラフを作成しています。\n\nなぜわざわざデータフレームを自分で作ったかというと、1個体についてのみ時系列をとったデータを探してくるより、作った方が早かったからです😅\n\nというのも、折れ線グラフを作るときは、多くの場合各個体ごとに何本かの折れ線を描くことが多いと思います[^1]。各個体ごとに折れ線を作る方法については、[後のセクション](#sec-multi-cat-plot)でご確認ください。\n\n[^1]: 例えば男性と女性という2種類について、それぞれ平均寿命の時系列グラフを作る場合など。\n\nここで覚えていただきたいのは`geom_line()`で折れ線グラフを作れるということです。\n\n### 棒グラフ\n\n棒グラフも汎用性が高いグラフです。棒グラフはデータフレーム内の集計をするときに役に立ちます。\n\nまずは、`iris`データセットの`Species`（種）ごとに個体数を数えた棒グラフを作成します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![棒グラフ](index_files/figure-html/fig-iris-bar-1.png){#fig-iris-bar}\n:::\n:::\n\n\nおっと…。まさかのすべて50個体ずつで、棒グラフが全部同じ高さになってしまいました。これはミスではありません！\n\n棒グラフを書く際には、縦は自動で個体数をカウントすることになるので、`aes(x = Species)`とXを指定するだけで横に種類、縦にカウントをとった棒グラフが描けてしまいます。\n\nもし横向きにしたければ、`aes(y = Species)`とYを指定すればOKです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(y = Species)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![横向きの棒グラフ](index_files/figure-html/fig-iris-bar-horizontal-1.png){#fig-iris-bar-horizontal}\n:::\n:::\n\n\nもう1種類いきましょう。`iris`データセットの`Species`（種）ごとに、`Sepal.Length`（がく片の長さ）の平均を計算して、その平均値を棒グラフで表示します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_bar(stat = \"summary\", fun = \"mean\")\n```\n\n::: {.cell-output-display}\n![種ごとのがく片の長さの平均](index_files/figure-html/fig-iris-bar-mean-1.png){#fig-iris-bar-mean}\n:::\n:::\n\n\n今回は`geom_bar(stat = \"summary\", fun = \"mean\")`とすることで、`Species`ごとに`Sepal.Length`の平均を計算して棒グラフを描いています。種類ごとに集計をするのだけど、じゃあ集計するときには平均を使ってね、ということを`geom_bar()`内で指定しています。\n\nこの場合は種類ごとにがく片の長さを計算する、ということでXもYもデータフレーム内の変数を使いますので`aes(x = Species, y = Sepal.Length)`とX, Y両方明示しています。\n\n### 箱ひげ図\n\n箱ひげ図は、分布を可視化するのに便利なグラフです。散布図と似ていますが、分布の要約がわかるようになっています。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![箱ひげ図](index_files/figure-html/fig-iris-box-1.png){#fig-iris-box}\n:::\n:::\n\n\n各種類において、`Sepal.Length`（がく片の長さ）の分布がわかります。四分位数や外れ値がわかるのが特徴です。\n\n### バイオリンプロット\n\nバイオリンプロットは、分布を可視化するのに便利なグラフです。箱ひげ図と似ていますが、分布の形状もわかるようになっています。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_violin()\n```\n\n::: {.cell-output-display}\n![バイオリンプロット](index_files/figure-html/fig-iris-violin-1.png){#fig-iris-violin}\n:::\n:::\n\n\n各種類において、`Sepal.Length`（がく片の長さ）の分布がわかります。例えば、`setosa`はがく片の長さが5あたりに集中していることがわかります。`virginica`は全体的に長い傾向があることもわかりますね。\n\n## 色を付ける {#sec-color}\n\nグラフに色を付ける方法について説明します。\n\n基本的には`geom_xxx()`内で`color = \"red\"`のように指定すれば、色を付けることができます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point(color = \"red\")\n```\n\n::: {.cell-output-display}\n![散布図の点を赤色に](index_files/figure-html/fig-color-1.png){#fig-color}\n:::\n:::\n\n\nこのように、`geom_point(color = \"red\")`で点を赤色にしています。\n\n他のケースも見てみましょう。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(d, aes(x = a, y = b)) + \n  geom_line(color = \"blue\")\n```\n\n::: {.cell-output-display}\n![折れ線グラフの線を青色に](index_files/figure-html/fig-color-line-1.png){#fig-color-line}\n:::\n:::\n\n\nこれも同様に、`geom_line(color = \"blue\")`で線を青色にしています。\n\n棒グラフの場合は、少し事情が異なります。`color`は棒の枠線の色を指定することになるので、棒自体の色を変えたい場合は`fill`を使います。\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_bar(stat = \"summary\", fun = \"mean\", color = \"darkgreen\")\n\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_bar(stat = \"summary\", fun = \"mean\", fill = \"darkgreen\")\n```\n\n::: {.cell-output-display}\n![棒グラフの枠線が緑色に](index_files/figure-html/fig-color-bar-1.png){#fig-color-bar-1}\n:::\n\n::: {.cell-output-display}\n![棒の色が緑色に](index_files/figure-html/fig-color-bar-2.png){#fig-color-bar-2}\n:::\n:::\n\n\n`fill`を使うのは棒グラフやバイオリンプロットなど、塗りつぶしがある場合です。もし枠線と塗りつぶしの両方を変えたい場合は、`color`と`fill`の両方を指定してください。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_violin(color = \"darkgreen\", fill = \"lightgreen\")\n```\n\n::: {.cell-output-display}\n![枠線と塗りつぶしの両方を指定](index_files/figure-html/fig-color-violin-both-1.png){#fig-color-violin-both}\n:::\n:::\n\n\n## 少しいじる\n\nここでは少しグラフをいじって、点の形を変えたり、線の種類や太さを変えたりする方法を説明します。\n\n### 点の形\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point(shape = 17, color = \"blue\", size = 3)\n```\n\n::: {.cell-output-display}\n![点の形と大きさが変わっています](index_files/figure-html/fig-point-shape-1.png){#fig-point-shape}\n:::\n:::\n\n\n1.  `shape`で点の形を指定\n    -   形は0から25まであります。`?points`で確認できます。\n2.  `size`で点の大きさを指定\n    -   数値が大きいほど大きくなります。\n\n### 線の種類と太さ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(d, aes(x = a, y = b)) + \n  geom_line(color = \"blue\", linetype = 2, linewidth = 1.5)\n```\n\n::: {.cell-output-display}\n![線の種類と太さが変わっています](index_files/figure-html/fig-line-type-1.png){#fig-line-type}\n:::\n:::\n\n\n1.  `linetype`で線の種類を指定\n    -   0から6まであります。`?linetype`で確認できます。\n2.  `linewidth`で線の太さを指定\n    -   数値が大きいほど太くなります。\n\n## 軸\n\n基本的なグラフを紹介できたところで、次にこれらのグラフを使いながら、軸の扱いについて説明します。\n\n### 軸ラベル\n\nまずはX軸、Y軸のラベルを変更します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\")\n```\n\n::: {.cell-output-display}\n![軸ラベルを変更](index_files/figure-html/fig-axis-label-1.png){#fig-axis-label}\n:::\n:::\n\n\n`labs(x = \"Length of Sepal\", y = \"Width of Sepal\")`でX軸とY軸のラベルを変更しています。\n\nまた、以下のコードは同じ結果を示します。\n\n``` r\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  xlab(\"Length of Sepal\") + \n  ylab(\"Width of Sepal\")\n```\n\nすなわち、`labs()`はそれ一つでX軸もY軸もラベルを変更することができますが、`xlab()`、`ylab()`を使えば片方ずつでも変更できるということです。\n\n次に、軸ラベルの体裁を変更したい場合、以下のようにします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  labs(x = \"Length of Sepal\", y = \"Width of Sepal\") + \n  theme(axis.title = element_text(\n    family = \"Times New Roman\", face = \"italic\", \n    color = \"red\", size = 20\n  ))\n```\n\n::: {.cell-output-display}\n![文字の体裁が変わっています](index_files/figure-html/fig-axis-font-1.png){#fig-axis-font}\n:::\n:::\n\n\n1.  `theme()`内の`axis.title`で変更する\n    -   X軸Y軸のどちらかだけ変更したければ、`axis.title.x`のようにします。\n2.  `element_text()`内で具体的にフォントの体裁を指定\n    -   フォントはTimes New Romanを使用しています。これはWindowsの設定であり、MacやLinuxではTimesで表示されると思います。\n\n    -   今回はわかりやすく派手にしましたが、これらの要素を変更すれば調整できます。\n\n    -   例えば、`face = \"bold\"`にすれば太字にできます。\n\n    -   他にもありますが、おおむね使うのはこのあたりでしょう。\n\n### 軸の目盛り\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  scale_x_continuous(breaks = seq(4.5, 8, .5)) + \n  scale_y_continuous(breaks = seq(2, 4, 1))\n```\n\n::: {.cell-output-display}\n![目盛りの間隔が変わっています](index_files/figure-html/fig-axis-scale-1.png){#fig-axis-scale}\n:::\n:::\n\n\n@fig-axis-font と比較してもらえればわかりますが、目盛りがX軸は0.5刻み、Y軸は1刻みになるよう変更しました。このように、X（Y）が連続値である場合、`scale_x_continuous()`（`scale_y_continuous()`）で変更できます。`seq()`は数列を作る関数で、`seq(from, to, by)`の順に指定します。\n\nまた、連続変数ではなくカテゴリ変数の場合は、`scale_x_discrete()`（`scale_y_discrete()`）を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_bar(stat = \"summary\", fun = \"mean\") + \n  scale_x_discrete(breaks = c(\"setosa\", \"versicolor\", \"virginica\"), \n                   labels = c(\"A\", \"B\", \"C\"))\n```\n\n::: {.cell-output-display}\n![カテゴリのラベルが変わっています](index_files/figure-html/fig-axis-scale-cat-1.png){#fig-axis-scale-cat}\n:::\n:::\n\n\n`breaks`で元のラベル、`labels`で新しいラベルを指定します。それぞれ`A`, `B`, `C`に変更されました。\n\n目盛りも同様にフォントのスタイルを変更できます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(axis.text = element_text(\n    family = \"Times New Roman\", face = \"bold\", \n    color = \"red\", size = 20\n  ))\n```\n\n::: {.cell-output-display}\n![数字のフォントが変わっています](index_files/figure-html/fig-scale-font-1.png){#fig-scale-font}\n:::\n:::\n\n\nもはや訳が分からない図ですが、このように体裁は変更可能です。要素は大体上と同じで、`axis.text.x`のようにどちらかだけ変更することも可能です。\n\nまた、`axis.ticks`で目盛りを消去することも可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(\n    axis.text = element_text(family = \"Times New Roman\", face = \"bold\", \n                             color = \"red\", size = 20), \n    axis.ticks = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![目盛りが消えています](index_files/figure-html/fig-delete-memori-1.png){#fig-delete-memori}\n:::\n:::\n\n\nお判りいただけますか？軸の数字は残っていますが、目盛り線は消えています。@fig-scale-font と見比べてみてください。\n\n### 軸の範囲\n\nX軸とY軸の範囲を設定する方法です。これまでの図ではだいたい4から8あたりがXの範囲、2.0から4.5がYの範囲でした。`xlim(a, b)`と`ylim(a, b)`で設定できます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  xlim(5, 7) + \n  ylim(3, 4) + \n  theme(\n    axis.text = element_text(family = \"Times New Roman\", face = \"bold\", \n                             color = \"red\", size = 20), \n    axis.ticks = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![範囲を変えました](index_files/figure-html/fig-change-range-1.png){#fig-change-range}\n:::\n:::\n\n\n## 注釈\n\nグラフの中に文字や線を入れる方法について説明します。文字や線を入れるには`annotate()`関数を使います。\n\n### 文字\n\nまずは文字を入れる方法です。文字は`annotate()`内で`\"text\"`か`\"segment\"`を指定することで挿入可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"text\", label = \"ggplot is\\nwonderful!\", x = 6.5, y = 4, \n           family = \"Times New Roman\", color = \"#CC6666\", size = 10)\n```\n\n::: {.cell-output-display}\n![表内に文字を入れられました](index_files/figure-html/fig-annotate-1.png){#fig-annotate}\n:::\n:::\n\n\n1.  `annotate(\"text\", label = \"hogehoge\")`で`hogehoge`と文字を入れることができる\n\n2.  `x`と`y`の位置を指定しないと反映されない\n\n3.  改行したい場合、`\\n`を入れる\n\n4.  フォント、色、サイズも指定できる\n\n関数一つで意外と簡単にできます。\n\n### セグメント\n\n棒線や矢印を付けることも可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"segment\", x = 5, xend = 7, y = 4, yend = 2.5, \n           linewidth = 2, color = \"#CC6666\")\n```\n\n::: {.cell-output-display}\n![斜めに棒線が入りました。](index_files/figure-html/fig-segment-1-1.png){#fig-segment-1}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  annotate(\"segment\", x = 5, xend = 7, y = 4, yend = 2.5, \n           linewidth = 2, color = \"#CC6666\", \n           arrow = arrow(length = unit(2, units = \"cm\")))\n```\n\n::: {.cell-output-display}\n![矢印になりました。](index_files/figure-html/fig-segment-2-1.png){#fig-segment-2}\n:::\n:::\n\n\n1.  `\"segment\"`で棒線ができる\n2.  `x`と`xend`、`y`と`yend`を指定する必要がある\n    -   $(x, y)$から$(xend, yend)$までの2点を結ぶようにできます。\n3.  `linewidth`で線の太さを指定可\n    -   他の要素も文字の場合と同様に指定できますが、`size`が`linewidth`に置き換わっています。\n4.  `arrow = arrow(length = unit(x, units = \"cm\"))`で矢じりが付く\n    -   `x`で矢じりのサイズ、`units`は単位で、他にmmやinchesなどがあります。\n    -   ややこしいですが、`xend`と`yend`の方に向かって矢印が付きます。\n\n以上のように、文字だけでなく線や矢印を追加することができます。\n\n今回はわかりやすくでかでかと描きましたが、例えばグラフ内の特徴的な部分に注釈をつけたい場合などに役立ちます。\n\n## 複数のプロットと凡例\n\n### 複数のカテゴリのプロット {#sec-multi-cat-plot}\n\nここでは`Orange`データセットを使って複数のカテゴリのプロットと、凡例について説明します。\n\n複数のカテゴリのプロットとは、以下のデータを見ていただけると早いと思います。\n\n\n::: {#tbl-orange .cell tbl-cap='`Orangeデータセットの一部'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_m2hq5vion0lt55lr00kt(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_m2hq5vion0lt55lr00kt\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_m2hq5vion0lt55lr00kt(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_m2hq5vion0lt55lr00kt\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '10', j: 0 }, { i: '10', j: 1 }, { i: '10', j: 2 },  ], css_id: 'tinytable_css_6312evu1kto0fsytdkts',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 }, { i: '0', j: 2 },  ], css_id: 'tinytable_css_214xjpzle13h77ty3h7s',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_m2hq5vion0lt55lr00kt(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_6312evu1kto0fsytdkts, .table th.tinytable_css_6312evu1kto0fsytdkts { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_214xjpzle13h77ty3h7s, .table th.tinytable_css_214xjpzle13h77ty3h7s { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_m2hq5vion0lt55lr00kt\" style=\"table-layout: fixed; width: 100% !important; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">Tree</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">age</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">circumference</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">1</td>\n                  <td data-row=\"1\" data-col=\"1\">118</td>\n                  <td data-row=\"1\" data-col=\"2\">30</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">1</td>\n                  <td data-row=\"2\" data-col=\"1\">484</td>\n                  <td data-row=\"2\" data-col=\"2\">58</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">1</td>\n                  <td data-row=\"3\" data-col=\"1\">664</td>\n                  <td data-row=\"3\" data-col=\"2\">87</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">1</td>\n                  <td data-row=\"4\" data-col=\"1\">1004</td>\n                  <td data-row=\"4\" data-col=\"2\">115</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">1</td>\n                  <td data-row=\"5\" data-col=\"1\">1231</td>\n                  <td data-row=\"5\" data-col=\"2\">120</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\">1</td>\n                  <td data-row=\"6\" data-col=\"1\">1372</td>\n                  <td data-row=\"6\" data-col=\"2\">142</td>\n                </tr>\n                <tr>\n                  <td data-row=\"7\" data-col=\"0\">1</td>\n                  <td data-row=\"7\" data-col=\"1\">1582</td>\n                  <td data-row=\"7\" data-col=\"2\">145</td>\n                </tr>\n                <tr>\n                  <td data-row=\"8\" data-col=\"0\">2</td>\n                  <td data-row=\"8\" data-col=\"1\">118</td>\n                  <td data-row=\"8\" data-col=\"2\">33</td>\n                </tr>\n                <tr>\n                  <td data-row=\"9\" data-col=\"0\">2</td>\n                  <td data-row=\"9\" data-col=\"1\">484</td>\n                  <td data-row=\"9\" data-col=\"2\">69</td>\n                </tr>\n                <tr>\n                  <td data-row=\"10\" data-col=\"0\">2</td>\n                  <td data-row=\"10\" data-col=\"1\">664</td>\n                  <td data-row=\"10\" data-col=\"2\">111</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n`Tree`は木の識別子で、1～5まであります。`age`は日齢、`circumference`は幹の周囲です。\n\nここでやりたいことは、木の種類ごとに、日齢と幹の周囲を軸にとってプロットすることです。これをただプロットしてしまうと、\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![すべてのデータを放り込みました](index_files/figure-html/fig-orange-pool-1.png){#fig-orange-pool}\n:::\n:::\n\n\nこれでは各点がどの木のものなのか判別できない状態です。\n\nこれを識別するために、色を付けたいとしましょう。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![色が分かれました](index_files/figure-html/fig-orange-color-1.png){#fig-orange-color}\n:::\n:::\n\n\n[前のセクション](#sec-color)では`geom_point(color = \"red\")`のように線全体に対して同じ色を付けましたが、今回の方法では、色を付けることを前提として、`aes()`内の`color =`で指定した種類ごとに色が付くという設定です。\n\nこれでとりあえずはどの点がどの木のものかわかるようになりました。\n\n今は散布図なので色を分けるだけで済みますが、折れ線グラフのような場合は、色だけでなく線の種類を変えたいかもしれません。そんな時は次のようにします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree, linetype = Tree)) + \n  geom_point() + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![折れ線の種類も分かれました](index_files/figure-html/fig-orange-linetype-1.png){#fig-orange-linetype}\n:::\n:::\n\n\n`linetype = Tree`を追加することで線の種類も木の種類ごとに変更することができました。\n\nこのように`aes()`内で要素を追加することで種類ごとに分けることができます。\n\nまだ色遣いなどは不格好ですが、いったんこのまま進めます。\n\n### 凡例の位置\n\n次にしたいのは、凡例の設定です。凡例は現在右側に表示されていますが、まずはこれを下に表示したいとします。\n\nこれは、`theme()`内の`legend.position`で設定できます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![凡例が下に来ました](index_files/figure-html/fig-orange-legend-position-1.png){#fig-orange-legend-position}\n:::\n:::\n\n\n`theme(legend.position = \"bottom\")`を設定することで、凡例の位置が下になりました。もちろんbottom以外にもtop, left, right（デフォルト）などを指定することができます。\n\nさらに凡例を消したい場合は次のようにします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![凡例を消しました](index_files/figure-html/fig-orange-legend-delete-1.png){#fig-orange-legend-delete}\n:::\n:::\n\n\n`theme(legend.position = \"none\")`で凡例を消すことができました。\n\n### 凡例の調整\n\n例えば、凡例のタイトルだけ消したい場合が結構あると思います。@fig-orange-color の例でいえば、Treeという文字は消したいということです。\n\nそんな場合は、`guides()`を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference, color = Tree)) + \n  geom_point() + \n  guides(color = guide_legend(title = NULL))\n```\n\n::: {.cell-output-display}\n![凡例のタイトルを削除](index_files/figure-html/fig-orange-legend-delte-title-1.png){#fig-orange-legend-delte-title}\n:::\n:::\n\n\nTreeというタイトルが消えました。\n\nここでは`guides(color = guide_legend(title = NULL))`としていますが、`aes()`内で例えば`linetype`を使っている場合は、`guides()`内も`linetype =`にする必要があります。\n\n## テーマ\n\nggplotではテーマを選ぶことができます。デフォルトではこれまでの図のように背景がグレーになっていますが、ほとんどの場合で背景は白にしたいですよね。\n\n背景だけでなく、罫線等もテーマで変更することができます。\n\n### プリセットのテーマ\n\nいくつかのテーマが準備されています。代表的なものをいくつかご紹介します。\n\n::: panel-tabset\n## minimal\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![`theme_minimal()`](index_files/figure-html/fig-theme-minimal-1.png){#fig-theme-minimal}\n:::\n:::\n\n\n## bw\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![`theme_bw()`](index_files/figure-html/fig-theme-bw-1.png){#fig-theme-bw}\n:::\n:::\n\n\n`theme_minimal()`と比べて外枠が付いています。\n\n## classic\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![`theme_classic()`](index_files/figure-html/fig-theme-classic-1.png){#fig-theme-classic}\n:::\n:::\n\n\n## linedraw\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![`theme_linedraw()`](index_files/figure-html/fig-theme-linedraw-1.png){#fig-theme-linedraw}\n:::\n:::\n\n\n## light\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_light()\n```\n\n::: {.cell-output-display}\n![`theme_light()`](index_files/figure-html/fig-theme-light-1.png){#fig-theme-light}\n:::\n:::\n\n\n## void\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![`theme_void()`](index_files/figure-html/fig-theme-void-1.png){#fig-theme-void}\n:::\n:::\n\n\nさすがにやりすぎでは…と思うかもしれませんが、GISで地図を可視化するようなときに重宝します。\n:::\n\n### `theme()`関数\n\nここまでご紹介したものの中で`theme()`を使ったものがいくつかありました。\n\nここで`theme()`**は**`theme_xxx()`**の後に使う**ということに注意してください。\n\nこれは、`theme_xxx()`が`theme()`の設定を上書きしてしまうためです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme(axis.title = element_text(color = \"red\")) + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![失敗例](index_files/figure-html/fig-theme-miss-1.png){#fig-theme-miss}\n:::\n:::\n\n\n`theme(axis.title = element_text(color = \"red\"))`で軸ラベルを赤色に設定していますが、出力されたものは黒いラベルになっています。\n\n順番を逆にすれば、\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal() + \n  theme(axis.title = element_text(color = \"red\"))\n```\n\n::: {.cell-output-display}\n![正しい例](index_files/figure-html/fig-theme-success-1.png){#fig-theme-success}\n:::\n:::\n\n\nこのようにしっかり反映されます。\n\n`theme()`は`theme_xxx()`で設定できない部分を細かく調整したい場合に使います。できることはたくさんあるので全てを説明することはできませんが、例えば以下のようなことができます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal() + \n  theme(\n    panel.grid = element_blank(), \n    legend.position = \"none\", \n    axis.title = element_text(family = \"Times New Roman\", size = 18), \n    axis.text = element_text(family = \"Times New Roman\", size = 14)\n  )\n```\n\n::: {.cell-output-display}\n![カスタムテーマ](index_files/figure-html/fig-theme-custom-1.png){#fig-theme-custom}\n:::\n:::\n\n\n1.  `panel.grid = element_blank()`で罫線を消す\n2.  `legend.position = \"none\"`で凡例を消す\n3.  `axis.title`と`axis.text`で軸ラベルと目盛りのフォントとサイズを変更\n\nこのように、「グラフのここを変えたいんだけどなぁ…」みたいなことは`theme()`で解決できることが多かったりします。\n\n詳しくは`?theme`で確認してみてください。引数名はわかりやすいので、比較的目的を見つけやすいと思います。\n\n## 新しくなった`theme()`の設定\n\n### `paper`と`ink`\n\nggplot2のバージョン4.0.0からは、`theme_xxx()`内で色に関するデフォルト設定が追加できるようになりました。\n\n百聞は一見に如かずということで、以下のコードをご覧ください。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal(paper = \"papayawhip\", ink = \"darkgreen\")\n```\n\n::: {.cell-output-display}\n![theme()内での色のデフォルト設定](index_files/figure-html/fig-theme-v4-1.png){#fig-theme-v4}\n:::\n:::\n\n\n`paper`で背景色、`ink`で前景色を指定することができます。前景色は、軸ラベル、目盛り、点などに適用されます。\n\nここのポイントは、使用する色を統一的に指定できるということで、例えば`theme()`内で`axis.title`や`axis.text`の色を指定する必要がなくなります。\n\n### `geom`\n\nまた、`theme()`内で`geom`を設定することで、色に関するデフォルトを設定しつつ`geom_xxx()`内でその設定を参照することが可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point() + \n  theme_minimal(paper = \"papayawhip\", ink = \"darkgreen\") + \n  theme(\n    geom = element_geom(color = \"coral\", pointsize = 3)\n  )\n```\n\n::: {.cell-output-display}\n![geom内での色のデフォルト設定](index_files/figure-html/fig-theme-v4-geom-1.png){#fig-theme-v4-geom}\n:::\n:::\n\n\nここでは、`theme(geom = element_geom(color = \"coral\", pointsize = 3))`で点の色と大きさを指定しています。`element_geom()`は`geom_point()`、`geom_line()`、`geom_bar()`などで共通して使われる設定を指定できます。一元管理できる点が便利ですね。\n\nちなみに`geom`を設定しないと、点の色は`ink`の色、すなわちdarkgreenになります。\n\n### `from_theme()`\n\nさらに、`geom_xxx()`内で`from_theme()`を使うことにより、`theme()`内で設定した色を`geom_xxx()`内で参照することも可能です。\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\np <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +\n  geom_point(aes(color = from_theme(accent))) +\n  theme_minimal()\n\np + theme(geom = element_geom(accent = \"blue\"))\np + theme(geom = element_geom(accent = \"orange\"))\n```\n\n::: {.cell-output-display}\n![アクセントカラーを青に](index_files/figure-html/fig-theme-v4-from_theme-1.png){#fig-theme-v4-from_theme-1}\n:::\n\n::: {.cell-output-display}\n![アクセントカラーをオレンジに](index_files/figure-html/fig-theme-v4-from_theme-2.png){#fig-theme-v4-from_theme-2}\n:::\n:::\n\n\nここでは、`from_theme(accent)`で`theme()`内で設定した`accent`を参照しています。`theme(geom = element_geom(accent = \"blue\"))`のように設定することで、アクセントカラーを青に変更できます。\n\nこれは`element_geom(color = \"blue\")`と一見同じことをしているように思えますが、たくさんのプロットを作成する場合、`accent`を一括で変更できる点で便利です。\n\n#### 使用例\n\n-   ケース：\n    -   論文執筆をしており、論文用とスライド用で色を変えたい\n    -   `geom_point()`と`geom_smooth()`を使っており、`geom_smooth()`の色は論文用とスライド用で変えたい\n-   解決策：\n-   テーマ側でアクセントカラーを定義\n-   `geom_line()`のみ`from_theme(accent)`を参照させる\n-   こうするとプロットの本体コードは共通のまま、テーマを差し替えるだけで線の色だけ切り替わる\n\nまず、あらかじめテーマを2つ用意しておきます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 論文用のテーマ\ntheme_paper <- theme_minimal(paper = \"white\",  ink = \"black\") + \n  theme(geom = element_geom(accent = \"navy\"))\n\n# スライド用のテーマ\ntheme_slide <- theme_minimal(paper = \"black\",  ink = \"white\") + \n  theme(geom = element_geom(accent = \"orange\"))\n```\n:::\n\n\n次に、テーマを除くプロット本体を作成します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(Orange, aes(age, circumference)) + \n  # 散布図は灰色で固定\n  geom_point(color = \"gray60\", size = 2) + \n  geom_smooth(aes(color = from_theme(accent)), \n              method = lm, se = FALSE, size = 1) + \n  labs(x = \"Age (days)\", y = \"Circumference (mm)\")\n```\n:::\n\n\nこの時点で`p`をプロットしても、折れ線の色は変わりません。まだ`theme()`を付けておらず、アクセントカラーが指定されていないためです。\n\nそれでは先に設定したテーマを`p`に適用します。\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\np_paper  <- p + theme_paper\np_slide  <- p + theme_slide\n\np_paper\np_slide\n```\n\n::: {.cell-output-display}\n![論文用のテーマ](index_files/figure-html/fig-theme-final-1.png){#fig-theme-final-1}\n:::\n\n::: {.cell-output-display}\n![スライド用のテーマ](index_files/figure-html/fig-theme-final-2.png){#fig-theme-final-2}\n:::\n:::\n\n\n今回は1種類のスライドを論文用とスライド用に分ける想定しかしていませんが、たくさんのスライドを作る場合、アクセントカラーを一括で変えられる点で便利です。コードはそのままに、`tmeme_paper`と`theme_slide`の`accent`だけ変えればよいからです。\n\n## 新しくなったラベル設定\n\nここまでは`labs()`や`xlab()`、`ylab()`で軸ラベルを設定してきましたが、あらかじめラベルを設定しておき、自動で表示させることが可能になりました。\n\n`Orange`データセットを使って説明します。\n\nまず、何もしない場合は以下のようになります。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Orange, aes(x = age, y = circumference)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![デフォルトのラベル](index_files/figure-html/fig-label-default-1.png){#fig-label-default}\n:::\n:::\n\n\nX軸は`age`、Y軸は`circumference`と表示されています。\n\nこれを、あらかじめラベルを設定しておくことができるようになりました。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\n\n# tibbleは属性を保持しやすい\ndf <- as_tibble(Orange)\n\n# 単位: age=days, circumference=mm\nattr(df$age, \"label\") <- \"Age (days)\"\nattr(df$circumference, \"label\") <- \"Trunk circumference (mm)\"\n```\n:::\n\n\n-   `attr()`で変数に属性を追加\n    -   `df`の`age`の`label`属性に`Age (days)`を追加している、という解釈です。\n    -   `Age (days)`や`Trunk circumference (mm)`の部分がラベルなのでここを自由に変更できます。\n\nこれで`df`を使ってプロットすると、\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = age, y = circumference)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![カスタムラベル](index_files/figure-html/fig-label-custom-1.png){#fig-label-custom}\n:::\n:::\n\n\n`labs()`を使わなくても、X軸とY軸のラベルが変更されました。\n\n1つのグラフであれば`labs()`で設定した方が労力が少ないかもしれませんが、大量のグラフを作成する場合、あらかじめラベルを設定しておけば、`labs()`をいちいち書く必要がなくなるので便利です。\n\n::: callout-note\n## tibble形式について\n\n皆さんはCSVデータを読み込むとき、何の関数を使用していますか？\n\n多いのはbase Rの`read.csv()`や、tidyverseに含まれるreadrパッケージの`read_csv()`だと思います。\n\n`read.csv()`はdata.frame形式、`read_csv()`はtibble形式でデータを読み込みます。**tibbleはdata.frameを改良したデータ構造**で、tidyverseの多くのパッケージで標準的に使われており、以下のような特徴があります。\n\n-   見やすい表示 すべての行を出さず、必要に応じて端だけを表示するので、データの中身を把握しやすいです。\n-   型情報を保持 各列のデータ型（数値・文字列など）が一緒に表示され、解析時に便利です。\n-   属性を保持 labelのような属性が処理中に消えにくく、ラベル管理や可視化との相性が良いです。\n\ntibbleはdata.frameとほぼ同じように使えるので、tidyverseを使う場合はtibble形式でデータを扱うことをおすすめします。困ったら`tibble::as_tibble()`で変換できます。\n:::\n\n## カラーパレット\n\nggplot2では、連続値やカテゴリ値を色で表現する際に「カラーパレット」を使います。\n\n例えば`scale_colour_brewer()`や`scale_fill_viridis_c()`を指定すると、データの値に応じて自動的に一貫した配色が割り当てられます。\n\nパレットを選ぶことで、見やすさや配色の意味（アクセシビリティ対応や論文用の白黒印刷など）を調整でき、グラフの理解度や印象に大きく影響します。\n\n### 連続値のカラースケール\n\nまずは例を見てみましょう。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width,\n                 colour = Petal.Length)) + \n  geom_point(size = 2) + \n  scale_colour_continuous() + \n  labs(colour = \"Petal length\")\n```\n\n::: {.cell-output-display}\n![scale_colour_continuous()を使った例](index_files/figure-html/fig-color-default-1.png){#fig-color-default}\n:::\n:::\n\n\n`scale_colour_continuous()`は連続変数を色で表すためのカラースケールで、デフォルトの配色が使われ、数値の大小をなめらかなグラデーションで示しています。\n\n自分で色を指定することも可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Sepal.Width, colour = Petal.Length)) + \n  geom_point(size = 2) + \n  scale_colour_continuous(low = \"blue\", high = \"red\") + \n  labs(colour = \"Petal length\")\n\nggplot(iris, aes(Sepal.Length, Sepal.Width, colour = Petal.Length)) + \n  geom_point(size = 2) + \n  scale_colour_continuous(palette = c(\"#FEE0D2\", \"#FC9272\", \"#DE2D26\")) + \n  labs(colour = \"Petal length\")\n```\n\n::: {.cell-output-display}\n![左: 青から赤へのグラデーション](index_files/figure-html/fig-color-continuous-custom-1.png){#fig-color-continuous-custom-1}\n:::\n\n::: {.cell-output-display}\n![右: 指定した3色のグラデーション](index_files/figure-html/fig-color-continuous-custom-2.png){#fig-color-continuous-custom-2}\n:::\n:::\n\n\nlowからhighまでの2色を指定する方法や、自分で3色以上を指定する方法などがあります。\n\nまた、他の例として`scale_colour_viridis_c()`を使う方法もあったりします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Sepal.Width, colour = Petal.Length)) + \n  geom_point(size = 2) + \n  scale_colour_viridis_c(option = \"plasma\") + \n  labs(colour = \"Petal length\")\n```\n\n::: {.cell-output-display}\n![scale_colour_viridis_c()を使った例](index_files/figure-html/fig-color-viridis-1.png){#fig-color-viridis}\n:::\n:::\n\n\n`scale_colour_viridis_c()`は連続変数を色で表すためのカラースケールで、視認性・色覚バリアフリー・白黒印刷対応に優れたviridisパレットを使います。`plasma`以外にも`magma`や`inferno`、`cividis`などのバリエーションがあります。\n\n### カテゴリ値のカラースケール\n\nカテゴリ変数を色で表す場合は、`scale_colour_brewer()`や`scale_colour_viridis_d()`などを使います[^2]。\n\n[^2]: ちなみに`scale_colour_viridis`の`c`の方はcontinuousで、`d`の方はdiscreteですね。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Sepal.Width, colour = Species)) + \n  geom_point(size = 2) + \n  scale_colour_brewer(palette = \"Set1\") + \n  labs(colour = \"Species\")\n```\n\n::: {.cell-output-display}\n![scale_colour_brewer()を使った例](index_files/figure-html/fig-color-brewer-1.png){#fig-color-brewer}\n:::\n:::\n\n\n`scale_colour_brewer()`の`palette`には`Set1`、`Set2`、`Dark2`、`Paired`などのカラーパレットがあり、用途に応じて選択できます。\n\nまた、`scale_colour_discrete()`を使う方法もあります。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Sepal.Width, colour = Species)) + \n  geom_point(size = 2) + \n  scale_colour_discrete() + \n  labs(colour = \"Species\")\n```\n\n::: {.cell-output-display}\n![scale_colour_discrete()を使った例](index_files/figure-html/fig-color-discrete-1.png){#fig-color-discrete}\n:::\n:::\n\n\nなんというか、これぞggplot2！という感じの配色ですね。もちろん色を自分で指定することも可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Sepal.Width, colour = Species)) + \n  geom_point(size = 2) + \n  scale_colour_manual(values = c(\"darkred\", \"darkblue\", \"darkgreen\")) + \n  labs(colour = \"Species\")\n```\n\n::: {.cell-output-display}\n![指定した3色](index_files/figure-html/fig-color-discrete-custom-1.png){#fig-color-discrete-custom}\n:::\n:::\n\n\nさらに、`scale_colour_viridis_d()`だと以下のようになります。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Sepal.Width, colour = Species)) + \n  geom_point(size = 2) + \n  scale_colour_viridis_d(option = \"plasma\") + \n  labs(colour = \"Species\")\n```\n\n::: {.cell-output-display}\n![scale_colour_viridis_d()を使った例](index_files/figure-html/fig-color-viridis-d-1.png){#fig-color-viridis-d}\n:::\n:::\n\n\n今回はSpeciesがカテゴリ変数なので、先ほどの`scale_colour_viridis_c()`よりも`scale_colour_viridis_d()`の方が適していると言えますね。\n\n今回は代表的なカラースケールをご紹介しましたが、他にもカラーパレットはたくさんあります。今回は入門編ということでこのあたりにしておきますが、いろいろ紹介してくれているページはあるので、例えば以下のようなページを参考にしてみてください。\n\n::: {.callout-tip appearance=\"minimal\"}\n[The R Graph Gallery](https://r-graph-gallery.com/)\n:::\n\n## いろいろ含めたグラフを作ってみる\n\nではここで、これまでの内容を踏まえて、新しいプロットを作ってみます。データはこれもデフォルトで用意されている`mpg`データセットを使います。\n\n\n::: {#fig-complex-plot .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ndf <- as_tibble(diamonds)\n\nattr(df$cut, \"label\") <- \"Cut\"\nattr(df$price, \"label\") <- \"Price (USD)\"\nattr(df$carat, \"label\") <- \"Carat\"\n\ntheme_use <- theme_minimal(paper = \"gray98\", ink = \"navy\") + \n  theme(\n    geom = element_geom(accent = \"purple\", paper = \"pink\", \n                        pointsize = 2, borderwidth = 1), \n    axis.title = element_text(family = \"Times New Roman\", size = 16), \n    axis.text = element_text(family = \"Times New Roman\", size = 12), \n    legend.title = element_text(family = \"Times New Roman\"), \n    legend.text = element_text(family = \"Times New Roman\")\n  )\n\nggplot(df, aes(cut, price)) +\n  geom_violin(aes(color = from_theme(accent))) + \n  theme_minimal(paper = \"gray98\", ink = \"navy\") + \n  theme_use\n\nggplot(df, aes(carat, price, color = cut)) + \n  geom_point() + \n  annotate(\"text\", label = \"Fair < Good < Very Good < Premium < Ideal\", \n           x = 3.4, y = 2500, family = \"Times New Roman\") + \n  scale_color_viridis_d(option = \"plasma\") + \n  guides(color = guide_legend(reverse = TRUE)) + \n  theme_use\n```\n\n::: {.cell-output-display}\n![カットと価格の関係](index_files/figure-html/fig-complex-plot-1.png){#fig-complex-plot-1}\n:::\n\n::: {.cell-output-display}\n![カラットと価格の関係](index_files/figure-html/fig-complex-plot-2.png){#fig-complex-plot-2}\n:::\n\n作ってみました\n:::\n\n\n\n## 発展：`ggrepel`\n\nここからは、`ggrepel`というパッケージを用いて折れ線グラフを発展させた例をご紹介します。ここからはだいぶややこしいので、出来上がったグラフを見て、必要性を感じていただけたらコードを読み解いてもらえればと思います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# インストール\n# pak::pak(\"ggrepel\")\nlibrary(ggrepel)\n```\n:::\n\n\nまず、以下のようなデータがあるとします。`firm_id`は30まであります。\n\n\n::: {#tbl-data-prep .cell tbl-cap='データの一部'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_er2p54f3anlfh2ugjmt1(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_er2p54f3anlfh2ugjmt1\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_er2p54f3anlfh2ugjmt1(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_er2p54f3anlfh2ugjmt1\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '6', j: 0 }, { i: '6', j: 1 }, { i: '6', j: 2 }, { i: '6', j: 3 }, { i: '6', j: 4 }, { i: '6', j: 5 },  ], css_id: 'tinytable_css_m80ohasp5y8faa7rn91t',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 }, { i: '0', j: 2 }, { i: '0', j: 3 }, { i: '0', j: 4 }, { i: '0', j: 5 },  ], css_id: 'tinytable_css_lh87ju35914i9kw42kj6',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_er2p54f3anlfh2ugjmt1(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_m80ohasp5y8faa7rn91t, .table th.tinytable_css_m80ohasp5y8faa7rn91t { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_lh87ju35914i9kw42kj6, .table th.tinytable_css_lh87ju35914i9kw42kj6 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_er2p54f3anlfh2ugjmt1\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">firm_id</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">state_id</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">year</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">treated_1998</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">is_treated</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"5\">y</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">1</td>\n                  <td data-row=\"1\" data-col=\"1\">50</td>\n                  <td data-row=\"1\" data-col=\"2\">1980</td>\n                  <td data-row=\"1\" data-col=\"3\">0</td>\n                  <td data-row=\"1\" data-col=\"4\">0</td>\n                  <td data-row=\"1\" data-col=\"5\">0.6546029</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">1</td>\n                  <td data-row=\"2\" data-col=\"1\">50</td>\n                  <td data-row=\"2\" data-col=\"2\">1981</td>\n                  <td data-row=\"2\" data-col=\"3\">0</td>\n                  <td data-row=\"2\" data-col=\"4\">0</td>\n                  <td data-row=\"2\" data-col=\"5\">1.9160271</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">1</td>\n                  <td data-row=\"3\" data-col=\"1\">50</td>\n                  <td data-row=\"3\" data-col=\"2\">1982</td>\n                  <td data-row=\"3\" data-col=\"3\">0</td>\n                  <td data-row=\"3\" data-col=\"4\">0</td>\n                  <td data-row=\"3\" data-col=\"5\">2.1400894</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">1</td>\n                  <td data-row=\"4\" data-col=\"1\">50</td>\n                  <td data-row=\"4\" data-col=\"2\">1983</td>\n                  <td data-row=\"4\" data-col=\"3\">0</td>\n                  <td data-row=\"4\" data-col=\"4\">0</td>\n                  <td data-row=\"4\" data-col=\"5\">1.8364579</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">1</td>\n                  <td data-row=\"5\" data-col=\"1\">50</td>\n                  <td data-row=\"5\" data-col=\"2\">1984</td>\n                  <td data-row=\"5\" data-col=\"3\">0</td>\n                  <td data-row=\"5\" data-col=\"4\">0</td>\n                  <td data-row=\"5\" data-col=\"5\">1.7661105</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\">1</td>\n                  <td data-row=\"6\" data-col=\"1\">50</td>\n                  <td data-row=\"6\" data-col=\"2\">1985</td>\n                  <td data-row=\"6\" data-col=\"3\">0</td>\n                  <td data-row=\"6\" data-col=\"4\">0</td>\n                  <td data-row=\"6\" data-col=\"5\">1.2856041</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\nこれを使って横軸に`Year`、縦軸に`y`をとってグラフにします。\n\n詳細を書くと長くなるので、適宜メモを入れました。ご参考まで。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- df |> \n  mutate(\n    # ハイライトする群とそれ以外に分ける\n    group = if_else(treated_1998 == 1, as.factor(firm_id), \"other\"), \n    # 最後の年にだけラベルを付ける\n    group_lab = if_else(treated_1998 == 1 & year == 2015, \n                        paste0(\"Firm \", firm_id), NA_character_)\n  )\n\nggplot(\n  # まずハイライトする群だけプロット\n  df |> filter(treated_1998 == 1), \n  aes(x = year, y = y, group = firm_id)\n) + \n  theme_minimal() + \n  theme(\n    # 罫線を削除\n    panel.grid = element_blank(), \n    # 凡例を削除\n    legend.position = \"none\", \n    # 軸のタイトルと文字のフォントとサイズを調整\n    axis.title = element_text(family = \"Times\", size = 18), \n    axis.text = element_text(family = \"Times\", size = 14)\n  ) + \n  geom_vline(\n    # 垂直線を描写\n    xintercept = seq(1980, 2015, by = 5), \n    color = \"gray91\", \n    linewidth = .6\n  ) + \n  geom_segment(\n    # 水平線を描写\n    # 描写のためにデータを準備\n    data = tibble(y = seq(-2.5, 5.0, by = 2.5), x1 = 1980, x2 = 2015), \n    aes(x = x1, xend = x2, y = y, yend = y), \n    inherit.aes = FALSE, \n    color = \"gray91\", \n    linewidth = .6\n  ) + \n  geom_segment(\n    # 薄い水平線を描写\n    data = tibble(y = seq(-2.0, 4.5, by = .5), x1 = 1980, x2 = 2015), \n    aes(x = x1, xend = x2, y = y, yend = y), \n    inherit.aes = FALSE, \n    color = \"gray97\", \n    linewidth = .3\n  ) + \n  geom_segment(\n    # 縦軸が0のところに水平線を描写\n    data = tibble(y = 0, x1 = 1980, x2 = 2015), \n    aes(x = x1, xend = x2, y = y), \n    inherit.aes = FALSE, \n    linetype = \"dashed\", \n    color = \"gray40\"\n  ) + \n  geom_vline(\n    # 処置年に垂直線を描写\n    xintercept = 1998, \n    linetype = \"dashed\", \n    color = \"gray40\"\n  ) + \n  geom_line(\n    # ハイライトしない群をプロット\n    data = df |> filter(group == \"other\"), \n    color = \"gray75\", \n    alpha = .5\n  ) + \n  geom_line(\n    # ハイライトする群をプロット\n    aes(color = group)\n  ) + \n  geom_text_repel(\n    # ハイライトした線にラベルを追加\n    aes(color = group, label = group_lab), \n    family = \"Times\", \n    hjust = 0, \n    # 2017年の位置にラベルを書く\n    xlim = c(2017, NA), \n    size = 4, \n    segment.linetype = \"dotted\"\n  ) + \n  xlab(\"Year\") + \n  ylab(\"Value\") + \n  scale_x_continuous(\n    expand = c(0, 0), \n    # ラベルが見えるように図の端の2015年より広くとる\n    limits = c(1980, 2021), \n    breaks = seq(1980, 2015, by = 5)\n  ) + \n  scale_y_continuous(\n    expand = c(0, 0), \n    limits = c(-2.5, 5.0), \n    breaks = c(-2.5, 0, 2.5, 5.0)\n  )\n```\n\n::: {.cell-output-display}\n![ggrepelを使ったプロット](index_files/figure-html/fig-ggrepel-1.png){#fig-ggrepel fig-align='center'}\n:::\n:::\n\n\n## おわりに\n\nひとまず僕がよく使うggplotの設定をまとめてみました。ggplotを駆使して、スタイリッシュなプロットを作成していきましょう！\n\n適宜追記する予定ですので、ご参考になれば幸いです。",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}