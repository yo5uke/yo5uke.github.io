{
  "hash": "24c926c9a961320f0635a7e85559e440",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る【使い方】\"\ndescription: |\n  ワイドからロングへ、データを変換します。\ndate: 2024-09-17\ndate-modified: last-modified\ncategories: \n  - R\n  - データ処理\nimage: image/computer_document_spreadsheet.png\neditor: visual\n---\n\n## はじめに\n\n今回は`tidyr`の`pivot_longer()`を使ってワイド形式のデータをロング形式にする方法をご紹介します。\n\n## 使用するパッケージ\n\n`tidyverse`を使用します。`tidyverse`には`dplyr`や`tidyr`をはじめとした諸パッケージが含まれているので、一括でやるのが便利で僕は好きです。\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n## データの準備\n\n今回は適当に作成していきます。\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  Region_id = 1:2, \n  Region = c(\"Region1\", \"Region2\"),\n  income_2000 = c(40000, 35000),\n  income_2005 = c(42000, 37000),\n  income_2010 = c(45000, 39000),\n  population_2000 = c(500000, 450000),\n  population_2005 = c(520000, 460000),\n  population_2010 = c(540000, 470000)\n)\n```\n:::\n\n::: {#tbl-wide .cell tbl-cap='ワイド形式のパネルデータ'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_wz668g6opw61ptzac4yv(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_wz668g6opw61ptzac4yv\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_wz668g6opw61ptzac4yv');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_wz668g6opw61ptzac4yv(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_wz668g6opw61ptzac4yv\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 2, j: 0 }, { i: 2, j: 1 }, { i: 2, j: 2 }, { i: 2, j: 3 }, { i: 2, j: 4 }, { i: 2, j: 5 }, { i: 2, j: 6 }, { i: 2, j: 7 },  ], css_id: 'tinytable_css_pglr6xbmxk5hm1btabag',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 }, { i: 0, j: 3 }, { i: 0, j: 4 }, { i: 0, j: 5 }, { i: 0, j: 6 }, { i: 0, j: 7 },  ], css_id: 'tinytable_css_hslkpqt4b6erftfarr3u',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_wz668g6opw61ptzac4yv(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_pglr6xbmxk5hm1btabag, .table th.tinytable_css_pglr6xbmxk5hm1btabag { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_hslkpqt4b6erftfarr3u, .table th.tinytable_css_hslkpqt4b6erftfarr3u { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_wz668g6opw61ptzac4yv\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">Region_id</th>\n                <th scope=\"col\">Region</th>\n                <th scope=\"col\">income_2000</th>\n                <th scope=\"col\">income_2005</th>\n                <th scope=\"col\">income_2010</th>\n                <th scope=\"col\">population_2000</th>\n                <th scope=\"col\">population_2005</th>\n                <th scope=\"col\">population_2010</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>40000</td>\n                  <td>42000</td>\n                  <td>45000</td>\n                  <td>500000</td>\n                  <td>520000</td>\n                  <td>540000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>35000</td>\n                  <td>37000</td>\n                  <td>39000</td>\n                  <td>450000</td>\n                  <td>460000</td>\n                  <td>470000</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n2つの地域について収入と人口のデータを作りました。\n\nポイントは、主要なデータにおいて`変数名_年`となっていることです。\n\n## `pivot_longer()`を使う\n\n一番ベーシックなやり方は次の通りです。\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long <- df |> \n  pivot_longer(\n    cols = starts_with(c(\"income_\", \"population_\")), \n    names_to = c(\".value\", \"year\"), \n    names_sep = \"_\"\n  )\n```\n:::\n\n`cols`ではロング形式に変換したい変数を指定しています。`dplyr`の`starts_with()`を使えば、複数年分の変数を一括で指定することができます。今回は`income_`と`population_`で始まる変数という意味です。\n\n`names_to`は新しい列名をどうするかを指定しています。`names_sep`で分割の区切りを指定しているのですが（この場合はアンダースコア）、その区切り前なら`.value`（すなわち、もとの名前のまま[^1]）、区切り後は`Year`という列に格納するという意味です。\n\n[^1]: この場合なら`income`や`population`\n\nできたデータフレームは次のようになります。\n\n::: {#tbl-long .cell tbl-cap='ロング形式のパネルデータ'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_k462mfa30ot0e2cy75si(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_k462mfa30ot0e2cy75si\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_k462mfa30ot0e2cy75si');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_k462mfa30ot0e2cy75si(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_k462mfa30ot0e2cy75si\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 }, { i: 0, j: 3 }, { i: 0, j: 4 },  ], css_id: 'tinytable_css_mbo3xrhei2va4akyb2kq',}, \n          { positions: [ { i: 6, j: 0 }, { i: 6, j: 1 }, { i: 6, j: 2 }, { i: 6, j: 3 }, { i: 6, j: 4 },  ], css_id: 'tinytable_css_ln1z8p5zj0at2avlr456',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_k462mfa30ot0e2cy75si(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_mbo3xrhei2va4akyb2kq, .table th.tinytable_css_mbo3xrhei2va4akyb2kq { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_ln1z8p5zj0at2avlr456, .table th.tinytable_css_ln1z8p5zj0at2avlr456 { border-bottom: solid #d3d8dc 0.1em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_k462mfa30ot0e2cy75si\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">Region_id</th>\n                <th scope=\"col\">Region</th>\n                <th scope=\"col\">year</th>\n                <th scope=\"col\">income</th>\n                <th scope=\"col\">population</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>2000</td>\n                  <td>40000</td>\n                  <td>500000</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>2005</td>\n                  <td>42000</td>\n                  <td>520000</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>2010</td>\n                  <td>45000</td>\n                  <td>540000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>2000</td>\n                  <td>35000</td>\n                  <td>450000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>2005</td>\n                  <td>37000</td>\n                  <td>460000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>2010</td>\n                  <td>39000</td>\n                  <td>470000</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\nもし仮に、ロング形式に変換したい変数がすべてアンダースコアで区切られている場合[^2]、`cols = contain(\"_\")`とすれば、変数が多くても一気に指定することができます。ただ今回の場合、`Region_id`がありますからうまくいきませんね。使える場面は限られそうです。\n\n[^2]: 逆に言うと、ほかの変数はアンダースコアが用いられていない場合\n\n## もしくは\n\n今は具体的に`income_`などと指定しましたが、変数がたくさんあると手動で書くのも大変かと思います。もし何列目を変えたいのかわかっていれば、列の番号で指定することも可能です。\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long <- df |> \n  pivot_longer(\n    cols = 3:8, \n    names_to = c(\".value\", \"year\"), \n    names_sep = \"_\"\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_zx9ui4f363fjyaw9kynd(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_zx9ui4f363fjyaw9kynd\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_zx9ui4f363fjyaw9kynd');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_zx9ui4f363fjyaw9kynd(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_zx9ui4f363fjyaw9kynd\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 6, j: 0 }, { i: 6, j: 1 }, { i: 6, j: 2 }, { i: 6, j: 3 }, { i: 6, j: 4 },  ], css_id: 'tinytable_css_lyvyssardpl95mu90n83',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 }, { i: 0, j: 3 }, { i: 0, j: 4 },  ], css_id: 'tinytable_css_5bdpl5n6yannbltqrolq',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_zx9ui4f363fjyaw9kynd(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_lyvyssardpl95mu90n83, .table th.tinytable_css_lyvyssardpl95mu90n83 { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_5bdpl5n6yannbltqrolq, .table th.tinytable_css_5bdpl5n6yannbltqrolq { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_zx9ui4f363fjyaw9kynd\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">Region_id</th>\n                <th scope=\"col\">Region</th>\n                <th scope=\"col\">year</th>\n                <th scope=\"col\">income</th>\n                <th scope=\"col\">population</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>2000</td>\n                  <td>40000</td>\n                  <td>500000</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>2005</td>\n                  <td>42000</td>\n                  <td>520000</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>2010</td>\n                  <td>45000</td>\n                  <td>540000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>2000</td>\n                  <td>35000</td>\n                  <td>450000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>2005</td>\n                  <td>37000</td>\n                  <td>460000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>2010</td>\n                  <td>39000</td>\n                  <td>470000</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n`cols = 3:8`で3～8列目を対象に変換するということが可能になっています。\n\n## アンダースコアが2つ以上ある場合\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  id = 1, \n  income_hoge_2020 = 100, \n  income_hoge_2021 = 110, \n  population_fuga_2020 = 1000, \n  population_fuga_2021 = 1050\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_s7mvq6617fljl2ywr2p6(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_s7mvq6617fljl2ywr2p6\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_s7mvq6617fljl2ywr2p6');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_s7mvq6617fljl2ywr2p6(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_s7mvq6617fljl2ywr2p6\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 1, j: 0 }, { i: 1, j: 1 }, { i: 1, j: 2 }, { i: 1, j: 3 }, { i: 1, j: 4 },  ], css_id: 'tinytable_css_y05qkscxs8eroo6a0ap8',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 }, { i: 0, j: 3 }, { i: 0, j: 4 },  ], css_id: 'tinytable_css_2tbiys2y2a5zcoa6rvep',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_s7mvq6617fljl2ywr2p6(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_y05qkscxs8eroo6a0ap8, .table th.tinytable_css_y05qkscxs8eroo6a0ap8 { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_2tbiys2y2a5zcoa6rvep, .table th.tinytable_css_2tbiys2y2a5zcoa6rvep { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_s7mvq6617fljl2ywr2p6\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">id</th>\n                <th scope=\"col\">income_hoge_2020</th>\n                <th scope=\"col\">income_hoge_2021</th>\n                <th scope=\"col\">population_fuga_2020</th>\n                <th scope=\"col\">population_fuga_2021</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>100</td>\n                  <td>110</td>\n                  <td>1000</td>\n                  <td>1050</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\nこんな感じでアンダースコアが2つ以上ある場合に先ほどのコードを使うと、意図せぬ分割が起きてしまう可能性があります。そうした場合は正規表現を用いて指定することで対処可能です。\n\nここでは変数の末が`hoge_fuga_2025`のように`なんちゃら_年`のような形になっていることを仮定します。\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long <- df |> \n  pivot_longer(\n    cols = 2:5, \n    names_to = c(\".value\", \"year\"), \n    names_pattern = \"^(.*)_(\\\\d{4})$\"\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_yiu120696ox445kmxbf5(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_yiu120696ox445kmxbf5\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_yiu120696ox445kmxbf5');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_yiu120696ox445kmxbf5(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_yiu120696ox445kmxbf5\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 }, { i: 0, j: 3 },  ], css_id: 'tinytable_css_vr7w5j4vnc1c4zr6pr6w',}, \n          { positions: [ { i: 2, j: 0 }, { i: 2, j: 1 }, { i: 2, j: 2 }, { i: 2, j: 3 },  ], css_id: 'tinytable_css_9an94r1ke9l91oom98mh',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_yiu120696ox445kmxbf5(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_vr7w5j4vnc1c4zr6pr6w, .table th.tinytable_css_vr7w5j4vnc1c4zr6pr6w { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_9an94r1ke9l91oom98mh, .table th.tinytable_css_9an94r1ke9l91oom98mh { border-bottom: solid #d3d8dc 0.1em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_yiu120696ox445kmxbf5\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">id</th>\n                <th scope=\"col\">year</th>\n                <th scope=\"col\">income_hoge</th>\n                <th scope=\"col\">population_fuga</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>2020</td>\n                  <td>100</td>\n                  <td>1000</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>2021</td>\n                  <td>110</td>\n                  <td>1050</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\nこのように`names_pattern = \"^(.*)_(\\d{4})$\"`とすること1つ目のアンダースコアを残したまま変換することが可能です。正規表現はややこしいので、このおまじないで最後のアンダースコアを境に分離できるんだ、くらいの解釈でよいと思います。\n\nあまりないかもしれませんが、2つのアンダースコアで挟まれた部分が要らない場合は\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long <- df |> \n  pivot_longer(\n    cols = 2:5, \n    names_to = c(\".value\", \"year\"), \n    names_pattern = \"^(.*)_.*_(\\\\d{4})$\"\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_8tmhleij26wkm0tvkzf4(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_8tmhleij26wkm0tvkzf4\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_8tmhleij26wkm0tvkzf4');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_8tmhleij26wkm0tvkzf4(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_8tmhleij26wkm0tvkzf4\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 2, j: 0 }, { i: 2, j: 1 }, { i: 2, j: 2 }, { i: 2, j: 3 },  ], css_id: 'tinytable_css_t6xzvkwn656ocfh2ll5s',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 }, { i: 0, j: 3 },  ], css_id: 'tinytable_css_cthhywrfg4frvt6qqx1r',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_8tmhleij26wkm0tvkzf4(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_t6xzvkwn656ocfh2ll5s, .table th.tinytable_css_t6xzvkwn656ocfh2ll5s { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_cthhywrfg4frvt6qqx1r, .table th.tinytable_css_cthhywrfg4frvt6qqx1r { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_8tmhleij26wkm0tvkzf4\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">id</th>\n                <th scope=\"col\">year</th>\n                <th scope=\"col\">income</th>\n                <th scope=\"col\">population</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>2020</td>\n                  <td>100</td>\n                  <td>1000</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>2021</td>\n                  <td>110</td>\n                  <td>1050</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\nとすれば省くこともできます。正規表現が少し長くなってるのが違いです。\n\n## おまけ\n\nこの方法でロング形式にしたデータは`year`がキャラクター型になっているので、`mutate(year = as.integer(year))`等でクラスを変えておくことをお忘れなく…。\n\n`income`などの値はnumeric型になっています。\n\n## おわりに\n\n今回はワイド形式のデータフレームをロング形式に変換する方法をご紹介しました。\n\n僕自身`pivot_longer()`を使う時いつも何を指定すればいいんだっけ？となりがちです😅\n\nご参考まで。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}