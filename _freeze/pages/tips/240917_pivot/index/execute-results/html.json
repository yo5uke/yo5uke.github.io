{
  "hash": "2207a7ff9ab80afacba89a0a43250ae8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"【データハンドリング】pivot_longer()を使ってロング形式のパネルデータを作る\"\ndescription: |\n  ワイドからロングへ、データを変換します。\ndate: 2024-09-17\ncategories: \n  - R\n  - データ処理\nimage: image/computer_document_spreadsheet.png\neditor: visual\n---\n\n\n\n## はじめに\n\n今回は`tidyr`の`pivot_longer()`を使ってワイド形式のデータをロング形式にする方法をご紹介します。\n\n## 使用するパッケージ\n\n`tidyverse`を使用します。`tidyverse`には`dplyr`や`tidyr`をはじめとした諸パッケージが含まれているので、一括でやるのが便利で僕は好きです。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## データの準備\n\n今回は適当に作成していきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  Region_id = 1:2, \n  Region = c(\"Region1\", \"Region2\"),\n  Income_2000 = c(40000, 35000),\n  Income_2005 = c(42000, 37000),\n  Income_2010 = c(45000, 39000),\n  Population_2000 = c(500000, 450000),\n  Population_2005 = c(520000, 460000),\n  Population_2010 = c(540000, 470000)\n)\n```\n:::\n\n::: {#tbl-wide .cell tbl-cap='ワイド形式のパネルデータ'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_t0r9qvu9ezvfqqeeu9jo(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_t0r9qvu9ezvfqqeeu9jo\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_t0r9qvu9ezvfqqeeu9jo');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_t0r9qvu9ezvfqqeeu9jo(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_t0r9qvu9ezvfqqeeu9jo\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 }, { i: 0, j: 3 }, { i: 0, j: 4 }, { i: 0, j: 5 }, { i: 0, j: 6 }, { i: 0, j: 7 },  ], css_id: 'tinytable_css_v3gy49ptphsyyck56bm3',}, \n          { positions: [ { i: 2, j: 0 }, { i: 2, j: 1 }, { i: 2, j: 2 }, { i: 2, j: 3 }, { i: 2, j: 4 }, { i: 2, j: 5 }, { i: 2, j: 6 }, { i: 2, j: 7 },  ], css_id: 'tinytable_css_n2coclsx7nkeovu9v5j1',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_t0r9qvu9ezvfqqeeu9jo(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_v3gy49ptphsyyck56bm3, .table th.tinytable_css_v3gy49ptphsyyck56bm3 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_n2coclsx7nkeovu9v5j1, .table th.tinytable_css_n2coclsx7nkeovu9v5j1 { border-bottom: solid #d3d8dc 0.1em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_t0r9qvu9ezvfqqeeu9jo\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">Region_id</th>\n                <th scope=\"col\">Region</th>\n                <th scope=\"col\">Income_2000</th>\n                <th scope=\"col\">Income_2005</th>\n                <th scope=\"col\">Income_2010</th>\n                <th scope=\"col\">Population_2000</th>\n                <th scope=\"col\">Population_2005</th>\n                <th scope=\"col\">Population_2010</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>40000</td>\n                  <td>42000</td>\n                  <td>45000</td>\n                  <td>500000</td>\n                  <td>520000</td>\n                  <td>540000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>35000</td>\n                  <td>37000</td>\n                  <td>39000</td>\n                  <td>450000</td>\n                  <td>460000</td>\n                  <td>470000</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n2つの地域について収入と人口のデータを作りました。\n\nポイントは、主要なデータにおいて`変数名_年`となっていることです。\n\n## `pivot_longer()`を使う\n\n一番ベーシックなやり方は次の通りです。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long <- df |> \n  pivot_longer(\n    cols = starts_with(c(\"Income_\", \"Population_\")), \n    names_to = c(\".value\", \"Year\"), \n    names_sep = \"_\"\n  )\n```\n:::\n\n\n\n`cols`ではロング形式に変換したい変数を指定しています。`dplyr`の`starts_with()`を使えば、複数年分の変数を一括で指定することができます。今回は`Income_`と`Population_`で始まる変数という意味です。\n\n`names_to`は新しい列名をどうするかを指定しています。`names_sep`で分割の区切りを指定しているのですが（この場合はアンダースコア）、その区切り前なら`.value`（すなわち、もとの名前のまま[^1]）、区切り後は`Year`という列に格納するという意味です。\n\n[^1]: この場合なら`Income`や`Population`\n\nできたデータフレームは次のようになります。\n\n\n\n::: {#tbl-long .cell tbl-cap='ロング形式のパネルデータ'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_u02zuu6qv807o7oik4fc(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_u02zuu6qv807o7oik4fc\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_u02zuu6qv807o7oik4fc');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_u02zuu6qv807o7oik4fc(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_u02zuu6qv807o7oik4fc\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 6, j: 0 }, { i: 6, j: 1 }, { i: 6, j: 2 }, { i: 6, j: 3 }, { i: 6, j: 4 },  ], css_id: 'tinytable_css_fycm0tj6mqxnksjem4a5',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 }, { i: 0, j: 3 }, { i: 0, j: 4 },  ], css_id: 'tinytable_css_fgqbic0r2bwfshtcsv97',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_u02zuu6qv807o7oik4fc(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_fycm0tj6mqxnksjem4a5, .table th.tinytable_css_fycm0tj6mqxnksjem4a5 { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_fgqbic0r2bwfshtcsv97, .table th.tinytable_css_fgqbic0r2bwfshtcsv97 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_u02zuu6qv807o7oik4fc\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">Region_id</th>\n                <th scope=\"col\">Region</th>\n                <th scope=\"col\">Year</th>\n                <th scope=\"col\">Income</th>\n                <th scope=\"col\">Population</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>2000</td>\n                  <td>40000</td>\n                  <td>500000</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>2005</td>\n                  <td>42000</td>\n                  <td>520000</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>Region1</td>\n                  <td>2010</td>\n                  <td>45000</td>\n                  <td>540000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>2000</td>\n                  <td>35000</td>\n                  <td>450000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>2005</td>\n                  <td>37000</td>\n                  <td>460000</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Region2</td>\n                  <td>2010</td>\n                  <td>39000</td>\n                  <td>470000</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\nもし仮に、ロング形式に変換したい変数がすべてアンダースコアで区切られている場合[^2]、`cols = contain(\"_\")`とすれば、変数が多くても一気に指定することができます。ただ今回の場合、`Region_id`がありますからうまくいきませんね。使える場面は限られそうです。\n\n[^2]: 逆に言うと、ほかの変数はアンダースコアが用いられていない場合\n\n## おわりに\n\n今回はワイド形式のデータフレームをロング形式に変換する方法をご紹介しました。\n\n僕自身`pivot_longer()`を使う時いつも何を指定すればいいんだっけ？となるので、備忘録的な意味合いが強いです😅\n\nご参考まで。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}