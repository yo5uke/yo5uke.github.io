{
  "hash": "8af9b5d7fb351c632eb570c4470681f6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"【R Markdown】相互参照を使いこなす【Quarto】\"\ndescription: |\n  図や表に自動で番号を振りたい！\ndate: 2024-05-09\ndate-modified: last-modified\nformat: html\ncategories:\n  - R Markdown\n  - Quarto\n  - R\n---\n\n\n\n## はじめに\n\nR Markdown や Quarto で文書を書いているとき、相互参照をどうしようと思ったことはありませんか？僕はありました。\n\n手書きで「図1：Hogehoge」と書くとなんだかスマートさに欠けるし、前に図を挿入したくなった時に数字を書き換えなければならず不便ですよね。\n\n今回は R Markdown ＆ Quarto における相互参照の使い方をご紹介します。\n\nR Markdown と Quarto で設定が異なりますので、それぞれ見ていきましょう。\n\n## R Markdown\n\n### YAML ヘッダー\n\nまず、新しいファイルを開くと出てくる `---` で囲まれた部分を、YAML ヘッダーと呼びます。\n\n![R Markdown ファイルを開くとこれが出てきますよね](image/yaml-header.png)\n\nR Markdown はデフォルトでは相互参照が使えません（私調べ）（そんな馬鹿な）。そのため、パッケージを使って設定します。\n\nデフォルトの設定はこのような感じになっています。\n\n```{.yml filename=\"YAML ヘッダー\"}\n---\ntitle: \"Untitled\"\nauthor: \"Yosuke Abe\"\ndate: \"2024-12-17\"\noutput: html_document\n---\n```\n\nこれを `bookdown` パッケージを用いて変更します。\n\nまずはインストール。\n\n```{.r filename=\"R\"}\ninstall.packages(\"bookdown\")\n```\n\n次にヘッダーを次のように変更。\n\n```{.yml filename=\"YAML ヘッダー\"}\n---\ntitle: \"Untitled\"\nauthor: \"Yosuke Abe\"\ndate: \"2024-12-17\"\noutput:\n  bookdown::html_document2: default\n---\n```\n\nこれで準備が整いました。\n\n### 相互参照\n\nでは何かプロットして、それを参照してみましょう。例えば次の図をプロットしたいとします。\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\nこれを参照するために R Markdown 内で入力すると次のようになります。\n\n````{.markdown filename=\"R Markdown\"}\n```{{r pressure, fig.cap=\"図のキャプションです。\"}}\nplot(pressure)\n```\n````\n\nここでのポイントは、`{r pressure}` の部分です。デフォルトでは `{r}` だけだと思いますが、スペースを空けることでチャンク^[` ``` ` で囲まれているコード部分]に名前を付けることができ、このチャンク名を使って参照します。また、カンマで区切った後の `fig.cap` は図のキャプションです。\n\n文中で参照したいときは、次のように書きます。\n\n```{.markdown filename=\"R Markdown\"}\n表 \\@ref(fig:pressure) を参照する。\n```\n\nすると…\n\n![](image/cross-reference.png)\n\nこのように、文中での参照ができます。前に新たに図が入っても、自動で番号を振り直してくれます。\n\n::: {.callout-tip collapse=\"true\"}\n## 図以外の場合\n\nもちろん、表や数式の場合にも使えます。\n\n- 表の場合\n\n    - 様々な表の関数がありますが、R Markdown では基本的に関数内でキャプションを付けます。\n    \n    - 図の場合とは違い、参照の際には `tab:`を使います。\n\n````{.markdown filename=\"Quarto\"}\n```{{r mtcars}}\nknitr::kable(mtcars[1:5, 1:5], caption = \"mtcars データ\")\n```\n\n表 \\@ref(tab:mtcars) を参照する。\n````\n\n- 数式の場合\n\n    - $\\LaTeX$ 形式で書きます。HTML 出力でも、この書き方が可能です。\n    \n    - `$` で挟む方法もありますが、これだと参照ができません^[する方法をご存じの方がいらっしゃいましたら、是非コメントください。]。\n    \n    - 参照の際には、`eq:` を使います。\n    \n```{.markdown filename=\"Quarto\"}\n\\begin{equation}\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n} (\\#eq:mean)\n\\end{equation}\n\n式 \\@ref(eq:mean) を参照する。\n```\n\n以上のやり方で表や数式の参照にも対応しています。\n\n:::\n\n## Quarto\n\nQuarto もほとんど同じ方法で参照が可能ですが、書き方はもっとシンプルです。\n\n### YAML ヘッダー\n\n```{.yml filename=\"YAML ヘッダー\"}\n---\ntitle: \"Untitled\"\nformat: html\n---\n```\n\nデフォルトでは著者も日付もないのでめちゃくちゃシンプルですね^[もちろん `author: \"著者\"` や `date: 2024-05-09` などで入力できますよ。]。\n\nQuarto では、相互参照のためにこれをいじる必要はありません（素晴らしい！）。\n\nその代わり、チャンクの方をいろいろいじっていきます。\n\n### チャンクオプション\n\n改めてになりますが、` ``` ` で囲まれたコード部分をチャンクと言います。\n\nR Markdown では、`{r}`の中にチャンク名を書きましたが、Quarto ではチャンクの中に書いていきます^[R Markdown と同様の書き方もできるのですが、私は今回紹介している方法の方がすっきりしていて好みです。]。\n\n````{.markdown filename=\"R Markdown\"}\n```{{r}}\n#| label: fig-pressure\n#| fig-cap: \"図のキャプションです。\"\n\nplot(pressure)\n```\n````\n\nポイントは以下の2つです。\n\n1. `#|` の後ろにオプションを指定して書くことができます。\n\n2. `label` は `fig-` で始めないと参照できません。\n\n### 相互参照\n\n文中では以下のように書いていきます。\n\n```{.markdown filename=\"Quarto\"}\n@fig-pressure を参照する。\n```\n\n`@` だけだなんて、なんてシンプルなのでしょう。以下のように出力されます。\n\n![](image/cross-reference-quarto.png)\n\nとても簡単に引用できました。よく見ると、`図 @fig-pressure` とは書かずとも `Figure 1` となっています。図～とは書かなくてよいということですね。英語になっているのが気になる方は、[後のセクション](#sec-lang-setting)で解説しているのでご覧ください。\n\n::: {.callout-tip collapse=\"true\"}\n## 図以外の場合\n\nもちろん、表や数式の場合にも使えます。\n\n- 表の場合\n\n    - Quarto では、表もチャンクオプションを使ってキャプションがつけられます。\n    \n    - R Markdown では、参照の際に `tab:` を使っていたのに対し、Quarto では `tbl-` となります。ややこしい！\n\n````{.markdown filename=\"Quarto\"}\n```{{r}}\n#| label: tbl-mtcars\n#| tbl-cap: \"mtcars データ\"\n\nknitr::kable(mtcars[1:5, 1:5])\n```\n\n@tbl-mtcars を参照する。\n````\n\n- 数式の場合\n\n    - $\\LaTeX$ 形式でも書けますが、`$$` で囲む方法が便利です。\n    \n    - 数式自体は $\\LaTeX$ 表記です。\n    \n    - 自分で打ってみるとわかりますが、プレビューできるのもいい点です。\n\n```{.markdown filename=\"Quarto\"}\n$$\n\\bar{X} = \\frac{\\sum_{i=1}^n X_i}{n}\n$$ {#eq-mean}\n\n@eq-mean を参照する。\n```\n\n以上のやり方で表や数式も参照できます。\n\n:::\n\n## 言語の設定について {#sec-lang-setting}\n\n特に Quarto で、`@fig-` で参照すると `Figure ~` となってしまう問題について、気になる方は次の設定で修正できます。\n\n```{.yml filename=\"YAML ヘッダー\"}\n---\ntitle: \"Untitled\"\nformat: html\nlang: ja\n---\n```\n\n`lang: ja` を追加しました。これが日本語設定です。\n\nこれを設定したうえで実行すると、\n\n![](image/cross-reference-quarto-ja.png)\n\n無事日本語にできました。表や式もこれでいけます。\n\n## おわりに\n\n今回は R Markdown と Quarto で相互参照を使う方法をご紹介しました。\n\n相互参照が簡単にできるだけで、かなり Markdown を使う魅力が増すと思います。修士学生の私としては、Quarto で修論を書き上げるのが目標です^^\n\nご参考になれば幸いです。それでは。\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}