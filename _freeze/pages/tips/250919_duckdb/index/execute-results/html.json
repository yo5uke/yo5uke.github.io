{
  "hash": "6c2312cc6b2f376af33e075be65ebb6a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"DuckDBをRで使う\"\ndescription: |\n  R上でデータベース操作を行うために、DuckDBを利用する方法についてまとめます。\ndate: 2025-09-19\ncategories:\n  - R\n  - SQL\n  - データ処理\n---\n\n## はじめに\n\nRで大量のデータを扱う際、メモリ制限やパフォーマンスの問題に直面することがあります。そんなとき、軽量で高速な組み込み型のデータベースであるDuckDBを利用することで、効率的にデータ操作が可能になります。本記事では、RでDuckDBを使用する方法について解説します。\n\n## DuckDBとは\n\nDuckDBは、組み込み型のSQLデータベースであり、特に分析ワークロードに最適化されています。SQLiteのように軽量でありながら、大規模なデータセットを効率的に処理できる点が特徴です。DuckDBは、列指向ストレージを採用しており、分析クエリのパフォーマンスが向上します。\n\nちなみに組み込み型データベースとは、アプリケーションに組み込まれて動作するデータベースのことを指します。サーバー型のデータベースとは異なり、外部のデータベースサーバーを必要とせず、アプリケーション内で直接データベース操作が可能です。すなわちR上で完結するということです。\n\n列指向については、ブログでparquetを扱った際に少し触れています。以下もご覧ください。簡潔に言うと、列指向データベースは、データを列ごとに格納するため、特定の列に対するクエリが高速に処理されるという特徴があります。\n\n:::{.callout-tip appearance=\"minimal\"}\n[Parquetファイルについて調べてみる](../../blog/250728_parquet/index.qmd)\n:::\n\n## DuckDBのインストール\n\nDuckDBをRで使用するには、`duckdb`パッケージをインストールします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"duckdb\")\n```\n:::\n\n\nもしくは\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"duckdb\")\n```\n:::\n\n\n## DuckDBの基本的な使い方\n\n### データベースへの接続\n\nまずは、DuckDBデータベースに接続します。以下のコードでは、メモリ内データベースに接続していますが、ファイルベースのデータベースを使用することも可能です。\n\nメモリ内データベースはRセッションが終了すると消えてしまいますが、ファイルベースのデータベースは永続的に保存されます。\n\nファイルベースのデータベースではディスクにデータが保存されるため、Rセッションを終了してもデータが保持されます。一方、メモリ内データベースはRセッションが終了するとデータが失われてしまいますが、読み書きの速度が速いという利点があります。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(duckdb)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# メモリ内データベースに接続\ncon <- dbConnect(duckdb(), dbdir = \":memory:\")\n```\n:::\n\n\nファイルベースのデータベースに接続する場合は、以下のようにします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ファイルベースのデータベースに接続\ncon <- dbConnect(duckdb(), dbdir = here::here(\"data/iris.duckdb\"))\n```\n:::\n\n\nこの方法だと、`data`フォルダに`iris.duckdb`という名前でデータベースファイルが作成されます。`.duckdb`ファイルを置くパスは自由に変更してください。\n\n### データの読み込み\n\n#### SQLを使う場合\n\nDuckDBは様々なデータ形式をサポートしています。ここでは、CSVファイルを読み込む例を示します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CSVファイルを読み込む\ndbExecute(con, \"CREATE TABLE iris AS SELECT * FROM read_csv('data/iris.csv')\")\n```\n:::\n\n\nさて、ここで突然SQL文が出てきましたが、なんとなく単語を見てもらえればわかる通り、`read_csv('data/iris.csv')`から全ての列を選択（`*`は全ての列を意味します）して、`iris`という名前のテーブルを作成（`CREATE TABLE iris AS`）しています。\n\nちなみに、僕はSQLはあまりわかりません。いちいち調べないと先ほどのコードも書けないレベルなのですが、この方法をとるメリットを先に説明しておきます。\n\nこの方法のメリットは、**Rに一度もデータを読み込まずに、DuckDBが直接CSVファイルを処理できる**点です。\nそのため、大規模なCSVでもメモリを無駄に消費せず、高速にテーブルを作成できます。\n\nまた、`CREATE TABLE ... AS SELECT ...`という形で書けば、SQLの標準的な構文で柔軟に前処理（列の選択やフィルタリングなど）を行いながら、テーブルを作成できます。\n\n#### Rを使う場合\n\nとはいえ新しくSQLを覚えるのは面倒だしRで書けたら嬉しいという僕なので、ここでRを使うことの意義を示します。\n\nそれは、今提示したコードを皆さんおなじみ`dplyr`を使って実行できる、ということです。データベースはなんだかよくわからないけれども、`dplyr`が使えるならうれしいですよね。\n\nただ、先ほどのメリットの裏返しで、一度R上でデータを読み込んでからデータベースに送り込むことになるので、メモリを多く消費することと、データが大きいと処理速度が遅くなることには注意してください。\n\n`dplyr`を使って書いたコードをSQLに変換して実行してくれるのです。その場合のコードを見てみましょう。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # `dplyr`だけでもOKです。\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_data <- read_csv(here::here(\"data/iris.csv\"))\nduckdb_register(con, iris, \"iris_data\")\n```\n:::\n\n\nまずはデータベースに入れたいデータを`read_csv()`で読み込みます。ここでは`data`フォルダにある`iris.csv`を読み込んでいます。\n\n続いて`duckdb_register()`を使って、`iris_data`を`iris`という名前でデータベースに登録しています。これでデータベース上に`iris`テーブルが作成されました。\n\nちなみにファイルベースのデータベースを使いたい場合は、`duckdb_register()`の代わりに`dbWriteTable()`を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbWriteTable(con, \"iris\", iris_data)\n```\n:::\n\n\nこれで`.duckdb`ファイルに`iris`テーブルが保存されます。\n\nちなみに、データベースにはテーブルを複数作成できるので、`iris`以外のデータもも好きな名前でテーブルを追加できます^[とはいえ、プロジェクトごとなどで`.duckdb`は分けた方が良いとは思います。]。\n\n### データの操作\n\nところで、データベースを使うメリットのひとつに、遅延評価（lazy evaluation） があります。これは、実際に結果を取り出すまでSQLが実行されない仕組みのことです。\n\n通常のデータ処理は  \nデータの読み込み → 書いた順に処理を実行 → 結果を返す  \nという流れですが、遅延評価では  \nデータの読み込み → 書いた順に処理を記録 → 最後にまとめて実行（SQL発行） → 結果を返す  \nという流れになります。\n\nこのおかげで、大規模なデータセットでも不要な計算が省かれ、効率的に処理できます。\n\n#### SQLを使う場合\n\nSQLを使ってデータを操作する場合、以下のようにクエリを実行します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# データをクエリする\nresult <- dbGetQuery(con, \"SELECT * FROM iris WHERE Species = 'setosa'\")\n```\n:::\n\n\nこの例では、`iris`テーブルから`Species`が`setosa`の行を選択しています。\n\n#### `dplyr`を使う場合\n\n`dplyr`を使ってデータを操作する場合、以下のように記述します（おなじみの感じですね）。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- tbl(con, \"iris\") |> \n  filter(Species == \"setosa\") |> \n  collect()\n```\n:::\n\n\n`tbl(con, \"iris\")`でデータベース上の`iris`テーブルを参照し、`filter()`で条件を指定しています。最後に`collect()`を使って結果をRのデータフレームとして取得します。\n\nここで重要なのは、**`collect()`を呼び出すまではSQLは実行されない**という点です。`filter()`などの処理を追加するたびに、裏でSQLクエリが少しずつ組み立てられていき、最後に`collect()`を呼び出した時点でまとめて実行されます。\n\nつまり、`collect()`を呼び出すまではデータはRに読み込まれず、操作はあくまで「SQLを組み立てているだけ」です。`collect()`を実行した瞬間に初めてSQLが発行され、結果がRにデータフレームとして取り込まれます。\n\nデータベースになじみがない方は違和感があるかもしれませんが（かく言う僕もですが）、`con`自体はデータそのものではなく、DuckDBデータベースへの接続（コネクション）を表すオブジェクトです。\n\n普段のRではデータフレームを直接操作しますが、ここではまず接続オブジェクト`con`を通して「このデータベースの中にあるテーブルを参照しますよ」という指示を出します。\n\nつまり、`con`はデータの実体ではなく、**「データベースへの窓口」や「リモコン」**のようなものと考えると分かりやすいです（ChatGPT曰く）。\n\nとりあえず、`collect()`の前までは通常のデータ処理と同じように`dplyr`の関数を使って操作できるので、慣れ親しんだ方法でデータを扱うことができます。\n\n### データベースからの切断\n\nデータベースの操作が終わったら、接続を切断します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con, shutdown = TRUE)\n```\n:::\n\n\n`shutdown = TRUE`を指定すると、メモリ内データベースの場合はデータが消去され、ファイルベースのデータベースの場合は接続が閉じられます。\n\n## まとめ\n\n今回は、RでDuckDBを使用する方法についてまとめました。\n\nDuckDBは軽量で高速な組み込み型データベースであり、大規模なデータセットを効率的に処理できます。SQLを直接使う方法と、`dplyr`を使う方法の両方が利用可能であり、遅延評価によりパフォーマンスが向上します。\n\n最近は仕事ででかいデータを扱うことが増えてきたので、今後もDuckDBを活用していきたいと思います（というか活用し始めています）。ぜひ試しあれ。\n\n## 参考\n\n:::{.callout-tip appearance=\"minimal\"}\n[R Client - DuckDB](https://duckdb.org/docs/stable/clients/r.html)\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}