{
  "hash": "a781edf5a006588cf37cf2abc41ec78b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"【スクレイピング】[rvest]{.fira-code}を使ってe-Statからファイルを取得する\"\ndescription: |\n  Rのrvestパッケージを使って、e-Statの境界データを取得していきます！\ndate: 2025-03-19\ndate-modified: last-modified\ncategories:\n  - R\n  - データ処理\nimage: image/html_view.png\neditor: visual\n---\n\n## はじめに\n\n今回はRでスクレイピングを行っていきます。`rvest`パッケージを使ったスクレイピング自体は他のウェブサイトでも多数紹介されているのですが、今回JavaScriptが使われているページ（特にe-Stat）にも対応した方法をまとめます。これを行うには既に紹介されている方法からもう一工夫する必要があり、それも少々面倒です。\n\nこれまで僕はブラウザ拡張機能の「DownThemAll!」[^1]を使って無理くり実行していたのですが、この手の方法は再現が難しいし手間という欠点があるので、できればR上でコードとして残しておきたいと思っていました。そんなところ友人からあるページを紹介してもらい、抱えていた課題[^2]が解決できそうでしたので、これを機にまとめていきます。\n\n[^1]: Chromeではサービスが終了したみたいです。Firefoxではまだあるようです。\n\n[^2]: 先述のJavaScriptが使われているページで実行できないという課題\n\n紹介してもらったページはこちらです↓\n\n::: {.callout-tip appearance=\"minimal\"}\n[rvestで動的サイトをスクレイピングする（Seleniumを使わずに）](https://uchidamizuki.quarto.pub/blog/posts/2024/02/scraping-dynamic-sites-with-rvest.html)\n:::\n\nまた、Google Chromeを使用するので、インストールしていない方はしておいてください。\n\n## 使用するパッケージ\n\n使用するパッケージは以下の通りです。Rプロジェクトを使うなり`setwd()`を使うなりでワーキングディレクトリを現在のディレクトリに設定しておいてください。プロジェクトについては[こちら](../240515_rproj/index.html)。\n\nついでに、保存するディレクトリ（`data`フォルダ内の`shpfiles`）をあらかじめ指定しておきます。なければ作成する関数もつけておきます。\n\n``` r\nlibrary(rvest)\nlibrary(here)\n\nsave_dir <- here(\"data/shpfiles\")\n# ダウンロード用のフォルダがなければ作成する\nif (!dir.exists(save_dir)) {\n  dir.create(save_dir)\n}\n```\n\n## ファイルをダウンロードするページ\n\n今回ファイルを取得していくのは、e-Statの「地図」→「境界データダウンロード」→「3次メッシュ」→「世界測地系平面直角座標系・Shapefile」のページです。\n\n<https://www.e-stat.go.jp/gis/statmap-search?page=1&type=2&aggregateUnitForBoundary=S&coordsys=2&format=shape>\n\nメッシュいうのは国土を例えば1km×1kmの正方形で区切ったものをいい、その中の人口等のデータを扱うことができるようになります。このあたりの詳細は以下の書籍が非常にわかりやすいのでおすすめです。RでGISを扱う方法も学べます。\n\n::: {.callout-tip appearance=\"minimal\"}\n[事例で学ぶ経済・政策分析のためのGIS入門: QGIS,R,GeoDa対応](https://www.amazon.co.jp/%E4%BA%8B%E4%BE%8B%E3%81%A7%E5%AD%A6%E3%81%B6%E7%B5%8C%E6%B8%88%E3%83%BB%E6%94%BF%E7%AD%96%E5%88%86%E6%9E%90%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AEGIS%E5%85%A5%E9%96%80-QGIS-GeoDa%E5%AF%BE%E5%BF%9C-%E6%B2%B3%E7%AB%AF-%E7%91%9E%E8%B2%B4/dp/4772242309)\n:::\n\n## ページを取得\n\n基本的には`read_html()`関数で読み込むことができるのですが、JavaScriptを使用しているような動的なページには対応していません。そこで使用するのが`read_html_live()`関数です。これらの関数の仕組み自体は冒頭で紹介したページがわかりやすいのでそちらを読んでみてください。\n\n先ほどのURLを読み込んでみましょう。\n\n``` r\nhtml <- read_html_live(\"https://www.e-stat.go.jp/gis/statmap-search?page=1&type=2&aggregateUnitForBoundary=S&coordsys=2&format=shape\")\n```\n\n## ファイルのリンクを取得\n\n次にいよいよファイルを取得していきます。僕もHTMLに詳しいわけではないので詳細は書きませんが、`a`タグというのがリンクを生成するためのもので、その中に`href`という属性があります。例えば\n\n``` html\n<a class=\"stat-dl_icon stat-statistics-table_icon\" tabindex=\"40\" href=\"/gis/statmap-search/data?dlserveyId=S&amp;code=3036&amp;coordSys=2&amp;format=shape&amp;downloadType=5\">\n<span class=\"stat-dl_text\">世界測地系平面直角座標系・Shapefile</span>\n</a>\n```\n\nというようになっており、`a`と`/a`で囲まれている間に`href`やその他の属性が含まれていることがわかります。\n\n::: {.callout-tip collapse=\"true\"}\n## どうやって探す？\n\nこのHTMLはどうやって探せばよいのでしょうか。実はブラウザ上から簡単に見ることができます。\n\nブラウザ上で任意のページを開いたら、`Ctrl` + `Shift` + `I`を同時に入力します。もしくはブラウザ右上の点々から「その他のツール」→「デベロッパー ツール」でも開けます。\n\n![](image/developer_tool.png){fig-align=\"center\" width=\"80%\"}\n\nすると画面右側になにやらぶわぁーっと出てきますね。これの上半分がHTMLコードです。ここから特定のコードを探すのは骨が折れそうですが、逆にページの要素をクリックすることで該当するコードを探すことができます。デベロッパーツール画面上部の左側にカーソルのようなアイコンがあります。\n\n![一番左側です](image/dev_tool_bar.png){fig-align=\"center\" width=\"80%\"}\n\nこれをクリックしたうえでページ上の要素にカーソルを重ねてクリックすると、該当箇所のコードが表示されます。カーソルを「世界測地系平面直角座標系・Shapefile」という文字に重ねると先ほどのコードが表示されます。\n:::\n\nここでは`a`タグを探す→`href`を探し取得する、という手順を踏みます。\n\n``` r\nlinks <- html |> \n  html_elements(\"a\") |> \n  html_attr(\"href\")\n```\n\n`html_elements(\"a\")`で`a`タグを探し、`html_attr(\"href\")`で属性（attribute）を探しています。`links`には`a`タグの中の`href`に入っているリンクがずらーっと入っていることになります。\n\nここでは表示しませんが、`links`の中身を確認すると、想像以上にたくさんのリンクが入っていることがわかります。ここからさらにシェープファイルのダウンロードリンクを探さなければなりません。\n\n上の`a`タグの例を見てもらうと、`/gis/statmap-search/data?dlserveyId=S&code=3036&coordSys=2&format=shape&downloadType=5`というのがシェープファイルのダウンロードリンクであることがわかります。他のシェープファイルのリンクと見比べてもらうと、`code=3036`の部分だけがそれぞれ異なっており、他は同じです。すなわち、まとめてダウンロードしたければこの部分さえうまいことやれば可能になるということです。\n\nとりあえず、数多のリンクの中からシェープファイルのリンクだけ抽出しておきましょう。`links`の中のリンクを確認すると、`data?dlserveyId=S&`という部分がシェープファイルのダウンロードリンクにのみ含まれていることがわかる、これを含むリンクを抽出すればよいことになります。\n\n``` r\nshp_links <- links[grepl(\"data\\\\?dlserveyId=S&\", links)]\n```\n\n**ポイント：**\n\n-   `grepl()`で条件に合致するものを抽出\n\n    -   `grepl(x, y)`で、`y`の中で`x`を含むものに`TRUE`を返す\n\n    -   `links`の中で`data\\\\?dlserveyId=S&`を含むものに`TRUE`を返している\n\n    -   `?`の前に`\\\\`が入っているのは、正規表現の中で`?`は特別な役割を持っているので、その役割として認識されるのを防ぐため（エスケープしている）\n\n-   `links[ ]` で、`TRUE`を持つものを抽出している\n\n    -   すなわち`grepl()`で`TRUE`を返したもの（=シェープファイルのダウンロードリンクをもつもの）だけが残る\n\n短いコードでもややこしいですね。特に記号のところには気を付けていただければと思います。\n\n## リンクを整形する\n\nお気づきの方もいらっしゃると思いますが、実は先ほどのリンクは相対的なものです。`https://`から始まっていません。ベースとして`https://www.e-stat.go.jp`というURLがあり、そこに続く形で`/gis/...`が入ってきます。\n\n以下では取得したリンクにベースリンクをくっつけていきます。\n\n``` r\nbase_url <- \"https://www.e-stat.go.jp\"\nfull_urls <- paste0(base_url, shp_links)\n```\n\nこれでページ内の20個のリンクを抽出することができました。次にこれらのリンクを使ってダウンロードしていきます。\n\n## ファイルをダウンロード\n\nいよいよダウンロードをしていきます。\n\n全てのリンクに対しダウンロードするコードを適用します。`for`の出番です。\n\n``` r\nfor (i in seq_along(full_urls)) {\n  # リンクからメッシュコードを取得\n  code <- sub(\".*code=([0-9]+).*\", \"\\\\1\", shp_links[i])\n  \n  # ダウンロードするファイルのパスを指定する\n  # 例: shpfiles/shpfile_3036.zip\n  file_path <- file.path(save_dir, paste0(\"shpfile_\", code, \".zip\"))\n\n  # ファイルをダウンロード\n  download.file(full_urls[i], destfile = file_path, mode = \"wb\")\n  \n  # アクセス間隔を空ける\n  # サーバー負荷を考慮\n  Sys.sleep(2)\n}\n```\n\n**ポイント：**\n\n-   `seq_along(full_urls)`は`full_urls`の要素の数を取得している\n\n    -   今回はURLが20個と分かっているが、数が多くて数えにくいような場合にも有用\n\n-   `sub(\".*code=([0-9]+).*\", \"\\1\", shp_links[i])`でメッシュコードを取得\n\n    -   `sub(pattern, replacement, x)`で`x`の`pettern`を`replacement`に置換する\n\n    -   `.*code=([0-9]+).*`はざっくり言うと、前後が何であれ`code=(何らかの数字)`というものを探してきて、括弧内の数字を取得しているということ\n\n    -   `\\\\1`は今取得した数字を返すということ\n\n    -   `x`には`shp_links[i]`が該当するので、`i`番目のリンクで上で述べた置換をしているということ\n\n-   `file_path <- file.path(save_dir, paste0(\"shpfile_\", code, \".zip\"))`で保存する際のファイル名を作成\n\n    -   現在のワーキングディレクトリにある`data`内の`shpfiles`というフォルダの中に`shpfile_3036.zip`というようなZipファイルを作成する\n\n    -   ダウンロードはZipファイルで行われるので拡張子は`.zip`としておく\n\n```         \nmy_project/\n├── data/\n├── shpfiles/  ← ここにダウンロードする\n└── scripts/\n    ├── download_script.R\n    ├── analysis.R\n    └── ...\n```\n\n-   `download.file(full_urls[i], destfile = file_path, mode = \"wb\")`でダウンロード\n\n    -   `download.file(url, destfile, mode)`で`url`を`destfile`に`mode`で指定したモードでダウンロードする\n\n    -   詳細は省くが、Zipファイルに対しては`mode=\"wb`を指定する\n\n-   `Sys.sleep(2)`でサーバー負荷を軽減する\n\n    -   作業ごとに2秒のインターバルを設けるということ\n\nさすがに面倒すぎますね。最初は困ると思いますが、2回目以降大変便利に思えるはずです。\n\nひとまずこれでページ上のファイルをダウンロードすることができました！\n\n## 全ページまとめてダウンロード\n\nここまでは1ページ内のファイルをダウンロードする方法について順を追って見てきました。\n\nこのセクションではシェープファイルが1～9ページにまたがって並んでいることを踏まえ、さらに`for`ループを構築し、これまでの作業を9ページにわたって実行できるようにします。\n\n``` r\nfor (i in 1:9) {\n  url <- paste0(\"https://www.e-stat.go.jp/gis/statmap-search?page=\", i, \"&type=2&aggregateUnitForBoundary=S&coordsys=1&format=shape\")\n  \n  html <- read_html_live(url)\n  Sys.sleep(1)\n  \n  links <- html |> \n    html_elements(\"a\") |> \n    html_attr(\"href\")\n  \n  shp_links <- links[grepl(\"data\\\\?dlserveyId=S&\", links)]\n  \n  full_urls <- paste0(base_url, shp_links)\n  \n  for (j in seq_along(full_urls)) {\n    code <- sub(\".*code=([0-9]+).*\", \"\\\\1\", shp_links[j])\n    file_path <- file.path(save_dir, paste0(\"shpfile_\", code, \".zip\"))\n    \n    if (!file.exists(file_path)) {\n      tryCatch({\n        download.file(full_urls[j], destfile = file_path, mode = \"wb\")\n      }, error = function(e) {})\n      Sys.sleep(2)\n    }\n  }\n}\n```\n\n**ポイント：**\n\n1.  URLの`page=`の部分に1から9が入るように設定\n    -   URLを分割し、ページ数の部分に`i`で数字を入れています。\n2.  HTMLを読み込んだ後に`Sys.sleep(1)`で1秒待機\n    -   HTMLを読み込んですぐ次のコマンドに移ると、中身を最後まで読み込まないまま次を実行してしまうので、しっかり読み込めるようにするための設定です。\n3.  `for`ループ2段階目\n    -   大外の`for`で`i`を使っているので、今度は`j`にしています。\n    -   `if`でファイルがない場合に実行するようにしている。\n        -   何らかの理由で途中エラーが発生し、再度全体を実行しても、既にダウンロードできているファイルを重複してダウンロードせずに済みます。\n    -   `tryCatch`は、途中でエラーが起きたときでもスクリプト全体を止めずに柔軟に処理を続けるための関数で、エラーが起きても一旦スキップして最後まで実行します。\n\n見慣れない関数も登場しましたが、このコードを実行すれば9ページ分まとめてダウンロードすることが可能です。\n\n## コードまとめ\n\n最後に今回のコードをまとめます。\n\n``` r\nlibrary(rvest)\nlibrary(here)\n\nfor (i in 1:9) {\n  url <- paste0(\"https://www.e-stat.go.jp/gis/statmap-search?page=\", i, \"&type=2&aggregateUnitForBoundary=S&coordsys=1&format=shape\")\n  \n  html <- read_html_live(url)\n  Sys.sleep(1)\n  \n  links <- html |> \n    html_elements(\"a\") |> \n    html_attr(\"href\")\n  \n  shp_links <- links[grepl(\"data\\\\?dlserveyId=S&\", links)]\n  \n  full_urls <- paste0(base_url, shp_links)\n  \n  for (j in seq_along(full_urls)) {\n    code <- sub(\".*code=([0-9]+).*\", \"\\\\1\", shp_links[j])\n    file_path <- here(\"shpfiles\", paste0(\"shpfile_\", code, \".zip\"))\n    \n    if (!file.exists(file_path)) {\n      tryCatch({\n        download.file(full_urls[j], destfile = file_path, mode = \"wb\")\n      }, error = function(e) {})\n      Sys.sleep(2)\n    }\n  }\n}\n```\n\n## おわりに\n\n今回はRでe-Statのシェープファイルを取得してきました。個人的にもずっとやりたいことだったので、不完全とはいえ、念願かなった感じです。\n\n今後も調査して全ページを一つのループでダウンロードできるようなコードを書いていきたいと思います。\n\n## おまけ\n\nZipファイルでダウンロードすることになりますが、今回の流れでエクスプローラーから直接展開したりファイルを削除するのは面倒だと思います。\n\n解凍し、使用済みのZipファイルを削除するには以下を実行します。\n\n``` r\nzip_files <- list.files(save_dir, pattern = \"\\\\.zip$\", full.names = TRUE)\n\nfor (zip_path in zip_files) {\n  unzip(zip_path, exdir = save_dir)\n  file.remove(zip_path)\n}\n```\n\n`unzip()`でZipファイルを解凍して、`file.remove()`でZipファイルを削除します。\n\n## その他の実用例\n\n最近仕事の一環で時間がかかりそうな作業をスクレイピングでサクッと解決したので、地味な例ではありますがご参考までに紹介します。\n\n### シーン\n\n各省庁が出している白書のリストが載っている[ページ](https://www.e-gov.go.jp/about-government/white-papers.html)があるのですが、ここから白書名、省庁名、リンクをぱぱーっと取ってきたいという場面です。\n\n![こんな感じでずらーっと並んでいます](image/e-gov_list.png){fig-align=\"center\" width=\"60%\"}\n\n### 手順\n\n1.  `read_html()`でURLを読み込む（今回は`live`の方でなくてもできる例です）\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(tidyverse)\n\nurl <- \"https://www.e-gov.go.jp/about-government/white-papers.html\"\nhtml <- read_html(url)\n```\n:::\n\n\n2.  要素を確認する\n    -   `Ctrl` + `Shift` + `I`でデベロッパーツールを開き、白書名やリンクなどがどうなっているか確認します\n\n![水循環白書はこのようになっています](image/developer_tool_hakusho.png){#hakusho-html fig-align=\"center\"}\n\n3.  要素を取得する\n\n``` r\nitems <- html |> \n  html_element(\"main\") |> \n  html_element(\"ul\")\n\nhakusho <- items |> \n  html_elements(\"span\") |> \n  html_text()\n\nministry <- items |> \n  html_elements(\"p\") |> \n  html_text()\n\nlinks <- items |> \n  html_elements(\"a\") |> \n  html_attr(\"href\")\n```\n\n4.  データフレームにまとめる\n\n``` r\ndf <- tibble::tibble(\n  白書名 = hakusho, \n  省庁名 = ministry, \n  リンク = links\n)\n```\n\n### 詳細\n\nブラウザ上でHTMLコードを下の方まで見てみるとわかるのですが、白書の情報は`<main role=\"main\">`から`</main>`の間に含まれていることがわかります。さらに、[画像](#hakusho-html)をジーっと見てみると、欲しい要素は\n\n1.  `span`で囲まれている部分\n2.  `p`で囲まれている部分\n3.  `a`タグの中の`href`\n\nであることがわかります。試しにこれまで説明したコードを用いて取得してみると、\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhakusho <- html |> \n  html_elements(\"span\")\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n{xml_nodeset (61)}\n [1] <span class=\"egovui-title\">\\n        ポータル</span>\n [2] <span class=\"egovui-english-link\"><a href=\"/en/\" class=\"egovui-textlink- ...\n [3] <span class=\"egovui-label\">サイト内検索</span>\n [4] <span class=\"egovui-label\">行政機関横断検索</span>\n [5] <span class=\"egovui-search \">\\n          <input type=\"text\" name=\"q\" cla ...\n [6] <span>水循環白書</span>\n [7] <span>年次報告書</span>\n [8] <span>経済財政白書</span>\n [9] <span>原子力白書</span>\n[10] <span>防災白書</span>\n[11] <span>高齢社会白書</span>\n[12] <span>障害者白書</span>\n[13] <span>交通安全白書</span>\n[14] <span>男女共同参画白書</span>\n[15] <span>年次報告</span>\n[16] <span>警察白書</span>\n[17] <span>犯罪被害者白書</span>\n[18] <span>年次報告</span>\n[19] <span>金融庁の１年</span>\n[20] <span>消費者白書</span>\n...\n```\n\n\n:::\n:::\n\n\n欲しいのは「水循環白書」みたいな白書名だけですが、`<span>`の文字など余計な要素も取れてしまいました。中身のテキストだけ抜きたい場合は`html_text()`を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhakusho <- html |> \n  html_elements(\"span\") |> \n  html_text()\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"\\n        ポータル\"     \"English\"                \"サイト内検索\"          \n [4] \"行政機関横断検索\"       \"\\n          \\n        \" \"水循環白書\"            \n [7] \"年次報告書\"             \"経済財政白書\"           \"原子力白書\"            \n[10] \"防災白書\"              \n```\n\n\n:::\n:::\n\n\n表示しているのは一部ですが、それでも、そもそも余計なものが多いことがわかります。これは、欲しいのが`<main>`で囲まれている部分であるにもかかわらず、ページ全体から`span`を探して拾ってきているためです。\n\nさらに[画像](#hakusho-html)をよーく見ると、`main`の中でも`p`は「各行政機関が～」という文言も含んでしまっていることがわかります。`main`→`p`と指定すると、この文言も拾ってきてしまいます。そのため絞り込みとしては`main`、さらには`ul`にも絞った方が良いということが考えられます[^3]。すなわち`main`→`ul`→`p`という絞り方です。\n\n[^3]: 絞り込み方はこれ以外にもいろいろあると思います。\n\nまずは対象を`main`→`ul`に絞っておきます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitems <- html |> \n  html_element(\"main\") |> \n  html_element(\"ul\")\n```\n:::\n\n\n`html_elements()`もありますが、これは複数形なので要素が多くあり、全部取りたいような場合に使います。今回は`main`が1つでその中の`ul`も1つとわかっているので単数形です。\n\nこの上で`items`を用いて取得します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhakusho <- items |> \n  html_elements(\"span\") |> \n  html_text()\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"水循環白書\"       \"年次報告書\"       \"経済財政白書\"     \"原子力白書\"      \n [5] \"防災白書\"         \"高齢社会白書\"     \"障害者白書\"       \"交通安全白書\"    \n [9] \"男女共同参画白書\" \"年次報告\"        \n```\n\n\n:::\n:::\n\n\nこれも表示しているのは一部ですが、しっかりとれています。同様の手順で要素を確認しつつ取得を進めます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nministry <- items |> \n  html_elements(\"p\") |> \n  html_text()\n\nlinks <- items |> \n  html_elements(\"a\") |> \n  html_attr(\"href\")\n```\n:::\n\n\nこれで全53件分そろいました。最後にデータフレーム化して終了です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  白書名 = hakusho, \n  省庁名 = ministry, \n  リンク = links\n)\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_bl8iueap0kb63u6oio1r(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_bl8iueap0kb63u6oio1r\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_bl8iueap0kb63u6oio1r');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_bl8iueap0kb63u6oio1r(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_bl8iueap0kb63u6oio1r\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 6, j: 0 }, { i: 6, j: 1 }, { i: 6, j: 2 },  ], css_id: 'tinytable_css_2ax639h89vxdhzg52ii2',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_w2hgak4afsramqb9smvl',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_bl8iueap0kb63u6oio1r(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_2ax639h89vxdhzg52ii2, .table th.tinytable_css_2ax639h89vxdhzg52ii2 { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_w2hgak4afsramqb9smvl, .table th.tinytable_css_w2hgak4afsramqb9smvl { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_bl8iueap0kb63u6oio1r\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">白書名</th>\n                <th scope=\"col\">省庁名</th>\n                <th scope=\"col\">リンク</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>水循環白書</td>\n                  <td>内閣官房</td>\n                  <td>https://www.cas.go.jp/jp/seisaku/mizu_junkan/materials/materials/white_paper.html</td>\n                </tr>\n                <tr>\n                  <td>年次報告書</td>\n                  <td>人事院</td>\n                  <td>https://www.jinji.go.jp/hakusho/</td>\n                </tr>\n                <tr>\n                  <td>経済財政白書</td>\n                  <td>内閣府</td>\n                  <td>https://www5.cao.go.jp/keizai3/whitepaper.html#keizai</td>\n                </tr>\n                <tr>\n                  <td>原子力白書</td>\n                  <td>内閣府</td>\n                  <td>http://www.aec.go.jp/jicst/NC/about/hakusho/index.htm</td>\n                </tr>\n                <tr>\n                  <td>防災白書</td>\n                  <td>内閣府</td>\n                  <td>http://www.bousai.go.jp/kaigirep/hakusho/index.html</td>\n                </tr>\n                <tr>\n                  <td>高齢社会白書</td>\n                  <td>内閣府</td>\n                  <td>https://www8.cao.go.jp/kourei/whitepaper/index-w.html</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\nいい感じに整理できました。\n\nウェブサイトからたくさんの情報を繰り返し同じ動作で集めなければならないとき、役に立ちそうですね！\n\nおまけもおまけで、もはや本題には関係ありませんが、厳密に白書と明記されているもののみをとりたいならデータフレームにフィルタリングしてしまいましょう。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_hakusho <- df |> \n  filter(str_detect(hakusho, \"白書\"))\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_pmaki2o1kcmdwf0efzaw(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_pmaki2o1kcmdwf0efzaw\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_pmaki2o1kcmdwf0efzaw');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_pmaki2o1kcmdwf0efzaw(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_pmaki2o1kcmdwf0efzaw\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 6, j: 0 }, { i: 6, j: 1 }, { i: 6, j: 2 },  ], css_id: 'tinytable_css_6kvxtmizszkn553wmv0n',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_0wjk5lnf1lt0y47q8ums',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_pmaki2o1kcmdwf0efzaw(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_6kvxtmizszkn553wmv0n, .table th.tinytable_css_6kvxtmizszkn553wmv0n { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_0wjk5lnf1lt0y47q8ums, .table th.tinytable_css_0wjk5lnf1lt0y47q8ums { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_pmaki2o1kcmdwf0efzaw\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">白書名</th>\n                <th scope=\"col\">省庁名</th>\n                <th scope=\"col\">リンク</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>水循環白書</td>\n                  <td>内閣官房</td>\n                  <td>https://www.cas.go.jp/jp/seisaku/mizu_junkan/materials/materials/white_paper.html</td>\n                </tr>\n                <tr>\n                  <td>経済財政白書</td>\n                  <td>内閣府</td>\n                  <td>https://www5.cao.go.jp/keizai3/whitepaper.html#keizai</td>\n                </tr>\n                <tr>\n                  <td>原子力白書</td>\n                  <td>内閣府</td>\n                  <td>http://www.aec.go.jp/jicst/NC/about/hakusho/index.htm</td>\n                </tr>\n                <tr>\n                  <td>防災白書</td>\n                  <td>内閣府</td>\n                  <td>http://www.bousai.go.jp/kaigirep/hakusho/index.html</td>\n                </tr>\n                <tr>\n                  <td>高齢社会白書</td>\n                  <td>内閣府</td>\n                  <td>https://www8.cao.go.jp/kourei/whitepaper/index-w.html</td>\n                </tr>\n                <tr>\n                  <td>障害者白書</td>\n                  <td>内閣府</td>\n                  <td>https://www8.cao.go.jp/shougai/whitepaper/index-w.html</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n「年次報告書」などは抜くことができています。`str_detect(変数名, パターン)`で対応するものを抜き取ることができます。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}