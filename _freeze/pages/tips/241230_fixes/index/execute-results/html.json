{
  "hash": "d0c0cc5d11aab447df3c102276414a0f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"【パッケージ開発】[fixes]{.fira-code}でイベントスタディを効率化\"\ndescription: |\n  イベントスタディを簡単に実装するパッケージを作りました。\ndate: 2024-12-30\ndate-modified: last-modified\ncategories:\n  - R\neditor: visual\n---\n\n::: callout-note\n## 更新\n\n`fixes`バージョン0.2.1がCRANに公開されました！\n\n共変量の追加をサポート、柔軟性・堅牢性が向上しました。\n:::\n\n## はじめに\n\n突然ですが、最近Rパッケージを作成しました。その名も`fixes`です。\n\n初めて作ったので穴も多いと思うのですが、このパッケージではDIDにおける平行トレンドの確認をする方法であるイベントスタディをより簡易的に行う関数を提供しています。\n\nこの記事では宣伝も兼ねて、使い方を簡単にご紹介します。\n\n改善点やお気づきの点があれば、最下部のコメントか、[GitHub](https://github.com/yo5uke/fixes)のIssueに投げていただけると助かります。\n\n## 優位性\n\nイベントスタディのプロットをする方法として、`fixest`が提供する`i()`と`iplot()`を使うものがあります。\n\n個人的に`iplot()`では`ggplot2`を用いたプロットができない点があり、`i()`から結果をデータフレーム化するのも少々手間かなと思います。\n\nそこでダイレクトに結果のデータフレームが返ってくる、そしてベースのプロットが`ggplot2`であり、特にいじらなくてもそれなりのプロットが作成できる点が売りの`fixes`を作りました[^1]。\n\n[^1]: 一つ弁明したいのが、`fixest`が裏で動いていることもあり、`fixes`リスペクトでfix event studyから`fixes`と名付けたのですが、GitHubにアップしてからtを抜いただけであることに気づきました。もっと早く気づけという指摘はごもっともです。すみません。\n\nまた、リードとラグの範囲を個別で指定できる点や、ベースラインも自由に指定できる点など、僕の技術で及ぶ範囲は柔軟性を求めたつもりです。\n\n## 使い方\n\n### インストール\n\n~~2024年12月30日時点では、パッケージをCRANに公開していないので、`install.packages()`でインストールすることができません。~~冒頭にも書いた通りCRANに公開されましたので、`install.packages()`でもインストール可能です。\n\nGitHubより以下の方法でインストール可能です。\n\n``` r\n# install.packages(\"pak\")\npak::pak(\"fixes\")\n```\n\nもしくは、\n\n``` r\ninstall.packages(\"fixes\")\n```\n\nです。開発版に関しては以下の方法でGitHubよりインストールできます。\n\n``` r\npak::pak(\"yo5uke/fixes\")\n```\n\nです。\n\n### 使用するデータ\n\nDIDに用いるデータフレームをそのまま用いることができます。\n\n要件は、\n\n1.  個体を識別する変数（例えば`id`）\n2.  時間を識別する変数（例えば`year`）\n3.  処置個体を示すダミー変数\n    -   時間によらず、**処置される個体であれば常に1をとる**必要があります。\n4.  アウトカム変数\n\nを含んでいることです。\n\n### 関数（イベントスタディの実行）\n\nメインの関数は、`run_es()`関数です。ここにデータフレームを渡すことで、自動的にリード変数とラグ変数を作成し、回帰分析を実行、結果のデータフレームを返します。\n\n引数は次の通りです。\n\n| 引数 | 説明 |\n|-----------------|------------------------------------------------------|\n| `data` | 使用するデータフレーム |\n| `outcome` | アウトカム変数（例：`y`や`log(y)`） |\n| `treatment` | 処置個体を示すダミー変数（`0/1`または`TRUE/FALSE`のいずれでも可） |\n| `time` | 時間を表す変数 |\n| `timing` | 処置タイミングを表す数値（例：`2005`） |\n| `lead_range` | 処置**前**の期間の長さ（例：3 → `lead3`, `lead2`, `lead1`が生成される） |\n| `lag_range` | 処置**後**の期間の長さ（例：2 → `lag0`, `lag1`, `lag2`が生成される） |\n| `covariates` | 回帰に含める共変量（**片側formula形式**で指定。例：`~ x1 + x2`） |\n| `fe` | 固定効果（**片側formula形式**で指定。例：`~ id + year`） |\n| `cluster` | クラスタリングの単位（**文字ベクトル**または**片側formula形式**で指定） |\n| `baseline` | ベースラインとする相対時点（例：`-1`。このダミーは推定から除外され、推定結果に0として追加される） |\n| `interval` | 時間変数の間隔（例：毎年のデータなら`1`、5年ごとの調査なら`5`。デフォルトは`1`） |\n\n`cluster`以下は任意です。\n\nこの関数はデフォルトで`interval = 1`を前提としていますが、任意の時間スケールに対応しています。月次データなどを扱う場合は、時系列順に通し番号を振った変数を`time`として使用することを推奨します。\n\n例えば、5つの個体に24カ月分の観測がある場合、\n\n``` r\ndf <- df |> \n  mutate(time_var = rep(1:24, 5))\n```\n\nとしておくことで通し番号を追加できます。\n\n肝心の関数の使い方は以下の通りです。\n\n``` r\nevent_study <- run_es(\n  data       = df, \n  outcome    = y, \n  treatment  = is_treated, \n  time       = year, \n  timing     = 1998, \n  lead_range = 5, \n  lag_range  = 5, \n  fe         = ~ firm_id + year, \n  cluster    = ~ state_id, \n  baseline   = -1, \n  interval   = 1\n)\n```\n\n固定効果は`~ id + year`のような **片側のformula形式** で指定します。これは`fixest::feols()`と同様に、複数の固定効果を和の形で記述できます（例：`~ firm_id + year`）[^2]。クラスタリングは、文字ベクトル（例：`c(\"id\", \"year\")`）としても、formula形式（例：`~ id + year`, `~ id^year`）としても指定できます。また、リードとラグに処置年は含まれません。それぞれ5であれば、前5年＋処置年＋後5年で11年分の結果になります。\n\n[^2]: 以前のバージョンでは`c(\"firm_id\", \"year\")`のような形で書く必要がありましたが、変更しました。\n\nこれを実行することにより、結果のデータフレームが返ってきます。\n\nこの結果を使えば、`ggplot2`を用いて好きにプロットしていただけるのですが、`fixes`パッケージでは、1からコードを書かずとも`ggplot2`を用いたプロットのベースを作る関数を提供しています。\n\n### 関数（結果をプロット）\n\n`plot_es()`関数を用いて、プロットのベースを簡単に作成できます。\n\n\n::: {.cell}\n\n:::\n\n\nまず、引数は次の通りです。\n\n| 引数 | 説明 |\n|---------------|--------------------------------------------------|\n| `data` | `run_es()`で作成したデータ |\n| `type` | プロットのタイプ（`ribbon`（既定）か`errorbar`を選択） |\n| `vline_val` | 処置を表す垂直線位を引く置（相対時間で指定、デフォルトでは0） |\n| `vline_color` | 垂直線の色（デフォルトでは黒） |\n| `hline_val` | 水平線を引く値（デフォルトでは0） |\n| `hline_color` | 水平線の色（デフォルトでは黒） |\n| `linewidth` | 折れ線の太さ（デフォルトでは1） |\n| `pointsize` | 点のサイズ（デフォルトでは2） |\n| `alpha` | リボンの透明度（デフォルトでは0.2） |\n| `barwidth` | エラーバーの幅（デフォルトでは0.2） |\n| `color` | 折れ線と点の色（デフォルトでは#B25D91FF） |\n| `fill` | リボンの色（デフォルトでは#B25D91FF） |\n\nプロットすると以下のように出力されます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_es(event_study)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nエラーバーを用いれば、\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_es(event_study, type = \"errorbar\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n引数を指定すると、\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_es(\n  event_study, \n  type = \"errorbar\", \n  vline_val = -1, \n  vline_color = \"darkred\", \n  color = \"navy\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n`ggplot2`ベースで作られていますので、`+`で繋いで自在に編集できます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_es(\n  event_study, \n  type = \"errorbar\", \n  vline_val = -1, \n  vline_color = \"darkred\", \n  color = \"navy\"\n) + \n  ggplot2::scale_x_continuous(breaks = seq(-5, 5, by = 1)) + \n  ggplot2::theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nベースを作る手間が省けるのが売りです。\n\n## おわりに\n\n簡単ではありましたが、以上`fixes`の紹介と解説でした。\n\nはじめの方に書いた通り、利便性と柔軟性を求め、プロットも好みを反映できる点がこのパッケージの売りになっています。\n\n使ってみていただけると大変うれしいです。\n\nフィードバックもお待ちしています。\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}