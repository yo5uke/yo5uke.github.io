{
  "hash": "1e671033a15a4d112832c90d37adec9d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"XMLファイルから情報を抽出する\"\ndescription: |\n  [xml2]{.fira-code}パッケージを使います。\ndate: 2025-08-26\ncategories:\n  - R\n  - データ処理\nimage: image/thumbnail.png\neditor: visual\n---\n\n## はじめに\n\n今度は仕事でXMLファイルを扱う機会がやってきました。\n\nXMLファイルは、データを「タグ」で階層的に記述するテキスト形式のファイルで、構造化された情報を表現・交換するための標準仕様であり、システム間でデータ連携や保存に広く利用されています。\n\n見たことがない方にはとんとイメージがわかないと思うのですが、XMLは以下のような構造をしています。\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Library>\n  <Book id=\"B001\">\n    <Title>データ分析入門</Title>\n    <Author>山田太郎</Author>\n    <Year>2021</Year>\n  </Book>\n  <Book id=\"B002\">\n    <Title>XML活用ガイド</Title>\n    <Author>佐藤花子</Author>\n    <Year>2023</Year>\n  </Book>\n  <Magazine id=\"M001\" category=\"Technology\">\n    <Title>Tech Monthly</Title>\n    <Issue>2024-08</Issue>\n  </Magazine>\n</Library>\n```\n\n`Library`の中に`Book`や`Magazine`が入っていることがわかります。インデントされているので少しはわかりやすいのではないでしょうか。\n\nさらにその中にはタイトルや著者等の情報が含まれています。\n\nこれが簡単なXMLの例です。\n\nこれがもっと長くずらーっと書かれているものの中から情報を取ってくる作業が仕事で必要になったので、その方法についてまとめたいと思います。\n\n## 準備\n\n必要なパッケージは`xml2`です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n```\n:::\n\n\nまた、解析に使用するXMLは以下です。著作権の問題で、データはいかにもそれっぽいですが、中身は架空のものに置き換えています。\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Mdevices xmlns=\"http://info.pmda.go.jp/namespace/medical_devices/package_insert\" version=\"1.0\">\n  <PackageInsertNo>99Z9Z99999999999_1_00_01</PackageInsertNo>\n  <CompanyIdentifier>999999</CompanyIdentifier>\n  <DateOfPreparationOrRevisionArray>\n    <DateOfPreparationOrRevisionDetail id=\"初版\">\n      <YearMonth>2025-08</YearMonth>\n      <Version>1.0</Version>\n      <ReasonForRevision>新規作成</ReasonForRevision>\n    </DateOfPreparationOrRevisionDetail>\n  </DateOfPreparationOrRevisionArray>\n  <ApprovalEtcArray>\n    <ApprovalEtcDetail>\n      <ApprovalAndLicenseNo approvalType=\"1\">99Z9Z99999999999</ApprovalAndLicenseNo>\n      <ApprovalBrandNameDetail>\n        <ApprovalBrandName id=\"BRD_ApprovalBrandName_01\">サンプルデバイスα</ApprovalBrandName>\n        <AccessoriesOrCompositionArticle>架空データ</AccessoriesOrCompositionArticle>\n        <ApprovalBrandNameReading>さんぷるでばいすあるふぁ</ApprovalBrandNameReading>\n      </ApprovalBrandNameDetail>\n      <DoNotReuse>No</DoNotReuse>\n    </ApprovalEtcDetail>\n  </ApprovalEtcArray>\n  <CategoryAndGeneralName>\n    <Category>A9999</Category>\n    <GeneralName>\n      <PrimaryGeneralNameDetail>\n        <PrimaryGeneralName id=\"GNN_Main_PrimaryGeneralName\">架空一般医療機器</PrimaryGeneralName>\n        <JMDNCode>99999999</JMDNCode>\n        <Classification>2</Classification>\n      </PrimaryGeneralNameDetail>\n    </GeneralName>\n    <DiscernmentOfMaintenanceInstallation>None</DiscernmentOfMaintenanceInstallation>\n    <DiscernmentOfTheLivingThingOriginEtc>None</DiscernmentOfTheLivingThingOriginEtc>\n    <TransgenicsMaterial>None</TransgenicsMaterial>\n  </CategoryAndGeneralName>\n  <FormAndStructureDetail id=\"HDR_FormAndStructure\"/>\n  <InfoIndicationsOrEfficacy id=\"HDR_InfoIndicationsOrEfficacy\" wordingPatternOfInfoIndicationsOrEfficacy=\"1\"/>\n  <PrecautionsForUseDetail id=\"HDR_PrecautionsForUse\"/>\n  <AManufacturingAndSellingContractorsNameOrANameEtc id=\"HDR_AManufacturingAndSellingContractorsNameOrANameEtc\">\n    <AManufacturingAndSellingContractorsNameOrANameDetail id=\"HDR_AManufacturingAndSellingContractorsNameOrAName\">\n      <ANameOfManufacturerEtc>株式会社サンプル医療</ANameOfManufacturerEtc>\n      <Phonenumber>000-0000-0000</Phonenumber>\n    </AManufacturingAndSellingContractorsNameOrANameDetail>\n    <ANameOrAnOverseasNameEtcOfAFactoryArray id=\"HDR_ANameOrAnOverseasNameEtcOfAFactory\">\n      <ANameOrAnOverseasNameEtcOfAFactoryDetail>\n        <ANameOfManufacturerEtc>サンプル工場</ANameOfManufacturerEtc>\n        <Phonenumber>000-1111-2222</Phonenumber>\n        <TheCompanyNameOfSpecificationIntoEnglish>Sample Factory Inc.</TheCompanyNameOfSpecificationIntoEnglish>\n        <TheCountryCode>888</TheCountryCode>\n        <NameOfACountry>架空国</NameOfACountry>\n      </ANameOrAnOverseasNameEtcOfAFactoryDetail>\n    </ANameOrAnOverseasNameEtcOfAFactoryArray>\n  </AManufacturingAndSellingContractorsNameOrANameEtc>\n  <PleaseSeeTechnicalManual>False</PleaseSeeTechnicalManual>\n</Mdevices>\n```\n\nこれを`sample.xml`とします。人によってファイルへのパスは異なるかと思いますが、今回は`here::here(\"data/xml_sample/sample.xml`に格納されているとして進めます。\n\n一応サンプルファイルを以下からダウンロードできるようにしておきました。\n\n[XMLファイル](/data/xml_sample/sample.zip){download=\"sample.zip\"}\n\n## データの取得\n\nそれでは早速XMLファイルを読み込んで、必要な情報を抽出したいと思います。\n\n抽出したい情報は、\n\n-   承認番号（`<ApprovalAndLicenseNo>`）\n\n-   一般名称（`<PrimaryGeneralName>`）\n\n-   日本医療機器名コード（`<JMDNCode>`）\n\nとします。他のタグについても同様の方法で取得できるので、一旦この3つに絞ります。\n\nまずはファイルを読み込みましょう。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ファイルのパスは適宜変更\nxml_sample <- read_xml(here::here(\"data/xml_sample/sample.xml\"))\n```\n:::\n\n\n次に、タグを検索し、該当するものを引っ張ってきます。タグは上の括弧内で記したとおりです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxml_sample |> \n  xml_find_all(\"//*[local-name()='ApprovalAndLicenseNo']\") |> \n  xml_text()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"99Z9Z99999999999\"\n```\n\n\n:::\n:::\n\n\n`xml_find_all()`はXML内の要素を探してくるための関数です。複数ヒットすればすべて返してきますが、`xml_find_first()`であれば最初の一つを返します。今回はタグは重複がないのでどちらでも同じ結果が返ってきます。\n\nところで見慣れない書き方が出てきています。`//`も`local-name`などです。これらについて1つずつまとめます。\n\n1.  `//`\n    -   これはXMLのタグがどの階層にあっても探す、ということです。\n    -   特定の階層のみを探すこともできるのですが、今回は全体から探してきたいのでこれを使います。\n2.  `*`\n    -   これはワイルドカードと呼ばれ、どんな要素でも問わない、ということを示します。\n    -   この後に条件を指定しているのですが、その条件を満たすあらゆる要素、ということを示すイメージです。\n3.  `[local-name()=]`\n    -   ここがややこしいのですが、XMLの冒頭2行目に`xmlns=\"http://info.pmda.go.jp/namespace/medical_devices/package_insert\"`という表記があります。\n    -   これがあるとこの後に出てくるタグはこれの後に続くことになる、ということを意味します。\n    -   例：`http://info.pmda.go.jp/namespace/medical_devices/package_insert/ApprovalAndLicenseNo`\n    -   すなわち、一見`ApprovalAndLicenseNo`でヒットしそうですが、実際はこの例のように長い表記が正しいので、`ApprovalAndLicenseNo`単体だとヒットしません。\n    -   `xmlns`の部分を「名前空間」というのですが、名前空間がない場合でもこの書き方でヒットしますので、これを書いておけば間違いないといった感じです[^1]。\n\n[^1]: 名前空間がない場合は`//ApprovalAndLicenseNo`でもヒットします。\n\nややこしい書き方でしたが、これで注目しているタグを引っ張ってこれます。\n\n最後に`xml_text()`で、タグの中身のテキストを取得でき、今回であれば`99Z9Z99999999999`が表示できています。\n\nXMLファイルから情報を取得する方法については以上です。\n\n## ファイルを巡回してデータフレームを作る\n\n複数のXMLファイルを巡回して、同じ要素を引っ張ってきたいことがありますよね。\n\nその方法についてもまとめます。今回はXMLファイルが2つ、`here::here(\"data/xml_sample\")`内にあると仮定します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# `tibble()`や`map_dfr()`のため\nlibrary(tidyverse)\n\nxml_files <- list.files(here::here(\"data/xml_sample\"), pattern = \"*.xml$\", \n                        full.names = TRUE)\n\nextract_info <- function(fp) {\n  doc <- read_xml(fp)\n  \n  tibble(\n    承認番号 = xml_text(xml_find_all(doc, \"//*[local-name()='ApprovalAndLicenseNo']\")), \n    一般名称 = xml_text(xml_find_all(doc, \"//*[local-name()='PrimaryGeneralName']\")), \n    日本医療機器名コード = xml_text(xml_find_all(doc, \"//*[local-name()='JMDNCode']\"))\n  )\n}\n\ndf <- map_dfr(xml_files, extract_info)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  承認番号         一般名称          日本医療機器名コード\n  <chr>            <chr>             <chr>               \n1 99Z9Z99999999999 架空一般医療機器  99999999            \n2 88Y8Y88888888888 架空一般医療機器B 88888888            \n```\n\n\n:::\n:::\n\n\nポイントをまとめます。\n\n1.  `list.files()`でディレクトリ内のXMLファイルのファイル名（パス込み）を取得します。\n    -   ワイルドカード`*`が使われています。前が何であれ、`.xml`という条件にマッチする要素を取得するということです。\n    -   また、`$`はそれで終わるということを指します。`.xml.csv`みたいに、`.xml`の後に別の要素が続くものは取得しないということです。\n2.  `function`で要素をデータフレームに入れる関数を作ります。\n    -   `doc`に読み込んだXMLを格納し、そこからこれまでに見てきた方法で要素を抽出し、`tibble`（要はデータフレーム）の各列に格納します。\n    -   パイプを使っていないので関数の出てくる順が先ほどと逆ですが、`doc |> xml_find_all() |> xml_text()`の流れと同じです。\n3.  `map_dfr()`で順番に処理しデータフレームを作成\n    -   そもそも`map()`関数はリストやベクトルに対して関数を適用するものです。\n    -   `map_dfr()`の`dfr`はdata frame row-bindの略で、`map()`の結果を行方向に結合することを指します。\n    -   すなわち、各ファイルを読み込んで要素を抽出、1行3列（今回の場合）のデータフレームを作成し、それをどんどん下に結合していくというイメージです。\n\nちなみに`for`ループでもできますが、そちらは今回は省略します。\n\n## おわりに\n\n今回はXMLファイルの扱い方について取り上げました。\n\n私は繰り返し処理までこれからやることになりそうなので、出番が増えそうです。\n\nご参考になれば幸いです。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}